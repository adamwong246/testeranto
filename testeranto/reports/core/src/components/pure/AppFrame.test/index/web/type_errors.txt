/Users/adam/Code/testeranto-react/src/react-dom/component/dynamic.ts (33,14): Type '(testInput: typeof Component) => { beforeAll: (subject: typeof Component, artificer: ITTestResourceConfiguration) => Promise<{ htmlElement: HTMLElement; }>; ... 5 more ...; assertThis: (x: (s: ISelection) => ISelection) => (s: ISelection) => ISelection; }' is not assignable to type '(testInput: typeof Component) => ITestAdapter<I>'.
  Call signature return types '{ beforeAll: (subject: typeof Component, artificer: ITTestResourceConfiguration) => Promise<{ htmlElement: HTMLElement; }>; ... 5 more ...; assertThis: (x: (s: ISelection) => ISelection) => (s: ISelection) => ISelection; }' and 'ITestAdapter<I>' are incompatible.
    The types returned by 'beforeAll(...)' are incompatible between these types.
      Type 'Promise<{ htmlElement: HTMLElement; }>' is not assignable to type 'Promise<ISubject>'.
        Property 'domRoot' is missing in type '{ htmlElement: HTMLElement; }' but required in type 'ISubject'.
/Users/adam/Code/testeranto-react/src/react-dom/component/dynamic.ts (47,45): Property 'subject' does not exist on type 'Readonly<{}>'.
/Users/adam/Code/testeranto-react/src/react-dom/component/dynamic.ts (114,9): Expected 1 arguments, but got 3.
/Users/adam/Code/testeranto-react/src/react/component/index.ts (3,44): Cannot find module '../../../Types' or its corresponding type declarations.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (15,20): Type '{ children: JSX.Element; }' is not assignable to type '(s: ISelection) => ISelection'.
  Type '{ children: Element; }' provides no match for the signature '(s: ISelection): ISelection'.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (18,5): Type '(children: React.ReactNode) => () => { children: React.ReactNode; }' is not assignable to type '(Ig_0: ReactNode) => (s: ISelection) => ISelection'.
  Call signature return types '() => { children: ReactNode; }' and '(s: ISelection) => ISelection' are incompatible.
    Type '{ children: ReactNode; }' is missing the following properties from type 'ISelection': htmlElement, reactElement, domRoot
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (26,5): Type '(name: string) => ({ htmlElement }: ISelection, pm: PM) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(It_0: string) => (ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Call signature return types '({ htmlElement }: ISelection, pm: PM) => Promise<{ htmlElement: HTMLElement; }>' and '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }' are incompatible.
    Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (33,29): Type '({ htmlElement }: ISelection) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (38,27): Type '({ htmlElement }: ISelection) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (43,22): Type '({ htmlElement }: ISelection) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (48,30): Type '({ htmlElement }: ISelection) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/implementation.tsx (53,30): Type '({ htmlElement }: ISelection) => Promise<{ htmlElement: HTMLElement; }>' is not assignable to type '(ssel: ISelection, utils: PM) => { hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; ... 5 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }'.
  Type 'Promise<{ htmlElement: HTMLElement; }>' is missing the following properties from type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }': hasContainerFluid, hasNavBar, hasNavBarTitle, hasTestTable, and 4 more.
/Users/adam/Code/testeranto/src/components/pure/AppFrame.test/index.tsx (16,3): Argument of type 'ITestImplementation<I, O>' is not assignable to parameter of type 'ITestImplementation<I, O, { whens: TestWhenImplementation<I, O>; }>'.
  Type 'ITestImplementation<I, O>' is not assignable to type 'Omit<{ suites: TestSuiteImplementation<O>; givens: TestGivenImplementation<I, O>; whens: TestWhenImplementation<I, O>; thens: TestThenImplementation<...>; }, "whens">'.
    The types returned by 'thens.RendersContainer(...)(...)' are incompatible between these types.
      Type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }' is not assignable to type '(s: ISelection) => ISelection'.
        Type '{ hasContainerFluid: () => (s: ISelection) => ISelection; hasNavBar: () => (s: ISelection) => ISelection; hasNavBarTitle: () => (s: ISelection) => ISelection; ... 4 more ...; takeScreenshot: (name: string) => (s: ISelection, pm: IPM) => Promise<...>; }' provides no match for the signature '(s: ISelection): ISelection'.
/Users/adam/Code/testeranto/src/lib/basebuilder.ts (74,49): Function lacks ending return statement and return type does not include 'undefined'.
/Users/adam/Code/testeranto/src/lib/basebuilder.ts (80,17): This expression is not callable.
  Not all constituents of type 'void | ((fPath: string, value: string | Buffer<ArrayBufferLike> | PassThrough) => void)' are callable.
    Type 'void' has no call signatures.
/Users/adam/Code/testeranto/src/lib/classBuilder.ts (86,18): A spread argument must either have a tuple type or be passed to a rest parameter.
/Users/adam/Code/testeranto/src/lib/classBuilder.ts (101,28): A spread argument must either have a tuple type or be passed to a rest parameter.
/Users/adam/Code/testeranto/src/lib/core.ts (46,7): Argument of type 'Omit<{ suites: import("/Users/adam/Code/testeranto/src/Types").TestSuiteImplementation<O>; givens: import("/Users/adam/Code/testeranto/src/Types").TestGivenImplementation<I, O>; whens: import("/Users/adam/Code/testeranto/src/Types").TestWhenImplementation<...>; thens: import("/Users/adam/Code/testeranto/src/Types")....' is not assignable to parameter of type 'Omit<{ suites: import("/Users/adam/Code/testeranto/src/Types").TestSuiteImplementation<O>; givens: import("/Users/adam/Code/testeranto/src/Types").TestGivenImplementation<I, O>; whens: import("/Users/adam/Code/testeranto/src/Types").TestWhenImplementation<...>; thens: import("/Users/adam/Code/testeranto/src/Types")....'.
  Type 'Omit<{ suites: TestSuiteImplementation<O>; givens: TestGivenImplementation<I, O>; whens: TestWhenImplementation<I, O>; thens: TestThenImplementation<...>; }, keyof M> & M & { ...; }' is not assignable to type '{ suites: Record<string, never>; givens: Record<string, any>; whens: Record<string, any>; thens: Record<string, any>; }'.
    Types of property 'suites' are incompatible.
      Type 'Record<string, any>' is not assignable to type 'Record<string, never>'.
        'string' index signatures are incompatible.
          Type 'any' is not assignable to type 'never'.
/Users/adam/Code/testeranto/src/lib/index.ts (15,3): Type '(subject: T["isubject"], initialValues: T["iinitialValues"], x: unknown, testResource: ITTestResourceConfiguration, pm: IPM) => Promise<T["isubject"]>' is not assignable to type '(subject: T["isubject"], initializer: (c?: any) => T["given"], testResource: ITTestResourceConfiguration, initialValues: any, pm: IPM) => Promise<...>'.
  Types of parameters 'initialValues' and 'initializer' are incompatible.
    Type '(c?: any) => T["given"]' is not assignable to type 'T["iinitialValues"]'.
      'T["iinitialValues"]' could be instantiated with an arbitrary type which could be unrelated to '(c?: any) => T["given"]'.
/Users/adam/Code/testeranto/src/lib/index.ts (17,20): Type '"iinitialValues"' cannot be used to index type 'T'.
/Users/adam/Code/testeranto/src/lib/index.ts (39,13): This expression is not callable.
  Type 'unknown' has no call signatures.
/Users/adam/Code/testeranto/src/lib/index.ts (51,3): Type '{ assertThis?: ((x: T["then"]) => any) | undefined; andWhen?: ((store: T["istore"], whenCB: T["when"], testResource: ITTestResourceConfiguration, pm: IPM) => Promise<T["istore"]>) | undefined; ... 4 more ...; beforeEach?: ((subject: T["isubject"], initializer: (c?: any) => T["given"], testResource: ITTestResourceCon...' is not assignable to type 'ITestAdapter<T>'.
  Types of property 'assertThis' are incompatible.
    Type '((x: T["then"]) => any) | undefined' is not assignable to type '(x: T["then"]) => any'.
      Type 'undefined' is not assignable to type '(x: T["then"]) => any'.
/Users/adam/Code/testeranto/src/PM/pure.ts (114,3): Property 'customScreenShot' in type 'PM_Pure' is not assignable to the same property in base type 'PM'.
  Type '(opts: ScreencastOptions, page: string) => any' is not assignable to type '(opts: { path: string; }, page?: string | undefined) => any'.
    Types of parameters 'opts' and 'opts' are incompatible.
      Type '{ path: string; }' is not assignable to type 'ScreencastOptions'.
        Types of property 'path' are incompatible.
          Type 'string' is not assignable to type '`${string}.webm`'.
/Users/adam/Code/testeranto/src/PM/web.ts (59,12): Property 'mainFrame' does not exist on type 'string | Page'.
  Property 'mainFrame' does not exist on type 'string'.
/Users/adam/Code/testeranto/src/Web.ts (43,7): Argument of type 'ITestImplementation<I, O, M>' is not assignable to parameter of type 'Omit<{ suites: TestSuiteImplementation<O>; givens: TestGivenImplementation<I, O>; whens: TestWhenImplementation<I, O>; thens: TestThenImplementation<...>; }, keyof M> & M & { ...; }'.
  Type 'Omit<{ suites: TestSuiteImplementation<O>; givens: TestGivenImplementation<I, O>; whens: TestWhenImplementation<I, O>; thens: TestThenImplementation<...>; }, keyof M>' is missing the following properties from type '{ suites: Record<string, any>; givens: Record<string, any>; whens: Record<string, any>; thens: Record<string, any>; }': suites, givens, whens, thens