src/lib/baseBuilder.test/TestBaseBuilder.ts
18:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
19:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
20:20 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
21:20 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
22:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
32:34 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
39:15 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
40:77 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
41:74 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
42:74 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
43:77 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
64:32 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
64:46 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.implementation.ts
11:36 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:41 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:46 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:51 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:56 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:61 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
13:56 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
31:30 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
58:37 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.interface.ts
17:16 'x' is defined but never used. (@typescript-eslint/no-unused-vars)
17:19 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.pure.ts
9:33 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.specification.ts
10:3 'Check' is defined but never used. (@typescript-eslint/no-unused-vars)