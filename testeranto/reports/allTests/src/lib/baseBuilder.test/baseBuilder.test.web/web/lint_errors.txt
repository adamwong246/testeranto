src/lib/abstractBase.ts
168:9 Unsafe usage of ThrowStatement. (no-unsafe-finally)

src/lib/baseBuilder.test/baseBuilder.test.adapter.ts
17:16 'x' is defined but never used. (@typescript-eslint/no-unused-vars)
17:19 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.implementation.ts
9:36 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
9:41 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
9:46 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
9:51 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
9:56 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
9:61 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
11:56 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
35:30 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
62:37 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.mock.ts
19:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
20:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
21:20 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
22:20 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
23:3 'CheckExtensions' is defined but never used. (@typescript-eslint/no-unused-vars)
23:21 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)
32:34 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
39:15 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
40:77 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
41:74 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
42:74 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
65:32 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)
65:46 Unexpected any. Specify a different type. (@typescript-eslint/no-explicit-any)
- undefined (fix)
- undefined (fix)

src/lib/baseBuilder.test/baseBuilder.test.web.ts
10:33 The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want `object` instead.
- If you want a type meaning "any value", you probably want `unknown` instead. (@typescript-eslint/no-empty-object-type)
- undefined (fix)
- undefined (fix)