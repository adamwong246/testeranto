# Testeranto Testing Patterns

## Key Learnings From Self-Testing

1. Test Organization Insights:
- Mock implementations proved essential for testing abstract base classes
- Type parameters (I/O/M) need careful documentation for test writers
- Integration tests revealed subtle proxy chain issues

2. Effective Patterns:
- Builder tests validate both construction and runtime behavior  
- Proxy tests verify path rewriting and content preservation
- Error tests check both expected and unexpected cases
- Lifecycle tests cover full BDD sequence

3. Improvement Opportunities:
- Need more test utilities for common scenarios
- Could add test generation from type definitions
- Should document common test pitfalls
- Would benefit from more example test suites

## Core Testing Principles

1. Tests follow BDD structure with Given/When/Then
2. All tests are strongly typed using I/O/M types
3. Test files are organized in a consistent structure:
   /src
     TEST_SUBJECT.ts
     TEST_SUBJECT.test/
       implementation.ts - Concrete test operations
       specification.ts - Test scenarios and assertions  
       interface.ts - Test lifecycle hooks
       types.ts - Type definitions
       index.ts - Main test export

## Key Testing Patterns Observed

1. Builder Testing:
- TestBaseBuilder provides core test infrastructure
- TestClassBuilder extends it for class-based testing
- Both use similar test patterns:
  * Initialization validation
  * Spec generation checks
  * Job creation verification
  * Artifact tracking
  * Resource requirement validation

2. Comprehensive Test Cases:
- Basic functionality tests
- Custom input scenarios  
- Resource configuration
- Dynamic modification
- Error handling
- Full test run verification

3. Type Safety:
- Ibdd_in defines internal test flow
- Ibdd_out defines external interface
- M type for specification modifications

## Implementation Notes

1. Test builders follow this pattern:
- Create concrete test implementation
- Define test specification with scenarios
- Implement test interface hooks
- Export via Testeranto runner

2. Key test assertions:
- Verify proper initialization
- Check spec generation
- Validate job creation
- Track artifacts
- Confirm resource setup

3. Error handling:
- Explicit error type checks
- Expected error messages
- Async error propagation

## Best Practices

1. For each test:
- Document test purpose in specification
- Keep implementations focused
- Use descriptive type names
- Include positive and negative cases

2. Test organization:
- Group related tests in suites  
- Separate concerns in different files
- Reuse common test patterns
- Keep test files small and focused

3. Maintenance:
- Update docs when patterns change
- Review test types when interfaces change
- Verify all test cases after refactors
