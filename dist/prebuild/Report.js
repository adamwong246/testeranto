"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context3, updater) {
            this.props = props;
            this.context = context3;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context3, updater) {
            this.props = props;
            this.context = context3;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement3(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context3) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context3, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext7(defaultValue) {
            var context3 = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context3.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context3
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer2 = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context3
              };
              Object.defineProperties(Consumer2, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context3.Provider;
                  },
                  set: function(_Provider) {
                    context3.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context3._currentValue;
                  },
                  set: function(_currentValue) {
                    context3._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context3._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context3._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context3._threadCount;
                  },
                  set: function(_threadCount) {
                    context3._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context3.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context3.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context3.Consumer = Consumer2;
            }
            {
              context3._currentRenderer = null;
              context3._currentRenderer2 = null;
            }
            return context3;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes2;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes2;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes2 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef15(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext6(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState8(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef9(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect12(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback8(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo5(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement3.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options2) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports2.Children = Children2;
          exports2.Component = Component;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext7;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef15;
          exports2.isValidElement = isValidElement2;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback8;
          exports2.useContext = useContext6;
          exports2.useDebugValue = useDebugValue;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect12;
          exports2.useId = useId;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useInsertionEffect = useInsertionEffect;
          exports2.useLayoutEffect = useLayoutEffect2;
          exports2.useMemo = useMemo5;
          exports2.useReducer = useReducer2;
          exports2.useRef = useRef9;
          exports2.useState = useState8;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options2) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options2 === "object" && options2 !== null) {
              var delay = options2.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React44 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React44.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context3 = type;
                return getContextName$1(context3) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React44.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options3 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options3.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options3[_i].value);
                if (options3[_i].selected !== selected) {
                  options3[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options3[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options3.length; _i2++) {
                if (options3[_i2].value === _selectedValue) {
                  options3[_i2].selected = true;
                  if (setDefaultSelected) {
                    options3[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options3[_i2].disabled) {
                  defaultSelected = options3[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style3 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options2 = {};
              Object.defineProperty(options2, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options2, options2);
              window.removeEventListener("test", options2, options2);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context3, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context3, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context3, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context3, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context3, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context3, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context3 = {};
              for (var key in contextTypes) {
                context3[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context3, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context3);
              }
              return context3;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context3, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context3, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context3, nextValue) {
            {
              push(valueCursor, context3._currentValue, providerFiber);
              context3._currentValue = nextValue;
              {
                if (context3._currentRenderer !== void 0 && context3._currentRenderer !== null && context3._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context3._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context3, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context3._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context3, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context3, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context3, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context3) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context3) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context3._currentValue;
            if (lastFullyObservedContext === context3)
              ;
            else {
              var contextItem = {
                context: context3,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context3) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context3);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context3 = requiredContext(contextStackCursor$1.current);
            return context3;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context3 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context3, fiber.type);
            if (context3 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options3) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context3) {
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context3) {
                warnInvalidContextAccess();
                return readContext(context3);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context3) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context3);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context3 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context3 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context3 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context3);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context3);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context3);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context3;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context3 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context3, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context3, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context3;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context3 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context3, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context3, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context3 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context3, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context3, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context3 = workInProgress2.type;
            {
              if (context3._context === void 0) {
                if (context3 !== context3.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context3 = context3._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context3);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context3 = workInProgress2.type._context;
                pushProvider(workInProgress2, context3, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context3 = workInProgress2.type._context;
                popProvider(context3, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context3 = workInProgress2.type._context;
                popProvider(context3, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context3 = interruptedWork.type._context;
                popProvider(context3, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context3 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context3;
            } else {
              container.pendingContext = context3;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options3) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options3 !== null && options3 !== void 0) {
              {
                if (options3.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options3 === "object" && options3 !== null && options3.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
              if (options3.transitionCallbacks !== void 0) {
                transitionCallbacks = options3.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options3) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options3 != null ? options3 : null;
            var mutableSources = options3 != null && options3.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options3 !== null && options3 !== void 0) {
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options3);
          }
          function hydrateRoot$1(container, initialChildren, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options3);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports2.createRoot = m.createRoot;
        exports2.hydrateRoot = m.hydrateRoot;
      } else {
        i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c, h, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames9() {
          var classes = "";
          for (var i2 = 0; i2 < arguments.length; i2++) {
            var arg = arguments[i2];
            if (arg) {
              classes = appendClass(classes, parseValue(arg));
            }
          }
          return classes;
        }
        function parseValue(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames9.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes = appendClass(classes, key);
            }
          }
          return classes;
        }
        function appendClass(value, newClass) {
          if (!newClass) {
            return value;
          }
          if (value) {
            return value + " " + newClass;
          }
          return value + newClass;
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames9.default = classNames9;
          module2.exports = classNames9;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames9;
          });
        } else {
          window.classNames = classNames9;
        }
      })();
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React44 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React44.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context3 = type;
                  return getContextName(context3) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement2(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i2 = 0; i2 < node.length; i2++) {
                  var child = node[i2];
                  if (isValidElement2(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement2(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement2(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx;
          exports2.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/invariant/browser.js
  var require_browser = __commonJS({
    "node_modules/invariant/browser.js"(exports2, module2) {
      "use strict";
      var invariant3 = function(condition, format, a, b, c, d, e, f) {
        if (true) {
          if (format === void 0) {
            throw new Error("invariant requires an error message argument");
          }
        }
        if (!condition) {
          var error;
          if (format === void 0) {
            error = new Error(
              "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
            );
          } else {
            var args = [a, b, c, d, e, f];
            var argIndex = 0;
            error = new Error(
              format.replace(/%s/g, function() {
                return args[argIndex++];
              })
            );
            error.name = "Invariant Violation";
          }
          error.framesToPop = 1;
          throw error;
        }
      };
      module2.exports = invariant3;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef;
          exports2.Fragment = Fragment;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo;
          exports2.Portal = Portal;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from, symbols[i2])) {
                to[symbols[i2]] = from[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement2, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement2(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement2(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-sigma/sigma/plugins.filter.js
  var require_plugins_filter = __commonJS({
    "node_modules/react-sigma/sigma/plugins.filter.js"(exports, module) {
      var Sigma = function(e) {
        var r = {};
        function t(n) {
          if (r[n])
            return r[n].exports;
          var o2 = r[n] = { i: n, l: false, exports: {} };
          return e[n].call(o2.exports, o2, o2.exports, t), o2.l = true, o2.exports;
        }
        return t.m = e, t.c = r, t.d = function(e2, r2, n) {
          t.o(e2, r2) || Object.defineProperty(e2, r2, { enumerable: true, get: n });
        }, t.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, t.t = function(e2, r2) {
          if (1 & r2 && (e2 = t(e2)), 8 & r2)
            return e2;
          if (4 & r2 && "object" == typeof e2 && e2 && e2.__esModule)
            return e2;
          var n = /* @__PURE__ */ Object.create(null);
          if (t.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & r2 && "string" != typeof e2)
            for (var o2 in e2)
              t.d(n, o2, function(r3) {
                return e2[r3];
              }.bind(null, o2));
          return n;
        }, t.n = function(e2) {
          var r2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return t.d(r2, "a", r2), r2;
        }, t.o = function(e2, r2) {
          return Object.prototype.hasOwnProperty.call(e2, r2);
        }, t.p = "", t(t.s = 185);
      }({ 185: function(module, exports) {
        (function() {
          (function(undefined) {
            "use strict";
            if ("undefined" == typeof sigma)
              throw "sigma is not declared";
            sigma.utils.pkg("sigma.plugins"), sigma.classes.graph.hasMethod("adjacentNodes") || sigma.classes.graph.addMethod("adjacentNodes", function(e) {
              if ("string" != typeof e)
                throw "adjacentNodes: the node id must be a string.";
              var r, t = [];
              for (r in this.allNeighborsIndex[e])
                t.push(this.nodesIndex[r]);
              return t;
            }), sigma.classes.graph.hasMethod("adjacentEdges") || sigma.classes.graph.addMethod("adjacentEdges", function(e) {
              if ("string" != typeof e)
                throw "adjacentEdges: the node id must be a string.";
              var r, t, n = this.allNeighborsIndex[e], o2 = [];
              for (t in n)
                for (r in n[t])
                  o2.push(n[t][r]);
              return o2;
            });
            var _g = undefined, _s = undefined, _chain = [], _keysIndex = /* @__PURE__ */ Object.create(null), Processors = {};
            function register(e, r, t) {
              if (t != undefined && "string" != typeof t)
                throw 'The filter key "' + t.toString() + '" must be a string.';
              if (t != undefined && !t.length)
                throw "The filter key must be a non-empty string.";
              if ("function" != typeof e)
                throw 'The predicate of key "' + t + '" must be a function.';
              if ("undo" === t)
                throw '"undo" is a reserved key.';
              if (_keysIndex[t])
                throw 'The filter "' + t + '" already exists.';
              t && (_keysIndex[t] = true), _chain.push({ key: t, processor: e, predicate: r });
            }
            function unregister(e) {
              for (var r in _chain = _chain.filter(function(r2) {
                return !(r2.key in e);
              }), e)
                delete _keysIndex[r];
            }
            function Filter(e) {
              _s = e, _g = e.graph;
            }
            function deepCopy(o) {
              var copy = /* @__PURE__ */ Object.create(null);
              for (var i in o)
                "object" == typeof o[i] && null !== o[i] ? copy[i] = deepCopy(o[i]) : "function" == typeof o[i] && null !== o[i] ? eval(" copy[i] = " + o[i].toString()) : copy[i] = o[i];
              return copy;
            }
            function cloneChain(e) {
              for (var r = e.slice(0), t = 0, n = r.length; t < n; t++)
                r[t] = deepCopy(r[t]), "function" == typeof r[t].processor && (r[t].processor = "filter.processors." + r[t].processor.name);
              return r;
            }
            Processors.nodes = function(e) {
              for (var r = _g.nodes(), t = r.length, n = _g.edges(), o2 = n.length; t--; )
                r[t].hidden = !e.call(_g, r[t]) || r[t].hidden;
              for (; o2--; )
                (_g.nodes(n[o2].source).hidden || _g.nodes(n[o2].target).hidden) && (n[o2].hidden = true);
            }, Processors.edges = function(e) {
              for (var r = _g.edges(), t = r.length; t--; )
                r[t].hidden = !e.call(_g, r[t]) || r[t].hidden;
            }, Processors.neighbors = function(e) {
              for (var r = _g.nodes(), t = r.length, n = _g.edges(), o2 = n.length, i2 = _g.adjacentNodes(e), s = i2.length, c = {}; s--; )
                c[i2[s].id] = true;
              for (; t--; )
                r[t].id === e || r[t].id in c || (r[t].hidden = true);
              for (; o2--; )
                (_g.nodes(n[o2].source).hidden || _g.nodes(n[o2].target).hidden) && (n[o2].hidden = true);
            }, Filter.prototype.nodesBy = function(e, r) {
              return register(Processors.nodes, e, r), this;
            }, Filter.prototype.edgesBy = function(e, r) {
              return register(Processors.edges, e, r), this;
            }, Filter.prototype.neighborsOf = function(e, r) {
              if ("string" != typeof e)
                throw 'The node id "' + e.toString() + '" must be a string.';
              if (!e.length)
                throw "The node id must be a non-empty string.";
              return register(Processors.neighbors, e, r), this;
            }, Filter.prototype.apply = function() {
              for (var e = 0, r = _chain.length; e < r; ++e)
                _chain[e].processor(_chain[e].predicate);
              return _chain[0] && "undo" === _chain[0].key && _chain.shift(), _s.refresh(), this;
            }, Filter.prototype.undo = function(e) {
              var r = /* @__PURE__ */ Object.create(null), t = arguments.length;
              if (1 === t)
                if ("[object Array]" === Object.prototype.toString.call(e))
                  for (var n = 0, o2 = e.length; n < o2; n++)
                    r[e[n]] = true;
                else
                  r[e] = true;
              else if (t > 1)
                for (n = 0; n < t; n++)
                  r[arguments[n]] = true;
              else
                this.clear();
              function i2() {
                for (var e2 = _g.nodes(), r2 = e2.length, t2 = _g.edges(), n2 = t2.length; r2--; )
                  e2[r2].hidden = false;
                for (; n2--; )
                  t2[n2].hidden = false;
              }
              return unregister(r), _chain.unshift({ key: "undo", processor: i2 }), this;
            }, Filter.prototype.clear = function() {
              return _chain.length = 0, _keysIndex = /* @__PURE__ */ Object.create(null), this;
            }, Filter.prototype.export = function() {
              return cloneChain(_chain);
            }, Filter.prototype.import = function(e) {
              if (e === undefined)
                throw "Wrong arguments.";
              if ("[object Array]" !== Object.prototype.toString.call(e))
                throw 'The chain" must be an array.';
              for (var r = cloneChain(e), t = 0, n = r.length; t < n; t++) {
                if (r[t].predicate === undefined || r[t].processor === undefined)
                  throw "Wrong arguments.";
                if (r[t].key != undefined && "string" != typeof r[t].key)
                  throw 'The filter key "' + r[t].key.toString() + '" must be a string.';
                if ("function" != typeof r[t].predicate)
                  throw 'The predicate of key "' + r[t].key + '" must be a function.';
                if ("string" != typeof r[t].processor)
                  throw 'The processor of key "' + r[t].key + '" must be a string.';
                switch (r[t].processor) {
                  case "filter.processors.nodes":
                    r[t].processor = Processors.nodes;
                    break;
                  case "filter.processors.edges":
                    r[t].processor = Processors.edges;
                    break;
                  case "filter.processors.neighbors":
                    r[t].processor = Processors.neighbors;
                    break;
                  default:
                    throw "Unknown processor " + r[t].processor;
                }
              }
              return _chain = r, this;
            };
            var filter = null;
            sigma.plugins.filter = function(e) {
              return filter = new Filter(e);
            };
          }).call(this);
        }).call(window);
      } });
    }
  });

  // node_modules/react-sigma/sigma/layout.forceAtlas2.js
  var require_layout_forceAtlas2 = __commonJS({
    "node_modules/react-sigma/sigma/layout.forceAtlas2.js"(exports, module) {
      var Sigma = function(e) {
        var t = {};
        function s(r) {
          if (t[r])
            return t[r].exports;
          var n = t[r] = { i: r, l: false, exports: {} };
          return e[r].call(n.exports, n, n.exports, s), n.l = true, n.exports;
        }
        return s.m = e, s.c = t, s.d = function(e2, t2, r) {
          s.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: r });
        }, s.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, s.t = function(e2, t2) {
          if (1 & t2 && (e2 = s(e2)), 8 & t2)
            return e2;
          if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
            return e2;
          var r = /* @__PURE__ */ Object.create(null);
          if (s.r(r), Object.defineProperty(r, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
            for (var n in e2)
              s.d(r, n, function(t3) {
                return e2[t3];
              }.bind(null, n));
          return r;
        }, s.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return s.d(t2, "a", t2), t2;
        }, s.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, s.p = "", s(s.s = 186);
      }({ 186: function(e, t, s) {
        s(187), e.exports = s(188);
      }, 187: function(module, exports, __webpack_require__) {
        (function() {
          (function(undefined) {
            "use strict";
            if ("undefined" == typeof sigma)
              throw "sigma is not declared";
            var _root = this, webWorkers = "Worker" in _root;
            function Supervisor(sigInst, options) {
              var _this = this, workerFn = sigInst.getForceAtlas2Worker && sigInst.getForceAtlas2Worker();
              if (options = options || {}, _root.URL = _root.URL || _root.webkitURL, this.sigInst = sigInst, this.graph = this.sigInst.graph, this.ppn = 10, this.ppe = 3, this.config = {}, this.shouldUseWorker = false !== options.worker && webWorkers, this.workerUrl = options.workerUrl, this.started = false, this.running = false, this.shouldUseWorker) {
                if (this.workerUrl)
                  this.worker = new Worker(this.workerUrl);
                else {
                  var blob = this.makeBlob(workerFn);
                  this.worker = new Worker(URL.createObjectURL(blob));
                }
                this.worker.postMessage = this.worker.webkitPostMessage || this.worker.postMessage;
              } else
                eval(workerFn);
              this.msgName = this.worker ? "message" : "newCoords", this.listener = function(e) {
                _this.nodesByteArray = new Float32Array(e.data.nodes), _this.running && (_this.applyLayoutChanges(), _this.sendByteArrayToWorker(), _this.sigInst.refresh());
              }, (this.worker || document).addEventListener(this.msgName, this.listener), this.graphToByteArrays(), sigInst.bind("kill", function() {
                sigInst.killForceAtlas2();
              });
            }
            Supervisor.prototype.makeBlob = function(e) {
              var t;
              try {
                t = new Blob([e], { type: "application/javascript" });
              } catch (s) {
                _root.BlobBuilder = _root.BlobBuilder || _root.WebKitBlobBuilder || _root.MozBlobBuilder, (t = new BlobBuilder()).append(e), t = t.getBlob();
              }
              return t;
            }, Supervisor.prototype.graphToByteArrays = function() {
              var e, t, s, r = this.graph.nodes(), n = this.graph.edges(), i2 = r.length * this.ppn, o2 = n.length * this.ppe, a = {};
              for (this.nodesByteArray = new Float32Array(i2), this.edgesByteArray = new Float32Array(o2), e = t = 0, s = r.length; e < s; e++)
                a[r[e].id] = t, this.nodesByteArray[t] = r[e].x, this.nodesByteArray[t + 1] = r[e].y, this.nodesByteArray[t + 2] = 0, this.nodesByteArray[t + 3] = 0, this.nodesByteArray[t + 4] = 0, this.nodesByteArray[t + 5] = 0, this.nodesByteArray[t + 6] = 1 + this.graph.degree(r[e].id), this.nodesByteArray[t + 7] = 1, this.nodesByteArray[t + 8] = r[e].size, this.nodesByteArray[t + 9] = 0, t += this.ppn;
              for (e = t = 0, s = n.length; e < s; e++)
                this.edgesByteArray[t] = a[n[e].source], this.edgesByteArray[t + 1] = a[n[e].target], this.edgesByteArray[t + 2] = n[e].weight || 0, t += this.ppe;
            }, Supervisor.prototype.applyLayoutChanges = function() {
              for (var e = this.graph.nodes(), t = 0, s = 0, r = this.nodesByteArray.length; s < r; s += this.ppn)
                e[t].x = this.nodesByteArray[s], e[t].y = this.nodesByteArray[s + 1], t++;
            }, Supervisor.prototype.sendByteArrayToWorker = function(e) {
              var t = { action: e || "loop", nodes: this.nodesByteArray.buffer }, s = [this.nodesByteArray.buffer];
              "start" === e && (t.config = this.config || {}, t.edges = this.edgesByteArray.buffer, s.push(this.edgesByteArray.buffer)), this.shouldUseWorker ? this.worker.postMessage(t, s) : _root.postMessage(t, "*");
            }, Supervisor.prototype.start = function() {
              if (!this.running) {
                var e;
                for (e in this.running = true, this.sigInst.cameras)
                  this.sigInst.cameras[e].edgequadtree._enabled = false;
                this.started ? this.sendByteArrayToWorker() : (this.sendByteArrayToWorker("start"), this.started = true);
              }
            }, Supervisor.prototype.stop = function() {
              if (this.running) {
                var e, t, s;
                for (e in this.sigInst.cameras)
                  (t = this.sigInst.cameras[e]).edgequadtree._enabled = true, s = sigma.utils.getBoundaries(this.graph, t.readPrefix), t.settings("drawEdges") && t.settings("enableEdgeHovering") && t.edgequadtree.index(this.sigInst.graph, { prefix: t.readPrefix, bounds: { x: s.minX, y: s.minY, width: s.maxX - s.minX, height: s.maxY - s.minY } });
                this.running = false;
              }
            }, Supervisor.prototype.killWorker = function() {
              this.worker ? this.worker.terminate() : (_root.postMessage({ action: "kill" }, "*"), document.removeEventListener(this.msgName, this.listener));
            }, Supervisor.prototype.configure = function(e) {
              if (this.config = e, this.started) {
                var t = { action: "config", config: this.config };
                this.shouldUseWorker ? this.worker.postMessage(t) : _root.postMessage(t, "*");
              }
            }, sigma.prototype.startForceAtlas2 = function(e) {
              return this.supervisor || (this.supervisor = new Supervisor(this, e)), e && this.supervisor.configure(e), this.supervisor.start(), this;
            }, sigma.prototype.stopForceAtlas2 = function() {
              return this.supervisor ? (this.supervisor.stop(), this) : this;
            }, sigma.prototype.killForceAtlas2 = function() {
              return this.supervisor ? (this.supervisor.stop(), this.supervisor.killWorker(), this.supervisor = null, this) : this;
            }, sigma.prototype.configForceAtlas2 = function(e) {
              return this.supervisor || (this.supervisor = new Supervisor(this, e)), this.supervisor.configure(e), this;
            }, sigma.prototype.isForceAtlas2Running = function(e) {
              return !!this.supervisor && this.supervisor.running;
            };
          }).call(window);
        }).call(window);
      }, 188: function(module, exports) {
        (function() {
          (function(undefined) {
            "use strict";
            var _root = this, inWebWorker = !("document" in _root), Worker = function(e) {
              var t, s, r, n = { ppn: 10, ppe: 3, ppr: 9, maxForce: 10, iterations: 0, converged: false, settings: { linLogMode: false, outboundAttractionDistribution: false, adjustSizes: false, edgeWeightInfluence: 0, scalingRatio: 1, strongGravityMode: false, gravity: 1, slowDown: 1, barnesHutOptimize: false, barnesHutTheta: 0.5, startingIterations: 1, iterationsPerRender: 1 } };
              var i2, o2 = { x: 0, y: 1, dx: 2, dy: 3, old_dx: 4, old_dy: 5, mass: 6, convergence: 7, size: 8, fixed: 9 }, a = { source: 0, target: 1, weight: 2 }, d = { node: 0, centerX: 1, centerY: 2, size: 3, nextSibling: 4, firstChild: 5, mass: 6, massCenterX: 7, massCenterY: 8 };
              function h(e2, t2) {
                if (e2 % n.ppn != 0)
                  throw "np: non correct (" + e2 + ").";
                if (e2 !== parseInt(e2))
                  throw "np: non int.";
                if (t2 in o2)
                  return e2 + o2[t2];
                throw "ForceAtlas2.Worker - Inexistant node property given (" + t2 + ").";
              }
              function p(e2, t2) {
                if (e2 % n.ppe != 0)
                  throw "ep: non correct (" + e2 + ").";
                if (e2 !== parseInt(e2))
                  throw "ep: non int.";
                if (t2 in a)
                  return e2 + a[t2];
                throw "ForceAtlas2.Worker - Inexistant edge property given (" + t2 + ").";
              }
              function g(e2, t2) {
                if (e2 % n.ppr != 0)
                  throw "rp: non correct (" + e2 + ").";
                if (e2 !== parseInt(e2))
                  throw "rp: non int.";
                if (t2 in d)
                  return e2 + d[t2];
                throw "ForceAtlas2.Worker - Inexistant region property given (" + t2 + ").";
              }
              function l(e2) {
                n.settings = function() {
                  var e3, t2, s2 = {};
                  for (e3 = arguments.length - 1; e3 >= 0; e3--)
                    for (t2 in arguments[e3])
                      s2[t2] = arguments[e3][t2];
                  return s2;
                }(e2, n.settings);
              }
              function u() {
                var e2, i3, o3, a3, d2, l2, u2, c2, f2, y, m, x, w, v, b, k, M, A, _;
                for (o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                  t[h(o3, "old_dx")] = t[h(o3, "dx")], t[h(o3, "old_dy")] = t[h(o3, "dy")], t[h(o3, "dx")] = 0, t[h(o3, "dy")] = 0;
                if (n.settings.outboundAttractionDistribution) {
                  for (f2 = 0, o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    f2 += t[h(o3, "mass")];
                  f2 /= n.nodesLength;
                }
                if (n.settings.barnesHutOptimize) {
                  var C, B, S = 1 / 0, W = -1 / 0, Y = 1 / 0, F = -1 / 0;
                  for (r = [], o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    S = Math.min(S, t[h(o3, "x")]), W = Math.max(W, t[h(o3, "x")]), Y = Math.min(Y, t[h(o3, "y")]), F = Math.max(F, t[h(o3, "y")]);
                  for (r[g(0, "node")] = -1, r[g(0, "centerX")] = (S + W) / 2, r[g(0, "centerY")] = (Y + F) / 2, r[g(0, "size")] = Math.max(W - S, F - Y), r[g(0, "nextSibling")] = -1, r[g(0, "firstChild")] = -1, r[g(0, "mass")] = 0, r[g(0, "massCenterX")] = 0, r[g(0, "massCenterY")] = 0, e2 = 1, o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    for (i3 = 0; ; )
                      if (r[g(i3, "firstChild")] >= 0)
                        C = t[h(o3, "x")] < r[g(i3, "centerX")] ? t[h(o3, "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] : r[g(i3, "firstChild")] + n.ppr : t[h(o3, "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] + 2 * n.ppr : r[g(i3, "firstChild")] + 3 * n.ppr, r[g(i3, "massCenterX")] = (r[g(i3, "massCenterX")] * r[g(i3, "mass")] + t[h(o3, "x")] * t[h(o3, "mass")]) / (r[g(i3, "mass")] + t[h(o3, "mass")]), r[g(i3, "massCenterY")] = (r[g(i3, "massCenterY")] * r[g(i3, "mass")] + t[h(o3, "y")] * t[h(o3, "mass")]) / (r[g(i3, "mass")] + t[h(o3, "mass")]), r[g(i3, "mass")] += t[h(o3, "mass")], i3 = C;
                      else {
                        if (r[g(i3, "node")] < 0) {
                          r[g(i3, "node")] = o3;
                          break;
                        }
                        if (r[g(i3, "firstChild")] = e2 * n.ppr, u2 = r[g(i3, "size")] / 2, c2 = r[g(i3, "firstChild")], r[g(c2, "node")] = -1, r[g(c2, "centerX")] = r[g(i3, "centerX")] - u2, r[g(c2, "centerY")] = r[g(i3, "centerY")] - u2, r[g(c2, "size")] = u2, r[g(c2, "nextSibling")] = c2 + n.ppr, r[g(c2, "firstChild")] = -1, r[g(c2, "mass")] = 0, r[g(c2, "massCenterX")] = 0, r[g(c2, "massCenterY")] = 0, c2 += n.ppr, r[g(c2, "node")] = -1, r[g(c2, "centerX")] = r[g(i3, "centerX")] - u2, r[g(c2, "centerY")] = r[g(i3, "centerY")] + u2, r[g(c2, "size")] = u2, r[g(c2, "nextSibling")] = c2 + n.ppr, r[g(c2, "firstChild")] = -1, r[g(c2, "mass")] = 0, r[g(c2, "massCenterX")] = 0, r[g(c2, "massCenterY")] = 0, c2 += n.ppr, r[g(c2, "node")] = -1, r[g(c2, "centerX")] = r[g(i3, "centerX")] + u2, r[g(c2, "centerY")] = r[g(i3, "centerY")] - u2, r[g(c2, "size")] = u2, r[g(c2, "nextSibling")] = c2 + n.ppr, r[g(c2, "firstChild")] = -1, r[g(c2, "mass")] = 0, r[g(c2, "massCenterX")] = 0, r[g(c2, "massCenterY")] = 0, c2 += n.ppr, r[g(c2, "node")] = -1, r[g(c2, "centerX")] = r[g(i3, "centerX")] + u2, r[g(c2, "centerY")] = r[g(i3, "centerY")] + u2, r[g(c2, "size")] = u2, r[g(c2, "nextSibling")] = r[g(i3, "nextSibling")], r[g(c2, "firstChild")] = -1, r[g(c2, "mass")] = 0, r[g(c2, "massCenterX")] = 0, r[g(c2, "massCenterY")] = 0, e2 += 4, C = t[h(r[g(i3, "node")], "x")] < r[g(i3, "centerX")] ? t[h(r[g(i3, "node")], "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] : r[g(i3, "firstChild")] + n.ppr : t[h(r[g(i3, "node")], "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] + 2 * n.ppr : r[g(i3, "firstChild")] + 3 * n.ppr, r[g(i3, "mass")] = t[h(r[g(i3, "node")], "mass")], r[g(i3, "massCenterX")] = t[h(r[g(i3, "node")], "x")], r[g(i3, "massCenterY")] = t[h(r[g(i3, "node")], "y")], r[g(C, "node")] = r[g(i3, "node")], r[g(i3, "node")] = -1, C !== (B = t[h(o3, "x")] < r[g(i3, "centerX")] ? t[h(o3, "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] : r[g(i3, "firstChild")] + n.ppr : t[h(o3, "y")] < r[g(i3, "centerY")] ? r[g(i3, "firstChild")] + 2 * n.ppr : r[g(i3, "firstChild")] + 3 * n.ppr)) {
                          r[g(B, "node")] = o3;
                          break;
                        }
                        i3 = C;
                      }
                }
                if (n.settings.barnesHutOptimize)
                  for (y = n.settings.scalingRatio, o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    for (i3 = 0; ; )
                      if (r[g(i3, "firstChild")] >= 0) {
                        if (v = Math.sqrt(Math.pow(t[h(o3, "x")] - r[g(i3, "massCenterX")], 2) + Math.pow(t[h(o3, "y")] - r[g(i3, "massCenterY")], 2)), 2 * r[g(i3, "size")] / v < n.settings.barnesHutTheta) {
                          if (m = t[h(o3, "x")] - r[g(i3, "massCenterX")], x = t[h(o3, "y")] - r[g(i3, "massCenterY")], n.settings.adjustSizes ? v > 0 ? (b = y * t[h(o3, "mass")] * r[g(i3, "mass")] / v / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b) : v < 0 && (b = -y * t[h(o3, "mass")] * r[g(i3, "mass")] / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b) : v > 0 && (b = y * t[h(o3, "mass")] * r[g(i3, "mass")] / v / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b), r[g(i3, "nextSibling")] < 0)
                            break;
                          i3 = r[g(i3, "nextSibling")];
                          continue;
                        }
                        i3 = r[g(i3, "firstChild")];
                      } else {
                        if (r[g(i3, "node")] >= 0 && r[g(i3, "node")] !== o3 && (m = t[h(o3, "x")] - t[h(r[g(i3, "node")], "x")], x = t[h(o3, "y")] - t[h(r[g(i3, "node")], "y")], v = Math.sqrt(m * m + x * x), n.settings.adjustSizes ? v > 0 ? (b = y * t[h(o3, "mass")] * t[h(r[g(i3, "node")], "mass")] / v / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b) : v < 0 && (b = -y * t[h(o3, "mass")] * t[h(r[g(i3, "node")], "mass")] / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b) : v > 0 && (b = y * t[h(o3, "mass")] * t[h(r[g(i3, "node")], "mass")] / v / v, t[h(o3, "dx")] += m * b, t[h(o3, "dy")] += x * b)), r[g(i3, "nextSibling")] < 0)
                          break;
                        i3 = r[g(i3, "nextSibling")];
                      }
                else
                  for (y = n.settings.scalingRatio, a3 = 0; a3 < n.nodesLength; a3 += n.ppn)
                    for (d2 = 0; d2 < a3; d2 += n.ppn)
                      m = t[h(a3, "x")] - t[h(d2, "x")], x = t[h(a3, "y")] - t[h(d2, "y")], n.settings.adjustSizes ? (v = Math.sqrt(m * m + x * x) - t[h(a3, "size")] - t[h(d2, "size")]) > 0 ? (b = y * t[h(a3, "mass")] * t[h(d2, "mass")] / v / v, t[h(a3, "dx")] += m * b, t[h(a3, "dy")] += x * b, t[h(d2, "dx")] += m * b, t[h(d2, "dy")] += x * b) : v < 0 && (b = 100 * y * t[h(a3, "mass")] * t[h(d2, "mass")], t[h(a3, "dx")] += m * b, t[h(a3, "dy")] += x * b, t[h(d2, "dx")] -= m * b, t[h(d2, "dy")] -= x * b) : (v = Math.sqrt(m * m + x * x)) > 0 && (b = y * t[h(a3, "mass")] * t[h(d2, "mass")] / v / v, t[h(a3, "dx")] += m * b, t[h(a3, "dy")] += x * b, t[h(d2, "dx")] -= m * b, t[h(d2, "dy")] -= x * b);
                for (c2 = n.settings.gravity / n.settings.scalingRatio, y = n.settings.scalingRatio, o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                  b = 0, m = t[h(o3, "x")], x = t[h(o3, "y")], v = Math.sqrt(Math.pow(m, 2) + Math.pow(x, 2)), n.settings.strongGravityMode ? v > 0 && (b = y * t[h(o3, "mass")] * c2) : v > 0 && (b = y * t[h(o3, "mass")] * c2 / v), t[h(o3, "dx")] -= m * b, t[h(o3, "dy")] -= x * b;
                for (y = 1 * (n.settings.outboundAttractionDistribution ? f2 : 1), l2 = 0; l2 < n.edgesLength; l2 += n.ppe)
                  a3 = s[p(l2, "source")], d2 = s[p(l2, "target")], u2 = s[p(l2, "weight")], w = Math.pow(u2, n.settings.edgeWeightInfluence), m = t[h(a3, "x")] - t[h(d2, "x")], x = t[h(a3, "y")] - t[h(d2, "y")], n.settings.adjustSizes ? (v = Math.sqrt(Math.pow(m, 2) + Math.pow(x, 2) - t[h(a3, "size")] - t[h(d2, "size")]), n.settings.linLogMode ? n.settings.outboundAttractionDistribution ? v > 0 && (b = -y * w * Math.log(1 + v) / v / t[h(a3, "mass")]) : v > 0 && (b = -y * w * Math.log(1 + v) / v) : n.settings.outboundAttractionDistribution ? v > 0 && (b = -y * w / t[h(a3, "mass")]) : v > 0 && (b = -y * w)) : (v = Math.sqrt(Math.pow(m, 2) + Math.pow(x, 2)), n.settings.linLogMode ? n.settings.outboundAttractionDistribution ? v > 0 && (b = -y * w * Math.log(1 + v) / v / t[h(a3, "mass")]) : v > 0 && (b = -y * w * Math.log(1 + v) / v) : n.settings.outboundAttractionDistribution ? (v = 1, b = -y * w / t[h(a3, "mass")]) : (v = 1, b = -y * w)), v > 0 && (t[h(a3, "dx")] += m * b, t[h(a3, "dy")] += x * b, t[h(d2, "dx")] -= m * b, t[h(d2, "dy")] -= x * b);
                if (n.settings.adjustSizes)
                  for (o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    t[h(o3, "fixed")] || ((k = Math.sqrt(Math.pow(t[h(o3, "dx")], 2) + Math.pow(t[h(o3, "dy")], 2))) > n.maxForce && (t[h(o3, "dx")] = t[h(o3, "dx")] * n.maxForce / k, t[h(o3, "dy")] = t[h(o3, "dy")] * n.maxForce / k), M = t[h(o3, "mass")] * Math.sqrt((t[h(o3, "old_dx")] - t[h(o3, "dx")]) * (t[h(o3, "old_dx")] - t[h(o3, "dx")]) + (t[h(o3, "old_dy")] - t[h(o3, "dy")]) * (t[h(o3, "old_dy")] - t[h(o3, "dy")])), A = Math.sqrt((t[h(o3, "old_dx")] + t[h(o3, "dx")]) * (t[h(o3, "old_dx")] + t[h(o3, "dx")]) + (t[h(o3, "old_dy")] + t[h(o3, "dy")]) * (t[h(o3, "old_dy")] + t[h(o3, "dy")])) / 2, _ = 0.1 * Math.log(1 + A) / (1 + Math.sqrt(M)), t[h(o3, "x")] = t[h(o3, "x")] + t[h(o3, "dx")] * (_ / n.settings.slowDown), t[h(o3, "y")] = t[h(o3, "y")] + t[h(o3, "dy")] * (_ / n.settings.slowDown));
                else
                  for (o3 = 0; o3 < n.nodesLength; o3 += n.ppn)
                    t[h(o3, "fixed")] || (M = t[h(o3, "mass")] * Math.sqrt((t[h(o3, "old_dx")] - t[h(o3, "dx")]) * (t[h(o3, "old_dx")] - t[h(o3, "dx")]) + (t[h(o3, "old_dy")] - t[h(o3, "dy")]) * (t[h(o3, "old_dy")] - t[h(o3, "dy")])), A = Math.sqrt((t[h(o3, "old_dx")] + t[h(o3, "dx")]) * (t[h(o3, "old_dx")] + t[h(o3, "dx")]) + (t[h(o3, "old_dy")] + t[h(o3, "dy")]) * (t[h(o3, "old_dy")] + t[h(o3, "dy")])) / 2, _ = t[h(o3, "convergence")] * Math.log(1 + A) / (1 + Math.sqrt(M)), t[h(o3, "convergence")] = Math.min(1, Math.sqrt(_ * (Math.pow(t[h(o3, "dx")], 2) + Math.pow(t[h(o3, "dy")], 2)) / (1 + Math.sqrt(M)))), t[h(o3, "x")] = t[h(o3, "x")] + t[h(o3, "dx")] * (_ / n.settings.slowDown), t[h(o3, "y")] = t[h(o3, "y")] + t[h(o3, "dy")] * (_ / n.settings.slowDown));
                n.iterations++;
              }
              function c(e2) {
                for (var t2 = 0; t2 < e2; t2++)
                  u();
                i2();
              }
              i2 = "undefined" != typeof window && window.document ? function() {
                var e2;
                document.createEvent ? (e2 = document.createEvent("Event")).initEvent("newCoords", true, false) : (e2 = document.createEventObject()).eventType = "newCoords", e2.eventName = "newCoords", e2.data = { nodes: t.buffer }, requestAnimationFrame(function() {
                  document.dispatchEvent(e2);
                });
              } : function() {
                self.postMessage({ nodes: t.buffer }, [t.buffer]);
              };
              var f = function(e2) {
                switch (e2.data.action) {
                  case "start":
                    i3 = new Float32Array(e2.data.nodes), o3 = new Float32Array(e2.data.edges), a3 = (a3 = e2.data.config) || {}, t = i3, s = o3, n.nodesLength = t.length, n.edgesLength = s.length, l(a3), c(n.settings.startingIterations);
                    break;
                  case "loop":
                    t = new Float32Array(e2.data.nodes), c(n.settings.iterationsPerRender);
                    break;
                  case "config":
                    l(e2.data.config);
                    break;
                  case "kill":
                    !function(e3) {
                      var t2;
                      for (t2 in e3)
                        "hasOwnProperty" in e3 && !e3.hasOwnProperty(t2) || delete e3[t2];
                    }(n), t = null, s = null, r = null, self.removeEventListener("message", f);
                }
                var i3, o3, a3;
              };
              self.addEventListener("message", f);
            };
            function crush(e) {
              var t, s, r, n = ["x", "y", "dx", "dy", "old_dx", "old_dy", "mass", "convergence", "size", "fixed"], i2 = ["source", "target", "weight"], o2 = ["node", "centerX", "centerY", "size", "nextSibling", "firstChild", "mass", "massCenterX", "massCenterY"];
              for (s = 0, r = o2.length; s < r; s++)
                t = new RegExp("rp\\(([^,]*), '" + o2[s] + "'\\)", "g"), e = e.replace(t, 0 === s ? "$1" : "$1 + " + s);
              for (s = 0, r = n.length; s < r; s++)
                t = new RegExp("np\\(([^,]*), '" + n[s] + "'\\)", "g"), e = e.replace(t, 0 === s ? "$1" : "$1 + " + s);
              for (s = 0, r = i2.length; s < r; s++)
                t = new RegExp("ep\\(([^,]*), '" + i2[s] + "'\\)", "g"), e = e.replace(t, 0 === s ? "$1" : "$1 + " + s);
              return e;
            }
            function getWorkerFn() {
              return ";(" + (crush ? crush(Worker.toString()) : Worker.toString()) + ").call(this);";
            }
            if (inWebWorker)
              eval(getWorkerFn());
            else {
              if ("undefined" == typeof sigma)
                throw "sigma is not declared";
              sigma.prototype.getForceAtlas2Worker = getWorkerFn;
            }
          }).call(window);
        }).call(window);
      } });
    }
  });

  // node_modules/graphology/dist/graphology.umd.js
  var require_graphology_umd = __commonJS({
    "node_modules/graphology/dist/graphology.umd.js"(exports2, module2) {
      (function(global2, factory) {
        typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.graphology = factory());
      })(exports2, function() {
        "use strict";
        function _typeof13(obj) {
          "@babel/helpers - typeof";
          return _typeof13 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof13(obj);
        }
        function _inheritsLoose2(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf14(subClass, superClass);
        }
        function _getPrototypeOf13(o2) {
          _getPrototypeOf13 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf14(o3) {
            return o3.__proto__ || Object.getPrototypeOf(o3);
          };
          return _getPrototypeOf13(o2);
        }
        function _setPrototypeOf14(o2, p) {
          _setPrototypeOf14 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf15(o3, p2) {
            o3.__proto__ = p2;
            return o3;
          };
          return _setPrototypeOf14(o2, p);
        }
        function _isNativeReflectConstruct13() {
          if (typeof Reflect === "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if (typeof Proxy === "function")
            return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _construct(Parent, args, Class) {
          if (_isNativeReflectConstruct13()) {
            _construct = Reflect.construct.bind();
          } else {
            _construct = function _construct2(Parent2, args2, Class2) {
              var a = [null];
              a.push.apply(a, args2);
              var Constructor = Function.bind.apply(Parent2, a);
              var instance = new Constructor();
              if (Class2)
                _setPrototypeOf14(instance, Class2.prototype);
              return instance;
            };
          }
          return _construct.apply(null, arguments);
        }
        function _isNativeFunction(fn) {
          return Function.toString.call(fn).indexOf("[native code]") !== -1;
        }
        function _wrapNativeSuper(Class) {
          var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
          _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
            if (Class2 === null || !_isNativeFunction(Class2))
              return Class2;
            if (typeof Class2 !== "function") {
              throw new TypeError("Super expression must either be null or a function");
            }
            if (typeof _cache !== "undefined") {
              if (_cache.has(Class2))
                return _cache.get(Class2);
              _cache.set(Class2, Wrapper);
            }
            function Wrapper() {
              return _construct(Class2, arguments, _getPrototypeOf13(this).constructor);
            }
            Wrapper.prototype = Object.create(Class2.prototype, {
              constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            return _setPrototypeOf14(Wrapper, Class2);
          };
          return _wrapNativeSuper(Class);
        }
        function _assertThisInitialized13(self2) {
          if (self2 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self2;
        }
        function assignPolyfill() {
          var target = arguments[0];
          for (var i2 = 1, l = arguments.length; i2 < l; i2++) {
            if (!arguments[i2])
              continue;
            for (var k in arguments[i2]) {
              target[k] = arguments[i2][k];
            }
          }
          return target;
        }
        var assign = assignPolyfill;
        if (typeof Object.assign === "function")
          assign = Object.assign;
        function getMatchingEdge(graph2, source, target, type) {
          var sourceData = graph2._nodes.get(source);
          var edge = null;
          if (!sourceData)
            return edge;
          if (type === "mixed") {
            edge = sourceData.out && sourceData.out[target] || sourceData.undirected && sourceData.undirected[target];
          } else if (type === "directed") {
            edge = sourceData.out && sourceData.out[target];
          } else {
            edge = sourceData.undirected && sourceData.undirected[target];
          }
          return edge;
        }
        function isPlainObject(value) {
          return _typeof13(value) === "object" && value !== null;
        }
        function isEmpty(o2) {
          var k;
          for (k in o2) {
            return false;
          }
          return true;
        }
        function privateProperty(target, name, value) {
          Object.defineProperty(target, name, {
            enumerable: false,
            configurable: false,
            writable: true,
            value
          });
        }
        function readOnlyProperty(target, name, value) {
          var descriptor = {
            enumerable: true,
            configurable: true
          };
          if (typeof value === "function") {
            descriptor.get = value;
          } else {
            descriptor.value = value;
            descriptor.writable = false;
          }
          Object.defineProperty(target, name, descriptor);
        }
        function validateHints(hints) {
          if (!isPlainObject(hints))
            return false;
          if (hints.attributes && !Array.isArray(hints.attributes))
            return false;
          return true;
        }
        function incrementalIdStartingFromRandomByte() {
          var i2 = Math.floor(Math.random() * 256) & 255;
          return function() {
            return i2++;
          };
        }
        var events = { exports: {} };
        var R = typeof Reflect === "object" ? Reflect : null;
        var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
          return Function.prototype.apply.call(target, receiver, args);
        };
        var ReflectOwnKeys;
        if (R && typeof R.ownKeys === "function") {
          ReflectOwnKeys = R.ownKeys;
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target);
          };
        }
        function ProcessEmitWarning(warning) {
          if (console && console.warn)
            console.warn(warning);
        }
        var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
          return value !== value;
        };
        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        events.exports = EventEmitter;
        events.exports.once = once;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = void 0;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = void 0;
        var defaultMaxListeners = 10;
        function checkListener(listener) {
          if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }
        Object.defineProperty(EventEmitter, "defaultMaxListeners", {
          enumerable: true,
          get: function() {
            return defaultMaxListeners;
          },
          set: function(arg) {
            if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
            }
            defaultMaxListeners = arg;
          }
        });
        EventEmitter.init = function() {
          if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          }
          this._maxListeners = this._maxListeners || void 0;
        };
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
          if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
          }
          this._maxListeners = n;
          return this;
        };
        function _getMaxListeners(that) {
          if (that._maxListeners === void 0)
            return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };
        EventEmitter.prototype.emit = function emit(type) {
          var args = [];
          for (var i2 = 1; i2 < arguments.length; i2++)
            args.push(arguments[i2]);
          var doError = type === "error";
          var events2 = this._events;
          if (events2 !== void 0)
            doError = doError && events2.error === void 0;
          else if (!doError)
            return false;
          if (doError) {
            var er;
            if (args.length > 0)
              er = args[0];
            if (er instanceof Error) {
              throw er;
            }
            var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
            err.context = er;
            throw err;
          }
          var handler = events2[type];
          if (handler === void 0)
            return false;
          if (typeof handler === "function") {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i2 = 0; i2 < len; ++i2)
              ReflectApply(listeners[i2], this, args);
          }
          return true;
        };
        function _addListener(target, type, listener, prepend) {
          var m;
          var events2;
          var existing;
          checkListener(listener);
          events2 = target._events;
          if (events2 === void 0) {
            events2 = target._events = /* @__PURE__ */ Object.create(null);
            target._eventsCount = 0;
          } else {
            if (events2.newListener !== void 0) {
              target.emit("newListener", type, listener.listener ? listener.listener : listener);
              events2 = target._events;
            }
            existing = events2[type];
          }
          if (existing === void 0) {
            existing = events2[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === "function") {
              existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }
            m = _getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true;
              var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              w.name = "MaxListenersExceededWarning";
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }
          return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0)
              return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }
        function _onceWrap(target, type, listener) {
          var state = {
            fired: false,
            wrapFn: void 0,
            target,
            type,
            listener
          };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }
        EventEmitter.prototype.once = function once2(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
          var list, events2, position, i2, originalListener;
          checkListener(listener);
          events2 = this._events;
          if (events2 === void 0)
            return this;
          list = events2[type];
          if (list === void 0)
            return this;
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else {
              delete events2[type];
              if (events2.removeListener)
                this.emit("removeListener", type, list.listener || listener);
            }
          } else if (typeof list !== "function") {
            position = -1;
            for (i2 = list.length - 1; i2 >= 0; i2--) {
              if (list[i2] === listener || list[i2].listener === listener) {
                originalListener = list[i2].listener;
                position = i2;
                break;
              }
            }
            if (position < 0)
              return this;
            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }
            if (list.length === 1)
              events2[type] = list[0];
            if (events2.removeListener !== void 0)
              this.emit("removeListener", type, originalListener || listener);
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
          var listeners, events2, i2;
          events2 = this._events;
          if (events2 === void 0)
            return this;
          if (events2.removeListener === void 0) {
            if (arguments.length === 0) {
              this._events = /* @__PURE__ */ Object.create(null);
              this._eventsCount = 0;
            } else if (events2[type] !== void 0) {
              if (--this._eventsCount === 0)
                this._events = /* @__PURE__ */ Object.create(null);
              else
                delete events2[type];
            }
            return this;
          }
          if (arguments.length === 0) {
            var keys = Object.keys(events2);
            var key;
            for (i2 = 0; i2 < keys.length; ++i2) {
              key = keys[i2];
              if (key === "removeListener")
                continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners("removeListener");
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
            return this;
          }
          listeners = events2[type];
          if (typeof listeners === "function") {
            this.removeListener(type, listeners);
          } else if (listeners !== void 0) {
            for (i2 = listeners.length - 1; i2 >= 0; i2--) {
              this.removeListener(type, listeners[i2]);
            }
          }
          return this;
        };
        function _listeners(target, type, unwrap) {
          var events2 = target._events;
          if (events2 === void 0)
            return [];
          var evlistener = events2[type];
          if (evlistener === void 0)
            return [];
          if (typeof evlistener === "function")
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];
          return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function(emitter, type) {
          if (typeof emitter.listenerCount === "function") {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events2 = this._events;
          if (events2 !== void 0) {
            var evlistener = events2[type];
            if (typeof evlistener === "function") {
              return 1;
            } else if (evlistener !== void 0) {
              return evlistener.length;
            }
          }
          return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };
        function arrayClone(arr, n) {
          var copy2 = new Array(n);
          for (var i2 = 0; i2 < n; ++i2)
            copy2[i2] = arr[i2];
          return copy2;
        }
        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++)
            list[index] = list[index + 1];
          list.pop();
        }
        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i2 = 0; i2 < ret.length; ++i2) {
            ret[i2] = arr[i2].listener || arr[i2];
          }
          return ret;
        }
        function once(emitter, name) {
          return new Promise(function(resolve, reject) {
            function errorListener(err) {
              emitter.removeListener(name, resolver);
              reject(err);
            }
            function resolver() {
              if (typeof emitter.removeListener === "function") {
                emitter.removeListener("error", errorListener);
              }
              resolve([].slice.call(arguments));
            }
            eventTargetAgnosticAddListener(emitter, name, resolver, {
              once: true
            });
            if (name !== "error") {
              addErrorHandlerIfEventEmitter(emitter, errorListener, {
                once: true
              });
            }
          });
        }
        function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
          if (typeof emitter.on === "function") {
            eventTargetAgnosticAddListener(emitter, "error", handler, flags);
          }
        }
        function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
          if (typeof emitter.on === "function") {
            if (flags.once) {
              emitter.once(name, listener);
            } else {
              emitter.on(name, listener);
            }
          } else if (typeof emitter.addEventListener === "function") {
            emitter.addEventListener(name, function wrapListener(arg) {
              if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
              }
              listener(arg);
            });
          } else {
            throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
          }
        }
        function Iterator$2(next) {
          if (typeof next !== "function")
            throw new Error("obliterator/iterator: expecting a function!");
          this.next = next;
        }
        if (typeof Symbol !== "undefined")
          Iterator$2.prototype[Symbol.iterator] = function() {
            return this;
          };
        Iterator$2.of = function() {
          var args = arguments, l = args.length, i2 = 0;
          return new Iterator$2(function() {
            if (i2 >= l)
              return {
                done: true
              };
            return {
              done: false,
              value: args[i2++]
            };
          });
        };
        Iterator$2.empty = function() {
          var iterator2 = new Iterator$2(function() {
            return {
              done: true
            };
          });
          return iterator2;
        };
        Iterator$2.fromSequence = function(sequence) {
          var i2 = 0, l = sequence.length;
          return new Iterator$2(function() {
            if (i2 >= l)
              return {
                done: true
              };
            return {
              done: false,
              value: sequence[i2++]
            };
          });
        };
        Iterator$2.is = function(value) {
          if (value instanceof Iterator$2)
            return true;
          return typeof value === "object" && value !== null && typeof value.next === "function";
        };
        var iterator = Iterator$2;
        var support$1 = {};
        support$1.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
        support$1.SYMBOL_SUPPORT = typeof Symbol !== "undefined";
        var Iterator$1 = iterator;
        var support = support$1;
        var ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;
        var SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;
        function iterOrNull(target) {
          if (typeof target === "string" || Array.isArray(target) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(target))
            return Iterator$1.fromSequence(target);
          if (typeof target !== "object" || target === null)
            return null;
          if (SYMBOL_SUPPORT && typeof target[Symbol.iterator] === "function")
            return target[Symbol.iterator]();
          if (typeof target.next === "function")
            return target;
          return null;
        }
        var iter$2 = function iter2(target) {
          var iterator2 = iterOrNull(target);
          if (!iterator2)
            throw new Error("obliterator: target is not iterable nor a valid iterator.");
          return iterator2;
        };
        var iter$1 = iter$2;
        var take = function take2(iterable, n) {
          var l = arguments.length > 1 ? n : Infinity, array = l !== Infinity ? new Array(l) : [], step, i2 = 0;
          var iterator2 = iter$1(iterable);
          while (true) {
            if (i2 === l)
              return array;
            step = iterator2.next();
            if (step.done) {
              if (i2 !== n)
                array.length = i2;
              return array;
            }
            array[i2++] = step.value;
          }
        };
        var GraphError = /* @__PURE__ */ function(_Error) {
          _inheritsLoose2(GraphError2, _Error);
          function GraphError2(message) {
            var _this2;
            _this2 = _Error.call(this) || this;
            _this2.name = "GraphError";
            _this2.message = message;
            return _this2;
          }
          return GraphError2;
        }(/* @__PURE__ */ _wrapNativeSuper(Error));
        var InvalidArgumentsGraphError = /* @__PURE__ */ function(_GraphError) {
          _inheritsLoose2(InvalidArgumentsGraphError2, _GraphError);
          function InvalidArgumentsGraphError2(message) {
            var _this2;
            _this2 = _GraphError.call(this, message) || this;
            _this2.name = "InvalidArgumentsGraphError";
            if (typeof Error.captureStackTrace === "function")
              Error.captureStackTrace(_assertThisInitialized13(_this2), InvalidArgumentsGraphError2.prototype.constructor);
            return _this2;
          }
          return InvalidArgumentsGraphError2;
        }(GraphError);
        var NotFoundGraphError = /* @__PURE__ */ function(_GraphError2) {
          _inheritsLoose2(NotFoundGraphError2, _GraphError2);
          function NotFoundGraphError2(message) {
            var _this3;
            _this3 = _GraphError2.call(this, message) || this;
            _this3.name = "NotFoundGraphError";
            if (typeof Error.captureStackTrace === "function")
              Error.captureStackTrace(_assertThisInitialized13(_this3), NotFoundGraphError2.prototype.constructor);
            return _this3;
          }
          return NotFoundGraphError2;
        }(GraphError);
        var UsageGraphError = /* @__PURE__ */ function(_GraphError3) {
          _inheritsLoose2(UsageGraphError2, _GraphError3);
          function UsageGraphError2(message) {
            var _this4;
            _this4 = _GraphError3.call(this, message) || this;
            _this4.name = "UsageGraphError";
            if (typeof Error.captureStackTrace === "function")
              Error.captureStackTrace(_assertThisInitialized13(_this4), UsageGraphError2.prototype.constructor);
            return _this4;
          }
          return UsageGraphError2;
        }(GraphError);
        function MixedNodeData(key, attributes) {
          this.key = key;
          this.attributes = attributes;
          this.clear();
        }
        MixedNodeData.prototype.clear = function() {
          this.inDegree = 0;
          this.outDegree = 0;
          this.undirectedDegree = 0;
          this.undirectedLoops = 0;
          this.directedLoops = 0;
          this["in"] = {};
          this.out = {};
          this.undirected = {};
        };
        function DirectedNodeData(key, attributes) {
          this.key = key;
          this.attributes = attributes;
          this.clear();
        }
        DirectedNodeData.prototype.clear = function() {
          this.inDegree = 0;
          this.outDegree = 0;
          this.directedLoops = 0;
          this["in"] = {};
          this.out = {};
        };
        function UndirectedNodeData(key, attributes) {
          this.key = key;
          this.attributes = attributes;
          this.clear();
        }
        UndirectedNodeData.prototype.clear = function() {
          this.undirectedDegree = 0;
          this.undirectedLoops = 0;
          this.undirected = {};
        };
        function EdgeData(undirected, key, source, target, attributes) {
          this.key = key;
          this.attributes = attributes;
          this.undirected = undirected;
          this.source = source;
          this.target = target;
        }
        EdgeData.prototype.attach = function() {
          var outKey = "out";
          var inKey = "in";
          if (this.undirected)
            outKey = inKey = "undirected";
          var source = this.source.key;
          var target = this.target.key;
          this.source[outKey][target] = this;
          if (this.undirected && source === target)
            return;
          this.target[inKey][source] = this;
        };
        EdgeData.prototype.attachMulti = function() {
          var outKey = "out";
          var inKey = "in";
          var source = this.source.key;
          var target = this.target.key;
          if (this.undirected)
            outKey = inKey = "undirected";
          var adj = this.source[outKey];
          var head = adj[target];
          if (typeof head === "undefined") {
            adj[target] = this;
            if (!(this.undirected && source === target)) {
              this.target[inKey][source] = this;
            }
            return;
          }
          head.previous = this;
          this.next = head;
          adj[target] = this;
          this.target[inKey][source] = this;
        };
        EdgeData.prototype.detach = function() {
          var source = this.source.key;
          var target = this.target.key;
          var outKey = "out";
          var inKey = "in";
          if (this.undirected)
            outKey = inKey = "undirected";
          delete this.source[outKey][target];
          delete this.target[inKey][source];
        };
        EdgeData.prototype.detachMulti = function() {
          var source = this.source.key;
          var target = this.target.key;
          var outKey = "out";
          var inKey = "in";
          if (this.undirected)
            outKey = inKey = "undirected";
          if (this.previous === void 0) {
            if (this.next === void 0) {
              delete this.source[outKey][target];
              delete this.target[inKey][source];
            } else {
              this.next.previous = void 0;
              this.source[outKey][target] = this.next;
              this.target[inKey][source] = this.next;
            }
          } else {
            this.previous.next = this.next;
            if (this.next !== void 0) {
              this.next.previous = this.previous;
            }
          }
        };
        var NODE = 0;
        var SOURCE = 1;
        var TARGET = 2;
        var OPPOSITE = 3;
        function findRelevantNodeData(graph2, method, mode, nodeOrEdge, nameOrEdge, add1, add2) {
          var nodeData, edgeData, arg1, arg2;
          nodeOrEdge = "" + nodeOrEdge;
          if (mode === NODE) {
            nodeData = graph2._nodes.get(nodeOrEdge);
            if (!nodeData)
              throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(nodeOrEdge, '" node in the graph.'));
            arg1 = nameOrEdge;
            arg2 = add1;
          } else if (mode === OPPOSITE) {
            nameOrEdge = "" + nameOrEdge;
            edgeData = graph2._edges.get(nameOrEdge);
            if (!edgeData)
              throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(nameOrEdge, '" edge in the graph.'));
            var source = edgeData.source.key;
            var target = edgeData.target.key;
            if (nodeOrEdge === source) {
              nodeData = edgeData.target;
            } else if (nodeOrEdge === target) {
              nodeData = edgeData.source;
            } else {
              throw new NotFoundGraphError("Graph.".concat(method, ': the "').concat(nodeOrEdge, '" node is not attached to the "').concat(nameOrEdge, '" edge (').concat(source, ", ").concat(target, ")."));
            }
            arg1 = add1;
            arg2 = add2;
          } else {
            edgeData = graph2._edges.get(nodeOrEdge);
            if (!edgeData)
              throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(nodeOrEdge, '" edge in the graph.'));
            if (mode === SOURCE) {
              nodeData = edgeData.source;
            } else {
              nodeData = edgeData.target;
            }
            arg1 = nameOrEdge;
            arg2 = add1;
          }
          return [nodeData, arg1, arg2];
        }
        function attachNodeAttributeGetter(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData[0], name = _findRelevantNodeData[1];
            return data.attributes[name];
          };
        }
        function attachNodeAttributesGetter(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge) {
            var _findRelevantNodeData2 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge), data = _findRelevantNodeData2[0];
            return data.attributes;
          };
        }
        function attachNodeAttributeChecker(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData3 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData3[0], name = _findRelevantNodeData3[1];
            return data.attributes.hasOwnProperty(name);
          };
        }
        function attachNodeAttributeSetter(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1, add2) {
            var _findRelevantNodeData4 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1, add2), data = _findRelevantNodeData4[0], name = _findRelevantNodeData4[1], value = _findRelevantNodeData4[2];
            data.attributes[name] = value;
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "set",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachNodeAttributeUpdater(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1, add2) {
            var _findRelevantNodeData5 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1, add2), data = _findRelevantNodeData5[0], name = _findRelevantNodeData5[1], updater = _findRelevantNodeData5[2];
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": updater should be a function."));
            var attributes = data.attributes;
            var value = updater(attributes[name]);
            attributes[name] = value;
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "set",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachNodeAttributeRemover(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData6 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData6[0], name = _findRelevantNodeData6[1];
            delete data.attributes[name];
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "remove",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachNodeAttributesReplacer(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData7 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData7[0], attributes = _findRelevantNodeData7[1];
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided attributes are not a plain object."));
            data.attributes = attributes;
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "replace",
              attributes: data.attributes
            });
            return this;
          };
        }
        function attachNodeAttributesMerger(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData8 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData8[0], attributes = _findRelevantNodeData8[1];
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided attributes are not a plain object."));
            assign(data.attributes, attributes);
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "merge",
              attributes: data.attributes,
              data: attributes
            });
            return this;
          };
        }
        function attachNodeAttributesUpdater(Class, method, mode) {
          Class.prototype[method] = function(nodeOrEdge, nameOrEdge, add1) {
            var _findRelevantNodeData9 = findRelevantNodeData(this, method, mode, nodeOrEdge, nameOrEdge, add1), data = _findRelevantNodeData9[0], updater = _findRelevantNodeData9[1];
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided updater is not a function."));
            data.attributes = updater(data.attributes);
            this.emit("nodeAttributesUpdated", {
              key: data.key,
              type: "update",
              attributes: data.attributes
            });
            return this;
          };
        }
        var NODE_ATTRIBUTES_METHODS = [{
          name: function name(element) {
            return "get".concat(element, "Attribute");
          },
          attacher: attachNodeAttributeGetter
        }, {
          name: function name(element) {
            return "get".concat(element, "Attributes");
          },
          attacher: attachNodeAttributesGetter
        }, {
          name: function name(element) {
            return "has".concat(element, "Attribute");
          },
          attacher: attachNodeAttributeChecker
        }, {
          name: function name(element) {
            return "set".concat(element, "Attribute");
          },
          attacher: attachNodeAttributeSetter
        }, {
          name: function name(element) {
            return "update".concat(element, "Attribute");
          },
          attacher: attachNodeAttributeUpdater
        }, {
          name: function name(element) {
            return "remove".concat(element, "Attribute");
          },
          attacher: attachNodeAttributeRemover
        }, {
          name: function name(element) {
            return "replace".concat(element, "Attributes");
          },
          attacher: attachNodeAttributesReplacer
        }, {
          name: function name(element) {
            return "merge".concat(element, "Attributes");
          },
          attacher: attachNodeAttributesMerger
        }, {
          name: function name(element) {
            return "update".concat(element, "Attributes");
          },
          attacher: attachNodeAttributesUpdater
        }];
        function attachNodeAttributesMethods(Graph3) {
          NODE_ATTRIBUTES_METHODS.forEach(function(_ref) {
            var name = _ref.name, attacher = _ref.attacher;
            attacher(Graph3, name("Node"), NODE);
            attacher(Graph3, name("Source"), SOURCE);
            attacher(Graph3, name("Target"), TARGET);
            attacher(Graph3, name("Opposite"), OPPOSITE);
          });
        }
        function attachEdgeAttributeGetter(Class, method, type) {
          Class.prototype[method] = function(element, name) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element;
              var target = "" + name;
              name = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            return data.attributes[name];
          };
        }
        function attachEdgeAttributesGetter(Class, method, type) {
          Class.prototype[method] = function(element) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 1) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element, target = "" + arguments[1];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            return data.attributes;
          };
        }
        function attachEdgeAttributeChecker(Class, method, type) {
          Class.prototype[method] = function(element, name) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element;
              var target = "" + name;
              name = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            return data.attributes.hasOwnProperty(name);
          };
        }
        function attachEdgeAttributeSetter(Class, method, type) {
          Class.prototype[method] = function(element, name, value) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 3) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element;
              var target = "" + name;
              name = arguments[2];
              value = arguments[3];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            data.attributes[name] = value;
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "set",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachEdgeAttributeUpdater(Class, method, type) {
          Class.prototype[method] = function(element, name, updater) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 3) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element;
              var target = "" + name;
              name = arguments[2];
              updater = arguments[3];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": updater should be a function."));
            data.attributes[name] = updater(data.attributes[name]);
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "set",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachEdgeAttributeRemover(Class, method, type) {
          Class.prototype[method] = function(element, name) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element;
              var target = "" + name;
              name = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            delete data.attributes[name];
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "remove",
              attributes: data.attributes,
              name
            });
            return this;
          };
        }
        function attachEdgeAttributesReplacer(Class, method, type) {
          Class.prototype[method] = function(element, attributes) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element, target = "" + attributes;
              attributes = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided attributes are not a plain object."));
            data.attributes = attributes;
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "replace",
              attributes: data.attributes
            });
            return this;
          };
        }
        function attachEdgeAttributesMerger(Class, method, type) {
          Class.prototype[method] = function(element, attributes) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element, target = "" + attributes;
              attributes = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided attributes are not a plain object."));
            assign(data.attributes, attributes);
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "merge",
              attributes: data.attributes,
              data: attributes
            });
            return this;
          };
        }
        function attachEdgeAttributesUpdater(Class, method, type) {
          Class.prototype[method] = function(element, updater) {
            var data;
            if (this.type !== "mixed" && type !== "mixed" && type !== this.type)
              throw new UsageGraphError("Graph.".concat(method, ": cannot find this type of edges in your ").concat(this.type, " graph."));
            if (arguments.length > 2) {
              if (this.multi)
                throw new UsageGraphError("Graph.".concat(method, ": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));
              var source = "" + element, target = "" + updater;
              updater = arguments[2];
              data = getMatchingEdge(this, source, target, type);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find an edge for the given path ("').concat(source, '" - "').concat(target, '").'));
            } else {
              if (type !== "mixed")
                throw new UsageGraphError("Graph.".concat(method, ": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));
              element = "" + element;
              data = this._edges.get(element);
              if (!data)
                throw new NotFoundGraphError("Graph.".concat(method, ': could not find the "').concat(element, '" edge in the graph.'));
            }
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.".concat(method, ": provided updater is not a function."));
            data.attributes = updater(data.attributes);
            this.emit("edgeAttributesUpdated", {
              key: data.key,
              type: "update",
              attributes: data.attributes
            });
            return this;
          };
        }
        var EDGE_ATTRIBUTES_METHODS = [{
          name: function name(element) {
            return "get".concat(element, "Attribute");
          },
          attacher: attachEdgeAttributeGetter
        }, {
          name: function name(element) {
            return "get".concat(element, "Attributes");
          },
          attacher: attachEdgeAttributesGetter
        }, {
          name: function name(element) {
            return "has".concat(element, "Attribute");
          },
          attacher: attachEdgeAttributeChecker
        }, {
          name: function name(element) {
            return "set".concat(element, "Attribute");
          },
          attacher: attachEdgeAttributeSetter
        }, {
          name: function name(element) {
            return "update".concat(element, "Attribute");
          },
          attacher: attachEdgeAttributeUpdater
        }, {
          name: function name(element) {
            return "remove".concat(element, "Attribute");
          },
          attacher: attachEdgeAttributeRemover
        }, {
          name: function name(element) {
            return "replace".concat(element, "Attributes");
          },
          attacher: attachEdgeAttributesReplacer
        }, {
          name: function name(element) {
            return "merge".concat(element, "Attributes");
          },
          attacher: attachEdgeAttributesMerger
        }, {
          name: function name(element) {
            return "update".concat(element, "Attributes");
          },
          attacher: attachEdgeAttributesUpdater
        }];
        function attachEdgeAttributesMethods(Graph3) {
          EDGE_ATTRIBUTES_METHODS.forEach(function(_ref) {
            var name = _ref.name, attacher = _ref.attacher;
            attacher(Graph3, name("Edge"), "mixed");
            attacher(Graph3, name("DirectedEdge"), "directed");
            attacher(Graph3, name("UndirectedEdge"), "undirected");
          });
        }
        var Iterator = iterator;
        var iter = iter$2;
        var chain = function chain2() {
          var iterables = arguments;
          var current = null;
          var i2 = -1;
          return new Iterator(function next() {
            var step = null;
            do {
              if (current === null) {
                i2++;
                if (i2 >= iterables.length)
                  return {
                    done: true
                  };
                current = iter(iterables[i2]);
              }
              step = current.next();
              if (step.done === true) {
                current = null;
                continue;
              }
              break;
            } while (true);
            return step;
          });
        };
        var EDGES_ITERATION = [{
          name: "edges",
          type: "mixed"
        }, {
          name: "inEdges",
          type: "directed",
          direction: "in"
        }, {
          name: "outEdges",
          type: "directed",
          direction: "out"
        }, {
          name: "inboundEdges",
          type: "mixed",
          direction: "in"
        }, {
          name: "outboundEdges",
          type: "mixed",
          direction: "out"
        }, {
          name: "directedEdges",
          type: "directed"
        }, {
          name: "undirectedEdges",
          type: "undirected"
        }];
        function forEachSimple(breakable, object, callback, avoid) {
          var shouldBreak = false;
          for (var k in object) {
            if (k === avoid)
              continue;
            var edgeData = object[k];
            shouldBreak = callback(edgeData.key, edgeData.attributes, edgeData.source.key, edgeData.target.key, edgeData.source.attributes, edgeData.target.attributes, edgeData.undirected);
            if (breakable && shouldBreak)
              return edgeData.key;
          }
          return;
        }
        function forEachMulti(breakable, object, callback, avoid) {
          var edgeData, source, target;
          var shouldBreak = false;
          for (var k in object) {
            if (k === avoid)
              continue;
            edgeData = object[k];
            do {
              source = edgeData.source;
              target = edgeData.target;
              shouldBreak = callback(edgeData.key, edgeData.attributes, source.key, target.key, source.attributes, target.attributes, edgeData.undirected);
              if (breakable && shouldBreak)
                return edgeData.key;
              edgeData = edgeData.next;
            } while (edgeData !== void 0);
          }
          return;
        }
        function createIterator(object, avoid) {
          var keys = Object.keys(object);
          var l = keys.length;
          var edgeData;
          var i2 = 0;
          return new iterator(function next() {
            do {
              if (!edgeData) {
                if (i2 >= l)
                  return {
                    done: true
                  };
                var k = keys[i2++];
                if (k === avoid) {
                  edgeData = void 0;
                  continue;
                }
                edgeData = object[k];
              } else {
                edgeData = edgeData.next;
              }
            } while (!edgeData);
            return {
              done: false,
              value: {
                edge: edgeData.key,
                attributes: edgeData.attributes,
                source: edgeData.source.key,
                target: edgeData.target.key,
                sourceAttributes: edgeData.source.attributes,
                targetAttributes: edgeData.target.attributes,
                undirected: edgeData.undirected
              }
            };
          });
        }
        function forEachForKeySimple(breakable, object, k, callback) {
          var edgeData = object[k];
          if (!edgeData)
            return;
          var sourceData = edgeData.source;
          var targetData = edgeData.target;
          if (callback(edgeData.key, edgeData.attributes, sourceData.key, targetData.key, sourceData.attributes, targetData.attributes, edgeData.undirected) && breakable)
            return edgeData.key;
        }
        function forEachForKeyMulti(breakable, object, k, callback) {
          var edgeData = object[k];
          if (!edgeData)
            return;
          var shouldBreak = false;
          do {
            shouldBreak = callback(edgeData.key, edgeData.attributes, edgeData.source.key, edgeData.target.key, edgeData.source.attributes, edgeData.target.attributes, edgeData.undirected);
            if (breakable && shouldBreak)
              return edgeData.key;
            edgeData = edgeData.next;
          } while (edgeData !== void 0);
          return;
        }
        function createIteratorForKey(object, k) {
          var edgeData = object[k];
          if (edgeData.next !== void 0) {
            return new iterator(function() {
              if (!edgeData)
                return {
                  done: true
                };
              var value = {
                edge: edgeData.key,
                attributes: edgeData.attributes,
                source: edgeData.source.key,
                target: edgeData.target.key,
                sourceAttributes: edgeData.source.attributes,
                targetAttributes: edgeData.target.attributes,
                undirected: edgeData.undirected
              };
              edgeData = edgeData.next;
              return {
                done: false,
                value
              };
            });
          }
          return iterator.of({
            edge: edgeData.key,
            attributes: edgeData.attributes,
            source: edgeData.source.key,
            target: edgeData.target.key,
            sourceAttributes: edgeData.source.attributes,
            targetAttributes: edgeData.target.attributes,
            undirected: edgeData.undirected
          });
        }
        function createEdgeArray(graph2, type) {
          if (graph2.size === 0)
            return [];
          if (type === "mixed" || type === graph2.type) {
            if (typeof Array.from === "function")
              return Array.from(graph2._edges.keys());
            return take(graph2._edges.keys(), graph2._edges.size);
          }
          var size = type === "undirected" ? graph2.undirectedSize : graph2.directedSize;
          var list = new Array(size), mask = type === "undirected";
          var iterator2 = graph2._edges.values();
          var i2 = 0;
          var step, data;
          while (step = iterator2.next(), step.done !== true) {
            data = step.value;
            if (data.undirected === mask)
              list[i2++] = data.key;
          }
          return list;
        }
        function forEachEdge(breakable, graph2, type, callback) {
          if (graph2.size === 0)
            return;
          var shouldFilter = type !== "mixed" && type !== graph2.type;
          var mask = type === "undirected";
          var step, data;
          var shouldBreak = false;
          var iterator2 = graph2._edges.values();
          while (step = iterator2.next(), step.done !== true) {
            data = step.value;
            if (shouldFilter && data.undirected !== mask)
              continue;
            var _data = data, key = _data.key, attributes = _data.attributes, source = _data.source, target = _data.target;
            shouldBreak = callback(key, attributes, source.key, target.key, source.attributes, target.attributes, data.undirected);
            if (breakable && shouldBreak)
              return key;
          }
          return;
        }
        function createEdgeIterator(graph2, type) {
          if (graph2.size === 0)
            return iterator.empty();
          var shouldFilter = type !== "mixed" && type !== graph2.type;
          var mask = type === "undirected";
          var iterator$1 = graph2._edges.values();
          return new iterator(function next() {
            var step, data;
            while (true) {
              step = iterator$1.next();
              if (step.done)
                return step;
              data = step.value;
              if (shouldFilter && data.undirected !== mask)
                continue;
              break;
            }
            var value = {
              edge: data.key,
              attributes: data.attributes,
              source: data.source.key,
              target: data.target.key,
              sourceAttributes: data.source.attributes,
              targetAttributes: data.target.attributes,
              undirected: data.undirected
            };
            return {
              value,
              done: false
            };
          });
        }
        function forEachEdgeForNode(breakable, multi, type, direction, nodeData, callback) {
          var fn = multi ? forEachMulti : forEachSimple;
          var found;
          if (type !== "undirected") {
            if (direction !== "out") {
              found = fn(breakable, nodeData["in"], callback);
              if (breakable && found)
                return found;
            }
            if (direction !== "in") {
              found = fn(breakable, nodeData.out, callback, !direction ? nodeData.key : void 0);
              if (breakable && found)
                return found;
            }
          }
          if (type !== "directed") {
            found = fn(breakable, nodeData.undirected, callback);
            if (breakable && found)
              return found;
          }
          return;
        }
        function createEdgeArrayForNode(multi, type, direction, nodeData) {
          var edges = [];
          forEachEdgeForNode(false, multi, type, direction, nodeData, function(key) {
            edges.push(key);
          });
          return edges;
        }
        function createEdgeIteratorForNode(type, direction, nodeData) {
          var iterator$1 = iterator.empty();
          if (type !== "undirected") {
            if (direction !== "out" && typeof nodeData["in"] !== "undefined")
              iterator$1 = chain(iterator$1, createIterator(nodeData["in"]));
            if (direction !== "in" && typeof nodeData.out !== "undefined")
              iterator$1 = chain(iterator$1, createIterator(nodeData.out, !direction ? nodeData.key : void 0));
          }
          if (type !== "directed" && typeof nodeData.undirected !== "undefined") {
            iterator$1 = chain(iterator$1, createIterator(nodeData.undirected));
          }
          return iterator$1;
        }
        function forEachEdgeForPath(breakable, type, multi, direction, sourceData, target, callback) {
          var fn = multi ? forEachForKeyMulti : forEachForKeySimple;
          var found;
          if (type !== "undirected") {
            if (typeof sourceData["in"] !== "undefined" && direction !== "out") {
              found = fn(breakable, sourceData["in"], target, callback);
              if (breakable && found)
                return found;
            }
            if (typeof sourceData.out !== "undefined" && direction !== "in" && (direction || sourceData.key !== target)) {
              found = fn(breakable, sourceData.out, target, callback);
              if (breakable && found)
                return found;
            }
          }
          if (type !== "directed") {
            if (typeof sourceData.undirected !== "undefined") {
              found = fn(breakable, sourceData.undirected, target, callback);
              if (breakable && found)
                return found;
            }
          }
          return;
        }
        function createEdgeArrayForPath(type, multi, direction, sourceData, target) {
          var edges = [];
          forEachEdgeForPath(false, type, multi, direction, sourceData, target, function(key) {
            edges.push(key);
          });
          return edges;
        }
        function createEdgeIteratorForPath(type, direction, sourceData, target) {
          var iterator$1 = iterator.empty();
          if (type !== "undirected") {
            if (typeof sourceData["in"] !== "undefined" && direction !== "out" && target in sourceData["in"])
              iterator$1 = chain(iterator$1, createIteratorForKey(sourceData["in"], target));
            if (typeof sourceData.out !== "undefined" && direction !== "in" && target in sourceData.out && (direction || sourceData.key !== target))
              iterator$1 = chain(iterator$1, createIteratorForKey(sourceData.out, target));
          }
          if (type !== "directed") {
            if (typeof sourceData.undirected !== "undefined" && target in sourceData.undirected)
              iterator$1 = chain(iterator$1, createIteratorForKey(sourceData.undirected, target));
          }
          return iterator$1;
        }
        function attachEdgeArrayCreator(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          Class.prototype[name] = function(source, target) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return [];
            if (!arguments.length)
              return createEdgeArray(this, type);
            if (arguments.length === 1) {
              source = "" + source;
              var nodeData = this._nodes.get(source);
              if (typeof nodeData === "undefined")
                throw new NotFoundGraphError("Graph.".concat(name, ': could not find the "').concat(source, '" node in the graph.'));
              return createEdgeArrayForNode(this.multi, type === "mixed" ? this.type : type, direction, nodeData);
            }
            if (arguments.length === 2) {
              source = "" + source;
              target = "" + target;
              var sourceData = this._nodes.get(source);
              if (!sourceData)
                throw new NotFoundGraphError("Graph.".concat(name, ':  could not find the "').concat(source, '" source node in the graph.'));
              if (!this._nodes.has(target))
                throw new NotFoundGraphError("Graph.".concat(name, ':  could not find the "').concat(target, '" target node in the graph.'));
              return createEdgeArrayForPath(type, this.multi, direction, sourceData, target);
            }
            throw new InvalidArgumentsGraphError("Graph.".concat(name, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
          };
        }
        function attachForEachEdge(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          var forEachName = "forEach" + name[0].toUpperCase() + name.slice(1, -1);
          Class.prototype[forEachName] = function(source, target, callback) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return;
            if (arguments.length === 1) {
              callback = source;
              return forEachEdge(false, this, type, callback);
            }
            if (arguments.length === 2) {
              source = "" + source;
              callback = target;
              var nodeData = this._nodes.get(source);
              if (typeof nodeData === "undefined")
                throw new NotFoundGraphError("Graph.".concat(forEachName, ': could not find the "').concat(source, '" node in the graph.'));
              return forEachEdgeForNode(false, this.multi, type === "mixed" ? this.type : type, direction, nodeData, callback);
            }
            if (arguments.length === 3) {
              source = "" + source;
              target = "" + target;
              var sourceData = this._nodes.get(source);
              if (!sourceData)
                throw new NotFoundGraphError("Graph.".concat(forEachName, ':  could not find the "').concat(source, '" source node in the graph.'));
              if (!this._nodes.has(target))
                throw new NotFoundGraphError("Graph.".concat(forEachName, ':  could not find the "').concat(target, '" target node in the graph.'));
              return forEachEdgeForPath(false, type, this.multi, direction, sourceData, target, callback);
            }
            throw new InvalidArgumentsGraphError("Graph.".concat(forEachName, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
          };
          var mapName = "map" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[mapName] = function() {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var result;
            if (args.length === 0) {
              var length = 0;
              if (type !== "directed")
                length += this.undirectedSize;
              if (type !== "undirected")
                length += this.directedSize;
              result = new Array(length);
              var i2 = 0;
              args.push(function(e, ea, s, t, sa, ta, u) {
                result[i2++] = callback(e, ea, s, t, sa, ta, u);
              });
            } else {
              result = [];
              args.push(function(e, ea, s, t, sa, ta, u) {
                result.push(callback(e, ea, s, t, sa, ta, u));
              });
            }
            this[forEachName].apply(this, args);
            return result;
          };
          var filterName = "filter" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[filterName] = function() {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var result = [];
            args.push(function(e, ea, s, t, sa, ta, u) {
              if (callback(e, ea, s, t, sa, ta, u))
                result.push(e);
            });
            this[forEachName].apply(this, args);
            return result;
          };
          var reduceName = "reduce" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[reduceName] = function() {
            var args = Array.prototype.slice.call(arguments);
            if (args.length < 2 || args.length > 4) {
              throw new InvalidArgumentsGraphError("Graph.".concat(reduceName, ": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(args.length, ")."));
            }
            if (typeof args[args.length - 1] === "function" && typeof args[args.length - 2] !== "function") {
              throw new InvalidArgumentsGraphError("Graph.".concat(reduceName, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
            }
            var callback;
            var initialValue;
            if (args.length === 2) {
              callback = args[0];
              initialValue = args[1];
              args = [];
            } else if (args.length === 3) {
              callback = args[1];
              initialValue = args[2];
              args = [args[0]];
            } else if (args.length === 4) {
              callback = args[2];
              initialValue = args[3];
              args = [args[0], args[1]];
            }
            var accumulator = initialValue;
            args.push(function(e, ea, s, t, sa, ta, u) {
              accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);
            });
            this[forEachName].apply(this, args);
            return accumulator;
          };
        }
        function attachFindEdge(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          var findEdgeName = "find" + name[0].toUpperCase() + name.slice(1, -1);
          Class.prototype[findEdgeName] = function(source, target, callback) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return false;
            if (arguments.length === 1) {
              callback = source;
              return forEachEdge(true, this, type, callback);
            }
            if (arguments.length === 2) {
              source = "" + source;
              callback = target;
              var nodeData = this._nodes.get(source);
              if (typeof nodeData === "undefined")
                throw new NotFoundGraphError("Graph.".concat(findEdgeName, ': could not find the "').concat(source, '" node in the graph.'));
              return forEachEdgeForNode(true, this.multi, type === "mixed" ? this.type : type, direction, nodeData, callback);
            }
            if (arguments.length === 3) {
              source = "" + source;
              target = "" + target;
              var sourceData = this._nodes.get(source);
              if (!sourceData)
                throw new NotFoundGraphError("Graph.".concat(findEdgeName, ':  could not find the "').concat(source, '" source node in the graph.'));
              if (!this._nodes.has(target))
                throw new NotFoundGraphError("Graph.".concat(findEdgeName, ':  could not find the "').concat(target, '" target node in the graph.'));
              return forEachEdgeForPath(true, type, this.multi, direction, sourceData, target, callback);
            }
            throw new InvalidArgumentsGraphError("Graph.".concat(findEdgeName, ": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length, ")."));
          };
          var someName = "some" + name[0].toUpperCase() + name.slice(1, -1);
          Class.prototype[someName] = function() {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            args.push(function(e, ea, s, t, sa, ta, u) {
              return callback(e, ea, s, t, sa, ta, u);
            });
            var found = this[findEdgeName].apply(this, args);
            if (found)
              return true;
            return false;
          };
          var everyName = "every" + name[0].toUpperCase() + name.slice(1, -1);
          Class.prototype[everyName] = function() {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            args.push(function(e, ea, s, t, sa, ta, u) {
              return !callback(e, ea, s, t, sa, ta, u);
            });
            var found = this[findEdgeName].apply(this, args);
            if (found)
              return false;
            return true;
          };
        }
        function attachEdgeIteratorCreator(Class, description) {
          var originalName = description.name, type = description.type, direction = description.direction;
          var name = originalName.slice(0, -1) + "Entries";
          Class.prototype[name] = function(source, target) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return iterator.empty();
            if (!arguments.length)
              return createEdgeIterator(this, type);
            if (arguments.length === 1) {
              source = "" + source;
              var sourceData = this._nodes.get(source);
              if (!sourceData)
                throw new NotFoundGraphError("Graph.".concat(name, ': could not find the "').concat(source, '" node in the graph.'));
              return createEdgeIteratorForNode(type, direction, sourceData);
            }
            if (arguments.length === 2) {
              source = "" + source;
              target = "" + target;
              var _sourceData = this._nodes.get(source);
              if (!_sourceData)
                throw new NotFoundGraphError("Graph.".concat(name, ':  could not find the "').concat(source, '" source node in the graph.'));
              if (!this._nodes.has(target))
                throw new NotFoundGraphError("Graph.".concat(name, ':  could not find the "').concat(target, '" target node in the graph.'));
              return createEdgeIteratorForPath(type, direction, _sourceData, target);
            }
            throw new InvalidArgumentsGraphError("Graph.".concat(name, ": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length, ")."));
          };
        }
        function attachEdgeIterationMethods(Graph3) {
          EDGES_ITERATION.forEach(function(description) {
            attachEdgeArrayCreator(Graph3, description);
            attachForEachEdge(Graph3, description);
            attachFindEdge(Graph3, description);
            attachEdgeIteratorCreator(Graph3, description);
          });
        }
        var NEIGHBORS_ITERATION = [{
          name: "neighbors",
          type: "mixed"
        }, {
          name: "inNeighbors",
          type: "directed",
          direction: "in"
        }, {
          name: "outNeighbors",
          type: "directed",
          direction: "out"
        }, {
          name: "inboundNeighbors",
          type: "mixed",
          direction: "in"
        }, {
          name: "outboundNeighbors",
          type: "mixed",
          direction: "out"
        }, {
          name: "directedNeighbors",
          type: "directed"
        }, {
          name: "undirectedNeighbors",
          type: "undirected"
        }];
        function CompositeSetWrapper() {
          this.A = null;
          this.B = null;
        }
        CompositeSetWrapper.prototype.wrap = function(set) {
          if (this.A === null)
            this.A = set;
          else if (this.B === null)
            this.B = set;
        };
        CompositeSetWrapper.prototype.has = function(key) {
          if (this.A !== null && key in this.A)
            return true;
          if (this.B !== null && key in this.B)
            return true;
          return false;
        };
        function forEachInObjectOnce(breakable, visited, nodeData, object, callback) {
          for (var k in object) {
            var edgeData = object[k];
            var sourceData = edgeData.source;
            var targetData = edgeData.target;
            var neighborData = sourceData === nodeData ? targetData : sourceData;
            if (visited && visited.has(neighborData.key))
              continue;
            var shouldBreak = callback(neighborData.key, neighborData.attributes);
            if (breakable && shouldBreak)
              return neighborData.key;
          }
          return;
        }
        function forEachNeighbor(breakable, type, direction, nodeData, callback) {
          if (type !== "mixed") {
            if (type === "undirected")
              return forEachInObjectOnce(breakable, null, nodeData, nodeData.undirected, callback);
            if (typeof direction === "string")
              return forEachInObjectOnce(breakable, null, nodeData, nodeData[direction], callback);
          }
          var visited = new CompositeSetWrapper();
          var found;
          if (type !== "undirected") {
            if (direction !== "out") {
              found = forEachInObjectOnce(breakable, null, nodeData, nodeData["in"], callback);
              if (breakable && found)
                return found;
              visited.wrap(nodeData["in"]);
            }
            if (direction !== "in") {
              found = forEachInObjectOnce(breakable, visited, nodeData, nodeData.out, callback);
              if (breakable && found)
                return found;
              visited.wrap(nodeData.out);
            }
          }
          if (type !== "directed") {
            found = forEachInObjectOnce(breakable, visited, nodeData, nodeData.undirected, callback);
            if (breakable && found)
              return found;
          }
          return;
        }
        function createNeighborArrayForNode(type, direction, nodeData) {
          if (type !== "mixed") {
            if (type === "undirected")
              return Object.keys(nodeData.undirected);
            if (typeof direction === "string")
              return Object.keys(nodeData[direction]);
          }
          var neighbors = [];
          forEachNeighbor(false, type, direction, nodeData, function(key) {
            neighbors.push(key);
          });
          return neighbors;
        }
        function createDedupedObjectIterator(visited, nodeData, object) {
          var keys = Object.keys(object);
          var l = keys.length;
          var i2 = 0;
          return new iterator(function next() {
            var neighborData = null;
            do {
              if (i2 >= l) {
                if (visited)
                  visited.wrap(object);
                return {
                  done: true
                };
              }
              var edgeData = object[keys[i2++]];
              var sourceData = edgeData.source;
              var targetData = edgeData.target;
              neighborData = sourceData === nodeData ? targetData : sourceData;
              if (visited && visited.has(neighborData.key)) {
                neighborData = null;
                continue;
              }
            } while (neighborData === null);
            return {
              done: false,
              value: {
                neighbor: neighborData.key,
                attributes: neighborData.attributes
              }
            };
          });
        }
        function createNeighborIterator(type, direction, nodeData) {
          if (type !== "mixed") {
            if (type === "undirected")
              return createDedupedObjectIterator(null, nodeData, nodeData.undirected);
            if (typeof direction === "string")
              return createDedupedObjectIterator(null, nodeData, nodeData[direction]);
          }
          var iterator$1 = iterator.empty();
          var visited = new CompositeSetWrapper();
          if (type !== "undirected") {
            if (direction !== "out") {
              iterator$1 = chain(iterator$1, createDedupedObjectIterator(visited, nodeData, nodeData["in"]));
            }
            if (direction !== "in") {
              iterator$1 = chain(iterator$1, createDedupedObjectIterator(visited, nodeData, nodeData.out));
            }
          }
          if (type !== "directed") {
            iterator$1 = chain(iterator$1, createDedupedObjectIterator(visited, nodeData, nodeData.undirected));
          }
          return iterator$1;
        }
        function attachNeighborArrayCreator(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          Class.prototype[name] = function(node) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return [];
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (typeof nodeData === "undefined")
              throw new NotFoundGraphError("Graph.".concat(name, ': could not find the "').concat(node, '" node in the graph.'));
            return createNeighborArrayForNode(type === "mixed" ? this.type : type, direction, nodeData);
          };
        }
        function attachForEachNeighbor(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          var forEachName = "forEach" + name[0].toUpperCase() + name.slice(1, -1);
          Class.prototype[forEachName] = function(node, callback) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return;
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (typeof nodeData === "undefined")
              throw new NotFoundGraphError("Graph.".concat(forEachName, ': could not find the "').concat(node, '" node in the graph.'));
            forEachNeighbor(false, type === "mixed" ? this.type : type, direction, nodeData, callback);
          };
          var mapName = "map" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[mapName] = function(node, callback) {
            var result = [];
            this[forEachName](node, function(n, a) {
              result.push(callback(n, a));
            });
            return result;
          };
          var filterName = "filter" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[filterName] = function(node, callback) {
            var result = [];
            this[forEachName](node, function(n, a) {
              if (callback(n, a))
                result.push(n);
            });
            return result;
          };
          var reduceName = "reduce" + name[0].toUpperCase() + name.slice(1);
          Class.prototype[reduceName] = function(node, callback, initialValue) {
            if (arguments.length < 3)
              throw new InvalidArgumentsGraphError("Graph.".concat(reduceName, ": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));
            var accumulator = initialValue;
            this[forEachName](node, function(n, a) {
              accumulator = callback(accumulator, n, a);
            });
            return accumulator;
          };
        }
        function attachFindNeighbor(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          var capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);
          var findName = "find" + capitalizedSingular;
          Class.prototype[findName] = function(node, callback) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return;
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (typeof nodeData === "undefined")
              throw new NotFoundGraphError("Graph.".concat(findName, ': could not find the "').concat(node, '" node in the graph.'));
            return forEachNeighbor(true, type === "mixed" ? this.type : type, direction, nodeData, callback);
          };
          var someName = "some" + capitalizedSingular;
          Class.prototype[someName] = function(node, callback) {
            var found = this[findName](node, callback);
            if (found)
              return true;
            return false;
          };
          var everyName = "every" + capitalizedSingular;
          Class.prototype[everyName] = function(node, callback) {
            var found = this[findName](node, function(n, a) {
              return !callback(n, a);
            });
            if (found)
              return false;
            return true;
          };
        }
        function attachNeighborIteratorCreator(Class, description) {
          var name = description.name, type = description.type, direction = description.direction;
          var iteratorName = name.slice(0, -1) + "Entries";
          Class.prototype[iteratorName] = function(node) {
            if (type !== "mixed" && this.type !== "mixed" && type !== this.type)
              return iterator.empty();
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (typeof nodeData === "undefined")
              throw new NotFoundGraphError("Graph.".concat(iteratorName, ': could not find the "').concat(node, '" node in the graph.'));
            return createNeighborIterator(type === "mixed" ? this.type : type, direction, nodeData);
          };
        }
        function attachNeighborIterationMethods(Graph3) {
          NEIGHBORS_ITERATION.forEach(function(description) {
            attachNeighborArrayCreator(Graph3, description);
            attachForEachNeighbor(Graph3, description);
            attachFindNeighbor(Graph3, description);
            attachNeighborIteratorCreator(Graph3, description);
          });
        }
        function forEachAdjacency(breakable, assymetric, disconnectedNodes, graph2, callback) {
          var iterator2 = graph2._nodes.values();
          var type = graph2.type;
          var step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;
          while (step = iterator2.next(), step.done !== true) {
            var hasEdges = false;
            sourceData = step.value;
            if (type !== "undirected") {
              adj = sourceData.out;
              for (neighbor in adj) {
                edgeData = adj[neighbor];
                do {
                  targetData = edgeData.target;
                  hasEdges = true;
                  shouldBreak = callback(sourceData.key, targetData.key, sourceData.attributes, targetData.attributes, edgeData.key, edgeData.attributes, edgeData.undirected);
                  if (breakable && shouldBreak)
                    return edgeData;
                  edgeData = edgeData.next;
                } while (edgeData);
              }
            }
            if (type !== "directed") {
              adj = sourceData.undirected;
              for (neighbor in adj) {
                if (assymetric && sourceData.key > neighbor)
                  continue;
                edgeData = adj[neighbor];
                do {
                  targetData = edgeData.target;
                  if (targetData.key !== neighbor)
                    targetData = edgeData.source;
                  hasEdges = true;
                  shouldBreak = callback(sourceData.key, targetData.key, sourceData.attributes, targetData.attributes, edgeData.key, edgeData.attributes, edgeData.undirected);
                  if (breakable && shouldBreak)
                    return edgeData;
                  edgeData = edgeData.next;
                } while (edgeData);
              }
            }
            if (disconnectedNodes && !hasEdges) {
              shouldBreak = callback(sourceData.key, null, sourceData.attributes, null, null, null, null);
              if (breakable && shouldBreak)
                return null;
            }
          }
          return;
        }
        function serializeNode(key, data) {
          var serialized = {
            key
          };
          if (!isEmpty(data.attributes))
            serialized.attributes = assign({}, data.attributes);
          return serialized;
        }
        function serializeEdge(type, key, data) {
          var serialized = {
            key,
            source: data.source.key,
            target: data.target.key
          };
          if (!isEmpty(data.attributes))
            serialized.attributes = assign({}, data.attributes);
          if (type === "mixed" && data.undirected)
            serialized.undirected = true;
          return serialized;
        }
        function validateSerializedNode(value) {
          if (!isPlainObject(value))
            throw new InvalidArgumentsGraphError('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');
          if (!("key" in value))
            throw new InvalidArgumentsGraphError("Graph.import: serialized node is missing its key.");
          if ("attributes" in value && (!isPlainObject(value.attributes) || value.attributes === null))
            throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
        }
        function validateSerializedEdge(value) {
          if (!isPlainObject(value))
            throw new InvalidArgumentsGraphError('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');
          if (!("source" in value))
            throw new InvalidArgumentsGraphError("Graph.import: serialized edge is missing its source.");
          if (!("target" in value))
            throw new InvalidArgumentsGraphError("Graph.import: serialized edge is missing its target.");
          if ("attributes" in value && (!isPlainObject(value.attributes) || value.attributes === null))
            throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
          if ("undirected" in value && typeof value.undirected !== "boolean")
            throw new InvalidArgumentsGraphError("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.");
        }
        var INSTANCE_ID = incrementalIdStartingFromRandomByte();
        var TYPES = /* @__PURE__ */ new Set(["directed", "undirected", "mixed"]);
        var EMITTER_PROPS = /* @__PURE__ */ new Set(["domain", "_events", "_eventsCount", "_maxListeners"]);
        var EDGE_ADD_METHODS = [{
          name: function name(verb) {
            return "".concat(verb, "Edge");
          },
          generateKey: true
        }, {
          name: function name(verb) {
            return "".concat(verb, "DirectedEdge");
          },
          generateKey: true,
          type: "directed"
        }, {
          name: function name(verb) {
            return "".concat(verb, "UndirectedEdge");
          },
          generateKey: true,
          type: "undirected"
        }, {
          name: function name(verb) {
            return "".concat(verb, "EdgeWithKey");
          }
        }, {
          name: function name(verb) {
            return "".concat(verb, "DirectedEdgeWithKey");
          },
          type: "directed"
        }, {
          name: function name(verb) {
            return "".concat(verb, "UndirectedEdgeWithKey");
          },
          type: "undirected"
        }];
        var DEFAULTS = {
          allowSelfLoops: true,
          multi: false,
          type: "mixed"
        };
        function _addNode(graph2, node, attributes) {
          if (attributes && !isPlainObject(attributes))
            throw new InvalidArgumentsGraphError('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(attributes, '"'));
          node = "" + node;
          attributes = attributes || {};
          if (graph2._nodes.has(node))
            throw new UsageGraphError('Graph.addNode: the "'.concat(node, '" node already exist in the graph.'));
          var data = new graph2.NodeDataClass(node, attributes);
          graph2._nodes.set(node, data);
          graph2.emit("nodeAdded", {
            key: node,
            attributes
          });
          return data;
        }
        function unsafeAddNode(graph2, node, attributes) {
          var data = new graph2.NodeDataClass(node, attributes);
          graph2._nodes.set(node, data);
          graph2.emit("nodeAdded", {
            key: node,
            attributes
          });
          return data;
        }
        function addEdge(graph2, name, mustGenerateKey, undirected, edge, source, target, attributes) {
          if (!undirected && graph2.type === "undirected")
            throw new UsageGraphError("Graph.".concat(name, ": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));
          if (undirected && graph2.type === "directed")
            throw new UsageGraphError("Graph.".concat(name, ": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));
          if (attributes && !isPlainObject(attributes))
            throw new InvalidArgumentsGraphError("Graph.".concat(name, ': invalid attributes. Expecting an object but got "').concat(attributes, '"'));
          source = "" + source;
          target = "" + target;
          attributes = attributes || {};
          if (!graph2.allowSelfLoops && source === target)
            throw new UsageGraphError("Graph.".concat(name, ': source & target are the same ("').concat(source, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
          var sourceData = graph2._nodes.get(source), targetData = graph2._nodes.get(target);
          if (!sourceData)
            throw new NotFoundGraphError("Graph.".concat(name, ': source node "').concat(source, '" not found.'));
          if (!targetData)
            throw new NotFoundGraphError("Graph.".concat(name, ': target node "').concat(target, '" not found.'));
          var eventData = {
            key: null,
            undirected,
            source,
            target,
            attributes
          };
          if (mustGenerateKey) {
            edge = graph2._edgeKeyGenerator();
          } else {
            edge = "" + edge;
            if (graph2._edges.has(edge))
              throw new UsageGraphError("Graph.".concat(name, ': the "').concat(edge, '" edge already exists in the graph.'));
          }
          if (!graph2.multi && (undirected ? typeof sourceData.undirected[target] !== "undefined" : typeof sourceData.out[target] !== "undefined")) {
            throw new UsageGraphError("Graph.".concat(name, ': an edge linking "').concat(source, '" to "').concat(target, `" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`));
          }
          var edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);
          graph2._edges.set(edge, edgeData);
          var isSelfLoop = source === target;
          if (undirected) {
            sourceData.undirectedDegree++;
            targetData.undirectedDegree++;
            if (isSelfLoop) {
              sourceData.undirectedLoops++;
              graph2._undirectedSelfLoopCount++;
            }
          } else {
            sourceData.outDegree++;
            targetData.inDegree++;
            if (isSelfLoop) {
              sourceData.directedLoops++;
              graph2._directedSelfLoopCount++;
            }
          }
          if (graph2.multi)
            edgeData.attachMulti();
          else
            edgeData.attach();
          if (undirected)
            graph2._undirectedSize++;
          else
            graph2._directedSize++;
          eventData.key = edge;
          graph2.emit("edgeAdded", eventData);
          return edge;
        }
        function mergeEdge(graph2, name, mustGenerateKey, undirected, edge, source, target, attributes, asUpdater) {
          if (!undirected && graph2.type === "undirected")
            throw new UsageGraphError("Graph.".concat(name, ": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));
          if (undirected && graph2.type === "directed")
            throw new UsageGraphError("Graph.".concat(name, ": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));
          if (attributes) {
            if (asUpdater) {
              if (typeof attributes !== "function")
                throw new InvalidArgumentsGraphError("Graph.".concat(name, ': invalid updater function. Expecting a function but got "').concat(attributes, '"'));
            } else {
              if (!isPlainObject(attributes))
                throw new InvalidArgumentsGraphError("Graph.".concat(name, ': invalid attributes. Expecting an object but got "').concat(attributes, '"'));
            }
          }
          source = "" + source;
          target = "" + target;
          var updater;
          if (asUpdater) {
            updater = attributes;
            attributes = void 0;
          }
          if (!graph2.allowSelfLoops && source === target)
            throw new UsageGraphError("Graph.".concat(name, ': source & target are the same ("').concat(source, `"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`));
          var sourceData = graph2._nodes.get(source);
          var targetData = graph2._nodes.get(target);
          var edgeData;
          var alreadyExistingEdgeData;
          if (!mustGenerateKey) {
            edgeData = graph2._edges.get(edge);
            if (edgeData) {
              if (edgeData.source.key !== source || edgeData.target.key !== target) {
                if (!undirected || edgeData.source.key !== target || edgeData.target.key !== source) {
                  throw new UsageGraphError("Graph.".concat(name, ': inconsistency detected when attempting to merge the "').concat(edge, '" edge with "').concat(source, '" source & "').concat(target, '" target vs. ("').concat(edgeData.source.key, '", "').concat(edgeData.target.key, '").'));
                }
              }
              alreadyExistingEdgeData = edgeData;
            }
          }
          if (!alreadyExistingEdgeData && !graph2.multi && sourceData) {
            alreadyExistingEdgeData = undirected ? sourceData.undirected[target] : sourceData.out[target];
          }
          if (alreadyExistingEdgeData) {
            var info = [alreadyExistingEdgeData.key, false, false, false];
            if (asUpdater ? !updater : !attributes)
              return info;
            if (asUpdater) {
              var oldAttributes = alreadyExistingEdgeData.attributes;
              alreadyExistingEdgeData.attributes = updater(oldAttributes);
              graph2.emit("edgeAttributesUpdated", {
                type: "replace",
                key: alreadyExistingEdgeData.key,
                attributes: alreadyExistingEdgeData.attributes
              });
            } else {
              assign(alreadyExistingEdgeData.attributes, attributes);
              graph2.emit("edgeAttributesUpdated", {
                type: "merge",
                key: alreadyExistingEdgeData.key,
                attributes: alreadyExistingEdgeData.attributes,
                data: attributes
              });
            }
            return info;
          }
          attributes = attributes || {};
          if (asUpdater && updater)
            attributes = updater(attributes);
          var eventData = {
            key: null,
            undirected,
            source,
            target,
            attributes
          };
          if (mustGenerateKey) {
            edge = graph2._edgeKeyGenerator();
          } else {
            edge = "" + edge;
            if (graph2._edges.has(edge))
              throw new UsageGraphError("Graph.".concat(name, ': the "').concat(edge, '" edge already exists in the graph.'));
          }
          var sourceWasAdded = false;
          var targetWasAdded = false;
          if (!sourceData) {
            sourceData = unsafeAddNode(graph2, source, {});
            sourceWasAdded = true;
            if (source === target) {
              targetData = sourceData;
              targetWasAdded = true;
            }
          }
          if (!targetData) {
            targetData = unsafeAddNode(graph2, target, {});
            targetWasAdded = true;
          }
          edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);
          graph2._edges.set(edge, edgeData);
          var isSelfLoop = source === target;
          if (undirected) {
            sourceData.undirectedDegree++;
            targetData.undirectedDegree++;
            if (isSelfLoop) {
              sourceData.undirectedLoops++;
              graph2._undirectedSelfLoopCount++;
            }
          } else {
            sourceData.outDegree++;
            targetData.inDegree++;
            if (isSelfLoop) {
              sourceData.directedLoops++;
              graph2._directedSelfLoopCount++;
            }
          }
          if (graph2.multi)
            edgeData.attachMulti();
          else
            edgeData.attach();
          if (undirected)
            graph2._undirectedSize++;
          else
            graph2._directedSize++;
          eventData.key = edge;
          graph2.emit("edgeAdded", eventData);
          return [edge, true, sourceWasAdded, targetWasAdded];
        }
        function dropEdgeFromData(graph2, edgeData) {
          graph2._edges["delete"](edgeData.key);
          var sourceData = edgeData.source, targetData = edgeData.target, attributes = edgeData.attributes;
          var undirected = edgeData.undirected;
          var isSelfLoop = sourceData === targetData;
          if (undirected) {
            sourceData.undirectedDegree--;
            targetData.undirectedDegree--;
            if (isSelfLoop) {
              sourceData.undirectedLoops--;
              graph2._undirectedSelfLoopCount--;
            }
          } else {
            sourceData.outDegree--;
            targetData.inDegree--;
            if (isSelfLoop) {
              sourceData.directedLoops--;
              graph2._directedSelfLoopCount--;
            }
          }
          if (graph2.multi)
            edgeData.detachMulti();
          else
            edgeData.detach();
          if (undirected)
            graph2._undirectedSize--;
          else
            graph2._directedSize--;
          graph2.emit("edgeDropped", {
            key: edgeData.key,
            attributes,
            source: sourceData.key,
            target: targetData.key,
            undirected
          });
        }
        var Graph2 = /* @__PURE__ */ function(_EventEmitter) {
          _inheritsLoose2(Graph3, _EventEmitter);
          function Graph3(options2) {
            var _this2;
            _this2 = _EventEmitter.call(this) || this;
            options2 = assign({}, DEFAULTS, options2);
            if (typeof options2.multi !== "boolean")
              throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "`.concat(options2.multi, '".'));
            if (!TYPES.has(options2.type))
              throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "`.concat(options2.type, '".'));
            if (typeof options2.allowSelfLoops !== "boolean")
              throw new InvalidArgumentsGraphError(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "`.concat(options2.allowSelfLoops, '".'));
            var NodeDataClass = options2.type === "mixed" ? MixedNodeData : options2.type === "directed" ? DirectedNodeData : UndirectedNodeData;
            privateProperty(_assertThisInitialized13(_this2), "NodeDataClass", NodeDataClass);
            var instancePrefix = "geid_" + INSTANCE_ID() + "_";
            var edgeId = 0;
            var edgeKeyGenerator = function edgeKeyGenerator2() {
              var availableEdgeKey;
              do {
                availableEdgeKey = instancePrefix + edgeId++;
              } while (_this2._edges.has(availableEdgeKey));
              return availableEdgeKey;
            };
            privateProperty(_assertThisInitialized13(_this2), "_attributes", {});
            privateProperty(_assertThisInitialized13(_this2), "_nodes", /* @__PURE__ */ new Map());
            privateProperty(_assertThisInitialized13(_this2), "_edges", /* @__PURE__ */ new Map());
            privateProperty(_assertThisInitialized13(_this2), "_directedSize", 0);
            privateProperty(_assertThisInitialized13(_this2), "_undirectedSize", 0);
            privateProperty(_assertThisInitialized13(_this2), "_directedSelfLoopCount", 0);
            privateProperty(_assertThisInitialized13(_this2), "_undirectedSelfLoopCount", 0);
            privateProperty(_assertThisInitialized13(_this2), "_edgeKeyGenerator", edgeKeyGenerator);
            privateProperty(_assertThisInitialized13(_this2), "_options", options2);
            EMITTER_PROPS.forEach(function(prop) {
              return privateProperty(_assertThisInitialized13(_this2), prop, _this2[prop]);
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "order", function() {
              return _this2._nodes.size;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "size", function() {
              return _this2._edges.size;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "directedSize", function() {
              return _this2._directedSize;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "undirectedSize", function() {
              return _this2._undirectedSize;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "selfLoopCount", function() {
              return _this2._directedSelfLoopCount + _this2._undirectedSelfLoopCount;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "directedSelfLoopCount", function() {
              return _this2._directedSelfLoopCount;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "undirectedSelfLoopCount", function() {
              return _this2._undirectedSelfLoopCount;
            });
            readOnlyProperty(_assertThisInitialized13(_this2), "multi", _this2._options.multi);
            readOnlyProperty(_assertThisInitialized13(_this2), "type", _this2._options.type);
            readOnlyProperty(_assertThisInitialized13(_this2), "allowSelfLoops", _this2._options.allowSelfLoops);
            readOnlyProperty(_assertThisInitialized13(_this2), "implementation", function() {
              return "graphology";
            });
            return _this2;
          }
          var _proto = Graph3.prototype;
          _proto._resetInstanceCounters = function _resetInstanceCounters() {
            this._directedSize = 0;
            this._undirectedSize = 0;
            this._directedSelfLoopCount = 0;
            this._undirectedSelfLoopCount = 0;
          };
          _proto.hasNode = function hasNode(node) {
            return this._nodes.has("" + node);
          };
          _proto.hasDirectedEdge = function hasDirectedEdge(source, target) {
            if (this.type === "undirected")
              return false;
            if (arguments.length === 1) {
              var edge = "" + source;
              var edgeData = this._edges.get(edge);
              return !!edgeData && !edgeData.undirected;
            } else if (arguments.length === 2) {
              source = "" + source;
              target = "" + target;
              var nodeData = this._nodes.get(source);
              if (!nodeData)
                return false;
              return nodeData.out.hasOwnProperty(target);
            }
            throw new InvalidArgumentsGraphError("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          };
          _proto.hasUndirectedEdge = function hasUndirectedEdge(source, target) {
            if (this.type === "directed")
              return false;
            if (arguments.length === 1) {
              var edge = "" + source;
              var edgeData = this._edges.get(edge);
              return !!edgeData && edgeData.undirected;
            } else if (arguments.length === 2) {
              source = "" + source;
              target = "" + target;
              var nodeData = this._nodes.get(source);
              if (!nodeData)
                return false;
              return nodeData.undirected.hasOwnProperty(target);
            }
            throw new InvalidArgumentsGraphError("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          };
          _proto.hasEdge = function hasEdge(source, target) {
            if (arguments.length === 1) {
              var edge = "" + source;
              return this._edges.has(edge);
            } else if (arguments.length === 2) {
              source = "" + source;
              target = "" + target;
              var nodeData = this._nodes.get(source);
              if (!nodeData)
                return false;
              return typeof nodeData.out !== "undefined" && nodeData.out.hasOwnProperty(target) || typeof nodeData.undirected !== "undefined" && nodeData.undirected.hasOwnProperty(target);
            }
            throw new InvalidArgumentsGraphError("Graph.hasEdge: invalid arity (".concat(arguments.length, ", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."));
          };
          _proto.directedEdge = function directedEdge(source, target) {
            if (this.type === "undirected")
              return;
            source = "" + source;
            target = "" + target;
            if (this.multi)
              throw new UsageGraphError("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");
            var sourceData = this._nodes.get(source);
            if (!sourceData)
              throw new NotFoundGraphError('Graph.directedEdge: could not find the "'.concat(source, '" source node in the graph.'));
            if (!this._nodes.has(target))
              throw new NotFoundGraphError('Graph.directedEdge: could not find the "'.concat(target, '" target node in the graph.'));
            var edgeData = sourceData.out && sourceData.out[target] || void 0;
            if (edgeData)
              return edgeData.key;
          };
          _proto.undirectedEdge = function undirectedEdge(source, target) {
            if (this.type === "directed")
              return;
            source = "" + source;
            target = "" + target;
            if (this.multi)
              throw new UsageGraphError("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");
            var sourceData = this._nodes.get(source);
            if (!sourceData)
              throw new NotFoundGraphError('Graph.undirectedEdge: could not find the "'.concat(source, '" source node in the graph.'));
            if (!this._nodes.has(target))
              throw new NotFoundGraphError('Graph.undirectedEdge: could not find the "'.concat(target, '" target node in the graph.'));
            var edgeData = sourceData.undirected && sourceData.undirected[target] || void 0;
            if (edgeData)
              return edgeData.key;
          };
          _proto.edge = function edge(source, target) {
            if (this.multi)
              throw new UsageGraphError("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");
            source = "" + source;
            target = "" + target;
            var sourceData = this._nodes.get(source);
            if (!sourceData)
              throw new NotFoundGraphError('Graph.edge: could not find the "'.concat(source, '" source node in the graph.'));
            if (!this._nodes.has(target))
              throw new NotFoundGraphError('Graph.edge: could not find the "'.concat(target, '" target node in the graph.'));
            var edgeData = sourceData.out && sourceData.out[target] || sourceData.undirected && sourceData.undirected[target] || void 0;
            if (edgeData)
              return edgeData.key;
          };
          _proto.areDirectedNeighbors = function areDirectedNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areDirectedNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return false;
            return neighbor in nodeData["in"] || neighbor in nodeData.out;
          };
          _proto.areOutNeighbors = function areOutNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areOutNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return false;
            return neighbor in nodeData.out;
          };
          _proto.areInNeighbors = function areInNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areInNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return false;
            return neighbor in nodeData["in"];
          };
          _proto.areUndirectedNeighbors = function areUndirectedNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areUndirectedNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "directed")
              return false;
            return neighbor in nodeData.undirected;
          };
          _proto.areNeighbors = function areNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type !== "undirected") {
              if (neighbor in nodeData["in"] || neighbor in nodeData.out)
                return true;
            }
            if (this.type !== "directed") {
              if (neighbor in nodeData.undirected)
                return true;
            }
            return false;
          };
          _proto.areInboundNeighbors = function areInboundNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areInboundNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type !== "undirected") {
              if (neighbor in nodeData["in"])
                return true;
            }
            if (this.type !== "directed") {
              if (neighbor in nodeData.undirected)
                return true;
            }
            return false;
          };
          _proto.areOutboundNeighbors = function areOutboundNeighbors(node, neighbor) {
            node = "" + node;
            neighbor = "" + neighbor;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.areOutboundNeighbors: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type !== "undirected") {
              if (neighbor in nodeData.out)
                return true;
            }
            if (this.type !== "directed") {
              if (neighbor in nodeData.undirected)
                return true;
            }
            return false;
          };
          _proto.inDegree = function inDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.inDegree: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.inDegree;
          };
          _proto.outDegree = function outDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.outDegree: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.outDegree;
          };
          _proto.directedDegree = function directedDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.directedDegree: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.inDegree + nodeData.outDegree;
          };
          _proto.undirectedDegree = function undirectedDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.undirectedDegree: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "directed")
              return 0;
            return nodeData.undirectedDegree;
          };
          _proto.inboundDegree = function inboundDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.inboundDegree: could not find the "'.concat(node, '" node in the graph.'));
            var degree = 0;
            if (this.type !== "directed") {
              degree += nodeData.undirectedDegree;
            }
            if (this.type !== "undirected") {
              degree += nodeData.inDegree;
            }
            return degree;
          };
          _proto.outboundDegree = function outboundDegree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.outboundDegree: could not find the "'.concat(node, '" node in the graph.'));
            var degree = 0;
            if (this.type !== "directed") {
              degree += nodeData.undirectedDegree;
            }
            if (this.type !== "undirected") {
              degree += nodeData.outDegree;
            }
            return degree;
          };
          _proto.degree = function degree(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.degree: could not find the "'.concat(node, '" node in the graph.'));
            var degree2 = 0;
            if (this.type !== "directed") {
              degree2 += nodeData.undirectedDegree;
            }
            if (this.type !== "undirected") {
              degree2 += nodeData.inDegree + nodeData.outDegree;
            }
            return degree2;
          };
          _proto.inDegreeWithoutSelfLoops = function inDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.inDegree - nodeData.directedLoops;
          };
          _proto.outDegreeWithoutSelfLoops = function outDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.outDegree - nodeData.directedLoops;
          };
          _proto.directedDegreeWithoutSelfLoops = function directedDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "undirected")
              return 0;
            return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;
          };
          _proto.undirectedDegreeWithoutSelfLoops = function undirectedDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            if (this.type === "directed")
              return 0;
            return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;
          };
          _proto.inboundDegreeWithoutSelfLoops = function inboundDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            var degree = 0;
            var loops = 0;
            if (this.type !== "directed") {
              degree += nodeData.undirectedDegree;
              loops += nodeData.undirectedLoops * 2;
            }
            if (this.type !== "undirected") {
              degree += nodeData.inDegree;
              loops += nodeData.directedLoops;
            }
            return degree - loops;
          };
          _proto.outboundDegreeWithoutSelfLoops = function outboundDegreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            var degree = 0;
            var loops = 0;
            if (this.type !== "directed") {
              degree += nodeData.undirectedDegree;
              loops += nodeData.undirectedLoops * 2;
            }
            if (this.type !== "undirected") {
              degree += nodeData.outDegree;
              loops += nodeData.directedLoops;
            }
            return degree - loops;
          };
          _proto.degreeWithoutSelfLoops = function degreeWithoutSelfLoops(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.degreeWithoutSelfLoops: could not find the "'.concat(node, '" node in the graph.'));
            var degree = 0;
            var loops = 0;
            if (this.type !== "directed") {
              degree += nodeData.undirectedDegree;
              loops += nodeData.undirectedLoops * 2;
            }
            if (this.type !== "undirected") {
              degree += nodeData.inDegree + nodeData.outDegree;
              loops += nodeData.directedLoops * 2;
            }
            return degree - loops;
          };
          _proto.source = function source(edge) {
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.source: could not find the "'.concat(edge, '" edge in the graph.'));
            return data.source.key;
          };
          _proto.target = function target(edge) {
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.target: could not find the "'.concat(edge, '" edge in the graph.'));
            return data.target.key;
          };
          _proto.extremities = function extremities(edge) {
            edge = "" + edge;
            var edgeData = this._edges.get(edge);
            if (!edgeData)
              throw new NotFoundGraphError('Graph.extremities: could not find the "'.concat(edge, '" edge in the graph.'));
            return [edgeData.source.key, edgeData.target.key];
          };
          _proto.opposite = function opposite(node, edge) {
            node = "" + node;
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.opposite: could not find the "'.concat(edge, '" edge in the graph.'));
            var source = data.source.key;
            var target = data.target.key;
            if (node === source)
              return target;
            if (node === target)
              return source;
            throw new NotFoundGraphError('Graph.opposite: the "'.concat(node, '" node is not attached to the "').concat(edge, '" edge (').concat(source, ", ").concat(target, ")."));
          };
          _proto.hasExtremity = function hasExtremity(edge, node) {
            edge = "" + edge;
            node = "" + node;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.hasExtremity: could not find the "'.concat(edge, '" edge in the graph.'));
            return data.source.key === node || data.target.key === node;
          };
          _proto.isUndirected = function isUndirected(edge) {
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.isUndirected: could not find the "'.concat(edge, '" edge in the graph.'));
            return data.undirected;
          };
          _proto.isDirected = function isDirected(edge) {
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.isDirected: could not find the "'.concat(edge, '" edge in the graph.'));
            return !data.undirected;
          };
          _proto.isSelfLoop = function isSelfLoop(edge) {
            edge = "" + edge;
            var data = this._edges.get(edge);
            if (!data)
              throw new NotFoundGraphError('Graph.isSelfLoop: could not find the "'.concat(edge, '" edge in the graph.'));
            return data.source === data.target;
          };
          _proto.addNode = function addNode(node, attributes) {
            var nodeData = _addNode(this, node, attributes);
            return nodeData.key;
          };
          _proto.mergeNode = function mergeNode(node, attributes) {
            if (attributes && !isPlainObject(attributes))
              throw new InvalidArgumentsGraphError('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(attributes, '"'));
            node = "" + node;
            attributes = attributes || {};
            var data = this._nodes.get(node);
            if (data) {
              if (attributes) {
                assign(data.attributes, attributes);
                this.emit("nodeAttributesUpdated", {
                  type: "merge",
                  key: node,
                  attributes: data.attributes,
                  data: attributes
                });
              }
              return [node, false];
            }
            data = new this.NodeDataClass(node, attributes);
            this._nodes.set(node, data);
            this.emit("nodeAdded", {
              key: node,
              attributes
            });
            return [node, true];
          };
          _proto.updateNode = function updateNode(node, updater) {
            if (updater && typeof updater !== "function")
              throw new InvalidArgumentsGraphError('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(updater, '"'));
            node = "" + node;
            var data = this._nodes.get(node);
            if (data) {
              if (updater) {
                var oldAttributes = data.attributes;
                data.attributes = updater(oldAttributes);
                this.emit("nodeAttributesUpdated", {
                  type: "replace",
                  key: node,
                  attributes: data.attributes
                });
              }
              return [node, false];
            }
            var attributes = updater ? updater({}) : {};
            data = new this.NodeDataClass(node, attributes);
            this._nodes.set(node, data);
            this.emit("nodeAdded", {
              key: node,
              attributes
            });
            return [node, true];
          };
          _proto.dropNode = function dropNode(node) {
            node = "" + node;
            var nodeData = this._nodes.get(node);
            if (!nodeData)
              throw new NotFoundGraphError('Graph.dropNode: could not find the "'.concat(node, '" node in the graph.'));
            var edgeData;
            if (this.type !== "undirected") {
              for (var neighbor in nodeData.out) {
                edgeData = nodeData.out[neighbor];
                do {
                  dropEdgeFromData(this, edgeData);
                  edgeData = edgeData.next;
                } while (edgeData);
              }
              for (var _neighbor in nodeData["in"]) {
                edgeData = nodeData["in"][_neighbor];
                do {
                  dropEdgeFromData(this, edgeData);
                  edgeData = edgeData.next;
                } while (edgeData);
              }
            }
            if (this.type !== "directed") {
              for (var _neighbor2 in nodeData.undirected) {
                edgeData = nodeData.undirected[_neighbor2];
                do {
                  dropEdgeFromData(this, edgeData);
                  edgeData = edgeData.next;
                } while (edgeData);
              }
            }
            this._nodes["delete"](node);
            this.emit("nodeDropped", {
              key: node,
              attributes: nodeData.attributes
            });
          };
          _proto.dropEdge = function dropEdge(edge) {
            var edgeData;
            if (arguments.length > 1) {
              var source = "" + arguments[0];
              var target = "" + arguments[1];
              edgeData = getMatchingEdge(this, source, target, this.type);
              if (!edgeData)
                throw new NotFoundGraphError('Graph.dropEdge: could not find the "'.concat(source, '" -> "').concat(target, '" edge in the graph.'));
            } else {
              edge = "" + edge;
              edgeData = this._edges.get(edge);
              if (!edgeData)
                throw new NotFoundGraphError('Graph.dropEdge: could not find the "'.concat(edge, '" edge in the graph.'));
            }
            dropEdgeFromData(this, edgeData);
            return this;
          };
          _proto.dropDirectedEdge = function dropDirectedEdge(source, target) {
            if (arguments.length < 2)
              throw new UsageGraphError("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
            if (this.multi)
              throw new UsageGraphError("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
            source = "" + source;
            target = "" + target;
            var edgeData = getMatchingEdge(this, source, target, "directed");
            if (!edgeData)
              throw new NotFoundGraphError('Graph.dropDirectedEdge: could not find a "'.concat(source, '" -> "').concat(target, '" edge in the graph.'));
            dropEdgeFromData(this, edgeData);
            return this;
          };
          _proto.dropUndirectedEdge = function dropUndirectedEdge(source, target) {
            if (arguments.length < 2)
              throw new UsageGraphError("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
            if (this.multi)
              throw new UsageGraphError("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
            var edgeData = getMatchingEdge(this, source, target, "undirected");
            if (!edgeData)
              throw new NotFoundGraphError('Graph.dropUndirectedEdge: could not find a "'.concat(source, '" -> "').concat(target, '" edge in the graph.'));
            dropEdgeFromData(this, edgeData);
            return this;
          };
          _proto.clear = function clear() {
            this._edges.clear();
            this._nodes.clear();
            this._resetInstanceCounters();
            this.emit("cleared");
          };
          _proto.clearEdges = function clearEdges() {
            var iterator2 = this._nodes.values();
            var step;
            while (step = iterator2.next(), step.done !== true) {
              step.value.clear();
            }
            this._edges.clear();
            this._resetInstanceCounters();
            this.emit("edgesCleared");
          };
          _proto.getAttribute = function getAttribute(name) {
            return this._attributes[name];
          };
          _proto.getAttributes = function getAttributes() {
            return this._attributes;
          };
          _proto.hasAttribute = function hasAttribute(name) {
            return this._attributes.hasOwnProperty(name);
          };
          _proto.setAttribute = function setAttribute(name, value) {
            this._attributes[name] = value;
            this.emit("attributesUpdated", {
              type: "set",
              attributes: this._attributes,
              name
            });
            return this;
          };
          _proto.updateAttribute = function updateAttribute(name, updater) {
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.updateAttribute: updater should be a function.");
            var value = this._attributes[name];
            this._attributes[name] = updater(value);
            this.emit("attributesUpdated", {
              type: "set",
              attributes: this._attributes,
              name
            });
            return this;
          };
          _proto.removeAttribute = function removeAttribute(name) {
            delete this._attributes[name];
            this.emit("attributesUpdated", {
              type: "remove",
              attributes: this._attributes,
              name
            });
            return this;
          };
          _proto.replaceAttributes = function replaceAttributes(attributes) {
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.replaceAttributes: provided attributes are not a plain object.");
            this._attributes = attributes;
            this.emit("attributesUpdated", {
              type: "replace",
              attributes: this._attributes
            });
            return this;
          };
          _proto.mergeAttributes = function mergeAttributes(attributes) {
            if (!isPlainObject(attributes))
              throw new InvalidArgumentsGraphError("Graph.mergeAttributes: provided attributes are not a plain object.");
            assign(this._attributes, attributes);
            this.emit("attributesUpdated", {
              type: "merge",
              attributes: this._attributes,
              data: attributes
            });
            return this;
          };
          _proto.updateAttributes = function updateAttributes(updater) {
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.updateAttributes: provided updater is not a function.");
            this._attributes = updater(this._attributes);
            this.emit("attributesUpdated", {
              type: "update",
              attributes: this._attributes
            });
            return this;
          };
          _proto.updateEachNodeAttributes = function updateEachNodeAttributes(updater, hints) {
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.updateEachNodeAttributes: expecting an updater function.");
            if (hints && !validateHints(hints))
              throw new InvalidArgumentsGraphError("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              nodeData.attributes = updater(nodeData.key, nodeData.attributes);
            }
            this.emit("eachNodeAttributesUpdated", {
              hints: hints ? hints : null
            });
          };
          _proto.updateEachEdgeAttributes = function updateEachEdgeAttributes(updater, hints) {
            if (typeof updater !== "function")
              throw new InvalidArgumentsGraphError("Graph.updateEachEdgeAttributes: expecting an updater function.");
            if (hints && !validateHints(hints))
              throw new InvalidArgumentsGraphError("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
            var iterator2 = this._edges.values();
            var step, edgeData, sourceData, targetData;
            while (step = iterator2.next(), step.done !== true) {
              edgeData = step.value;
              sourceData = edgeData.source;
              targetData = edgeData.target;
              edgeData.attributes = updater(edgeData.key, edgeData.attributes, sourceData.key, targetData.key, sourceData.attributes, targetData.attributes, edgeData.undirected);
            }
            this.emit("eachEdgeAttributesUpdated", {
              hints: hints ? hints : null
            });
          };
          _proto.forEachAdjacencyEntry = function forEachAdjacencyEntry(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.forEachAdjacencyEntry: expecting a callback.");
            forEachAdjacency(false, false, false, this, callback);
          };
          _proto.forEachAdjacencyEntryWithOrphans = function forEachAdjacencyEntryWithOrphans(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");
            forEachAdjacency(false, false, true, this, callback);
          };
          _proto.forEachAssymetricAdjacencyEntry = function forEachAssymetricAdjacencyEntry(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");
            forEachAdjacency(false, true, false, this, callback);
          };
          _proto.forEachAssymetricAdjacencyEntryWithOrphans = function forEachAssymetricAdjacencyEntryWithOrphans(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");
            forEachAdjacency(false, true, true, this, callback);
          };
          _proto.nodes = function nodes() {
            if (typeof Array.from === "function")
              return Array.from(this._nodes.keys());
            return take(this._nodes.keys(), this._nodes.size);
          };
          _proto.forEachNode = function forEachNode(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.forEachNode: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              callback(nodeData.key, nodeData.attributes);
            }
          };
          _proto.findNode = function findNode(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.findNode: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              if (callback(nodeData.key, nodeData.attributes))
                return nodeData.key;
            }
            return;
          };
          _proto.mapNodes = function mapNodes(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.mapNode: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            var result = new Array(this.order);
            var i2 = 0;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              result[i2++] = callback(nodeData.key, nodeData.attributes);
            }
            return result;
          };
          _proto.someNode = function someNode(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.someNode: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              if (callback(nodeData.key, nodeData.attributes))
                return true;
            }
            return false;
          };
          _proto.everyNode = function everyNode(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.everyNode: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              if (!callback(nodeData.key, nodeData.attributes))
                return false;
            }
            return true;
          };
          _proto.filterNodes = function filterNodes(callback) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.filterNodes: expecting a callback.");
            var iterator2 = this._nodes.values();
            var step, nodeData;
            var result = [];
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              if (callback(nodeData.key, nodeData.attributes))
                result.push(nodeData.key);
            }
            return result;
          };
          _proto.reduceNodes = function reduceNodes(callback, initialValue) {
            if (typeof callback !== "function")
              throw new InvalidArgumentsGraphError("Graph.reduceNodes: expecting a callback.");
            if (arguments.length < 2)
              throw new InvalidArgumentsGraphError("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");
            var accumulator = initialValue;
            var iterator2 = this._nodes.values();
            var step, nodeData;
            while (step = iterator2.next(), step.done !== true) {
              nodeData = step.value;
              accumulator = callback(accumulator, nodeData.key, nodeData.attributes);
            }
            return accumulator;
          };
          _proto.nodeEntries = function nodeEntries() {
            var iterator$1 = this._nodes.values();
            return new iterator(function() {
              var step = iterator$1.next();
              if (step.done)
                return step;
              var data = step.value;
              return {
                value: {
                  node: data.key,
                  attributes: data.attributes
                },
                done: false
              };
            });
          };
          _proto["export"] = function _export() {
            var _this2 = this;
            var nodes = new Array(this._nodes.size);
            var i2 = 0;
            this._nodes.forEach(function(data, key) {
              nodes[i2++] = serializeNode(key, data);
            });
            var edges = new Array(this._edges.size);
            i2 = 0;
            this._edges.forEach(function(data, key) {
              edges[i2++] = serializeEdge(_this2.type, key, data);
            });
            return {
              options: {
                type: this.type,
                multi: this.multi,
                allowSelfLoops: this.allowSelfLoops
              },
              attributes: this.getAttributes(),
              nodes,
              edges
            };
          };
          _proto["import"] = function _import(data) {
            var _this3 = this;
            var merge = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (data instanceof Graph3) {
              data.forEachNode(function(n, a) {
                if (merge)
                  _this3.mergeNode(n, a);
                else
                  _this3.addNode(n, a);
              });
              data.forEachEdge(function(e, a, s, t, _sa, _ta, u) {
                if (merge) {
                  if (u)
                    _this3.mergeUndirectedEdgeWithKey(e, s, t, a);
                  else
                    _this3.mergeDirectedEdgeWithKey(e, s, t, a);
                } else {
                  if (u)
                    _this3.addUndirectedEdgeWithKey(e, s, t, a);
                  else
                    _this3.addDirectedEdgeWithKey(e, s, t, a);
                }
              });
              return this;
            }
            if (!isPlainObject(data))
              throw new InvalidArgumentsGraphError("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");
            if (data.attributes) {
              if (!isPlainObject(data.attributes))
                throw new InvalidArgumentsGraphError("Graph.import: invalid attributes. Expecting a plain object.");
              if (merge)
                this.mergeAttributes(data.attributes);
              else
                this.replaceAttributes(data.attributes);
            }
            var i2, l, list, node, edge;
            if (data.nodes) {
              list = data.nodes;
              if (!Array.isArray(list))
                throw new InvalidArgumentsGraphError("Graph.import: invalid nodes. Expecting an array.");
              for (i2 = 0, l = list.length; i2 < l; i2++) {
                node = list[i2];
                validateSerializedNode(node);
                var _node = node, key = _node.key, attributes = _node.attributes;
                if (merge)
                  this.mergeNode(key, attributes);
                else
                  this.addNode(key, attributes);
              }
            }
            if (data.edges) {
              var undirectedByDefault = false;
              if (this.type === "undirected") {
                undirectedByDefault = true;
              }
              list = data.edges;
              if (!Array.isArray(list))
                throw new InvalidArgumentsGraphError("Graph.import: invalid edges. Expecting an array.");
              for (i2 = 0, l = list.length; i2 < l; i2++) {
                edge = list[i2];
                validateSerializedEdge(edge);
                var _edge = edge, source = _edge.source, target = _edge.target, _attributes = _edge.attributes, _edge$undirected = _edge.undirected, undirected = _edge$undirected === void 0 ? undirectedByDefault : _edge$undirected;
                var method = void 0;
                if ("key" in edge) {
                  method = merge ? undirected ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey : undirected ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey;
                  method.call(this, edge.key, source, target, _attributes);
                } else {
                  method = merge ? undirected ? this.mergeUndirectedEdge : this.mergeDirectedEdge : undirected ? this.addUndirectedEdge : this.addDirectedEdge;
                  method.call(this, source, target, _attributes);
                }
              }
            }
            return this;
          };
          _proto.nullCopy = function nullCopy(options2) {
            var graph2 = new Graph3(assign({}, this._options, options2));
            graph2.replaceAttributes(assign({}, this.getAttributes()));
            return graph2;
          };
          _proto.emptyCopy = function emptyCopy(options2) {
            var graph2 = this.nullCopy(options2);
            this._nodes.forEach(function(nodeData, key) {
              var attributes = assign({}, nodeData.attributes);
              nodeData = new graph2.NodeDataClass(key, attributes);
              graph2._nodes.set(key, nodeData);
            });
            return graph2;
          };
          _proto.copy = function copy2(options2) {
            options2 = options2 || {};
            if (typeof options2.type === "string" && options2.type !== this.type && options2.type !== "mixed")
              throw new UsageGraphError('Graph.copy: cannot create an incompatible copy from "'.concat(this.type, '" type to "').concat(options2.type, '" because this would mean losing information about the current graph.'));
            if (typeof options2.multi === "boolean" && options2.multi !== this.multi && options2.multi !== true)
              throw new UsageGraphError("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");
            if (typeof options2.allowSelfLoops === "boolean" && options2.allowSelfLoops !== this.allowSelfLoops && options2.allowSelfLoops !== true)
              throw new UsageGraphError("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");
            var graph2 = this.emptyCopy(options2);
            var iterator2 = this._edges.values();
            var step, edgeData;
            while (step = iterator2.next(), step.done !== true) {
              edgeData = step.value;
              addEdge(graph2, "copy", false, edgeData.undirected, edgeData.key, edgeData.source.key, edgeData.target.key, assign({}, edgeData.attributes));
            }
            return graph2;
          };
          _proto.toJSON = function toJSON() {
            return this["export"]();
          };
          _proto.toString = function toString() {
            return "[object Graph]";
          };
          _proto.inspect = function inspect() {
            var _this4 = this;
            var nodes = {};
            this._nodes.forEach(function(data, key) {
              nodes[key] = data.attributes;
            });
            var edges = {}, multiIndex = {};
            this._edges.forEach(function(data, key) {
              var direction = data.undirected ? "--" : "->";
              var label = "";
              var source = data.source.key;
              var target = data.target.key;
              var tmp;
              if (data.undirected && source > target) {
                tmp = source;
                source = target;
                target = tmp;
              }
              var desc = "(".concat(source, ")").concat(direction, "(").concat(target, ")");
              if (!key.startsWith("geid_")) {
                label += "[".concat(key, "]: ");
              } else if (_this4.multi) {
                if (typeof multiIndex[desc] === "undefined") {
                  multiIndex[desc] = 0;
                } else {
                  multiIndex[desc]++;
                }
                label += "".concat(multiIndex[desc], ". ");
              }
              label += desc;
              edges[label] = data.attributes;
            });
            var dummy = {};
            for (var k in this) {
              if (this.hasOwnProperty(k) && !EMITTER_PROPS.has(k) && typeof this[k] !== "function" && _typeof13(k) !== "symbol")
                dummy[k] = this[k];
            }
            dummy.attributes = this._attributes;
            dummy.nodes = nodes;
            dummy.edges = edges;
            privateProperty(dummy, "constructor", this.constructor);
            return dummy;
          };
          return Graph3;
        }(events.exports.EventEmitter);
        if (typeof Symbol !== "undefined")
          Graph2.prototype[Symbol["for"]("nodejs.util.inspect.custom")] = Graph2.prototype.inspect;
        EDGE_ADD_METHODS.forEach(function(method) {
          ["add", "merge", "update"].forEach(function(verb) {
            var name = method.name(verb);
            var fn = verb === "add" ? addEdge : mergeEdge;
            if (method.generateKey) {
              Graph2.prototype[name] = function(source, target, attributes) {
                return fn(this, name, true, (method.type || this.type) === "undirected", null, source, target, attributes, verb === "update");
              };
            } else {
              Graph2.prototype[name] = function(edge, source, target, attributes) {
                return fn(this, name, false, (method.type || this.type) === "undirected", edge, source, target, attributes, verb === "update");
              };
            }
          });
        });
        attachNodeAttributesMethods(Graph2);
        attachEdgeAttributesMethods(Graph2);
        attachEdgeIterationMethods(Graph2);
        attachNeighborIterationMethods(Graph2);
        var DirectedGraph2 = /* @__PURE__ */ function(_Graph) {
          _inheritsLoose2(DirectedGraph3, _Graph);
          function DirectedGraph3(options2) {
            var finalOptions = assign({
              type: "directed"
            }, options2);
            if ("multi" in finalOptions && finalOptions.multi !== false)
              throw new InvalidArgumentsGraphError("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
            if (finalOptions.type !== "directed")
              throw new InvalidArgumentsGraphError('DirectedGraph.from: inconsistent "' + finalOptions.type + '" type in given options!');
            return _Graph.call(this, finalOptions) || this;
          }
          return DirectedGraph3;
        }(Graph2);
        var UndirectedGraph2 = /* @__PURE__ */ function(_Graph2) {
          _inheritsLoose2(UndirectedGraph3, _Graph2);
          function UndirectedGraph3(options2) {
            var finalOptions = assign({
              type: "undirected"
            }, options2);
            if ("multi" in finalOptions && finalOptions.multi !== false)
              throw new InvalidArgumentsGraphError("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
            if (finalOptions.type !== "undirected")
              throw new InvalidArgumentsGraphError('UndirectedGraph.from: inconsistent "' + finalOptions.type + '" type in given options!');
            return _Graph2.call(this, finalOptions) || this;
          }
          return UndirectedGraph3;
        }(Graph2);
        var MultiGraph = /* @__PURE__ */ function(_Graph3) {
          _inheritsLoose2(MultiGraph2, _Graph3);
          function MultiGraph2(options2) {
            var finalOptions = assign({
              multi: true
            }, options2);
            if ("multi" in finalOptions && finalOptions.multi !== true)
              throw new InvalidArgumentsGraphError("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");
            return _Graph3.call(this, finalOptions) || this;
          }
          return MultiGraph2;
        }(Graph2);
        var MultiDirectedGraph = /* @__PURE__ */ function(_Graph4) {
          _inheritsLoose2(MultiDirectedGraph2, _Graph4);
          function MultiDirectedGraph2(options2) {
            var finalOptions = assign({
              type: "directed",
              multi: true
            }, options2);
            if ("multi" in finalOptions && finalOptions.multi !== true)
              throw new InvalidArgumentsGraphError("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
            if (finalOptions.type !== "directed")
              throw new InvalidArgumentsGraphError('MultiDirectedGraph.from: inconsistent "' + finalOptions.type + '" type in given options!');
            return _Graph4.call(this, finalOptions) || this;
          }
          return MultiDirectedGraph2;
        }(Graph2);
        var MultiUndirectedGraph = /* @__PURE__ */ function(_Graph5) {
          _inheritsLoose2(MultiUndirectedGraph2, _Graph5);
          function MultiUndirectedGraph2(options2) {
            var finalOptions = assign({
              type: "undirected",
              multi: true
            }, options2);
            if ("multi" in finalOptions && finalOptions.multi !== true)
              throw new InvalidArgumentsGraphError("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
            if (finalOptions.type !== "undirected")
              throw new InvalidArgumentsGraphError('MultiUndirectedGraph.from: inconsistent "' + finalOptions.type + '" type in given options!');
            return _Graph5.call(this, finalOptions) || this;
          }
          return MultiUndirectedGraph2;
        }(Graph2);
        function attachStaticFromMethod(Class) {
          Class.from = function(data, options2) {
            var finalOptions = assign({}, data.options, options2);
            var instance = new Class(finalOptions);
            instance["import"](data);
            return instance;
          };
        }
        attachStaticFromMethod(Graph2);
        attachStaticFromMethod(DirectedGraph2);
        attachStaticFromMethod(UndirectedGraph2);
        attachStaticFromMethod(MultiGraph);
        attachStaticFromMethod(MultiDirectedGraph);
        attachStaticFromMethod(MultiUndirectedGraph);
        Graph2.Graph = Graph2;
        Graph2.DirectedGraph = DirectedGraph2;
        Graph2.UndirectedGraph = UndirectedGraph2;
        Graph2.MultiGraph = MultiGraph;
        Graph2.MultiDirectedGraph = MultiDirectedGraph;
        Graph2.MultiUndirectedGraph = MultiUndirectedGraph;
        Graph2.InvalidArgumentsGraphError = InvalidArgumentsGraphError;
        Graph2.NotFoundGraphError = NotFoundGraphError;
        Graph2.UsageGraphError = UsageGraphError;
        return Graph2;
      });
    }
  });

  // src/Report.tsx
  var import_react46 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // node_modules/react-bootstrap/esm/Col.js
  var import_classnames = __toESM(require_classnames());
  var React2 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/ThemeProvider.js
  var React = __toESM(require_react());
  var import_react = __toESM(require_react());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  "use client";
  var DEFAULT_BREAKPOINTS = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var DEFAULT_MIN_BREAKPOINT = "xs";
  var ThemeContext = /* @__PURE__ */ React.createContext({
    prefixes: {},
    breakpoints: DEFAULT_BREAKPOINTS,
    minBreakpoint: DEFAULT_MIN_BREAKPOINT
  });
  var {
    Consumer,
    Provider
  } = ThemeContext;
  function useBootstrapPrefix(prefix, defaultPrefix) {
    const {
      prefixes
    } = (0, import_react.useContext)(ThemeContext);
    return prefix || prefixes[defaultPrefix] || defaultPrefix;
  }
  function useBootstrapBreakpoints() {
    const {
      breakpoints
    } = (0, import_react.useContext)(ThemeContext);
    return breakpoints;
  }
  function useBootstrapMinBreakpoint() {
    const {
      minBreakpoint
    } = (0, import_react.useContext)(ThemeContext);
    return minBreakpoint;
  }

  // node_modules/react-bootstrap/esm/Col.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  "use client";
  function useCol({
    as,
    bsPrefix,
    className,
    ...props
  }) {
    bsPrefix = useBootstrapPrefix(bsPrefix, "col");
    const breakpoints = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const spans = [];
    const classes = [];
    breakpoints.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let span;
      let offset;
      let order;
      if (typeof propValue === "object" && propValue != null) {
        ({
          span,
          offset,
          order
        } = propValue);
      } else {
        span = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (span)
        spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
      if (order != null)
        classes.push(`order${infix}-${order}`);
      if (offset != null)
        classes.push(`offset${infix}-${offset}`);
    });
    return [{
      ...props,
      className: (0, import_classnames.default)(className, ...spans, ...classes)
    }, {
      as,
      bsPrefix,
      spans
    }];
  }
  var Col = /* @__PURE__ */ React2.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    (props, ref) => {
      const [{
        className,
        ...colProps
      }, {
        as: Component = "div",
        bsPrefix,
        spans
      }] = useCol(props);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, {
        ...colProps,
        ref,
        className: (0, import_classnames.default)(className, !spans.length && bsPrefix)
      });
    }
  );
  Col.displayName = "Col";
  var Col_default = Col;

  // node_modules/react-bootstrap/esm/Nav.js
  var import_classnames4 = __toESM(require_classnames());
  var React15 = __toESM(require_react());
  var import_react21 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t)
          ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.includes(n))
          continue;
        t[n] = r[n];
      }
    return t;
  }

  // node_modules/uncontrollable/lib/esm/hook.js
  var import_react2 = __toESM(require_react());

  // node_modules/uncontrollable/lib/esm/utils.js
  var import_invariant = __toESM(require_browser());
  function defaultKey(key) {
    return "default" + key.charAt(0).toUpperCase() + key.substr(1);
  }

  // node_modules/uncontrollable/lib/esm/hook.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function useUncontrolledProp(propValue, defaultValue, handler) {
    var wasPropRef = (0, import_react2.useRef)(propValue !== void 0);
    var _useState = (0, import_react2.useState)(defaultValue), stateValue = _useState[0], setState = _useState[1];
    var isProp2 = propValue !== void 0;
    var wasProp = wasPropRef.current;
    wasPropRef.current = isProp2;
    if (!isProp2 && wasProp && stateValue !== defaultValue) {
      setState(defaultValue);
    }
    return [isProp2 ? propValue : stateValue, (0, import_react2.useCallback)(function(value) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (handler)
        handler.apply(void 0, [value].concat(args));
      setState(value);
    }, [handler])];
  }
  function useUncontrolled(props, config) {
    return Object.keys(config).reduce(function(result, fieldName) {
      var _extends22;
      var _ref = result, defaultValue = _ref[defaultKey(fieldName)], propsValue = _ref[fieldName], rest = _objectWithoutPropertiesLoose(_ref, [defaultKey(fieldName), fieldName].map(_toPropertyKey));
      var handlerName = config[fieldName];
      var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
      return _extends({}, rest, (_extends22 = {}, _extends22[fieldName] = value, _extends22[handlerName] = handler, _extends22));
    }, props);
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o2) {
    t.prototype = Object.create(o2.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o2);
  }

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_react3 = __toESM(require_react());

  // node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== void 0) {
      this.setState(state);
    }
  }
  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== void 0 ? state : null;
    }
    this.setState(updater.bind(this));
  }
  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
        prevProps,
        prevState
      );
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }
  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_invariant2 = __toESM(require_browser());

  // node_modules/dom-helpers/esm/querySelectorAll.js
  var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
  function qsa(element, selector) {
    return toArray(element.querySelectorAll(selector));
  }

  // node_modules/@restart/ui/esm/Nav.js
  var React9 = __toESM(require_react());
  var import_react9 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useForceUpdate.js
  var import_react4 = __toESM(require_react());
  function useForceUpdate() {
    const [, dispatch] = (0, import_react4.useReducer)((revision) => revision + 1, 0);
    return dispatch;
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMergedRefs.js
  var import_react5 = __toESM(require_react());
  var toFnRef = (ref) => !ref || typeof ref === "function" ? ref : (value) => {
    ref.current = value;
  };
  function mergeRefs(refA, refB) {
    const a = toFnRef(refA);
    const b = toFnRef(refB);
    return (value) => {
      if (a)
        a(value);
      if (b)
        b(value);
    };
  }
  function useMergedRefs(refA, refB) {
    return (0, import_react5.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
  }
  var useMergedRefs_default = useMergedRefs;

  // node_modules/@restart/ui/esm/NavContext.js
  var React4 = __toESM(require_react());
  var NavContext = /* @__PURE__ */ React4.createContext(null);
  NavContext.displayName = "NavContext";
  var NavContext_default = NavContext;

  // node_modules/@restart/ui/esm/SelectableContext.js
  var React5 = __toESM(require_react());
  var SelectableContext = /* @__PURE__ */ React5.createContext(null);
  var makeEventKey = (eventKey, href = null) => {
    if (eventKey != null)
      return String(eventKey);
    return href || null;
  };
  var SelectableContext_default = SelectableContext;

  // node_modules/@restart/ui/esm/TabContext.js
  var React6 = __toESM(require_react());
  var TabContext = /* @__PURE__ */ React6.createContext(null);
  var TabContext_default = TabContext;

  // node_modules/@restart/ui/esm/DataKey.js
  var ATTRIBUTE_PREFIX = `data-rr-ui-`;
  var PROPERTY_PREFIX = `rrUi`;
  function dataAttr(property) {
    return `${ATTRIBUTE_PREFIX}${property}`;
  }
  function dataProp(property) {
    return `${PROPERTY_PREFIX}${property}`;
  }

  // node_modules/@restart/ui/esm/NavItem.js
  var React8 = __toESM(require_react());
  var import_react8 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js
  var import_react7 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js
  var import_react6 = __toESM(require_react());
  function useCommittedRef(value) {
    const ref = (0, import_react6.useRef)(value);
    (0, import_react6.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref;
  }
  var useCommittedRef_default = useCommittedRef;

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js
  function useEventCallback(fn) {
    const ref = useCommittedRef_default(fn);
    return (0, import_react7.useCallback)(function(...args) {
      return ref.current && ref.current(...args);
    }, [ref]);
  }

  // node_modules/@restart/ui/esm/Button.js
  var React7 = __toESM(require_react());
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var _excluded = ["as", "disabled"];
  function _objectWithoutPropertiesLoose2(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function isTrivialHref(href) {
    return !href || href.trim() === "#";
  }
  function useButtonProps({
    tagName,
    disabled,
    href,
    target,
    rel,
    role,
    onClick,
    tabIndex = 0,
    type
  }) {
    if (!tagName) {
      if (href != null || target != null || rel != null) {
        tagName = "a";
      } else {
        tagName = "button";
      }
    }
    const meta = {
      tagName
    };
    if (tagName === "button") {
      return [{
        type: type || "button",
        disabled
      }, meta];
    }
    const handleClick = (event) => {
      if (disabled || tagName === "a" && isTrivialHref(href)) {
        event.preventDefault();
      }
      if (disabled) {
        event.stopPropagation();
        return;
      }
      onClick == null ? void 0 : onClick(event);
    };
    const handleKeyDown = (event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick(event);
      }
    };
    if (tagName === "a") {
      href || (href = "#");
      if (disabled) {
        href = void 0;
      }
    }
    return [{
      role: role != null ? role : "button",
      // explicitly undefined so that it overrides the props disabled in a spread
      // e.g. <Tag {...props} {...hookProps} />
      disabled: void 0,
      tabIndex: disabled ? void 0 : tabIndex,
      href,
      target: tagName === "a" ? target : void 0,
      "aria-disabled": !disabled ? void 0 : disabled,
      rel: tagName === "a" ? rel : void 0,
      onClick: handleClick,
      onKeyDown: handleKeyDown
    }, meta];
  }
  var Button = /* @__PURE__ */ React7.forwardRef((_ref, ref) => {
    let {
      as: asProp,
      disabled
    } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    const [buttonProps, {
      tagName: Component
    }] = useButtonProps(Object.assign({
      tagName: asProp,
      disabled
    }, props));
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, Object.assign({}, props, buttonProps, {
      ref
    }));
  });
  Button.displayName = "Button";
  var Button_default = Button;

  // node_modules/@restart/ui/esm/NavItem.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var _excluded2 = ["as", "active", "eventKey"];
  function _objectWithoutPropertiesLoose3(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useNavItem({
    key,
    onClick,
    active,
    id,
    role,
    disabled
  }) {
    const parentOnSelect = (0, import_react8.useContext)(SelectableContext_default);
    const navContext = (0, import_react8.useContext)(NavContext_default);
    const tabContext = (0, import_react8.useContext)(TabContext_default);
    let isActive = active;
    const props = {
      role
    };
    if (navContext) {
      if (!role && navContext.role === "tablist")
        props.role = "tab";
      const contextControllerId = navContext.getControllerId(key != null ? key : null);
      const contextControlledId = navContext.getControlledId(key != null ? key : null);
      props[dataAttr("event-key")] = key;
      props.id = contextControllerId || id;
      isActive = active == null && key != null ? navContext.activeKey === key : active;
      if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter))
        props["aria-controls"] = contextControlledId;
    }
    if (props.role === "tab") {
      props["aria-selected"] = isActive;
      if (!isActive) {
        props.tabIndex = -1;
      }
      if (disabled) {
        props.tabIndex = -1;
        props["aria-disabled"] = true;
      }
    }
    props.onClick = useEventCallback((e) => {
      if (disabled)
        return;
      onClick == null ? void 0 : onClick(e);
      if (key == null) {
        return;
      }
      if (parentOnSelect && !e.isPropagationStopped()) {
        parentOnSelect(key, e);
      }
    });
    return [props, {
      isActive
    }];
  }
  var NavItem = /* @__PURE__ */ React8.forwardRef((_ref, ref) => {
    let {
      as: Component = Button_default,
      active,
      eventKey
    } = _ref, options2 = _objectWithoutPropertiesLoose3(_ref, _excluded2);
    const [props, meta] = useNavItem(Object.assign({
      key: makeEventKey(eventKey, options2.href),
      active
    }, options2));
    props[dataAttr("active")] = meta.isActive;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component, Object.assign({}, options2, props, {
      ref
    }));
  });
  NavItem.displayName = "NavItem";
  var NavItem_default = NavItem;

  // node_modules/@restart/ui/esm/Nav.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var _excluded3 = ["as", "onSelect", "activeKey", "role", "onKeyDown"];
  function _objectWithoutPropertiesLoose4(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var noop = () => {
  };
  var EVENT_KEY_ATTR = dataAttr("event-key");
  var Nav = /* @__PURE__ */ React9.forwardRef((_ref, ref) => {
    let {
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component = "div",
      onSelect,
      activeKey,
      role,
      onKeyDown
    } = _ref, props = _objectWithoutPropertiesLoose4(_ref, _excluded3);
    const forceUpdate = useForceUpdate();
    const needsRefocusRef = (0, import_react9.useRef)(false);
    const parentOnSelect = (0, import_react9.useContext)(SelectableContext_default);
    const tabContext = (0, import_react9.useContext)(TabContext_default);
    let getControlledId, getControllerId;
    if (tabContext) {
      role = role || "tablist";
      activeKey = tabContext.activeKey;
      getControlledId = tabContext.getControlledId;
      getControllerId = tabContext.getControllerId;
    }
    const listNode = (0, import_react9.useRef)(null);
    const getNextActiveTab = (offset) => {
      const currentListNode = listNode.current;
      if (!currentListNode)
        return null;
      const items = qsa(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);
      const activeChild = currentListNode.querySelector("[aria-selected=true]");
      if (!activeChild || activeChild !== document.activeElement)
        return null;
      const index = items.indexOf(activeChild);
      if (index === -1)
        return null;
      let nextIndex = index + offset;
      if (nextIndex >= items.length)
        nextIndex = 0;
      if (nextIndex < 0)
        nextIndex = items.length - 1;
      return items[nextIndex];
    };
    const handleSelect = (key, event) => {
      if (key == null)
        return;
      onSelect == null ? void 0 : onSelect(key, event);
      parentOnSelect == null ? void 0 : parentOnSelect(key, event);
    };
    const handleKeyDown = (event) => {
      onKeyDown == null ? void 0 : onKeyDown(event);
      if (!tabContext) {
        return;
      }
      let nextActiveChild;
      switch (event.key) {
        case "ArrowLeft":
        case "ArrowUp":
          nextActiveChild = getNextActiveTab(-1);
          break;
        case "ArrowRight":
        case "ArrowDown":
          nextActiveChild = getNextActiveTab(1);
          break;
        default:
          return;
      }
      if (!nextActiveChild)
        return;
      event.preventDefault();
      handleSelect(nextActiveChild.dataset[dataProp("EventKey")] || null, event);
      needsRefocusRef.current = true;
      forceUpdate();
    };
    (0, import_react9.useEffect)(() => {
      if (listNode.current && needsRefocusRef.current) {
        const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);
        activeChild == null ? void 0 : activeChild.focus();
      }
      needsRefocusRef.current = false;
    });
    const mergedRef = useMergedRefs_default(ref, listNode);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SelectableContext_default.Provider, {
      value: handleSelect,
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(NavContext_default.Provider, {
        value: {
          role,
          // used by NavLink to determine it's role
          activeKey: makeEventKey(activeKey),
          getControlledId: getControlledId || noop,
          getControllerId: getControllerId || noop
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Component, Object.assign({}, props, {
          onKeyDown: handleKeyDown,
          ref: mergedRef,
          role
        }))
      })
    });
  });
  Nav.displayName = "Nav";
  var Nav_default = Object.assign(Nav, {
    Item: NavItem_default
  });

  // node_modules/react-bootstrap/esm/NavbarContext.js
  var React10 = __toESM(require_react());
  "use client";
  var context = /* @__PURE__ */ React10.createContext(null);
  context.displayName = "NavbarContext";
  var NavbarContext_default = context;

  // node_modules/react-bootstrap/esm/CardHeaderContext.js
  var React11 = __toESM(require_react());
  "use client";
  var context2 = /* @__PURE__ */ React11.createContext(null);
  context2.displayName = "CardHeaderContext";
  var CardHeaderContext_default = context2;

  // node_modules/react-bootstrap/esm/NavItem.js
  var React12 = __toESM(require_react());
  var import_classnames2 = __toESM(require_classnames());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  "use client";
  var NavItem2 = /* @__PURE__ */ React12.forwardRef(({
    className,
    bsPrefix,
    as: Component = "div",
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "nav-item");
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Component, {
      ref,
      className: (0, import_classnames2.default)(className, bsPrefix),
      ...props
    });
  });
  NavItem2.displayName = "NavItem";
  var NavItem_default2 = NavItem2;

  // node_modules/react-bootstrap/esm/NavLink.js
  var import_classnames3 = __toESM(require_classnames());
  var React14 = __toESM(require_react());

  // node_modules/@restart/ui/esm/Anchor.js
  var React13 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js
  var import_react10 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js
  var import_react11 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useGlobalListener.js
  var import_react12 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useInterval.js
  var import_react13 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useRafInterval.js
  var import_react14 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMergeState.js
  var import_react15 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js
  var import_react16 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js
  var import_react17 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useImage.js
  var import_react18 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js
  var import_react20 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js
  var import_react19 = __toESM(require_react());
  var isReactNative = typeof global !== "undefined" && // @ts-ignore
  global.navigator && // @ts-ignore
  global.navigator.product === "ReactNative";

  // node_modules/@restart/ui/esm/Anchor.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded4 = ["onKeyDown"];
  function _objectWithoutPropertiesLoose5(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function isTrivialHref2(href) {
    return !href || href.trim() === "#";
  }
  var Anchor = /* @__PURE__ */ React13.forwardRef((_ref, ref) => {
    let {
      onKeyDown
    } = _ref, props = _objectWithoutPropertiesLoose5(_ref, _excluded4);
    const [buttonProps] = useButtonProps(Object.assign({
      tagName: "a"
    }, props));
    const handleKeyDown = useEventCallback((e) => {
      buttonProps.onKeyDown(e);
      onKeyDown == null ? void 0 : onKeyDown(e);
    });
    if (isTrivialHref2(props.href) || props.role === "button") {
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", Object.assign({
        ref
      }, props, buttonProps, {
        onKeyDown: handleKeyDown
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", Object.assign({
      ref
    }, props, {
      onKeyDown
    }));
  });
  Anchor.displayName = "Anchor";
  var Anchor_default = Anchor;

  // node_modules/react-bootstrap/esm/NavLink.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  "use client";
  var NavLink = /* @__PURE__ */ React14.forwardRef(({
    bsPrefix,
    className,
    as: Component = Anchor_default,
    active,
    eventKey,
    disabled = false,
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "nav-link");
    const [navItemProps, meta] = useNavItem({
      key: makeEventKey(eventKey, props.href),
      active,
      disabled,
      ...props
    });
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Component, {
      ...props,
      ...navItemProps,
      ref,
      disabled,
      className: (0, import_classnames3.default)(className, bsPrefix, disabled && "disabled", meta.isActive && "active")
    });
  });
  NavLink.displayName = "NavLink";
  var NavLink_default = NavLink;

  // node_modules/react-bootstrap/esm/Nav.js
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  "use client";
  var Nav2 = /* @__PURE__ */ React15.forwardRef((uncontrolledProps, ref) => {
    const {
      as = "div",
      bsPrefix: initialBsPrefix,
      variant,
      fill = false,
      justify = false,
      navbar,
      navbarScroll,
      className,
      activeKey,
      ...props
    } = useUncontrolled(uncontrolledProps, {
      activeKey: "onSelect"
    });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, "nav");
    let navbarBsPrefix;
    let cardHeaderBsPrefix;
    let isNavbar = false;
    const navbarContext = (0, import_react21.useContext)(NavbarContext_default);
    const cardHeaderContext = (0, import_react21.useContext)(CardHeaderContext_default);
    if (navbarContext) {
      navbarBsPrefix = navbarContext.bsPrefix;
      isNavbar = navbar == null ? true : navbar;
    } else if (cardHeaderContext) {
      ({
        cardHeaderBsPrefix
      } = cardHeaderContext);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Nav_default, {
      as,
      ref,
      activeKey,
      className: (0, import_classnames4.default)(className, {
        [bsPrefix]: !isNavbar,
        [`${navbarBsPrefix}-nav`]: isNavbar,
        [`${navbarBsPrefix}-nav-scroll`]: isNavbar && navbarScroll,
        [`${cardHeaderBsPrefix}-${variant}`]: !!cardHeaderBsPrefix,
        [`${bsPrefix}-${variant}`]: !!variant,
        [`${bsPrefix}-fill`]: fill,
        [`${bsPrefix}-justified`]: justify
      }),
      ...props
    });
  });
  Nav2.displayName = "Nav";
  var Nav_default2 = Object.assign(Nav2, {
    Item: NavItem_default2,
    Link: NavLink_default
  });

  // node_modules/react-bootstrap/esm/Row.js
  var import_classnames5 = __toESM(require_classnames());
  var React16 = __toESM(require_react());
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  "use client";
  var Row = /* @__PURE__ */ React16.forwardRef(({
    bsPrefix,
    className,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = "div",
    ...props
  }, ref) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "row");
    const breakpoints = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    breakpoints.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let cols;
      if (propValue != null && typeof propValue === "object") {
        ({
          cols
        } = propValue);
      } else {
        cols = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (cols != null)
        classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Component, {
      ref,
      ...props,
      className: (0, import_classnames5.default)(className, decoratedBsPrefix, ...classes)
    });
  });
  Row.displayName = "Row";
  var Row_default = Row;

  // node_modules/react-bootstrap/esm/Tab.js
  var import_prop_types3 = __toESM(require_prop_types());

  // node_modules/react-bootstrap/esm/TabContainer.js
  var React24 = __toESM(require_react());

  // node_modules/@restart/ui/esm/Tabs.js
  var React18 = __toESM(require_react());
  var import_react26 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/uncontrollable/lib/esm/index.js
  var import_react22 = __toESM(require_react());
  function useUncontrolledProp2(propValue, defaultValue, handler) {
    const wasPropRef = (0, import_react22.useRef)(propValue !== void 0);
    const [stateValue, setState] = (0, import_react22.useState)(defaultValue);
    const isProp2 = propValue !== void 0;
    const wasProp = wasPropRef.current;
    wasPropRef.current = isProp2;
    if (!isProp2 && wasProp && stateValue !== defaultValue) {
      setState(defaultValue);
    }
    return [isProp2 ? propValue : stateValue, (0, import_react22.useCallback)((...args) => {
      const [value, ...rest] = args;
      let returnValue = handler == null ? void 0 : handler(value, ...rest);
      setState(value);
      return returnValue;
    }, [handler])];
  }

  // node_modules/@react-aria/ssr/dist/SSRProvider.mjs
  var import_react23 = __toESM(require_react(), 1);
  var $b5e257d569688ac6$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 1e10)),
    current: 0
  };
  var $b5e257d569688ac6$var$SSRContext = /* @__PURE__ */ (0, import_react23.default).createContext($b5e257d569688ac6$var$defaultContext);
  var $b5e257d569688ac6$var$IsSSRContext = /* @__PURE__ */ (0, import_react23.default).createContext(false);
  var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
  var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
  function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
    let ctx = (0, import_react23.useContext)($b5e257d569688ac6$var$SSRContext);
    let ref = (0, import_react23.useRef)(null);
    if (ref.current === null && !isDisabled) {
      var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react23.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
      if (currentOwner) {
        let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
        if (prevComponentValue == null)
          $b5e257d569688ac6$var$componentIds.set(currentOwner, {
            id: ctx.current,
            state: currentOwner.memoizedState
          });
        else if (currentOwner.memoizedState !== prevComponentValue.state) {
          ctx.current = prevComponentValue.id;
          $b5e257d569688ac6$var$componentIds.delete(currentOwner);
        }
      }
      ref.current = ++ctx.current;
    }
    return ref.current;
  }
  function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
    let ctx = (0, import_react23.useContext)($b5e257d569688ac6$var$SSRContext);
    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM)
      console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
    let prefix = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
    return defaultId || `${prefix}-${counter}`;
  }
  function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
    let id = (0, import_react23.default).useId();
    let [didSSR] = (0, import_react23.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
    let prefix = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
    return defaultId || `${prefix}-${id}`;
  }
  var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react23.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
  function $b5e257d569688ac6$var$getSnapshot() {
    return false;
  }
  function $b5e257d569688ac6$var$getServerSnapshot() {
    return true;
  }
  function $b5e257d569688ac6$var$subscribe(onStoreChange) {
    return () => {
    };
  }
  function $b5e257d569688ac6$export$535bd6ca7f90a273() {
    if (typeof (0, import_react23.default)["useSyncExternalStore"] === "function")
      return (0, import_react23.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
    return (0, import_react23.useContext)($b5e257d569688ac6$var$IsSSRContext);
  }

  // node_modules/@restart/ui/esm/TabPanel.js
  var React17 = __toESM(require_react());
  var import_react25 = __toESM(require_react());

  // node_modules/@restart/ui/esm/NoopTransition.js
  var import_react24 = __toESM(require_react());
  function NoopTransition({
    children,
    in: inProp,
    onExited,
    mountOnEnter,
    unmountOnExit
  }) {
    const ref = (0, import_react24.useRef)(null);
    const hasEnteredRef = (0, import_react24.useRef)(inProp);
    const handleExited = useEventCallback(onExited);
    (0, import_react24.useEffect)(() => {
      if (inProp)
        hasEnteredRef.current = true;
      else {
        handleExited(ref.current);
      }
    }, [inProp, handleExited]);
    const combinedRef = useMergedRefs_default(ref, children.ref);
    const child = /* @__PURE__ */ (0, import_react24.cloneElement)(children, {
      ref: combinedRef
    });
    if (inProp)
      return child;
    if (unmountOnExit) {
      return null;
    }
    if (!hasEnteredRef.current && mountOnEnter) {
      return null;
    }
    return child;
  }
  var NoopTransition_default = NoopTransition;

  // node_modules/@restart/ui/esm/TabPanel.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded5 = ["active", "eventKey", "mountOnEnter", "transition", "unmountOnExit", "role", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"];
  var _excluded22 = ["activeKey", "getControlledId", "getControllerId"];
  var _excluded32 = ["as"];
  function _objectWithoutPropertiesLoose6(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useTabPanel(_ref) {
    let {
      active,
      eventKey,
      mountOnEnter,
      transition,
      unmountOnExit,
      role = "tabpanel",
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded5);
    const context3 = (0, import_react25.useContext)(TabContext_default);
    if (!context3)
      return [Object.assign({}, props, {
        role
      }), {
        eventKey,
        isActive: active,
        mountOnEnter,
        transition,
        unmountOnExit,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited
      }];
    const {
      activeKey,
      getControlledId,
      getControllerId
    } = context3, rest = _objectWithoutPropertiesLoose6(context3, _excluded22);
    const key = makeEventKey(eventKey);
    return [Object.assign({}, props, {
      role,
      id: getControlledId(eventKey),
      "aria-labelledby": getControllerId(eventKey)
    }), {
      eventKey,
      isActive: active == null && key != null ? makeEventKey(activeKey) === key : active,
      transition: transition || rest.transition,
      mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,
      unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    }];
  }
  var TabPanel = /* @__PURE__ */ React17.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    (_ref2, ref) => {
      let {
        as: Component = "div"
      } = _ref2, props = _objectWithoutPropertiesLoose6(_ref2, _excluded32);
      const [tabPanelProps, {
        isActive,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited,
        mountOnEnter,
        unmountOnExit,
        transition: Transition2 = NoopTransition_default
      }] = useTabPanel(props);
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(TabContext_default.Provider, {
        value: null,
        children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SelectableContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Transition2, {
            in: isActive,
            onEnter,
            onEntering,
            onEntered,
            onExit,
            onExiting,
            onExited,
            mountOnEnter,
            unmountOnExit,
            children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Component, Object.assign({}, tabPanelProps, {
              ref,
              hidden: !isActive,
              "aria-hidden": !isActive
            }))
          })
        })
      });
    }
  );
  TabPanel.displayName = "TabPanel";
  var TabPanel_default = TabPanel;

  // node_modules/@restart/ui/esm/Tabs.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var Tabs = (props) => {
    const {
      id: userId,
      generateChildId: generateCustomChildId,
      onSelect: propsOnSelect,
      activeKey: propsActiveKey,
      defaultActiveKey,
      transition,
      mountOnEnter,
      unmountOnExit,
      children
    } = props;
    const [activeKey, onSelect] = useUncontrolledProp2(propsActiveKey, defaultActiveKey, propsOnSelect);
    const id = $b5e257d569688ac6$export$619500959fc48b26(userId);
    const generateChildId = (0, import_react26.useMemo)(() => generateCustomChildId || ((key, type) => id ? `${id}-${type}-${key}` : null), [id, generateCustomChildId]);
    const tabContext = (0, import_react26.useMemo)(() => ({
      onSelect,
      activeKey,
      transition,
      mountOnEnter: mountOnEnter || false,
      unmountOnExit: unmountOnExit || false,
      getControlledId: (key) => generateChildId(key, "tabpane"),
      getControllerId: (key) => generateChildId(key, "tab")
    }), [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(TabContext_default.Provider, {
      value: tabContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SelectableContext_default.Provider, {
        value: onSelect || null,
        children
      })
    });
  };
  Tabs.Panel = TabPanel_default;
  var Tabs_default = Tabs;

  // node_modules/react-bootstrap/esm/Fade.js
  var import_classnames6 = __toESM(require_classnames());
  var React23 = __toESM(require_react());
  var import_react31 = __toESM(require_react());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types2 = __toESM(require_prop_types());
  var import_react28 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    enter: import_prop_types.default.number,
    exit: import_prop_types.default.number,
    appear: import_prop_types.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    active: import_prop_types.default.string
  }), import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    enterDone: import_prop_types.default.string,
    enterActive: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    exitDone: import_prop_types.default.string,
    exitActive: import_prop_types.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react27 = __toESM(require_react());
  var TransitionGroupContext_default = import_react27.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node) {
    return node.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context3) {
      var _this2;
      _this2 = _React$Component.call(this, props, context3) || this;
      var parentGroup = context3;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this2.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this2.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this2.state = {
        status: initialStatus
      };
      _this2.nextCallback = null;
      return _this2;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node)
              forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react28.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react28.default.cloneElement(import_react28.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react28.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types2.default.shape({
      current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types2.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types2.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types2.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types2.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types2.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types2.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types2.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types2.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types2.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types2.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types2.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types2.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types2.default.func
  } : {};
  function noop2() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@restart/ui/esm/utils.js
  var React21 = __toESM(require_react());
  function getReactVersion() {
    const parts = React21.version.split(".");
    return {
      major: +parts[0],
      minor: +parts[1],
      patch: +parts[2]
    };
  }
  function getChildRef(element) {
    if (!element || typeof element === "function") {
      return null;
    }
    const {
      major
    } = getReactVersion();
    const childRef = major >= 19 ? element.props.ref : element.ref;
    return childRef;
  }

  // node_modules/dom-helpers/esm/ownerDocument.js
  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/dom-helpers/esm/ownerWindow.js
  function ownerWindow(node) {
    var doc = ownerDocument(node);
    return doc && doc.defaultView || window;
  }

  // node_modules/dom-helpers/esm/getComputedStyle.js
  function getComputedStyle(node, psuedoElement) {
    return ownerWindow(node).getComputedStyle(node, psuedoElement);
  }

  // node_modules/dom-helpers/esm/hyphenate.js
  var rUpper = /([A-Z])/g;
  function hyphenate(string) {
    return string.replace(rUpper, "-$1").toLowerCase();
  }

  // node_modules/dom-helpers/esm/hyphenateStyle.js
  var msPattern = /^ms-/;
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, "-ms-");
  }

  // node_modules/dom-helpers/esm/isTransform.js
  var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
  function isTransform(value) {
    return !!(value && supportedTransforms.test(value));
  }

  // node_modules/dom-helpers/esm/css.js
  function style(node, property) {
    var css = "";
    var transforms = "";
    if (typeof property === "string") {
      return node.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));
    }
    Object.keys(property).forEach(function(key) {
      var value = property[key];
      if (!value && value !== 0) {
        node.style.removeProperty(hyphenateStyleName(key));
      } else if (isTransform(key)) {
        transforms += key + "(" + value + ") ";
      } else {
        css += hyphenateStyleName(key) + ": " + value + ";";
      }
    });
    if (transforms) {
      css += "transform: " + transforms + ";";
    }
    node.style.cssText += ";" + css;
  }
  var css_default = style;

  // node_modules/dom-helpers/esm/canUseDOM.js
  var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

  // node_modules/dom-helpers/esm/addEventListener.js
  var optionsSupported = false;
  var onceSupported = false;
  try {
    options2 = {
      get passive() {
        return optionsSupported = true;
      },
      get once() {
        return onceSupported = optionsSupported = true;
      }
    };
    if (canUseDOM_default) {
      window.addEventListener("test", options2, options2);
      window.removeEventListener("test", options2, true);
    }
  } catch (e) {
  }
  var options2;
  function addEventListener(node, eventName, handler, options2) {
    if (options2 && typeof options2 !== "boolean" && !onceSupported) {
      var once = options2.once, capture = options2.capture;
      var wrappedHandler = handler;
      if (!onceSupported && once) {
        wrappedHandler = handler.__once || function onceHandler(event) {
          this.removeEventListener(eventName, onceHandler, capture);
          handler.call(this, event);
        };
        handler.__once = wrappedHandler;
      }
      node.addEventListener(eventName, wrappedHandler, optionsSupported ? options2 : capture);
    }
    node.addEventListener(eventName, handler, options2);
  }
  var addEventListener_default = addEventListener;

  // node_modules/dom-helpers/esm/removeEventListener.js
  function removeEventListener(node, eventName, handler, options2) {
    var capture = options2 && typeof options2 !== "boolean" ? options2.capture : options2;
    node.removeEventListener(eventName, handler, capture);
    if (handler.__once) {
      node.removeEventListener(eventName, handler.__once, capture);
    }
  }
  var removeEventListener_default = removeEventListener;

  // node_modules/dom-helpers/esm/listen.js
  function listen(node, eventName, handler, options2) {
    addEventListener_default(node, eventName, handler, options2);
    return function() {
      removeEventListener_default(node, eventName, handler, options2);
    };
  }
  var listen_default = listen;

  // node_modules/dom-helpers/esm/triggerEvent.js
  function triggerEvent(node, eventName, bubbles, cancelable) {
    if (bubbles === void 0) {
      bubbles = false;
    }
    if (cancelable === void 0) {
      cancelable = true;
    }
    if (node) {
      var event = document.createEvent("HTMLEvents");
      event.initEvent(eventName, bubbles, cancelable);
      node.dispatchEvent(event);
    }
  }

  // node_modules/dom-helpers/esm/transitionEnd.js
  function parseDuration(node) {
    var str = css_default(node, "transitionDuration") || "";
    var mult = str.indexOf("ms") === -1 ? 1e3 : 1;
    return parseFloat(str) * mult;
  }
  function emulateTransitionEnd(element, duration, padding) {
    if (padding === void 0) {
      padding = 5;
    }
    var called = false;
    var handle = setTimeout(function() {
      if (!called)
        triggerEvent(element, "transitionend", true);
    }, duration + padding);
    var remove = listen_default(element, "transitionend", function() {
      called = true;
    }, {
      once: true
    });
    return function() {
      clearTimeout(handle);
      remove();
    };
  }
  function transitionEnd(element, handler, duration, padding) {
    if (duration == null)
      duration = parseDuration(element) || 0;
    var removeEmulate = emulateTransitionEnd(element, duration, padding);
    var remove = listen_default(element, "transitionend", handler);
    return function() {
      removeEmulate();
      remove();
    };
  }

  // node_modules/react-bootstrap/esm/transitionEndListener.js
  function parseDuration2(node, property) {
    const str = css_default(node, property) || "";
    const mult = str.indexOf("ms") === -1 ? 1e3 : 1;
    return parseFloat(str) * mult;
  }
  function transitionEndListener(element, handler) {
    const duration = parseDuration2(element, "transitionDuration");
    const delay = parseDuration2(element, "transitionDelay");
    const remove = transitionEnd(element, (e) => {
      if (e.target === element) {
        remove();
        handler(e);
      }
    }, duration + delay);
  }

  // node_modules/react-bootstrap/esm/triggerBrowserReflow.js
  function triggerBrowserReflow(node) {
    node.offsetHeight;
  }

  // node_modules/react-bootstrap/esm/TransitionWrapper.js
  var import_react30 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useMergedRefs.js
  var import_react29 = __toESM(require_react());
  var toFnRef2 = (ref) => !ref || typeof ref === "function" ? ref : (value) => {
    ref.current = value;
  };
  function mergeRefs2(refA, refB) {
    const a = toFnRef2(refA);
    const b = toFnRef2(refB);
    return (value) => {
      if (a)
        a(value);
      if (b)
        b(value);
    };
  }
  function useMergedRefs2(refA, refB) {
    return (0, import_react29.useMemo)(() => mergeRefs2(refA, refB), [refA, refB]);
  }
  var useMergedRefs_default2 = useMergedRefs2;

  // node_modules/react-bootstrap/esm/safeFindDOMNode.js
  var import_react_dom2 = __toESM(require_react_dom());
  function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && "setState" in componentOrElement) {
      return import_react_dom2.default.findDOMNode(componentOrElement);
    }
    return componentOrElement != null ? componentOrElement : null;
  }

  // node_modules/react-bootstrap/esm/TransitionWrapper.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  "use client";
  var TransitionWrapper = /* @__PURE__ */ import_react30.default.forwardRef(({
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited,
    addEndListener,
    children,
    childRef,
    ...props
  }, ref) => {
    const nodeRef = (0, import_react30.useRef)(null);
    const mergedRef = useMergedRefs_default2(nodeRef, childRef);
    const attachRef = (r) => {
      mergedRef(safeFindDOMNode(r));
    };
    const normalize = (callback) => (param) => {
      if (callback && nodeRef.current) {
        callback(nodeRef.current, param);
      }
    };
    const handleEnter = (0, import_react30.useCallback)(normalize(onEnter), [onEnter]);
    const handleEntering = (0, import_react30.useCallback)(normalize(onEntering), [onEntering]);
    const handleEntered = (0, import_react30.useCallback)(normalize(onEntered), [onEntered]);
    const handleExit = (0, import_react30.useCallback)(normalize(onExit), [onExit]);
    const handleExiting = (0, import_react30.useCallback)(normalize(onExiting), [onExiting]);
    const handleExited = (0, import_react30.useCallback)(normalize(onExited), [onExited]);
    const handleAddEndListener = (0, import_react30.useCallback)(normalize(addEndListener), [addEndListener]);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Transition_default, {
      ref,
      ...props,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      children: typeof children === "function" ? (status, innerProps) => (
        // TODO: Types for RTG missing innerProps, so need to cast.
        children(status, {
          ...innerProps,
          ref: attachRef
        })
      ) : /* @__PURE__ */ import_react30.default.cloneElement(children, {
        ref: attachRef
      })
    });
  });
  var TransitionWrapper_default = TransitionWrapper;

  // node_modules/react-bootstrap/esm/Fade.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var fadeStyles = {
    [ENTERING]: "show",
    [ENTERED]: "show"
  };
  var Fade = /* @__PURE__ */ React23.forwardRef(({
    className,
    children,
    transitionClasses = {},
    onEnter,
    ...rest
  }, ref) => {
    const props = {
      in: false,
      timeout: 300,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      ...rest
    };
    const handleEnter = (0, import_react31.useCallback)((node, isAppearing) => {
      triggerBrowserReflow(node);
      onEnter == null || onEnter(node, isAppearing);
    }, [onEnter]);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(TransitionWrapper_default, {
      ref,
      addEndListener: transitionEndListener,
      ...props,
      onEnter: handleEnter,
      childRef: getChildRef(children),
      children: (status, innerProps) => /* @__PURE__ */ React23.cloneElement(children, {
        ...innerProps,
        className: (0, import_classnames6.default)("fade", className, children.props.className, fadeStyles[status], transitionClasses[status])
      })
    });
  });
  Fade.displayName = "Fade";
  var Fade_default = Fade;

  // node_modules/react-bootstrap/esm/getTabTransitionComponent.js
  function getTabTransitionComponent(transition) {
    if (typeof transition === "boolean") {
      return transition ? Fade_default : NoopTransition_default;
    }
    return transition;
  }

  // node_modules/react-bootstrap/esm/TabContainer.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var TabContainer = ({
    transition,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Tabs_default, {
    ...props,
    transition: getTabTransitionComponent(transition)
  });
  TabContainer.displayName = "TabContainer";
  var TabContainer_default = TabContainer;

  // node_modules/react-bootstrap/esm/TabContent.js
  var React25 = __toESM(require_react());
  var import_classnames7 = __toESM(require_classnames());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  "use client";
  var TabContent = /* @__PURE__ */ React25.forwardRef(({
    className,
    bsPrefix,
    as: Component = "div",
    ...props
  }, ref) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "tab-content");
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Component, {
      ref,
      className: (0, import_classnames7.default)(className, bsPrefix),
      ...props
    });
  });
  TabContent.displayName = "TabContent";
  var TabContent_default = TabContent;

  // node_modules/react-bootstrap/esm/TabPane.js
  var import_classnames8 = __toESM(require_classnames());
  var React26 = __toESM(require_react());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  "use client";
  var TabPane = /* @__PURE__ */ React26.forwardRef(({
    bsPrefix,
    transition,
    ...props
  }, ref) => {
    const [{
      className,
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component = "div",
      ...rest
    }, {
      isActive,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      mountOnEnter,
      unmountOnExit,
      transition: Transition2 = Fade_default
    }] = useTabPanel({
      ...props,
      transition: getTabTransitionComponent(transition)
    });
    const prefix = useBootstrapPrefix(bsPrefix, "tab-pane");
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(TabContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectableContext_default.Provider, {
        value: null,
        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Transition2, {
          in: isActive,
          onEnter,
          onEntering,
          onEntered,
          onExit,
          onExiting,
          onExited,
          mountOnEnter,
          unmountOnExit,
          children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Component, {
            ...rest,
            ref,
            className: (0, import_classnames8.default)(className, prefix, isActive && "active")
          })
        })
      })
    });
  });
  TabPane.displayName = "TabPane";
  var TabPane_default = TabPane;

  // node_modules/react-bootstrap/esm/Tab.js
  var propTypes = {
    eventKey: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
    /**
     * Content for the tab title.
     */
    title: import_prop_types3.default.node.isRequired,
    /**
     * The disabled state of the tab.
     */
    disabled: import_prop_types3.default.bool,
    /**
     * Class to pass to the underlying nav link.
     */
    tabClassName: import_prop_types3.default.string,
    /**
     * Object containing attributes to pass to underlying nav link.
     */
    tabAttrs: import_prop_types3.default.object
  };
  var Tab = () => {
    throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly");
  };
  Tab.propTypes = propTypes;
  var Tab_default = Object.assign(Tab, {
    Container: TabContainer_default,
    Content: TabContent_default,
    Pane: TabPane_default
  });

  // node_modules/react-bootstrap/esm/Tabs.js
  var React28 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/ElementChildren.js
  var React27 = __toESM(require_react());
  function map(children, func) {
    let index = 0;
    return React27.Children.map(children, (child) => /* @__PURE__ */ React27.isValidElement(child) ? func(child, index++) : child);
  }
  function forEach(children, func) {
    let index = 0;
    React27.Children.forEach(children, (child) => {
      if (/* @__PURE__ */ React27.isValidElement(child))
        func(child, index++);
    });
  }

  // node_modules/react-bootstrap/esm/Tabs.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  function getDefaultActiveKey(children) {
    let defaultActiveKey;
    forEach(children, (child) => {
      if (defaultActiveKey == null) {
        defaultActiveKey = child.props.eventKey;
      }
    });
    return defaultActiveKey;
  }
  function renderTab(child) {
    const {
      title,
      eventKey,
      disabled,
      tabClassName,
      tabAttrs,
      id
    } = child.props;
    if (title == null) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(NavItem_default2, {
      as: "li",
      role: "presentation",
      children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(NavLink_default, {
        as: "button",
        type: "button",
        eventKey,
        disabled,
        id,
        className: tabClassName,
        ...tabAttrs,
        children: title
      })
    });
  }
  var Tabs2 = (props) => {
    const {
      id,
      onSelect,
      transition,
      mountOnEnter = false,
      unmountOnExit = false,
      variant = "tabs",
      children,
      activeKey = getDefaultActiveKey(children),
      ...controlledProps
    } = useUncontrolled(props, {
      activeKey: "onSelect"
    });
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(Tabs_default, {
      id,
      activeKey,
      onSelect,
      transition: getTabTransitionComponent(transition),
      mountOnEnter,
      unmountOnExit,
      children: [/* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Nav_default2, {
        id,
        ...controlledProps,
        role: "tablist",
        as: "ul",
        variant,
        children: map(children, renderTab)
      }), /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TabContent_default, {
        children: map(children, (child) => {
          const childProps = {
            ...child.props
          };
          delete childProps.title;
          delete childProps.disabled;
          delete childProps.tabClassName;
          delete childProps.tabAttrs;
          return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TabPane_default, {
            ...childProps
          });
        })
      })]
    });
  };
  Tabs2.displayName = "Tabs";
  var Tabs_default2 = Tabs2;

  // node_modules/react-sigma/es/Sigma.js
  var import_react33 = __toESM(require_react());

  // node_modules/react-sigma/es/tools.js
  var import_react32 = __toESM(require_react());
  function embedProps(elements, extraProps) {
    return import_react32.default.Children.map(elements, function(element) {
      return /* @__PURE__ */ import_react32.default.cloneElement(element, extraProps);
    });
  }

  // node_modules/react-sigma/sigma/main.js
  var Sigma2 = function(e) {
    var t = {};
    function i2(n) {
      if (t[n])
        return t[n].exports;
      var s = t[n] = { i: n, l: false, exports: {} };
      return e[n].call(s.exports, s, s.exports, i2), s.l = true, s.exports;
    }
    return i2.m = e, i2.c = t, i2.d = function(e2, t2, n) {
      i2.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
    }, i2.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, i2.t = function(e2, t2) {
      if (1 & t2 && (e2 = i2(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var n = /* @__PURE__ */ Object.create(null);
      if (i2.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var s in e2)
          i2.d(n, s, function(t3) {
            return e2[t3];
          }.bind(null, s));
      return n;
    }, i2.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return i2.d(t2, "a", t2), t2;
    }, i2.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, i2.p = "", i2(i2.s = 115);
  }({ 115: function(e, t, i2) {
    "use strict";
    i2.r(t);
    i2(116), i2(117), i2(118), i2(119), i2(120), i2(121), i2(122), i2(123), i2(124), i2(125), i2(126), i2(127), i2(128), i2(129), i2(130), i2(131), i2(132), i2(133), i2(134), i2(135), i2(136), i2(137), i2(138), i2(139), i2(140), i2(141);
    let n = window.sigma;
    n.renderers.def = n.renderers.canvas, t.default = n;
  }, 116: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        var t2 = {}, i2 = function(e3) {
          var n, s, r, a, o2;
          i2.classes.dispatcher.extend(this);
          var d = this, l = e3 || {};
          if ("string" == typeof l || l instanceof HTMLElement ? l = { renderers: [l] } : "[object Array]" === Object.prototype.toString.call(l) && (l = { renderers: l }), a = l.renderers || l.renderer || l.container, l.renderers && 0 !== l.renderers.length || ("string" == typeof a || a instanceof HTMLElement || "object" == typeof a && "container" in a) && (l.renderers = [a]), l.id) {
            if (t2[l.id])
              throw 'sigma: Instance "' + l.id + '" already exists.';
            Object.defineProperty(this, "id", { value: l.id });
          } else {
            for (o2 = 0; t2[o2]; )
              o2++;
            Object.defineProperty(this, "id", { value: "" + o2 });
          }
          for (t2[this.id] = this, this.settings = new i2.classes.configurable(i2.settings, l.settings || {}), Object.defineProperty(this, "graph", { value: new i2.classes.graph(this.settings), configurable: true }), Object.defineProperty(this, "middlewares", { value: [], configurable: true }), Object.defineProperty(this, "cameras", { value: {}, configurable: true }), Object.defineProperty(this, "renderers", { value: {}, configurable: true }), Object.defineProperty(this, "renderersPerCamera", { value: {}, configurable: true }), Object.defineProperty(this, "cameraFrames", { value: {}, configurable: true }), Object.defineProperty(this, "camera", { get: function() {
            return this.cameras[0];
          } }), Object.defineProperty(this, "events", { value: ["click", "rightClick", "clickStage", "doubleClickStage", "rightClickStage", "clickNode", "clickNodes", "doubleClickNode", "doubleClickNodes", "rightClickNode", "rightClickNodes", "overNode", "overNodes", "outNode", "outNodes", "downNode", "downNodes", "upNode", "upNodes"], configurable: true }), this._handler = function(e4) {
            var t3, i3 = {};
            for (t3 in e4.data)
              i3[t3] = e4.data[t3];
            i3.renderer = e4.target, this.dispatchEvent(e4.type, i3);
          }.bind(this), n = 0, s = (r = l.renderers || []).length; n < s; n++)
            this.addRenderer(r[n]);
          for (n = 0, s = (r = l.middlewares || []).length; n < s; n++)
            this.middlewares.push("string" == typeof r[n] ? i2.middlewares[r[n]] : r[n]);
          "object" == typeof l.graph && l.graph && (this.graph.read(l.graph), this.refresh()), window.addEventListener("resize", function() {
            d.settings && d.refresh();
          });
        };
        if (i2.prototype.addCamera = function(t3) {
          var n, s = this;
          if (!arguments.length) {
            for (t3 = 0; this.cameras["" + t3]; )
              t3++;
            t3 = "" + t3;
          }
          if (this.cameras[t3])
            throw 'sigma.addCamera: The camera "' + t3 + '" already exists.';
          return n = new i2.classes.camera(t3, this.graph, this.settings), this.cameras[t3] = n, n.quadtree = new i2.classes.quad(), i2.classes.edgequad !== e2 && (n.edgequadtree = new i2.classes.edgequad()), n.bind("coordinatesUpdated", function(e3) {
            s.renderCamera(n, n.isAnimated);
          }), this.renderersPerCamera[t3] = [], n;
        }, i2.prototype.killCamera = function(e3) {
          if (!(e3 = "string" == typeof e3 ? this.cameras[e3] : e3))
            throw "sigma.killCamera: The camera is undefined.";
          var t3, i3 = this.renderersPerCamera[e3.id];
          for (t3 = i3.length - 1; t3 >= 0; t3--)
            this.killRenderer(i3[t3]);
          return delete this.renderersPerCamera[e3.id], delete this.cameraFrames[e3.id], delete this.cameras[e3.id], e3.kill && e3.kill(), this;
        }, i2.prototype.addRenderer = function(e3) {
          var t3, n, s, r, a = e3 || {};
          if ("string" == typeof a ? a = { container: document.getElementById(a) } : a instanceof HTMLElement && (a = { container: a }), "string" == typeof a.container && (a.container = document.getElementById(a.container)), "id" in a)
            t3 = a.id;
          else {
            for (t3 = 0; this.renderers["" + t3]; )
              t3++;
            t3 = "" + t3;
          }
          if (this.renderers[t3])
            throw 'sigma.addRenderer: The renderer "' + t3 + '" already exists.';
          if (n = (n = "function" == typeof a.type ? a.type : i2.renderers[a.type]) || i2.renderers.def, s = "camera" in a ? a.camera instanceof i2.classes.camera ? a.camera : this.cameras[a.camera] || this.addCamera(a.camera) : this.addCamera(), this.cameras[s.id] !== s)
            throw "sigma.addRenderer: The camera is not properly referenced.";
          return r = new n(this.graph, s, this.settings, a), this.renderers[t3] = r, Object.defineProperty(r, "id", { value: t3 }), r.bind && r.bind(["click", "rightClick", "clickStage", "doubleClickStage", "rightClickStage", "clickNode", "clickNodes", "clickEdge", "clickEdges", "doubleClickNode", "doubleClickNodes", "doubleClickEdge", "doubleClickEdges", "rightClickNode", "rightClickNodes", "rightClickEdge", "rightClickEdges", "overNode", "overNodes", "overEdge", "overEdges", "outNode", "outNodes", "outEdge", "outEdges", "downNode", "downNodes", "downEdge", "downEdges", "upNode", "upNodes", "upEdge", "upEdges"], this._handler), this.renderersPerCamera[s.id].push(r), r;
        }, i2.prototype.killRenderer = function(e3) {
          if (!(e3 = "string" == typeof e3 ? this.renderers[e3] : e3))
            throw "sigma.killRenderer: The renderer is undefined.";
          var t3 = this.renderersPerCamera[e3.camera.id], i3 = t3.indexOf(e3);
          return i3 >= 0 && t3.splice(i3, 1), e3.kill && e3.kill(), delete this.renderers[e3.id], this;
        }, i2.prototype.refresh = function(t3) {
          var n, s, r, a, o2, d, l = 0;
          for (t3 = t3 || {}, n = 0, s = (a = this.middlewares || []).length; n < s; n++)
            a[n].call(this, 0 === n ? "" : "tmp" + l + ":", n === s - 1 ? "ready:" : "tmp" + ++l + ":");
          for (r in this.cameras)
            (o2 = this.cameras[r]).settings("autoRescale") && this.renderersPerCamera[o2.id] && this.renderersPerCamera[o2.id].length ? i2.middlewares.rescale.call(this, a.length ? "ready:" : "", o2.readPrefix, { width: this.renderersPerCamera[o2.id][0].width, height: this.renderersPerCamera[o2.id][0].height }) : i2.middlewares.copy.call(this, a.length ? "ready:" : "", o2.readPrefix), t3.skipIndexation || (d = i2.utils.getBoundaries(this.graph, o2.readPrefix), o2.quadtree.index(this.graph.nodes(), { prefix: o2.readPrefix, bounds: { x: d.minX, y: d.minY, width: d.maxX - d.minX, height: d.maxY - d.minY } }), o2.edgequadtree !== e2 && o2.settings("drawEdges") && o2.settings("enableEdgeHovering") && o2.edgequadtree.index(this.graph, { prefix: o2.readPrefix, bounds: { x: d.minX, y: d.minY, width: d.maxX - d.minX, height: d.maxY - d.minY } }));
          for (n = 0, s = (a = Object.keys(this.renderers)).length; n < s; n++)
            if (this.renderers[a[n]].process)
              if (this.settings("skipErrors"))
                try {
                  this.renderers[a[n]].process();
                } catch (e3) {
                  console.log('Warning: The renderer "' + a[n] + '" crashed on ".process()"');
                }
              else
                this.renderers[a[n]].process();
          return this.render(), this;
        }, i2.prototype.render = function() {
          var e3, t3, i3;
          for (e3 = 0, t3 = (i3 = Object.keys(this.renderers)).length; e3 < t3; e3++)
            if (this.settings("skipErrors"))
              try {
                this.renderers[i3[e3]].render();
              } catch (t4) {
                this.settings("verbose") && console.log('Warning: The renderer "' + i3[e3] + '" crashed on ".render()"');
              }
            else
              this.renderers[i3[e3]].render();
          return this;
        }, i2.prototype.renderCamera = function(e3, t3) {
          var i3, n, s, r = this;
          if (t3)
            for (i3 = 0, n = (s = this.renderersPerCamera[e3.id]).length; i3 < n; i3++)
              if (this.settings("skipErrors"))
                try {
                  s[i3].render();
                } catch (e4) {
                  this.settings("verbose") && console.log('Warning: The renderer "' + s[i3].id + '" crashed on ".render()"');
                }
              else
                s[i3].render();
          else if (!this.cameraFrames[e3.id]) {
            for (i3 = 0, n = (s = this.renderersPerCamera[e3.id]).length; i3 < n; i3++)
              if (this.settings("skipErrors"))
                try {
                  s[i3].render();
                } catch (e4) {
                  this.settings("verbose") && console.log('Warning: The renderer "' + s[i3].id + '" crashed on ".render()"');
                }
              else
                s[i3].render();
            this.cameraFrames[e3.id] = requestAnimationFrame(function() {
              delete r.cameraFrames[e3.id];
            });
          }
          return this;
        }, i2.prototype.kill = function() {
          var e3;
          for (e3 in this.dispatchEvent("kill"), this.graph.kill(), delete this.middlewares, this.renderers)
            this.killRenderer(this.renderers[e3]);
          for (e3 in this.cameras)
            this.killCamera(this.cameras[e3]);
          for (e3 in delete this.renderers, delete this.cameras, this)
            this.hasOwnProperty(e3) && delete this[e3];
          delete t2[this.id];
        }, i2.instances = function(e3) {
          return arguments.length ? t2[e3] : i2.utils.extend({}, t2);
        }, i2.version = "1.2.1", void 0 !== this.sigma)
          throw "An object called sigma is already in the global scope.";
        this.sigma = i2;
      }).call(this);
    }).call(window);
  }, 117: function(e, t, i2) {
    (function() {
      !function(i3) {
        "use strict";
        if (i3.conrad)
          throw new Error("conrad already exists");
        var n, s = false, r = {}, a = {}, o2 = [], d = {}, l = [], h = false, c = { frameDuration: 20, history: true }, u = /* @__PURE__ */ Object.create(null);
        function g(e2, t2) {
          var i4, n2, s2, r2, a3, o3, d2 = Array.isArray(e2) ? e2 : e2.split(/ /);
          for (t2 = void 0 === t2 ? {} : t2, i4 = 0, s2 = d2.length; i4 !== s2; i4 += 1)
            if (o3 = d2[i4], u[o3])
              for (a3 = { type: o3, data: t2 || {} }, n2 = 0, r2 = u[o3].length; n2 !== r2; n2 += 1)
                try {
                  u[o3][n2].handler(a3);
                } catch (e3) {
                }
        }
        function f() {
          var e2, t2, i4, n2, s2 = false, r2 = E(), a3 = o2.shift();
          if (i4 = a3.job(), r2 = E() - r2, a3.done++, a3.time += r2, a3.currentTime += r2, a3.weightTime = a3.currentTime / (a3.weight || 1), a3.averageTime = a3.time / a3.done, !(n2 = a3.count ? a3.count <= a3.done : !i4)) {
            for (e2 = 0, t2 = o2.length; e2 < t2; e2++)
              if (o2[e2].weightTime > a3.weightTime) {
                o2.splice(e2, 0, a3), s2 = true;
                break;
              }
            s2 || o2.push(a3);
          }
          return n2 ? a3 : null;
        }
        function m(e2) {
          var t2 = o2.length;
          a[e2.id] = e2, e2.status = "running", t2 && (e2.weightTime = o2[t2 - 1].weightTime, e2.currentTime = e2.weightTime * (e2.weight || 1)), e2.startTime = E(), g("jobStarted", b(e2)), o2.push(e2);
        }
        function y() {
          var e2, t2, i4;
          for (e2 in r)
            (t2 = r[e2]).after ? d[e2] = t2 : m(t2), delete r[e2];
          for (s = !!o2.length; o2.length && E() - n < c.frameDuration; )
            if (i4 = f())
              for (e2 in p(i4.id), d)
                d[e2].after === i4.id && (m(d[e2]), delete d[e2]);
          s ? (n = E(), g("enterFrame"), setTimeout(y, 0)) : g("stop");
        }
        function p(e2) {
          var t2, i4, n2, s2, h2 = false;
          if (Array.isArray(e2))
            for (t2 = 0, i4 = e2.length; t2 < i4; t2++)
              p(e2[t2]);
          else {
            if ("string" != typeof e2)
              throw new Error("[conrad.killJob] Wrong arguments.");
            for (t2 = 0, i4 = (n2 = [a, d, r]).length; t2 < i4; t2++)
              e2 in n2[t2] && (s2 = n2[t2][e2], c.history && (s2.status = "done", l.push(s2)), g("jobEnded", b(s2)), delete n2[t2][e2], "function" == typeof s2.end && s2.end(), h2 = true);
            for (t2 = 0, i4 = (n2 = o2).length; t2 < i4; t2++)
              if (n2[t2].id === e2) {
                n2.splice(t2, 1);
                break;
              }
            if (!h2)
              throw new Error('[conrad.killJob] Job "' + e2 + '" not found.');
          }
          return this;
        }
        function x(e2) {
          var t2 = r[e2] || a[e2] || d[e2];
          return t2 ? v(t2) : null;
        }
        function v() {
          var e2, t2, i4 = {};
          for (e2 = arguments.length - 1; e2 >= 0; e2--)
            for (t2 in arguments[e2])
              i4[t2] = arguments[e2][t2];
          return i4;
        }
        function b(e2) {
          var t2, i4, n2;
          if (!e2)
            return e2;
          if (Array.isArray(e2))
            for (t2 = [], i4 = 0, n2 = e2.length; i4 < n2; i4++)
              t2.push(b(e2[i4]));
          else if ("object" == typeof e2)
            for (i4 in t2 = {}, e2)
              t2[i4] = b(e2[i4]);
          else
            t2 = e2;
          return t2;
        }
        function w(e2) {
          var t2, i4 = [];
          for (t2 in e2)
            i4.push(e2[t2]);
          return i4;
        }
        function E() {
          return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();
        }
        Array.isArray || (Array.isArray = function(e2) {
          return "[object Array]" === Object.prototype.toString.call(e2);
        });
        var C = { hasJob: x, addJob: function e2(t2, i4) {
          var a3, o3, d2;
          if (Array.isArray(t2)) {
            for (h = true, a3 = 0, o3 = t2.length; a3 < o3; a3++)
              e2(t2[a3].id, v(t2[a3], i4));
            h = false, s || (n = E(), g("start"), y());
          } else if ("object" == typeof t2)
            if ("string" == typeof t2.id)
              e2(t2.id, t2);
            else {
              for (a3 in h = true, t2)
                "function" == typeof t2[a3] ? e2(a3, v({ job: t2[a3] }, i4)) : e2(a3, v(t2[a3], i4));
              h = false, s || (n = E(), g("start"), y());
            }
          else {
            if ("string" != typeof t2)
              throw new Error("[conrad.addJob] Wrong arguments.");
            if (x(t2))
              throw new Error('[conrad.addJob] Job with id "' + t2 + '" already exists.');
            if ("function" == typeof i4)
              d2 = { id: t2, done: 0, time: 0, status: "waiting", currentTime: 0, averageTime: 0, weightTime: 0, job: i4 };
            else {
              if ("object" != typeof i4)
                throw new Error("[conrad.addJob] Wrong arguments.");
              d2 = v({ id: t2, done: 0, time: 0, status: "waiting", currentTime: 0, averageTime: 0, weightTime: 0 }, i4);
            }
            r[t2] = d2, g("jobAdded", b(d2)), s || h || (n = E(), g("start"), y());
          }
          return this;
        }, killJob: p, killAll: function() {
          var e2, t2 = v(r, a, d);
          if (c.history)
            for (e2 in t2)
              t2[e2].status = "done", l.push(t2[e2]), "function" == typeof t2[e2].end && t2[e2].end();
          return r = {}, d = {}, a = {}, o2 = [], s = false, this;
        }, settings: function(e2, t2) {
          var i4;
          if ("string" == typeof a1 && 1 === arguments.length)
            return c[a1];
          for (var n2 in i4 = "object" == typeof a1 && 1 === arguments.length && a1 || {}, "string" == typeof a1 && (i4[a1] = a2), i4)
            void 0 !== i4[n2] ? c[n2] = i4[n2] : delete c[n2];
          return this;
        }, getStats: function(e2, t2) {
          var i4, n2, s2, o3, h2, c2, u2;
          if (!arguments.length) {
            for (n2 in h2 = [], r)
              h2.push(r[n2]);
            for (n2 in d)
              h2.push(d[n2]);
            for (n2 in a)
              h2.push(a[n2]);
            h2 = h2.concat(l);
          }
          if ("string" == typeof e2)
            switch (e2) {
              case "waiting":
                h2 = w(d);
                break;
              case "running":
                h2 = w(a);
                break;
              case "done":
                h2 = l;
                break;
              default:
                c2 = e2;
            }
          if (e2 instanceof RegExp && (c2 = e2), !c2 && ("string" == typeof t2 || t2 instanceof RegExp) && (c2 = t2), c2) {
            if (u2 = "string" == typeof c2, h2 instanceof Array)
              i4 = h2;
            else if ("object" == typeof h2)
              for (n2 in i4 = [], h2)
                i4 = i4.concat(h2[n2]);
            else {
              for (n2 in i4 = [], r)
                i4.push(r[n2]);
              for (n2 in d)
                i4.push(d[n2]);
              for (n2 in a)
                i4.push(a[n2]);
              i4 = i4.concat(l);
            }
            for (h2 = [], s2 = 0, o3 = i4.length; s2 < o3; s2++)
              (u2 ? i4[s2].id === c2 : i4[s2].id.match(c2)) && h2.push(i4[s2]);
          }
          return b(h2);
        }, isRunning: function() {
          return s;
        }, clearHistory: function() {
          return l = [], this;
        }, bind: function e2(t2, i4) {
          var n2, s2, r2, a3;
          if (arguments.length) {
            if (1 === arguments.length && Object(arguments[0]) === arguments[0])
              for (t2 in arguments[0])
                e2(t2, arguments[0][t2]);
            else if (arguments.length > 1)
              for (n2 = 0, s2 = (a3 = Array.isArray(t2) ? t2 : t2.split(/ /)).length; n2 !== s2; n2 += 1)
                r2 = a3[n2], u[r2] || (u[r2] = []), u[r2].push({ handler: i4 });
          }
        }, unbind: function(e2, t2) {
          var i4, n2, s2, r2, a3, o3, d2 = Array.isArray(e2) ? e2 : e2.split(/ /);
          if (arguments.length)
            if (t2)
              for (i4 = 0, n2 = d2.length; i4 !== n2; i4 += 1) {
                if (o3 = d2[i4], u[o3]) {
                  for (a3 = [], s2 = 0, r2 = u[o3].length; s2 !== r2; s2 += 1)
                    u[o3][s2].handler !== t2 && a3.push(u[o3][s2]);
                  u[o3] = a3;
                }
                u[o3] && 0 === u[o3].length && delete u[o3];
              }
            else
              for (i4 = 0, n2 = d2.length; i4 !== n2; i4 += 1)
                delete u[d2[i4]];
          else
            u = /* @__PURE__ */ Object.create(null);
        }, version: "0.1.0" };
        e.exports && (t = e.exports = C), t.conrad = C, i3.conrad = C;
      }(this);
    }).call(window);
  }, 118: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        var t2, i2 = this;
        sigma.utils = sigma.utils || {}, sigma.utils.extend = function() {
          var e3, t3, i3 = {}, n2 = arguments.length;
          for (e3 = n2 - 1; e3 >= 0; e3--)
            for (t3 in arguments[e3])
              i3[t3] = arguments[e3][t3];
          return i3;
        }, sigma.utils.dateNow = function() {
          return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();
        }, sigma.utils.pkg = function(e3) {
          return (e3 || "").split(".").reduce(function(e4, t3) {
            return t3 in e4 ? e4[t3] : e4[t3] = {};
          }, i2);
        }, sigma.utils.id = (t2 = 0, function() {
          return ++t2;
        });
        var n = {};
        sigma.utils.floatColor = function(e3) {
          if (n[e3])
            return n[e3];
          var t3 = e3, i3 = 0, s = 0, r = 0;
          "#" === e3[0] ? 3 === (e3 = e3.slice(1)).length ? (i3 = parseInt(e3.charAt(0) + e3.charAt(0), 16), s = parseInt(e3.charAt(1) + e3.charAt(1), 16), r = parseInt(e3.charAt(2) + e3.charAt(2), 16)) : (i3 = parseInt(e3.charAt(0) + e3.charAt(1), 16), s = parseInt(e3.charAt(2) + e3.charAt(3), 16), r = parseInt(e3.charAt(4) + e3.charAt(5), 16)) : e3.match(/^ *rgba? *\(/) && (i3 = +(e3 = e3.match(/^ *rgba? *\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\) *$/))[1], s = +e3[2], r = +e3[3]);
          var a = 256 * i3 * 256 + 256 * s + r;
          return n[t3] = a, a;
        }, sigma.utils.zoomTo = function(e3, t3, i3, n2, s) {
          var r, a, o2, d = e3.settings;
          (a = Math.max(d("zoomMin"), Math.min(d("zoomMax"), e3.ratio * n2))) !== e3.ratio && (o2 = { x: t3 * (1 - (n2 = a / e3.ratio)) + e3.x, y: i3 * (1 - n2) + e3.y, ratio: a }, s && s.duration ? (r = sigma.misc.animation.killAll(e3), s = sigma.utils.extend(s, { easing: r ? "quadraticOut" : "quadraticInOut" }), sigma.misc.animation.camera(e3, o2, s)) : (e3.goTo(o2), s && s.onComplete && s.onComplete()));
        }, sigma.utils.getQuadraticControlPoint = function(e3, t3, i3, n2) {
          return { x: (e3 + i3) / 2 + (n2 - t3) / 4, y: (t3 + n2) / 2 + (e3 - i3) / 4 };
        }, sigma.utils.getPointOnQuadraticCurve = function(e3, t3, i3, n2, s, r, a) {
          return { x: Math.pow(1 - e3, 2) * t3 + 2 * (1 - e3) * e3 * r + Math.pow(e3, 2) * n2, y: Math.pow(1 - e3, 2) * i3 + 2 * (1 - e3) * e3 * a + Math.pow(e3, 2) * s };
        }, sigma.utils.getPointOnBezierCurve = function(e3, t3, i3, n2, s, r, a, o2, d) {
          var l = Math.pow(1 - e3, 3), h = 3 * e3 * Math.pow(1 - e3, 2), c = 3 * Math.pow(e3, 2) * (1 - e3), u = Math.pow(e3, 3);
          return { x: l * t3 + h * r + c * o2 + u * n2, y: l * i3 + h * a + c * d + u * s };
        }, sigma.utils.getSelfLoopControlPoints = function(e3, t3, i3) {
          return { x1: e3 - 7 * i3, y1: t3, x2: e3, y2: t3 + 7 * i3 };
        }, sigma.utils.getDistance = function(e3, t3, i3, n2) {
          return Math.sqrt(Math.pow(i3 - e3, 2) + Math.pow(n2 - t3, 2));
        }, sigma.utils.getCircleIntersection = function(e3, t3, i3, n2, s, r) {
          var a, o2, d, l, h, c, u, g, f;
          return o2 = n2 - e3, d = s - t3, !((l = Math.sqrt(d * d + o2 * o2)) > i3 + r) && (!(l < Math.abs(i3 - r)) && (f = t3 + d * (a = (i3 * i3 - r * r + l * l) / (2 * l)) / l, { xi: (g = e3 + o2 * a / l) + (c = (h = Math.sqrt(i3 * i3 - a * a)) / l * -d), xi_prime: g - c, yi: f + (u = o2 * (h / l)), yi_prime: f - u }));
        }, sigma.utils.isPointOnSegment = function(e3, t3, i3, n2, s, r, a) {
          return Math.abs((t3 - n2) * (s - i3) - (e3 - i3) * (r - n2)) / sigma.utils.getDistance(i3, n2, s, r) < a && Math.min(i3, s) <= e3 && e3 <= Math.max(i3, s) && Math.min(n2, r) <= t3 && t3 <= Math.max(n2, r);
        }, sigma.utils.isPointOnQuadraticCurve = function(e3, t3, i3, n2, s, r, a, o2, d) {
          var l = sigma.utils.getDistance(i3, n2, s, r);
          if (Math.abs(e3 - i3) > l || Math.abs(t3 - n2) > l)
            return false;
          for (var h, c = 0.5, u = sigma.utils.getDistance(e3, t3, i3, n2) < sigma.utils.getDistance(e3, t3, s, r) ? -0.01 : 0.01, g = 100, f = sigma.utils.getPointOnQuadraticCurve(c, i3, n2, s, r, a, o2), m = sigma.utils.getDistance(e3, t3, f.x, f.y); g-- > 0 && c >= 0 && c <= 1 && m > d && (u > 1e-3 || u < -1e-3); )
            h = m, f = sigma.utils.getPointOnQuadraticCurve(c, i3, n2, s, r, a, o2), (m = sigma.utils.getDistance(e3, t3, f.x, f.y)) > h ? c += u = -u / 2 : c + u < 0 || c + u > 1 ? (u /= 2, m = h) : c += u;
          return m < d;
        }, sigma.utils.isPointOnBezierCurve = function(e3, t3, i3, n2, s, r, a, o2, d, l, h) {
          var c = sigma.utils.getDistance(i3, n2, a, o2);
          if (Math.abs(e3 - i3) > c || Math.abs(t3 - n2) > c)
            return false;
          for (var u, g = 0.5, f = sigma.utils.getDistance(e3, t3, i3, n2) < sigma.utils.getDistance(e3, t3, s, r) ? -0.01 : 0.01, m = 100, y = sigma.utils.getPointOnBezierCurve(g, i3, n2, s, r, a, o2, d, l), p = sigma.utils.getDistance(e3, t3, y.x, y.y); m-- > 0 && g >= 0 && g <= 1 && p > h && (f > 1e-3 || f < -1e-3); )
            u = p, y = sigma.utils.getPointOnBezierCurve(g, i3, n2, s, r, a, o2, d, l), (p = sigma.utils.getDistance(e3, t3, y.x, y.y)) > u ? g += f = -f / 2 : g + f < 0 || g + f > 1 ? (f /= 2, p = u) : g += f;
          return p < h;
        }, sigma.utils.getX = function(t3) {
          return t3.offsetX !== e2 && t3.offsetX || t3.layerX !== e2 && t3.layerX || t3.clientX !== e2 && t3.clientX;
        }, sigma.utils.getY = function(t3) {
          return t3.offsetY !== e2 && t3.offsetY || t3.layerY !== e2 && t3.layerY || t3.clientY !== e2 && t3.clientY;
        }, sigma.utils.getPixelRatio = function() {
          var t3 = 1;
          return window.screen.deviceXDPI !== e2 && window.screen.logicalXDPI !== e2 && window.screen.deviceXDPI > window.screen.logicalXDPI ? t3 = window.screen.systemXDPI / window.screen.logicalXDPI : window.devicePixelRatio !== e2 && (t3 = window.devicePixelRatio), t3;
        }, sigma.utils.getWidth = function(t3) {
          var i3 = t3.target.ownerSVGElement ? t3.target.ownerSVGElement.width : t3.target.width;
          return "number" == typeof i3 && i3 || i3 !== e2 && i3.baseVal !== e2 && i3.baseVal.value;
        }, sigma.utils.getCenter = function(e3) {
          var t3 = -1 !== e3.target.namespaceURI.indexOf("svg") ? 1 : sigma.utils.getPixelRatio();
          return { x: sigma.utils.getWidth(e3) / (2 * t3), y: sigma.utils.getHeight(e3) / (2 * t3) };
        }, sigma.utils.mouseCoords = function(e3, t3, i3) {
          return t3 = t3 || sigma.utils.getX(e3), i3 = i3 || sigma.utils.getY(e3), { x: t3 - sigma.utils.getCenter(e3).x, y: i3 - sigma.utils.getCenter(e3).y, clientX: e3.clientX, clientY: e3.clientY, ctrlKey: e3.ctrlKey, metaKey: e3.metaKey, altKey: e3.altKey, shiftKey: e3.shiftKey };
        }, sigma.utils.getHeight = function(t3) {
          var i3 = t3.target.ownerSVGElement ? t3.target.ownerSVGElement.height : t3.target.height;
          return "number" == typeof i3 && i3 || i3 !== e2 && i3.baseVal !== e2 && i3.baseVal.value;
        }, sigma.utils.getDelta = function(t3) {
          return t3.wheelDelta !== e2 && t3.wheelDelta || t3.detail !== e2 && -t3.detail;
        }, sigma.utils.getOffset = function(e3) {
          for (var t3 = 0, i3 = 0; e3; )
            i3 += parseInt(e3.offsetTop), t3 += parseInt(e3.offsetLeft), e3 = e3.offsetParent;
          return { top: i3, left: t3 };
        }, sigma.utils.doubleClick = function(e3, t3, i3) {
          var n2, s = 0;
          e3._doubleClickHandler = e3._doubleClickHandler || {}, e3._doubleClickHandler[t3] = e3._doubleClickHandler[t3] || [], (n2 = e3._doubleClickHandler[t3]).push(function(e4) {
            if (2 === ++s)
              return s = 0, i3(e4);
            1 === s && setTimeout(function() {
              s = 0;
            }, sigma.settings.doubleClickTimeout);
          }), e3.addEventListener(t3, n2[n2.length - 1], false);
        }, sigma.utils.unbindDoubleClick = function(e3, t3) {
          for (var i3, n2 = (e3._doubleClickHandler || {})[t3] || []; i3 = n2.pop(); )
            e3.removeEventListener(t3, i3);
          delete (e3._doubleClickHandler || {})[t3];
        }, sigma.utils.easings = sigma.utils.easings || {}, sigma.utils.easings.linearNone = function(e3) {
          return e3;
        }, sigma.utils.easings.quadraticIn = function(e3) {
          return e3 * e3;
        }, sigma.utils.easings.quadraticOut = function(e3) {
          return e3 * (2 - e3);
        }, sigma.utils.easings.quadraticInOut = function(e3) {
          return (e3 *= 2) < 1 ? 0.5 * e3 * e3 : -0.5 * (--e3 * (e3 - 2) - 1);
        }, sigma.utils.easings.cubicIn = function(e3) {
          return e3 * e3 * e3;
        }, sigma.utils.easings.cubicOut = function(e3) {
          return --e3 * e3 * e3 + 1;
        }, sigma.utils.easings.cubicInOut = function(e3) {
          return (e3 *= 2) < 1 ? 0.5 * e3 * e3 * e3 : 0.5 * ((e3 -= 2) * e3 * e3 + 2);
        }, sigma.utils.loadShader = function(e3, t3, i3, n2) {
          var s = e3.createShader(i3);
          return e3.shaderSource(s, t3), e3.compileShader(s), e3.getShaderParameter(s, e3.COMPILE_STATUS) ? s : (n2 && n2('Error compiling shader "' + s + '":' + e3.getShaderInfoLog(s)), e3.deleteShader(s), null);
        }, sigma.utils.loadProgram = function(e3, t3, i3, n2, s) {
          var r, a = e3.createProgram();
          for (r = 0; r < t3.length; ++r)
            e3.attachShader(a, t3[r]);
          if (i3)
            for (r = 0; r < i3.length; ++r)
              e3.bindAttribLocation(a, locations ? locations[r] : r, opt_attribs[r]);
          return e3.linkProgram(a), e3.getProgramParameter(a, e3.LINK_STATUS) ? a : (s && s("Error in program linking: " + e3.getProgramInfoLog(a)), e3.deleteProgram(a), null);
        }, sigma.utils.pkg("sigma.utils.matrices"), sigma.utils.matrices.translation = function(e3, t3) {
          return [1, 0, 0, 0, 1, 0, e3, t3, 1];
        }, sigma.utils.matrices.rotation = function(e3, t3) {
          var i3 = Math.cos(e3), n2 = Math.sin(e3);
          return t3 ? [i3, -n2, n2, i3] : [i3, -n2, 0, n2, i3, 0, 0, 0, 1];
        }, sigma.utils.matrices.scale = function(e3, t3) {
          return t3 ? [e3, 0, 0, e3] : [e3, 0, 0, 0, e3, 0, 0, 0, 1];
        }, sigma.utils.matrices.multiply = function(e3, t3, i3) {
          var n2 = i3 ? 2 : 3, s = e3[0 * n2 + 0], r = e3[0 * n2 + 1], a = e3[0 * n2 + 2], o2 = e3[1 * n2 + 0], d = e3[1 * n2 + 1], l = e3[1 * n2 + 2], h = e3[2 * n2 + 0], c = e3[2 * n2 + 1], u = e3[2 * n2 + 2], g = t3[0 * n2 + 0], f = t3[0 * n2 + 1], m = t3[0 * n2 + 2], y = t3[1 * n2 + 0], p = t3[1 * n2 + 1], x = t3[1 * n2 + 2], v = t3[2 * n2 + 0], b = t3[2 * n2 + 1], w = t3[2 * n2 + 2];
          return i3 ? [s * g + r * y, s * f + r * p, o2 * g + d * y, o2 * f + d * p] : [s * g + r * y + a * v, s * f + r * p + a * b, s * m + r * x + a * w, o2 * g + d * y + l * v, o2 * f + d * p + l * b, o2 * m + d * x + l * w, h * g + c * y + u * v, h * f + c * p + u * b, h * m + c * x + u * w];
        };
      }).call(this);
    }).call(window);
  }, 119: function(e, t) {
    (function() {
      !function(e2) {
        "use strict";
        var t2, i2 = 0, n = ["ms", "moz", "webkit", "o"];
        for (t2 = 0; t2 < n.length && !e2.requestAnimationFrame; t2++)
          e2.requestAnimationFrame = e2[n[t2] + "RequestAnimationFrame"], e2.cancelAnimationFrame = e2[n[t2] + "CancelAnimationFrame"] || e2[n[t2] + "CancelRequestAnimationFrame"];
        e2.requestAnimationFrame || (e2.requestAnimationFrame = function(t3, n2) {
          var s = (/* @__PURE__ */ new Date()).getTime(), r = Math.max(0, 16 - (s - i2)), a = e2.setTimeout(function() {
            t3(s + r);
          }, r);
          return i2 = s + r, a;
        }), e2.cancelAnimationFrame || (e2.cancelAnimationFrame = function(e3) {
          clearTimeout(e3);
        }), Function.prototype.bind || (Function.prototype.bind = function(e3) {
          if ("function" != typeof this)
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
          var t3, i3, n2 = Array.prototype.slice.call(arguments, 1), s = this;
          return i3 = function() {
            return s.apply(this instanceof t3 && e3 ? this : e3, n2.concat(Array.prototype.slice.call(arguments)));
          }, (t3 = function() {
          }).prototype = this.prototype, i3.prototype = new t3(), i3;
        });
      }(this);
    }).call(window);
  }, 120: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.settings");
        sigma.settings = sigma.utils.extend(sigma.settings || {}, { clone: true, immutable: true, verbose: false, classPrefix: "sigma", defaultNodeType: "def", defaultEdgeType: "def", defaultLabelColor: "#000", defaultEdgeColor: "#000", defaultNodeColor: "#000", defaultLabelSize: 14, edgeColor: "source", minArrowSize: 0, font: "arial", fontStyle: "", labelColor: "default", labelSize: "fixed", labelSizeRatio: 1, labelThreshold: 8, webglOversamplingRatio: 2, borderSize: 0, defaultNodeBorderColor: "#000", hoverFont: "", singleHover: true, hoverFontStyle: "", labelHoverShadow: "default", labelHoverShadowColor: "#000", nodeHoverColor: "node", defaultNodeHoverColor: "#000", labelHoverBGColor: "default", defaultHoverLabelBGColor: "#fff", labelHoverColor: "default", defaultLabelHoverColor: "#000", edgeHoverColor: "edge", edgeHoverSizeRatio: 1, defaultEdgeHoverColor: "#000", edgeHoverExtremities: false, drawEdges: true, drawNodes: true, drawLabels: true, drawEdgeLabels: false, batchEdgesDrawing: false, hideEdgesOnMove: false, canvasEdgesBatchSize: 500, webglEdgesBatchSize: 1e3, scalingMode: "inside", sideMargin: 0, minEdgeSize: 0.5, maxEdgeSize: 1, minNodeSize: 1, maxNodeSize: 8, touchEnabled: true, mouseEnabled: true, mouseWheelEnabled: true, doubleClickEnabled: true, eventsEnabled: true, zoomingRatio: 1.7, doubleClickZoomingRatio: 2.2, zoomMin: 0.0625, zoomMax: 2, mouseZoomDuration: 200, doubleClickZoomDuration: 200, mouseInertiaDuration: 200, mouseInertiaRatio: 3, touchInertiaDuration: 200, touchInertiaRatio: 3, doubleClickTimeout: 300, doubleTapTimeout: 300, dragTimeout: 200, autoResize: true, autoRescale: true, enableCamera: true, enableHovering: true, enableEdgeHovering: false, edgeHoverPrecision: 5, rescaleIgnoreSize: false, skipErrors: false, nodesPowRatio: 0.5, edgesPowRatio: 0.5, animationsTime: 200 });
      }).call(this);
    }).call(window);
  }, 121: function(e, t, i2) {
    (function() {
      (function() {
        "use strict";
        var i3 = function() {
          Object.defineProperty(this, "_handlers", { value: {} });
        };
        i3.prototype.bind = function(e2, t2) {
          var i4, n, s, r;
          if (1 === arguments.length && "object" == typeof arguments[0])
            for (e2 in arguments[0])
              this.bind(e2, arguments[0][e2]);
          else {
            if (2 !== arguments.length || "function" != typeof arguments[1])
              throw "bind: Wrong arguments.";
            for (i4 = 0, n = (r = "string" == typeof e2 ? e2.split(" ") : e2).length; i4 !== n; i4 += 1)
              (s = r[i4]) && (this._handlers[s] || (this._handlers[s] = []), this._handlers[s].push({ handler: t2 }));
          }
          return this;
        }, i3.prototype.unbind = function(e2, t2) {
          var i4, n, s, r, a, o2, d, l = "string" == typeof e2 ? e2.split(" ") : e2;
          if (!arguments.length) {
            for (a in this._handlers)
              delete this._handlers[a];
            return this;
          }
          if (t2)
            for (i4 = 0, n = l.length; i4 !== n; i4 += 1) {
              if (d = l[i4], this._handlers[d]) {
                for (o2 = [], s = 0, r = this._handlers[d].length; s !== r; s += 1)
                  this._handlers[d][s].handler !== t2 && o2.push(this._handlers[d][s]);
                this._handlers[d] = o2;
              }
              this._handlers[d] && 0 === this._handlers[d].length && delete this._handlers[d];
            }
          else
            for (i4 = 0, n = l.length; i4 !== n; i4 += 1)
              delete this._handlers[l[i4]];
          return this;
        }, i3.prototype.dispatchEvent = function(e2, t2) {
          var i4, n, s, r, a, o2, d, l = "string" == typeof e2 ? e2.split(" ") : e2;
          for (t2 = void 0 === t2 ? {} : t2, i4 = 0, n = l.length; i4 !== n; i4 += 1)
            if (d = l[i4], this._handlers[d]) {
              for (o2 = this.getEvent(d, t2), a = [], s = 0, r = this._handlers[d].length; s !== r; s += 1)
                this._handlers[d][s].handler(o2), this._handlers[d][s].one || a.push(this._handlers[d][s]);
              this._handlers[d] = a;
            }
          return this;
        }, i3.prototype.getEvent = function(e2, t2) {
          return { type: e2, data: t2 || {}, target: this };
        }, i3.extend = function(e2, t2) {
          var n;
          for (n in i3.prototype)
            i3.prototype.hasOwnProperty(n) && (e2[n] = i3.prototype[n]);
          i3.apply(e2, t2);
        }, void 0 !== this.sigma ? (this.sigma.classes = this.sigma.classes || {}, this.sigma.classes.dispatcher = i3) : (e.exports && (t = e.exports = i3), t.dispatcher = i3);
      }).call(this);
    }).call(window);
  }, 122: function(e, t, i2) {
    (function() {
      (function() {
        "use strict";
        var i3 = function() {
          var e2, t2, n = {}, s = Array.prototype.slice.call(arguments, 0), r = function(e3, t3) {
            var i4, a, o2, d;
            if (1 !== arguments.length || "string" != typeof e3) {
              if ("object" == typeof e3 && "string" == typeof t3)
                return void 0 !== (e3 || {})[t3] ? e3[t3] : r(t3);
              for (i4 = "object" == typeof e3 && void 0 === t3 ? e3 : {}, "string" == typeof e3 && (i4[e3] = t3), a = 0, o2 = (d = Object.keys(i4)).length; a < o2; a++)
                n[d[a]] = i4[d[a]];
              return this;
            }
            if (void 0 !== n[e3])
              return n[e3];
            for (a = 0, o2 = s.length; a < o2; a++)
              if (void 0 !== s[a][e3])
                return s[a][e3];
          };
          for (r.embedObjects = function() {
            var e3 = s.concat(n).concat(Array.prototype.splice.call(arguments, 0));
            return i3.apply({}, e3);
          }, e2 = 0, t2 = arguments.length; e2 < t2; e2++)
            r(arguments[e2]);
          return r;
        };
        void 0 !== this.sigma ? (this.sigma.classes = this.sigma.classes || {}, this.sigma.classes.configurable = i3) : (e.exports && (t = e.exports = i3), t.configurable = i3);
      }).call(this);
    }).call(window);
  }, 123: function(e, t, i2) {
    (function() {
      (function(i3) {
        "use strict";
        var n = /* @__PURE__ */ Object.create(null), s = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null), a = /* @__PURE__ */ Object.create(null), o2 = /* @__PURE__ */ Object.create(null), d = { immutable: true, clone: true }, l = function(e2) {
          return d[e2];
        }, h = function(e2) {
          var t2, i4, s2;
          for (t2 in s2 = { settings: e2 || l, nodesArray: [], edgesArray: [], nodesIndex: /* @__PURE__ */ Object.create(null), edgesIndex: /* @__PURE__ */ Object.create(null), inNeighborsIndex: /* @__PURE__ */ Object.create(null), outNeighborsIndex: /* @__PURE__ */ Object.create(null), allNeighborsIndex: /* @__PURE__ */ Object.create(null), inNeighborsCount: /* @__PURE__ */ Object.create(null), outNeighborsCount: /* @__PURE__ */ Object.create(null), allNeighborsCount: /* @__PURE__ */ Object.create(null) }, r)
            r[t2].call(s2);
          for (t2 in n)
            i4 = c(t2, s2, n[t2]), this[t2] = i4, s2[t2] = i4;
        };
        function c(e2, t2, i4) {
          return function() {
            var n2, s2;
            for (n2 in o2[e2])
              o2[e2][n2].apply(t2, arguments);
            for (n2 in s2 = i4.apply(t2, arguments), a[e2])
              a[e2][n2].apply(t2, arguments);
            return s2;
          };
        }
        function u(e2) {
          var t2;
          for (t2 in e2)
            "hasOwnProperty" in e2 && !e2.hasOwnProperty(t2) || delete e2[t2];
          return e2;
        }
        h.addMethod = function(e2, t2) {
          if ("string" != typeof e2 || "function" != typeof t2 || 2 !== arguments.length)
            throw "addMethod: Wrong arguments.";
          if (n[e2] || h[e2])
            throw 'The method "' + e2 + '" already exists.';
          return n[e2] = t2, a[e2] = /* @__PURE__ */ Object.create(null), o2[e2] = /* @__PURE__ */ Object.create(null), this;
        }, h.hasMethod = function(e2) {
          return !(!n[e2] && !h[e2]);
        }, h.attach = function(e2, t2, i4, n2) {
          if ("string" != typeof e2 || "string" != typeof t2 || "function" != typeof i4 || arguments.length < 3 || arguments.length > 4)
            throw "attach: Wrong arguments.";
          var s2;
          if ("constructor" === e2)
            s2 = r;
          else if (n2) {
            if (!o2[e2])
              throw 'The method "' + e2 + '" does not exist.';
            s2 = o2[e2];
          } else {
            if (!a[e2])
              throw 'The method "' + e2 + '" does not exist.';
            s2 = a[e2];
          }
          if (s2[t2])
            throw 'A function "' + t2 + '" is already attached to the method "' + e2 + '".';
          return s2[t2] = i4, this;
        }, h.attachBefore = function(e2, t2, i4) {
          return this.attach(e2, t2, i4, true);
        }, h.addIndex = function(e2, t2) {
          if ("string" != typeof e2 || Object(t2) !== t2 || 2 !== arguments.length)
            throw "addIndex: Wrong arguments.";
          if (s[e2])
            throw 'The index "' + e2 + '" already exists.';
          var i4;
          for (i4 in s[e2] = t2, t2) {
            if ("function" != typeof t2[i4])
              throw "The bindings must be functions.";
            h.attach(i4, e2, t2[i4]);
          }
          return this;
        }, h.addMethod("addNode", function(e2) {
          if (Object(e2) !== e2 || 1 !== arguments.length)
            throw "addNode: Wrong arguments.";
          if ("string" != typeof e2.id && "number" != typeof e2.id)
            throw "The node must have a string or number id.";
          if (this.nodesIndex[e2.id])
            throw 'The node "' + e2.id + '" already exists.';
          var t2, i4 = e2.id, n2 = /* @__PURE__ */ Object.create(null);
          if (this.settings("clone"))
            for (t2 in e2)
              "id" !== t2 && (n2[t2] = e2[t2]);
          else
            n2 = e2;
          return this.settings("immutable") ? Object.defineProperty(n2, "id", { value: i4, enumerable: true }) : n2.id = i4, this.inNeighborsIndex[i4] = /* @__PURE__ */ Object.create(null), this.outNeighborsIndex[i4] = /* @__PURE__ */ Object.create(null), this.allNeighborsIndex[i4] = /* @__PURE__ */ Object.create(null), this.inNeighborsCount[i4] = 0, this.outNeighborsCount[i4] = 0, this.allNeighborsCount[i4] = 0, this.nodesArray.push(n2), this.nodesIndex[n2.id] = n2, this;
        }), h.addMethod("addEdge", function(e2) {
          if (Object(e2) !== e2 || 1 !== arguments.length)
            throw "addEdge: Wrong arguments.";
          if ("string" != typeof e2.id && "number" != typeof e2.id)
            throw "The edge must have a string or number id.";
          if ("string" != typeof e2.source && "number" != typeof e2.source || !this.nodesIndex[e2.source])
            throw "The edge source must have an existing node id.";
          if ("string" != typeof e2.target && "number" != typeof e2.target || !this.nodesIndex[e2.target])
            throw "The edge target must have an existing node id.";
          if (this.edgesIndex[e2.id])
            throw 'The edge "' + e2.id + '" already exists.';
          var t2, i4 = /* @__PURE__ */ Object.create(null);
          if (this.settings("clone"))
            for (t2 in e2)
              "id" !== t2 && "source" !== t2 && "target" !== t2 && (i4[t2] = e2[t2]);
          else
            i4 = e2;
          return this.settings("immutable") ? (Object.defineProperty(i4, "id", { value: e2.id, enumerable: true }), Object.defineProperty(i4, "source", { value: e2.source, enumerable: true }), Object.defineProperty(i4, "target", { value: e2.target, enumerable: true })) : (i4.id = e2.id, i4.source = e2.source, i4.target = e2.target), this.edgesArray.push(i4), this.edgesIndex[i4.id] = i4, this.inNeighborsIndex[i4.target][i4.source] || (this.inNeighborsIndex[i4.target][i4.source] = /* @__PURE__ */ Object.create(null)), this.inNeighborsIndex[i4.target][i4.source][i4.id] = i4, this.outNeighborsIndex[i4.source][i4.target] || (this.outNeighborsIndex[i4.source][i4.target] = /* @__PURE__ */ Object.create(null)), this.outNeighborsIndex[i4.source][i4.target][i4.id] = i4, this.allNeighborsIndex[i4.source][i4.target] || (this.allNeighborsIndex[i4.source][i4.target] = /* @__PURE__ */ Object.create(null)), this.allNeighborsIndex[i4.source][i4.target][i4.id] = i4, i4.target !== i4.source && (this.allNeighborsIndex[i4.target][i4.source] || (this.allNeighborsIndex[i4.target][i4.source] = /* @__PURE__ */ Object.create(null)), this.allNeighborsIndex[i4.target][i4.source][i4.id] = i4), this.inNeighborsCount[i4.target]++, this.outNeighborsCount[i4.source]++, this.allNeighborsCount[i4.target]++, this.allNeighborsCount[i4.source]++, this;
        }), h.addMethod("dropNode", function(e2) {
          if ("string" != typeof e2 && "number" != typeof e2 || 1 !== arguments.length)
            throw "dropNode: Wrong arguments.";
          if (!this.nodesIndex[e2])
            throw 'The node "' + e2 + '" does not exist.';
          var t2, i4, n2;
          for (delete this.nodesIndex[e2], t2 = 0, n2 = this.nodesArray.length; t2 < n2; t2++)
            if (this.nodesArray[t2].id === e2) {
              this.nodesArray.splice(t2, 1);
              break;
            }
          for (t2 = this.edgesArray.length - 1; t2 >= 0; t2--)
            this.edgesArray[t2].source !== e2 && this.edgesArray[t2].target !== e2 || this.dropEdge(this.edgesArray[t2].id);
          for (i4 in delete this.inNeighborsIndex[e2], delete this.outNeighborsIndex[e2], delete this.allNeighborsIndex[e2], delete this.inNeighborsCount[e2], delete this.outNeighborsCount[e2], delete this.allNeighborsCount[e2], this.nodesIndex)
            delete this.inNeighborsIndex[i4][e2], delete this.outNeighborsIndex[i4][e2], delete this.allNeighborsIndex[i4][e2];
          return this;
        }), h.addMethod("dropEdge", function(e2) {
          if ("string" != typeof e2 && "number" != typeof e2 || 1 !== arguments.length)
            throw "dropEdge: Wrong arguments.";
          if (!this.edgesIndex[e2])
            throw 'The edge "' + e2 + '" does not exist.';
          var t2, i4, n2;
          for (n2 = this.edgesIndex[e2], delete this.edgesIndex[e2], t2 = 0, i4 = this.edgesArray.length; t2 < i4; t2++)
            if (this.edgesArray[t2].id === e2) {
              this.edgesArray.splice(t2, 1);
              break;
            }
          return delete this.inNeighborsIndex[n2.target][n2.source][n2.id], Object.keys(this.inNeighborsIndex[n2.target][n2.source]).length || delete this.inNeighborsIndex[n2.target][n2.source], delete this.outNeighborsIndex[n2.source][n2.target][n2.id], Object.keys(this.outNeighborsIndex[n2.source][n2.target]).length || delete this.outNeighborsIndex[n2.source][n2.target], delete this.allNeighborsIndex[n2.source][n2.target][n2.id], Object.keys(this.allNeighborsIndex[n2.source][n2.target]).length || delete this.allNeighborsIndex[n2.source][n2.target], n2.target !== n2.source && (delete this.allNeighborsIndex[n2.target][n2.source][n2.id], Object.keys(this.allNeighborsIndex[n2.target][n2.source]).length || delete this.allNeighborsIndex[n2.target][n2.source]), this.inNeighborsCount[n2.target]--, this.outNeighborsCount[n2.source]--, this.allNeighborsCount[n2.source]--, this.allNeighborsCount[n2.target]--, this;
        }), h.addMethod("kill", function() {
          this.nodesArray.length = 0, this.edgesArray.length = 0, delete this.nodesArray, delete this.edgesArray, delete this.nodesIndex, delete this.edgesIndex, delete this.inNeighborsIndex, delete this.outNeighborsIndex, delete this.allNeighborsIndex, delete this.inNeighborsCount, delete this.outNeighborsCount, delete this.allNeighborsCount;
        }), h.addMethod("clear", function() {
          return this.nodesArray.length = 0, this.edgesArray.length = 0, u(this.nodesIndex), u(this.edgesIndex), u(this.nodesIndex), u(this.inNeighborsIndex), u(this.outNeighborsIndex), u(this.allNeighborsIndex), u(this.inNeighborsCount), u(this.outNeighborsCount), u(this.allNeighborsCount), this;
        }), h.addMethod("read", function(e2) {
          var t2, i4, n2;
          for (t2 = 0, n2 = (i4 = e2.nodes || []).length; t2 < n2; t2++)
            this.addNode(i4[t2]);
          for (t2 = 0, n2 = (i4 = e2.edges || []).length; t2 < n2; t2++)
            this.addEdge(i4[t2]);
          return this;
        }), h.addMethod("nodes", function(e2) {
          if (!arguments.length)
            return this.nodesArray.slice(0);
          if (1 === arguments.length && ("string" == typeof e2 || "number" == typeof e2))
            return this.nodesIndex[e2];
          if (1 === arguments.length && "[object Array]" === Object.prototype.toString.call(e2)) {
            var t2, i4, n2 = [];
            for (t2 = 0, i4 = e2.length; t2 < i4; t2++) {
              if ("string" != typeof e2[t2] && "number" != typeof e2[t2])
                throw "nodes: Wrong arguments.";
              n2.push(this.nodesIndex[e2[t2]]);
            }
            return n2;
          }
          throw "nodes: Wrong arguments.";
        }), h.addMethod("degree", function(e2, t2) {
          if (t2 = { in: this.inNeighborsCount, out: this.outNeighborsCount }[t2 || ""] || this.allNeighborsCount, "string" == typeof e2 || "number" == typeof e2)
            return t2[e2];
          if ("[object Array]" === Object.prototype.toString.call(e2)) {
            var i4, n2, s2 = [];
            for (i4 = 0, n2 = e2.length; i4 < n2; i4++) {
              if ("string" != typeof e2[i4] && "number" != typeof e2[i4])
                throw "degree: Wrong arguments.";
              s2.push(t2[e2[i4]]);
            }
            return s2;
          }
          throw "degree: Wrong arguments.";
        }), h.addMethod("edges", function(e2) {
          if (!arguments.length)
            return this.edgesArray.slice(0);
          if (1 === arguments.length && ("string" == typeof e2 || "number" == typeof e2))
            return this.edgesIndex[e2];
          if (1 === arguments.length && "[object Array]" === Object.prototype.toString.call(e2)) {
            var t2, i4, n2 = [];
            for (t2 = 0, i4 = e2.length; t2 < i4; t2++) {
              if ("string" != typeof e2[t2] && "number" != typeof e2[t2])
                throw "edges: Wrong arguments.";
              n2.push(this.edgesIndex[e2[t2]]);
            }
            return n2;
          }
          throw "edges: Wrong arguments.";
        }), "undefined" != typeof sigma ? (sigma.classes = sigma.classes || /* @__PURE__ */ Object.create(null), sigma.classes.graph = h) : (e.exports && (t = e.exports = h), t.graph = h);
      }).call(this);
    }).call(window);
  }, 124: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.classes"), sigma.classes.camera = function(e3, t2, i2, n) {
          sigma.classes.dispatcher.extend(this), Object.defineProperty(this, "graph", { value: t2 }), Object.defineProperty(this, "id", { value: e3 }), Object.defineProperty(this, "readPrefix", { value: "read_cam" + e3 + ":" }), Object.defineProperty(this, "prefix", { value: "cam" + e3 + ":" }), this.x = 0, this.y = 0, this.ratio = 1, this.angle = 0, this.isAnimated = false, this.settings = "object" == typeof n && n ? i2.embedObject(n) : i2;
        }, sigma.classes.camera.prototype.goTo = function(t2) {
          if (!this.settings("enableCamera"))
            return this;
          var i2, n, s = t2 || {}, r = ["x", "y", "ratio", "angle"];
          for (i2 = 0, n = r.length; i2 < n; i2++)
            if (s[r[i2]] !== e2) {
              if ("number" != typeof s[r[i2]] || isNaN(s[r[i2]]))
                throw 'Value for "' + r[i2] + '" is not a number.';
              this[r[i2]] = s[r[i2]];
            }
          return this.dispatchEvent("coordinatesUpdated"), this;
        }, sigma.classes.camera.prototype.applyView = function(t2, i2, n) {
          n = n || {}, i2 = i2 !== e2 ? i2 : this.prefix, t2 = t2 !== e2 ? t2 : this.readPrefix;
          var s, r, a, o2 = n.nodes || this.graph.nodes(), d = n.edges || this.graph.edges(), l = Math.cos(this.angle) / this.ratio, h = Math.sin(this.angle) / this.ratio, c = Math.pow(this.ratio, this.settings("nodesPowRatio")), u = Math.pow(this.ratio, this.settings("edgesPowRatio")), g = (n.width || 0) / 2 - this.x * l - this.y * h, f = (n.height || 0) / 2 - this.y * l + this.x * h;
          for (s = 0, r = o2.length; s < r; s++)
            (a = o2[s])[i2 + "x"] = (a[t2 + "x"] || 0) * l + (a[t2 + "y"] || 0) * h + g, a[i2 + "y"] = (a[t2 + "y"] || 0) * l - (a[t2 + "x"] || 0) * h + f, a[i2 + "size"] = (a[t2 + "size"] || 0) / c;
          for (s = 0, r = d.length; s < r; s++)
            d[s][i2 + "size"] = (d[s][t2 + "size"] || 0) / u;
          return this;
        }, sigma.classes.camera.prototype.graphPosition = function(e3, t2, i2) {
          var n = 0, s = 0, r = Math.cos(this.angle), a = Math.sin(this.angle);
          return i2 || (n = -(this.x * r + this.y * a) / this.ratio, s = -(this.y * r - this.x * a) / this.ratio), { x: (e3 * r + t2 * a) / this.ratio + n, y: (t2 * r - e3 * a) / this.ratio + s };
        }, sigma.classes.camera.prototype.cameraPosition = function(e3, t2, i2) {
          var n = 0, s = 0, r = Math.cos(this.angle), a = Math.sin(this.angle);
          return i2 || (n = -(this.x * r + this.y * a) / this.ratio, s = -(this.y * r - this.x * a) / this.ratio), { x: ((e3 - n) * r - (t2 - s) * a) * this.ratio, y: ((t2 - s) * r + (e3 - n) * a) * this.ratio };
        }, sigma.classes.camera.prototype.getMatrix = function() {
          var e3 = sigma.utils.matrices.scale(1 / this.ratio), t2 = sigma.utils.matrices.rotation(this.angle), i2 = sigma.utils.matrices.translation(-this.x, -this.y);
          return sigma.utils.matrices.multiply(i2, sigma.utils.matrices.multiply(t2, e3));
        }, sigma.classes.camera.prototype.getRectangle = function(e3, t2) {
          var i2 = this.cameraPosition(e3, 0, true), n = this.cameraPosition(0, t2, true), s = this.cameraPosition(e3 / 2, t2 / 2, true), r = this.cameraPosition(e3 / 4, 0, true).x, a = this.cameraPosition(0, t2 / 4, true).y;
          return { x1: this.x - s.x - r, y1: this.y - s.y - a, x2: this.x - s.x + r + i2.x, y2: this.y - s.y - a + i2.y, height: Math.sqrt(Math.pow(n.x, 2) + Math.pow(n.y + 2 * a, 2)) };
        };
      }).call(this);
    }).call(window);
  }, 125: function(e, t, i2) {
    (function() {
      (function(i3) {
        "use strict";
        var n = { pointToSquare: function(e2) {
          return { x1: e2.x - e2.size, y1: e2.y - e2.size, x2: e2.x + e2.size, y2: e2.y - e2.size, height: 2 * e2.size };
        }, isAxisAligned: function(e2) {
          return e2.x1 === e2.x2 || e2.y1 === e2.y2;
        }, axisAlignedTopPoints: function(e2) {
          return e2.y1 === e2.y2 && e2.x1 < e2.x2 ? e2 : e2.x1 === e2.x2 && e2.y2 > e2.y1 ? { x1: e2.x1 - e2.height, y1: e2.y1, x2: e2.x1, y2: e2.y1, height: e2.height } : e2.x1 === e2.x2 && e2.y2 < e2.y1 ? { x1: e2.x1, y1: e2.y2, x2: e2.x2 + e2.height, y2: e2.y2, height: e2.height } : { x1: e2.x2, y1: e2.y1 - e2.height, x2: e2.x1, y2: e2.y1 - e2.height, height: e2.height };
        }, lowerLeftCoor: function(e2) {
          var t2 = Math.sqrt(Math.pow(e2.x2 - e2.x1, 2) + Math.pow(e2.y2 - e2.y1, 2));
          return { x: e2.x1 - (e2.y2 - e2.y1) * e2.height / t2, y: e2.y1 + (e2.x2 - e2.x1) * e2.height / t2 };
        }, lowerRightCoor: function(e2, t2) {
          return { x: t2.x - e2.x1 + e2.x2, y: t2.y - e2.y1 + e2.y2 };
        }, rectangleCorners: function(e2) {
          var t2 = this.lowerLeftCoor(e2), i4 = this.lowerRightCoor(e2, t2);
          return [{ x: e2.x1, y: e2.y1 }, { x: e2.x2, y: e2.y2 }, { x: t2.x, y: t2.y }, { x: i4.x, y: i4.y }];
        }, splitSquare: function(e2) {
          return [[{ x: e2.x, y: e2.y }, { x: e2.x + e2.width / 2, y: e2.y }, { x: e2.x, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }], [{ x: e2.x + e2.width / 2, y: e2.y }, { x: e2.x + e2.width, y: e2.y }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width, y: e2.y + e2.height / 2 }], [{ x: e2.x, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x, y: e2.y + e2.height }, { x: e2.x + e2.width / 2, y: e2.y + e2.height }], [{ x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height }, { x: e2.x + e2.width, y: e2.y + e2.height }]];
        }, axis: function(e2, t2) {
          return [{ x: e2[1].x - e2[0].x, y: e2[1].y - e2[0].y }, { x: e2[1].x - e2[3].x, y: e2[1].y - e2[3].y }, { x: t2[0].x - t2[2].x, y: t2[0].y - t2[2].y }, { x: t2[0].x - t2[1].x, y: t2[0].y - t2[1].y }];
        }, projection: function(e2, t2) {
          var i4 = (e2.x * t2.x + e2.y * t2.y) / (Math.pow(t2.x, 2) + Math.pow(t2.y, 2));
          return { x: i4 * t2.x, y: i4 * t2.y };
        }, axisCollision: function(e2, t2, i4) {
          for (var n2 = [], s2 = [], r2 = 0; r2 < 4; r2++) {
            var a3 = this.projection(t2[r2], e2), o3 = this.projection(i4[r2], e2);
            n2.push(a3.x * e2.x + a3.y * e2.y), s2.push(o3.x * e2.x + o3.y * e2.y);
          }
          var d2 = Math.max.apply(Math, n2), l2 = Math.max.apply(Math, s2), h = Math.min.apply(Math, n2);
          return Math.min.apply(Math, s2) <= d2 && l2 >= h;
        }, collision: function(e2, t2) {
          for (var i4 = this.axis(e2, t2), n2 = true, s2 = 0; s2 < 4; s2++)
            n2 = n2 && this.axisCollision(i4[s2], e2, t2);
          return n2;
        } };
        function s(e2, t2) {
          for (var i4 = [], n2 = 0; n2 < 4; n2++)
            e2.x2 >= t2[n2][0].x && e2.x1 <= t2[n2][1].x && e2.y1 + e2.height >= t2[n2][0].y && e2.y1 <= t2[n2][2].y && i4.push(n2);
          return i4;
        }
        function r(e2, t2) {
          for (var i4 = [], s2 = 0; s2 < 4; s2++)
            n.collision(e2, t2[s2]) && i4.push(s2);
          return i4;
        }
        function a(e2, t2) {
          var i4, n2, s2 = t2.level + 1, r2 = Math.round(t2.bounds.width / 2), a3 = Math.round(t2.bounds.height / 2), o3 = Math.round(t2.bounds.x), l2 = Math.round(t2.bounds.y);
          switch (e2) {
            case 0:
              i4 = o3, n2 = l2;
              break;
            case 1:
              i4 = o3 + r2, n2 = l2;
              break;
            case 2:
              i4 = o3, n2 = l2 + a3;
              break;
            case 3:
              i4 = o3 + r2, n2 = l2 + a3;
          }
          return d({ x: i4, y: n2, width: r2, height: a3 }, s2, t2.maxElements, t2.maxLevel);
        }
        function o2(e2, t2, n2) {
          if (n2.level < n2.maxLevel)
            for (var r2 = s(t2, n2.corners), d2 = 0, l2 = r2.length; d2 < l2; d2++)
              n2.nodes[r2[d2]] === i3 && (n2.nodes[r2[d2]] = a(r2[d2], n2)), o2(e2, t2, n2.nodes[r2[d2]]);
          else
            n2.elements.push(e2);
        }
        function d(e2, t2, i4, s2) {
          return { level: t2 || 0, bounds: e2, corners: n.splitSquare(e2), maxElements: i4 || 20, maxLevel: s2 || 4, elements: [], nodes: [] };
        }
        var l = function() {
          this._geom = n, this._tree = null, this._cache = { query: false, result: false };
        };
        l.prototype.index = function(e2, t2) {
          if (!t2.bounds)
            throw "sigma.classes.quad.index: bounds information not given.";
          var i4 = t2.prefix || "";
          this._tree = d(t2.bounds, 0, t2.maxElements, t2.maxLevel);
          for (var s2 = 0, r2 = e2.length; s2 < r2; s2++)
            o2(e2[s2], n.pointToSquare({ x: e2[s2][i4 + "x"], y: e2[s2][i4 + "y"], size: e2[s2][i4 + "size"] }), this._tree);
          return this._cache = { query: false, result: false }, this._tree;
        }, l.prototype.point = function(e2, t2) {
          return this._tree && function e3(t3, n2) {
            if (n2.level < n2.maxLevel) {
              var s2 = function(e4, t4) {
                var i4 = t4.x + t4.width / 2, n3 = t4.y + t4.height / 2, s3 = e4.y < n3, r2 = e4.x < i4;
                return s3 ? r2 ? 0 : 1 : r2 ? 2 : 3;
              }(t3, n2.bounds);
              return n2.nodes[s2] !== i3 ? e3(t3, n2.nodes[s2]) : [];
            }
            return n2.elements;
          }({ x: e2, y: t2 }, this._tree) || [];
        }, l.prototype.area = function(e2) {
          var t2, a3, o3 = JSON.stringify(e2);
          if (this._cache.query === o3)
            return this._cache.result;
          n.isAxisAligned(e2) ? (t2 = s, a3 = n.axisAlignedTopPoints(e2)) : (t2 = r, a3 = n.rectangleCorners(e2));
          var d2 = this._tree ? function e3(t3, n2, s2, r2) {
            if (r2 = r2 || {}, n2.level < n2.maxLevel)
              for (var a4 = s2(t3, n2.corners), o4 = 0, d3 = a4.length; o4 < d3; o4++)
                n2.nodes[a4[o4]] !== i3 && e3(t3, n2.nodes[a4[o4]], s2, r2);
            else
              for (var l3 = 0, h2 = n2.elements.length; l3 < h2; l3++)
                r2[n2.elements[l3].id] === i3 && (r2[n2.elements[l3].id] = n2.elements[l3]);
            return r2;
          }(a3, this._tree, t2) : [], l2 = [];
          for (var h in d2)
            l2.push(d2[h]);
          return this._cache.query = o3, this._cache.result = l2, l2;
        }, void 0 !== this.sigma ? (this.sigma.classes = this.sigma.classes || {}, this.sigma.classes.quad = l) : (e.exports && (t = e.exports = l), t.quad = l);
      }).call(this);
    }).call(window);
  }, 126: function(e, t, i2) {
    (function() {
      (function(i3) {
        "use strict";
        var n = { pointToSquare: function(e2) {
          return { x1: e2.x - e2.size, y1: e2.y - e2.size, x2: e2.x + e2.size, y2: e2.y - e2.size, height: 2 * e2.size };
        }, lineToSquare: function(e2) {
          return e2.y1 < e2.y2 ? e2.x1 < e2.x2 ? { x1: e2.x1 - e2.size, y1: e2.y1 - e2.size, x2: e2.x2 + e2.size, y2: e2.y1 - e2.size, height: e2.y2 - e2.y1 + 2 * e2.size } : { x1: e2.x2 - e2.size, y1: e2.y1 - e2.size, x2: e2.x1 + e2.size, y2: e2.y1 - e2.size, height: e2.y2 - e2.y1 + 2 * e2.size } : e2.x1 < e2.x2 ? { x1: e2.x1 - e2.size, y1: e2.y2 - e2.size, x2: e2.x2 + e2.size, y2: e2.y2 - e2.size, height: e2.y1 - e2.y2 + 2 * e2.size } : { x1: e2.x2 - e2.size, y1: e2.y2 - e2.size, x2: e2.x1 + e2.size, y2: e2.y2 - e2.size, height: e2.y1 - e2.y2 + 2 * e2.size };
        }, quadraticCurveToSquare: function(e2, t2) {
          var i4 = sigma.utils.getPointOnQuadraticCurve(0.5, e2.x1, e2.y1, e2.x2, e2.y2, t2.x, t2.y), n2 = Math.min(e2.x1, e2.x2, i4.x), s2 = Math.max(e2.x1, e2.x2, i4.x), r2 = Math.min(e2.y1, e2.y2, i4.y), a3 = Math.max(e2.y1, e2.y2, i4.y);
          return { x1: n2 - e2.size, y1: r2 - e2.size, x2: s2 + e2.size, y2: r2 - e2.size, height: a3 - r2 + 2 * e2.size };
        }, selfLoopToSquare: function(e2) {
          var t2 = sigma.utils.getSelfLoopControlPoints(e2.x, e2.y, e2.size), i4 = Math.min(e2.x, t2.x1, t2.x2), n2 = Math.max(e2.x, t2.x1, t2.x2), s2 = Math.min(e2.y, t2.y1, t2.y2), r2 = Math.max(e2.y, t2.y1, t2.y2);
          return { x1: i4 - e2.size, y1: s2 - e2.size, x2: n2 + e2.size, y2: s2 - e2.size, height: r2 - s2 + 2 * e2.size };
        }, isAxisAligned: function(e2) {
          return e2.x1 === e2.x2 || e2.y1 === e2.y2;
        }, axisAlignedTopPoints: function(e2) {
          return e2.y1 === e2.y2 && e2.x1 < e2.x2 ? e2 : e2.x1 === e2.x2 && e2.y2 > e2.y1 ? { x1: e2.x1 - e2.height, y1: e2.y1, x2: e2.x1, y2: e2.y1, height: e2.height } : e2.x1 === e2.x2 && e2.y2 < e2.y1 ? { x1: e2.x1, y1: e2.y2, x2: e2.x2 + e2.height, y2: e2.y2, height: e2.height } : { x1: e2.x2, y1: e2.y1 - e2.height, x2: e2.x1, y2: e2.y1 - e2.height, height: e2.height };
        }, lowerLeftCoor: function(e2) {
          var t2 = Math.sqrt(Math.pow(e2.x2 - e2.x1, 2) + Math.pow(e2.y2 - e2.y1, 2));
          return { x: e2.x1 - (e2.y2 - e2.y1) * e2.height / t2, y: e2.y1 + (e2.x2 - e2.x1) * e2.height / t2 };
        }, lowerRightCoor: function(e2, t2) {
          return { x: t2.x - e2.x1 + e2.x2, y: t2.y - e2.y1 + e2.y2 };
        }, rectangleCorners: function(e2) {
          var t2 = this.lowerLeftCoor(e2), i4 = this.lowerRightCoor(e2, t2);
          return [{ x: e2.x1, y: e2.y1 }, { x: e2.x2, y: e2.y2 }, { x: t2.x, y: t2.y }, { x: i4.x, y: i4.y }];
        }, splitSquare: function(e2) {
          return [[{ x: e2.x, y: e2.y }, { x: e2.x + e2.width / 2, y: e2.y }, { x: e2.x, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }], [{ x: e2.x + e2.width / 2, y: e2.y }, { x: e2.x + e2.width, y: e2.y }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width, y: e2.y + e2.height / 2 }], [{ x: e2.x, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x, y: e2.y + e2.height }, { x: e2.x + e2.width / 2, y: e2.y + e2.height }], [{ x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width, y: e2.y + e2.height / 2 }, { x: e2.x + e2.width / 2, y: e2.y + e2.height }, { x: e2.x + e2.width, y: e2.y + e2.height }]];
        }, axis: function(e2, t2) {
          return [{ x: e2[1].x - e2[0].x, y: e2[1].y - e2[0].y }, { x: e2[1].x - e2[3].x, y: e2[1].y - e2[3].y }, { x: t2[0].x - t2[2].x, y: t2[0].y - t2[2].y }, { x: t2[0].x - t2[1].x, y: t2[0].y - t2[1].y }];
        }, projection: function(e2, t2) {
          var i4 = (e2.x * t2.x + e2.y * t2.y) / (Math.pow(t2.x, 2) + Math.pow(t2.y, 2));
          return { x: i4 * t2.x, y: i4 * t2.y };
        }, axisCollision: function(e2, t2, i4) {
          for (var n2 = [], s2 = [], r2 = 0; r2 < 4; r2++) {
            var a3 = this.projection(t2[r2], e2), o3 = this.projection(i4[r2], e2);
            n2.push(a3.x * e2.x + a3.y * e2.y), s2.push(o3.x * e2.x + o3.y * e2.y);
          }
          var d2 = Math.max.apply(Math, n2), l2 = Math.max.apply(Math, s2), h = Math.min.apply(Math, n2);
          return Math.min.apply(Math, s2) <= d2 && l2 >= h;
        }, collision: function(e2, t2) {
          for (var i4 = this.axis(e2, t2), n2 = true, s2 = 0; s2 < 4; s2++)
            n2 = n2 && this.axisCollision(i4[s2], e2, t2);
          return n2;
        } };
        function s(e2, t2) {
          for (var i4 = [], n2 = 0; n2 < 4; n2++)
            e2.x2 >= t2[n2][0].x && e2.x1 <= t2[n2][1].x && e2.y1 + e2.height >= t2[n2][0].y && e2.y1 <= t2[n2][2].y && i4.push(n2);
          return i4;
        }
        function r(e2, t2) {
          for (var i4 = [], s2 = 0; s2 < 4; s2++)
            n.collision(e2, t2[s2]) && i4.push(s2);
          return i4;
        }
        function a(e2, t2) {
          var i4, n2, s2 = t2.level + 1, r2 = Math.round(t2.bounds.width / 2), a3 = Math.round(t2.bounds.height / 2), o3 = Math.round(t2.bounds.x), l2 = Math.round(t2.bounds.y);
          switch (e2) {
            case 0:
              i4 = o3, n2 = l2;
              break;
            case 1:
              i4 = o3 + r2, n2 = l2;
              break;
            case 2:
              i4 = o3, n2 = l2 + a3;
              break;
            case 3:
              i4 = o3 + r2, n2 = l2 + a3;
          }
          return d({ x: i4, y: n2, width: r2, height: a3 }, s2, t2.maxElements, t2.maxLevel);
        }
        function o2(e2, t2, n2) {
          if (n2.level < n2.maxLevel)
            for (var r2 = s(t2, n2.corners), d2 = 0, l2 = r2.length; d2 < l2; d2++)
              n2.nodes[r2[d2]] === i3 && (n2.nodes[r2[d2]] = a(r2[d2], n2)), o2(e2, t2, n2.nodes[r2[d2]]);
          else
            n2.elements.push(e2);
        }
        function d(e2, t2, i4, s2) {
          return { level: t2 || 0, bounds: e2, corners: n.splitSquare(e2), maxElements: i4 || 40, maxLevel: s2 || 8, elements: [], nodes: [] };
        }
        var l = function() {
          this._geom = n, this._tree = null, this._cache = { query: false, result: false }, this._enabled = true;
        };
        l.prototype.index = function(e2, t2) {
          if (!this._enabled)
            return this._tree;
          if (!t2.bounds)
            throw "sigma.classes.edgequad.index: bounds information not given.";
          var i4, s2, r2, a3, l2, h = t2.prefix || "";
          this._tree = d(t2.bounds, 0, t2.maxElements, t2.maxLevel);
          for (var c = e2.edges(), u = 0, g = c.length; u < g; u++)
            s2 = e2.nodes(c[u].source), r2 = e2.nodes(c[u].target), l2 = { x1: s2[h + "x"], y1: s2[h + "y"], x2: r2[h + "x"], y2: r2[h + "y"], size: c[u][h + "size"] || 0 }, "curve" === c[u].type || "curvedArrow" === c[u].type ? s2.id === r2.id ? (a3 = { x: s2[h + "x"], y: s2[h + "y"], size: s2[h + "size"] || 0 }, o2(c[u], n.selfLoopToSquare(a3), this._tree)) : (i4 = sigma.utils.getQuadraticControlPoint(l2.x1, l2.y1, l2.x2, l2.y2), o2(c[u], n.quadraticCurveToSquare(l2, i4), this._tree)) : o2(c[u], n.lineToSquare(l2), this._tree);
          return this._cache = { query: false, result: false }, this._tree;
        }, l.prototype.point = function(e2, t2) {
          return this._enabled && this._tree && function e3(t3, n2) {
            if (n2.level < n2.maxLevel) {
              var s2 = function(e4, t4) {
                var i4 = t4.x + t4.width / 2, n3 = t4.y + t4.height / 2, s3 = e4.y < n3, r2 = e4.x < i4;
                return s3 ? r2 ? 0 : 1 : r2 ? 2 : 3;
              }(t3, n2.bounds);
              return n2.nodes[s2] !== i3 ? e3(t3, n2.nodes[s2]) : [];
            }
            return n2.elements;
          }({ x: e2, y: t2 }, this._tree) || [];
        }, l.prototype.area = function(e2) {
          if (!this._enabled)
            return [];
          var t2, a3, o3 = JSON.stringify(e2);
          if (this._cache.query === o3)
            return this._cache.result;
          n.isAxisAligned(e2) ? (t2 = s, a3 = n.axisAlignedTopPoints(e2)) : (t2 = r, a3 = n.rectangleCorners(e2));
          var d2 = this._tree ? function e3(t3, n2, s2, r2) {
            if (r2 = r2 || {}, n2.level < n2.maxLevel)
              for (var a4 = s2(t3, n2.corners), o4 = 0, d3 = a4.length; o4 < d3; o4++)
                n2.nodes[a4[o4]] !== i3 && e3(t3, n2.nodes[a4[o4]], s2, r2);
            else
              for (var l3 = 0, h2 = n2.elements.length; l3 < h2; l3++)
                r2[n2.elements[l3].id] === i3 && (r2[n2.elements[l3].id] = n2.elements[l3]);
            return r2;
          }(a3, this._tree, t2) : [], l2 = [];
          for (var h in d2)
            l2.push(d2[h]);
          return this._cache.query = o3, this._cache.result = l2, l2;
        }, void 0 !== this.sigma ? (this.sigma.classes = this.sigma.classes || {}, this.sigma.classes.edgequad = l) : (e.exports && (t = e.exports = l), t.edgequad = l);
      }).call(this);
    }).call(window);
  }, 127: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.captors"), sigma.captors.mouse = function(e3, t2, i2) {
          var n, s, r, a, o2, d, l, h, c, u, g, f = this, m = e3, y = t2, p = i2;
          function x(e4) {
            var t3, i3, u2;
            if (p("mouseEnabled") && (f.dispatchEvent("mousemove", sigma.utils.mouseCoords(e4)), l))
              return h = true, c = true, g && clearTimeout(g), g = setTimeout(function() {
                h = false;
              }, p("dragTimeout")), sigma.misc.animation.killAll(y), y.isMoving = true, u2 = y.cameraPosition(sigma.utils.getX(e4) - o2, sigma.utils.getY(e4) - d, true), t3 = n - u2.x, i3 = s - u2.y, t3 === y.x && i3 === y.y || (r = y.x, a = y.y, y.goTo({ x: t3, y: i3 })), e4.preventDefault ? e4.preventDefault() : e4.returnValue = false, e4.stopPropagation(), false;
          }
          function v(e4) {
            if (p("mouseEnabled") && l) {
              l = false, g && clearTimeout(g), y.isMoving = false;
              var t3 = sigma.utils.getX(e4), i3 = sigma.utils.getY(e4);
              h ? (sigma.misc.animation.killAll(y), sigma.misc.animation.camera(y, { x: y.x + p("mouseInertiaRatio") * (y.x - r), y: y.y + p("mouseInertiaRatio") * (y.y - a) }, { easing: "quadraticOut", duration: p("mouseInertiaDuration") })) : o2 === t3 && d === i3 || y.goTo({ x: y.x, y: y.y }), f.dispatchEvent("mouseup", sigma.utils.mouseCoords(e4)), h = false;
            }
          }
          function b(e4) {
            if (p("mouseEnabled"))
              switch (n = y.x, s = y.y, r = y.x, a = y.y, o2 = sigma.utils.getX(e4), d = sigma.utils.getY(e4), c = false, u = (/* @__PURE__ */ new Date()).getTime(), e4.which) {
                case 2:
                  break;
                case 3:
                  f.dispatchEvent("rightclick", sigma.utils.mouseCoords(e4, o2, d));
                  break;
                default:
                  l = true, f.dispatchEvent("mousedown", sigma.utils.mouseCoords(e4, o2, d));
              }
          }
          function w(e4) {
            p("mouseEnabled") && f.dispatchEvent("mouseout");
          }
          function E(e4) {
            if (p("mouseEnabled")) {
              var t3 = sigma.utils.mouseCoords(e4);
              t3.isDragging = (/* @__PURE__ */ new Date()).getTime() - u > 100 && c, f.dispatchEvent("click", t3);
            }
            return e4.preventDefault ? e4.preventDefault() : e4.returnValue = false, e4.stopPropagation(), false;
          }
          function C(e4) {
            var t3, i3, n2, s2 = sigma.utils.getDelta(e4);
            if (p("mouseEnabled") && p("mouseWheelEnabled") && 0 !== s2)
              return i3 = s2 > 0 ? 1 / p("zoomingRatio") : p("zoomingRatio"), t3 = y.cameraPosition(sigma.utils.getX(e4) - sigma.utils.getCenter(e4).x, sigma.utils.getY(e4) - sigma.utils.getCenter(e4).y, true), n2 = { duration: p("mouseZoomDuration") }, sigma.utils.zoomTo(y, t3.x, t3.y, i3, n2), e4.preventDefault ? e4.preventDefault() : e4.returnValue = false, e4.stopPropagation(), false;
          }
          sigma.classes.dispatcher.extend(this), sigma.utils.doubleClick(m, "click", function(e4) {
            var t3, i3, n2;
            if (p("mouseEnabled"))
              return i3 = 1 / p("doubleClickZoomingRatio"), f.dispatchEvent("doubleclick", sigma.utils.mouseCoords(e4, o2, d)), p("doubleClickEnabled") && (t3 = y.cameraPosition(sigma.utils.getX(e4) - sigma.utils.getCenter(e4).x, sigma.utils.getY(e4) - sigma.utils.getCenter(e4).y, true), n2 = { duration: p("doubleClickZoomDuration") }, sigma.utils.zoomTo(y, t3.x, t3.y, i3, n2)), e4.preventDefault ? e4.preventDefault() : e4.returnValue = false, e4.stopPropagation(), false;
          }), m.addEventListener("DOMMouseScroll", C, false), m.addEventListener("mousewheel", C, false), m.addEventListener("mousemove", x, false), m.addEventListener("mousedown", b, false), m.addEventListener("click", E, false), m.addEventListener("mouseout", w, false), document.addEventListener("mouseup", v, false), this.kill = function() {
            sigma.utils.unbindDoubleClick(m, "click"), m.removeEventListener("DOMMouseScroll", C), m.removeEventListener("mousewheel", C), m.removeEventListener("mousemove", x), m.removeEventListener("mousedown", b), m.removeEventListener("click", E), m.removeEventListener("mouseout", w), document.removeEventListener("mouseup", v);
          };
        };
      }).call(this);
    }).call(window);
  }, 128: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.captors"), sigma.captors.touch = function(e3, t2, i2) {
          var n, s, r, a, o2, d, l, h, c, u, g, f, m, y, p, x, v = this, b = e3, w = t2, E = i2, C = [];
          function k(e4) {
            var t3 = sigma.utils.getOffset(b);
            return { x: e4.pageX - t3.left, y: e4.pageY - t3.top };
          }
          function M(e4) {
            var t3, i3, y2, p2, x2, v2;
            if (E("touchEnabled"))
              switch ((C = e4.touches).length) {
                case 1:
                  w.isMoving = true, m = 1, n = w.x, s = w.y, o2 = w.x, d = w.y, x2 = k(C[0]), l = x2.x, h = x2.y;
                  break;
                case 2:
                  return w.isMoving = true, m = 2, x2 = k(C[0]), v2 = k(C[1]), t3 = x2.x, y2 = x2.y, i3 = v2.x, p2 = v2.y, o2 = w.x, d = w.y, r = w.angle, a = w.ratio, n = w.x, s = w.y, l = t3, h = y2, c = i3, u = p2, g = Math.atan2(u - h, c - l), f = Math.sqrt((u - h) * (u - h) + (c - l) * (c - l)), e4.preventDefault(), false;
              }
          }
          function N(e4) {
            if (E("touchEnabled")) {
              C = e4.touches;
              var t3 = E("touchInertiaRatio");
              switch (x && (y = false, clearTimeout(x)), m) {
                case 2:
                  if (1 === e4.touches.length) {
                    M(e4), e4.preventDefault();
                    break;
                  }
                case 1:
                  w.isMoving = false, v.dispatchEvent("stopDrag"), y && (p = false, sigma.misc.animation.camera(w, { x: w.x + t3 * (w.x - o2), y: w.y + t3 * (w.y - d) }, { easing: "quadraticOut", duration: E("touchInertiaDuration") })), y = false, m = 0;
              }
            }
          }
          function O(e4) {
            if (!p && E("touchEnabled")) {
              var t3, i3, b2, M2, N2, O2, z, P, S, T, j, I, A, _, L, D, q;
              switch (C = e4.touches, y = true, x && clearTimeout(x), x = setTimeout(function() {
                y = false;
              }, E("dragTimeout")), m) {
                case 1:
                  t3 = (P = k(C[0])).x, b2 = P.y, T = w.cameraPosition(t3 - l, b2 - h, true), _ = n - T.x, L = s - T.y, _ === w.x && L === w.y || (o2 = w.x, d = w.y, w.goTo({ x: _, y: L }), v.dispatchEvent("mousemove", sigma.utils.mouseCoords(e4, P.x, P.y)), v.dispatchEvent("drag"));
                  break;
                case 2:
                  P = k(C[0]), S = k(C[1]), t3 = P.x, b2 = P.y, i3 = S.x, M2 = S.y, j = w.cameraPosition((l + c) / 2 - sigma.utils.getCenter(e4).x, (h + u) / 2 - sigma.utils.getCenter(e4).y, true), z = w.cameraPosition((t3 + i3) / 2 - sigma.utils.getCenter(e4).x, (b2 + M2) / 2 - sigma.utils.getCenter(e4).y, true), I = Math.atan2(M2 - b2, i3 - t3) - g, A = Math.sqrt((M2 - b2) * (M2 - b2) + (i3 - t3) * (i3 - t3)) / f, t3 = j.x, b2 = j.y, D = a / A, b2 *= A, q = r - I, i3 = (t3 *= A) * (N2 = Math.cos(-I)) + b2 * (O2 = Math.sin(-I)), b2 = M2 = b2 * N2 - t3 * O2, _ = (t3 = i3) - z.x + n, L = b2 - z.y + s, D === w.ratio && q === w.angle && _ === w.x && L === w.y || (o2 = w.x, d = w.y, w.angle, w.ratio, w.goTo({ x: _, y: L, angle: q, ratio: D }), v.dispatchEvent("drag"));
              }
              return e4.preventDefault(), false;
            }
          }
          sigma.classes.dispatcher.extend(this), sigma.utils.doubleClick(b, "touchstart", function(e4) {
            var t3, i3, n2;
            if (e4.touches && 1 === e4.touches.length && E("touchEnabled"))
              return p = true, i3 = 1 / E("doubleClickZoomingRatio"), t3 = k(e4.touches[0]), v.dispatchEvent("doubleclick", sigma.utils.mouseCoords(e4, t3.x, t3.y)), E("doubleClickEnabled") && (t3 = w.cameraPosition(t3.x - sigma.utils.getCenter(e4).x, t3.y - sigma.utils.getCenter(e4).y, true), n2 = { duration: E("doubleClickZoomDuration"), onComplete: function() {
                p = false;
              } }, sigma.utils.zoomTo(w, t3.x, t3.y, i3, n2)), e4.preventDefault ? e4.preventDefault() : e4.returnValue = false, e4.stopPropagation(), false;
          }), b.addEventListener("touchstart", M, false), b.addEventListener("touchend", N, false), b.addEventListener("touchcancel", N, false), b.addEventListener("touchleave", N, false), b.addEventListener("touchmove", O, false), this.kill = function() {
            sigma.utils.unbindDoubleClick(b, "touchstart"), b.addEventListener("touchstart", M), b.addEventListener("touchend", N), b.addEventListener("touchcancel", N), b.addEventListener("touchleave", N), b.addEventListener("touchmove", O);
          };
        };
      }).call(this);
    }).call(window);
  }, 129: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        if ("undefined" == typeof conrad)
          throw "conrad is not declared";
        sigma.utils.pkg("sigma.renderers"), sigma.renderers.canvas = function(e3, t2, i2, n) {
          if ("object" != typeof n)
            throw "sigma.renderers.canvas: Wrong arguments.";
          if (!(n.container instanceof HTMLElement))
            throw "Container not found.";
          var s, r, a, o2;
          for (sigma.classes.dispatcher.extend(this), Object.defineProperty(this, "conradId", { value: sigma.utils.id() }), this.graph = e3, this.camera = t2, this.contexts = {}, this.domElements = {}, this.options = n, this.container = this.options.container, this.settings = "object" == typeof n.settings && n.settings ? i2.embedObjects(n.settings) : i2, this.nodesOnScreen = [], this.edgesOnScreen = [], this.jobs = {}, this.options.prefix = "renderer" + this.conradId + ":", this.settings("batchEdgesDrawing") ? (this.initDOM("canvas", "edges"), this.initDOM("canvas", "scene"), this.contexts.nodes = this.contexts.scene, this.contexts.labels = this.contexts.scene) : (this.initDOM("canvas", "scene"), this.contexts.edges = this.contexts.scene, this.contexts.nodes = this.contexts.scene, this.contexts.labels = this.contexts.scene), this.initDOM("canvas", "mouse"), this.contexts.hover = this.contexts.mouse, this.captors = [], s = 0, r = (a = this.options.captors || [sigma.captors.mouse, sigma.captors.touch]).length; s < r; s++)
            o2 = "function" == typeof a[s] ? a[s] : sigma.captors[a[s]], this.captors.push(new o2(this.domElements.mouse, this.camera, this.settings));
          sigma.misc.bindEvents.call(this, this.options.prefix), sigma.misc.drawHovers.call(this, this.options.prefix), this.resize(false);
        }, sigma.renderers.canvas.prototype.render = function(t2) {
          t2 = t2 || {};
          var i2, n, s, r, a, o2, d, l, h, c, u, g, f, m = {}, y = this.graph, p = this.graph.nodes, x = (this.options.prefix, this.settings(t2, "drawEdges")), v = this.settings(t2, "drawNodes"), b = this.settings(t2, "drawLabels"), w = this.settings(t2, "drawEdgeLabels"), E = this.settings.embedObjects(t2, { prefix: this.options.prefix });
          for (s in this.resize(false), this.settings(t2, "hideEdgesOnMove") && (this.camera.isAnimated || this.camera.isMoving) && (x = false), this.camera.applyView(e2, this.options.prefix, { width: this.width, height: this.height }), this.clear(), this.jobs)
            conrad.hasJob(s) && conrad.killJob(s);
          for (this.edgesOnScreen = [], this.nodesOnScreen = this.camera.quadtree.area(this.camera.getRectangle(this.width, this.height)), i2 = this.nodesOnScreen, n = 0, r = i2.length; n < r; n++)
            m[i2[n].id] = i2[n];
          if (x) {
            for (i2 = y.edges(), n = 0, r = i2.length; n < r; n++)
              !m[(a = i2[n]).source] && !m[a.target] || a.hidden || p(a.source).hidden || p(a.target).hidden || this.edgesOnScreen.push(a);
            if (this.settings(t2, "batchEdgesDrawing"))
              o2 = "edges_" + this.conradId, g = E("canvasEdgesBatchSize"), r = (c = this.edgesOnScreen).length, h = 0, d = Math.min(c.length, h + g), l = function() {
                for (f = this.contexts.edges.globalCompositeOperation, this.contexts.edges.globalCompositeOperation = "destination-over", u = sigma.canvas.edges, n = h; n < d; n++)
                  a = c[n], (u[a.type || this.settings(t2, "defaultEdgeType")] || u.def)(a, y.nodes(a.source), y.nodes(a.target), this.contexts.edges, E);
                if (w)
                  for (u = sigma.canvas.edges.labels, n = h; n < d; n++)
                    (a = c[n]).hidden || (u[a.type || this.settings(t2, "defaultEdgeType")] || u.def)(a, y.nodes(a.source), y.nodes(a.target), this.contexts.labels, E);
                return this.contexts.edges.globalCompositeOperation = f, d === c.length ? (delete this.jobs[o2], false) : (h = d + 1, d = Math.min(c.length, h + g), true);
              }, this.jobs[o2] = l, conrad.addJob(o2, l.bind(this));
            else {
              for (u = sigma.canvas.edges, i2 = this.edgesOnScreen, n = 0, r = i2.length; n < r; n++)
                a = i2[n], (u[a.type || this.settings(t2, "defaultEdgeType")] || u.def)(a, y.nodes(a.source), y.nodes(a.target), this.contexts.edges, E);
              if (w)
                for (u = sigma.canvas.edges.labels, i2 = this.edgesOnScreen, n = 0, r = i2.length; n < r; n++)
                  i2[n].hidden || (u[i2[n].type || this.settings(t2, "defaultEdgeType")] || u.def)(i2[n], y.nodes(i2[n].source), y.nodes(i2[n].target), this.contexts.labels, E);
            }
          }
          if (v)
            for (u = sigma.canvas.nodes, i2 = this.nodesOnScreen, n = 0, r = i2.length; n < r; n++)
              i2[n].hidden || (u[i2[n].type || this.settings(t2, "defaultNodeType")] || u.def)(i2[n], this.contexts.nodes, E);
          if (b)
            for (u = sigma.canvas.labels, i2 = this.nodesOnScreen, n = 0, r = i2.length; n < r; n++)
              i2[n].hidden || (u[i2[n].type || this.settings(t2, "defaultNodeType")] || u.def)(i2[n], this.contexts.labels, E);
          return this.dispatchEvent("render"), this;
        }, sigma.renderers.canvas.prototype.initDOM = function(e3, t2) {
          var i2 = document.createElement(e3);
          i2.style.position = "absolute", i2.setAttribute("class", "sigma-" + t2), this.domElements[t2] = i2, this.container.appendChild(i2), "canvas" === e3.toLowerCase() && (this.contexts[t2] = i2.getContext("2d"));
        }, sigma.renderers.canvas.prototype.resize = function(t2, i2) {
          var n, s = this.width, r = this.height, a = sigma.utils.getPixelRatio();
          if (t2 !== e2 && i2 !== e2 ? (this.width = t2, this.height = i2) : (this.width = this.container.offsetWidth, this.height = this.container.offsetHeight, t2 = this.width, i2 = this.height), s !== this.width || r !== this.height)
            for (n in this.domElements)
              this.domElements[n].style.width = t2 + "px", this.domElements[n].style.height = i2 + "px", "canvas" === this.domElements[n].tagName.toLowerCase() && (this.domElements[n].setAttribute("width", t2 * a + "px"), this.domElements[n].setAttribute("height", i2 * a + "px"), 1 !== a && this.contexts[n].scale(a, a));
          return this;
        }, sigma.renderers.canvas.prototype.clear = function() {
          for (var e3 in this.contexts)
            this.contexts[e3].clearRect(0, 0, this.width, this.height);
          return this;
        }, sigma.renderers.canvas.prototype.kill = function() {
          for (var e3, t2; t2 = this.captors.pop(); )
            t2.kill();
          for (e3 in delete this.captors, this.domElements)
            this.domElements[e3].parentNode.removeChild(this.domElements[e3]), delete this.domElements[e3], delete this.contexts[e3];
          delete this.domElements, delete this.contexts;
        }, sigma.utils.pkg("sigma.canvas.nodes"), sigma.utils.pkg("sigma.canvas.edges"), sigma.utils.pkg("sigma.canvas.labels");
      }).call(this);
    }).call(window);
  }, 130: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.labels"), sigma.canvas.labels.def = function(e3, t2, i2) {
          var n, s = i2("prefix") || "", r = e3[s + "size"];
          r < i2("labelThreshold") || e3.label && "string" == typeof e3.label && (n = "fixed" === i2("labelSize") ? i2("defaultLabelSize") : i2("labelSizeRatio") * r, t2.font = (i2("fontStyle") ? i2("fontStyle") + " " : "") + n + "px " + i2("font"), t2.fillStyle = "node" === i2("labelColor") ? e3.color || i2("defaultNodeColor") : i2("defaultLabelColor"), t2.fillText(e3.label, Math.round(e3[s + "x"] + r + 3), Math.round(e3[s + "y"] + n / 3)));
        };
      }).call(this);
    }).call(window);
  }, 131: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.hovers"), sigma.canvas.hovers.def = function(e3, t2, i2) {
          var n, s, r, a, o2, d = i2("hoverFontStyle") || i2("fontStyle"), l = i2("prefix") || "", h = e3[l + "size"], c = "fixed" === i2("labelSize") ? i2("defaultLabelSize") : i2("labelSizeRatio") * h;
          t2.font = (d ? d + " " : "") + c + "px " + (i2("hoverFont") || i2("font")), t2.beginPath(), t2.fillStyle = "node" === i2("labelHoverBGColor") ? e3.color || i2("defaultNodeColor") : i2("defaultHoverLabelBGColor"), e3.label && i2("labelHoverShadow") && (t2.shadowOffsetX = 0, t2.shadowOffsetY = 0, t2.shadowBlur = 8, t2.shadowColor = i2("labelHoverShadowColor")), e3.label && "string" == typeof e3.label && (n = Math.round(e3[l + "x"] - c / 2 - 2), s = Math.round(e3[l + "y"] - c / 2 - 2), r = Math.round(t2.measureText(e3.label).width + c / 2 + h + 7), a = Math.round(c + 4), o2 = Math.round(c / 2 + 2), t2.moveTo(n, s + o2), t2.arcTo(n, s, n + o2, s, o2), t2.lineTo(n + r, s), t2.lineTo(n + r, s + a), t2.lineTo(n + o2, s + a), t2.arcTo(n, s + a, n, s + a - o2, o2), t2.lineTo(n, s + o2), t2.closePath(), t2.fill(), t2.shadowOffsetX = 0, t2.shadowOffsetY = 0, t2.shadowBlur = 0), i2("borderSize") > 0 && (t2.beginPath(), t2.fillStyle = "node" === i2("nodeBorderColor") ? e3.color || i2("defaultNodeColor") : i2("defaultNodeBorderColor"), t2.arc(e3[l + "x"], e3[l + "y"], h + i2("borderSize"), 0, 2 * Math.PI, true), t2.closePath(), t2.fill()), (sigma.canvas.nodes[e3.type] || sigma.canvas.nodes.def)(e3, t2, i2), e3.label && "string" == typeof e3.label && (t2.fillStyle = "node" === i2("labelHoverColor") ? e3.color || i2("defaultNodeColor") : i2("defaultLabelHoverColor"), t2.fillText(e3.label, Math.round(e3[l + "x"] + h + 3), Math.round(e3[l + "y"] + c / 3)));
        };
      }).call(this);
    }).call(window);
  }, 132: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.nodes"), sigma.canvas.nodes.def = function(e2, t2, i2) {
          var n = i2("prefix") || "";
          t2.fillStyle = e2.color || i2("defaultNodeColor"), t2.beginPath(), t2.arc(e2[n + "x"], e2[n + "y"], e2[n + "size"], 0, 2 * Math.PI, true), t2.closePath(), t2.fill();
        };
      }();
    }).call(window);
  }, 133: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.def = function(e2, t2, i2, n, s) {
          var r = e2.color, a = s("prefix") || "", o2 = e2[a + "size"] || 1, d = s("edgeColor"), l = s("defaultNodeColor"), h = s("defaultEdgeColor");
          if (!r)
            switch (d) {
              case "source":
                r = t2.color || l;
                break;
              case "target":
                r = i2.color || l;
                break;
              default:
                r = h;
            }
          n.strokeStyle = r, n.lineWidth = o2, n.beginPath(), n.moveTo(t2[a + "x"], t2[a + "y"]), n.lineTo(i2[a + "x"], i2[a + "y"]), n.stroke();
        };
      }();
    }).call(window);
  }, 134: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.def = function(e2, t2, i2, n, s) {
          var r = e2.color, a = s("prefix") || "", o2 = e2[a + "size"] || 1, d = s("edgeColor"), l = s("defaultNodeColor"), h = s("defaultEdgeColor");
          if (!r)
            switch (d) {
              case "source":
                r = t2.color || l;
                break;
              case "target":
                r = i2.color || l;
                break;
              default:
                r = h;
            }
          r = "edge" === s("edgeHoverColor") ? e2.hover_color || r : e2.hover_color || s("defaultEdgeHoverColor") || r, o2 *= s("edgeHoverSizeRatio"), n.strokeStyle = r, n.lineWidth = o2, n.beginPath(), n.moveTo(t2[a + "x"], t2[a + "y"]), n.lineTo(i2[a + "x"], i2[a + "y"]), n.stroke();
        };
      }();
    }).call(window);
  }, 135: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.extremities"), sigma.canvas.extremities.def = function(e3, t2, i2, n, s) {
          (sigma.canvas.hovers[t2.type] || sigma.canvas.hovers.def)(t2, n, s), (sigma.canvas.hovers[i2.type] || sigma.canvas.hovers.def)(i2, n, s);
        };
      }).call(this);
    }).call(window);
  }, 136: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.middlewares"), sigma.utils.pkg("sigma.utils"), sigma.middlewares.rescale = function(e3, t2, i2) {
          var n, s, r, a, o2, d, l, h, c = this.graph.nodes(), u = this.graph.edges(), g = this.settings.embedObjects(i2 || {}), f = g("bounds") || sigma.utils.getBoundaries(this.graph, e3, true), m = f.minX, y = f.minY, p = f.maxX, x = f.maxY, v = f.sizeMax, b = f.weightMax, w = g("width") || 1, E = g("height") || 1, C = g("autoRescale"), k = { nodePosition: 1, nodeSize: 1, edgeSize: 1 };
          for (C instanceof Array || (C = ["nodePosition", "nodeSize", "edgeSize"]), n = 0, s = C.length; n < s; n++)
            if (!k[C[n]])
              throw new Error('The rescale setting "' + C[n] + '" is not recognized.');
          var M = ~C.indexOf("nodePosition"), N = ~C.indexOf("nodeSize"), O = ~C.indexOf("edgeSize");
          for (l = "outside" === g("scalingMode") ? Math.max(w / Math.max(p - m, 1), E / Math.max(x - y, 1)) : Math.min(w / Math.max(p - m, 1), E / Math.max(x - y, 1)), p += h = (g("rescaleIgnoreSize") ? 0 : (g("maxNodeSize") || v) / l) + (g("sideMargin") || 0), m -= h, x += h, y -= h, l = "outside" === g("scalingMode") ? Math.max(w / Math.max(p - m, 1), E / Math.max(x - y, 1)) : Math.min(w / Math.max(p - m, 1), E / Math.max(x - y, 1)), g("maxNodeSize") || g("minNodeSize") ? g("maxNodeSize") === g("minNodeSize") ? (r = 0, a = +g("maxNodeSize")) : (r = (g("maxNodeSize") - g("minNodeSize")) / v, a = +g("minNodeSize")) : (r = 1, a = 0), g("maxEdgeSize") || g("minEdgeSize") ? g("maxEdgeSize") === g("minEdgeSize") ? (o2 = 0, d = +g("minEdgeSize")) : (o2 = (g("maxEdgeSize") - g("minEdgeSize")) / b, d = +g("minEdgeSize")) : (o2 = 1, d = 0), n = 0, s = u.length; n < s; n++)
            u[n][t2 + "size"] = u[n][e3 + "size"] * (O ? o2 : 1) + (O ? d : 0);
          for (n = 0, s = c.length; n < s; n++)
            c[n][t2 + "size"] = c[n][e3 + "size"] * (N ? r : 1) + (N ? a : 0), c[n][t2 + "x"] = (c[n][e3 + "x"] - (p + m) / 2) * (M ? l : 1), c[n][t2 + "y"] = (c[n][e3 + "y"] - (x + y) / 2) * (M ? l : 1);
        }, sigma.utils.getBoundaries = function(e3, t2, i2) {
          var n, s, r = e3.edges(), a = e3.nodes(), o2 = -1 / 0, d = -1 / 0, l = 1 / 0, h = 1 / 0, c = -1 / 0, u = -1 / 0;
          if (i2)
            for (n = 0, s = r.length; n < s; n++)
              o2 = Math.max(r[n][t2 + "size"], o2);
          for (n = 0, s = a.length; n < s; n++)
            d = Math.max(a[n][t2 + "size"], d), c = Math.max(a[n][t2 + "x"], c), l = Math.min(a[n][t2 + "x"], l), u = Math.max(a[n][t2 + "y"], u), h = Math.min(a[n][t2 + "y"], h);
          return { weightMax: o2 = o2 || 1, sizeMax: d = d || 1, minX: l, minY: h, maxX: c, maxY: u };
        };
      }).call(this);
    }).call(window);
  }, 137: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.middlewares"), sigma.middlewares.copy = function(e3, t2) {
          var i2, n, s;
          if (t2 + "" != e3 + "") {
            for (i2 = 0, n = (s = this.graph.nodes()).length; i2 < n; i2++)
              s[i2][t2 + "x"] = s[i2][e3 + "x"], s[i2][t2 + "y"] = s[i2][e3 + "y"], s[i2][t2 + "size"] = s[i2][e3 + "size"];
            for (i2 = 0, n = (s = this.graph.edges()).length; i2 < n; i2++)
              s[i2][t2 + "size"] = s[i2][e3 + "size"];
          }
        };
      }).call(this);
    }).call(window);
  }, 138: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.misc.animation.running");
        var t2, i2 = (t2 = 0, function() {
          return "" + ++t2;
        });
        sigma.misc.animation.camera = function(t3, n, s) {
          if (!(t3 instanceof sigma.classes.camera && "object" == typeof n && n))
            throw "animation.camera: Wrong arguments.";
          if ("number" != typeof n.x && "number" != typeof n.y && "number" != typeof n.ratio && "number" != typeof n.angle)
            throw "There must be at least one valid coordinate in the given val.";
          var r, a, o2, d, l, h = s || {}, c = sigma.utils.dateNow();
          return l = { x: t3.x, y: t3.y, ratio: t3.ratio, angle: t3.angle }, h.duration, d = "function" != typeof h.easing ? sigma.utils.easings[h.easing || "quadraticInOut"] : h.easing, r = function() {
            var i3, s2 = h.duration ? (sigma.utils.dateNow() - c) / h.duration : 1;
            s2 >= 1 ? (t3.isAnimated = false, t3.goTo({ x: n.x !== e2 ? n.x : l.x, y: n.y !== e2 ? n.y : l.y, ratio: n.ratio !== e2 ? n.ratio : l.ratio, angle: n.angle !== e2 ? n.angle : l.angle }), cancelAnimationFrame(a), delete sigma.misc.animation.running[a], "function" == typeof h.onComplete && h.onComplete()) : (i3 = d(s2), t3.isAnimated = true, t3.goTo({ x: n.x !== e2 ? l.x + (n.x - l.x) * i3 : l.x, y: n.y !== e2 ? l.y + (n.y - l.y) * i3 : l.y, ratio: n.ratio !== e2 ? l.ratio + (n.ratio - l.ratio) * i3 : l.ratio, angle: n.angle !== e2 ? l.angle + (n.angle - l.angle) * i3 : l.angle }), "function" == typeof h.onNewFrame && h.onNewFrame(), o2.frameId = requestAnimationFrame(r));
          }, a = i2(), o2 = { frameId: requestAnimationFrame(r), target: t3, type: "camera", options: h, fn: r }, sigma.misc.animation.running[a] = o2, a;
        }, sigma.misc.animation.kill = function(e3) {
          if (1 !== arguments.length || "number" != typeof e3)
            throw "animation.kill: Wrong arguments.";
          var t3 = sigma.misc.animation.running[e3];
          return t3 && (cancelAnimationFrame(e3), delete sigma.misc.animation.running[t3.frameId], "camera" === t3.type && (t3.target.isAnimated = false), "function" == typeof (t3.options || {}).onComplete && t3.options.onComplete()), this;
        }, sigma.misc.animation.killAll = function(e3) {
          var t3, i3, n = 0, s = "string" == typeof e3 ? e3 : null, r = "object" == typeof e3 ? e3 : null, a = sigma.misc.animation.running;
          for (i3 in a)
            s && a[i3].type !== s || r && a[i3].target !== r || (t3 = sigma.misc.animation.running[i3], cancelAnimationFrame(t3.frameId), delete sigma.misc.animation.running[i3], "camera" === t3.type && (t3.target.isAnimated = false), n++, "function" == typeof (t3.options || {}).onComplete && t3.options.onComplete());
          return n;
        }, sigma.misc.animation.has = function(e3) {
          var t3, i3 = "string" == typeof e3 ? e3 : null, n = "object" == typeof e3 ? e3 : null, s = sigma.misc.animation.running;
          for (t3 in s)
            if (!(i3 && s[t3].type !== i3 || n && s[t3].target !== n))
              return true;
          return false;
        };
      }).call(this);
    }).call(window);
  }, 139: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.misc"), sigma.misc.bindEvents = function(t2) {
          var i2, n, s, r, a = this;
          function o2(e3) {
            e3 && (s = "x" in e3.data ? e3.data.x : s, r = "y" in e3.data ? e3.data.y : r);
            var i3, n2, o3, d2, l2, h, c, u, g = [], f = s + a.width / 2, m = r + a.height / 2, y = a.camera.cameraPosition(s, r), p = a.camera.quadtree.point(y.x, y.y);
            if (p.length) {
              for (i3 = 0, o3 = p.length; i3 < o3; i3++)
                if (l2 = (d2 = p[i3])[t2 + "x"], h = d2[t2 + "y"], c = d2[t2 + "size"], !d2.hidden && f > l2 - c && f < l2 + c && m > h - c && m < h + c && Math.sqrt(Math.pow(f - l2, 2) + Math.pow(m - h, 2)) < c) {
                  for (u = false, n2 = 0; n2 < g.length; n2++)
                    if (d2.size > g[n2].size) {
                      g.splice(n2, 0, d2), u = true;
                      break;
                    }
                  u || g.push(d2);
                }
            }
            return g;
          }
          function d(i3) {
            if (!a.settings("enableEdgeHovering"))
              return [];
            var n2 = sigma.renderers.canvas && a instanceof sigma.renderers.canvas;
            if (!n2)
              throw new Error("The edge events feature is not compatible with the WebGL renderer");
            i3 && (s = "x" in i3.data ? i3.data.x : s, r = "y" in i3.data ? i3.data.y : r);
            var o3, d2, l2, h, c, u, g, f, m, y, p = a.settings("edgeHoverPrecision"), x = {}, v = [], b = s + a.width / 2, w = r + a.height / 2, E = a.camera.cameraPosition(s, r), C = [];
            if (n2)
              for (o3 = 0, l2 = (h = a.camera.quadtree.area(a.camera.getRectangle(a.width, a.height))).length; o3 < l2; o3++)
                x[h[o3].id] = h[o3];
            function k(e3, t3) {
              for (y = false, d2 = 0; d2 < e3.length; d2++)
                if (t3.size > e3[d2].size) {
                  e3.splice(d2, 0, t3), y = true;
                  break;
                }
              y || e3.push(t3);
            }
            if (a.camera.edgequadtree !== e2 && (C = a.camera.edgequadtree.point(E.x, E.y)), C.length)
              for (o3 = 0, l2 = C.length; o3 < l2; o3++)
                c = C[o3], g = a.graph.nodes(c.source), f = a.graph.nodes(c.target), u = c[t2 + "size"] || c["read_" + t2 + "size"], !c.hidden && !g.hidden && !f.hidden && (!n2 || x[c.source] || x[c.target]) && sigma.utils.getDistance(g[t2 + "x"], g[t2 + "y"], b, w) > g[t2 + "size"] && sigma.utils.getDistance(f[t2 + "x"], f[t2 + "y"], b, w) > f[t2 + "size"] && ("curve" == c.type || "curvedArrow" == c.type ? g.id === f.id ? (m = sigma.utils.getSelfLoopControlPoints(g[t2 + "x"], g[t2 + "y"], g[t2 + "size"]), sigma.utils.isPointOnBezierCurve(b, w, g[t2 + "x"], g[t2 + "y"], f[t2 + "x"], f[t2 + "y"], m.x1, m.y1, m.x2, m.y2, Math.max(u, p)) && k(v, c)) : (m = sigma.utils.getQuadraticControlPoint(g[t2 + "x"], g[t2 + "y"], f[t2 + "x"], f[t2 + "y"]), sigma.utils.isPointOnQuadraticCurve(b, w, g[t2 + "x"], g[t2 + "y"], f[t2 + "x"], f[t2 + "y"], m.x, m.y, Math.max(u, p)) && k(v, c)) : sigma.utils.isPointOnSegment(b, w, g[t2 + "x"], g[t2 + "y"], f[t2 + "x"], f[t2 + "y"], Math.max(u, p)) && k(v, c));
            return v;
          }
          function l(e3) {
            var t3, i3, n2 = {}, s2 = {};
            function r2(e4) {
              if (a.settings("eventsEnabled")) {
                t3 = o2(e4), i3 = d(e4);
                var r3, l2, h, c, u = [], g = [], f = {}, m = t3.length, y = [], p = [], x = {}, v = i3.length;
                for (r3 = 0; r3 < m; r3++)
                  f[(h = t3[r3]).id] = h, n2[h.id] || (g.push(h), n2[h.id] = h);
                for (l2 in n2)
                  f[l2] || (u.push(n2[l2]), delete n2[l2]);
                for (r3 = 0, m = g.length; r3 < m; r3++)
                  a.dispatchEvent("overNode", { node: g[r3], captor: e4.data });
                for (r3 = 0, m = u.length; r3 < m; r3++)
                  a.dispatchEvent("outNode", { node: u[r3], captor: e4.data });
                for (g.length && a.dispatchEvent("overNodes", { nodes: g, captor: e4.data }), u.length && a.dispatchEvent("outNodes", { nodes: u, captor: e4.data }), r3 = 0; r3 < v; r3++)
                  x[(c = i3[r3]).id] = c, s2[c.id] || (p.push(c), s2[c.id] = c);
                for (l2 in s2)
                  x[l2] || (y.push(s2[l2]), delete s2[l2]);
                for (r3 = 0, v = p.length; r3 < v; r3++)
                  a.dispatchEvent("overEdge", { edge: p[r3], captor: e4.data });
                for (r3 = 0, v = y.length; r3 < v; r3++)
                  a.dispatchEvent("outEdge", { edge: y[r3], captor: e4.data });
                p.length && a.dispatchEvent("overEdges", { edges: p, captor: e4.data }), y.length && a.dispatchEvent("outEdges", { edges: y, captor: e4.data });
              }
            }
            e3.bind("click", function(e4) {
              a.settings("eventsEnabled") && (a.dispatchEvent("click", e4.data), t3 = o2(e4), i3 = d(e4), t3.length ? (a.dispatchEvent("clickNode", { node: t3[0], captor: e4.data }), a.dispatchEvent("clickNodes", { node: t3, captor: e4.data })) : i3.length ? (a.dispatchEvent("clickEdge", { edge: i3[0], captor: e4.data }), a.dispatchEvent("clickEdges", { edge: i3, captor: e4.data })) : a.dispatchEvent("clickStage", { captor: e4.data }));
            }), e3.bind("mousedown", r2), e3.bind("mouseup", r2), e3.bind("mousemove", r2), e3.bind("mouseout", function(e4) {
              if (a.settings("eventsEnabled")) {
                var t4, i4, r3, o3, d2 = [], l2 = [];
                for (t4 in n2)
                  d2.push(n2[t4]);
                for (n2 = {}, i4 = 0, r3 = d2.length; i4 < r3; i4++)
                  a.dispatchEvent("outNode", { node: d2[i4], captor: e4.data });
                for (d2.length && a.dispatchEvent("outNodes", { nodes: d2, captor: e4.data }), s2 = {}, i4 = 0, o3 = l2.length; i4 < o3; i4++)
                  a.dispatchEvent("outEdge", { edge: l2[i4], captor: e4.data });
                l2.length && a.dispatchEvent("outEdges", { edges: l2, captor: e4.data });
              }
            }), e3.bind("doubleclick", function(e4) {
              a.settings("eventsEnabled") && (a.dispatchEvent("doubleClick", e4.data), t3 = o2(e4), i3 = d(e4), t3.length ? (a.dispatchEvent("doubleClickNode", { node: t3[0], captor: e4.data }), a.dispatchEvent("doubleClickNodes", { node: t3, captor: e4.data })) : i3.length ? (a.dispatchEvent("doubleClickEdge", { edge: i3[0], captor: e4.data }), a.dispatchEvent("doubleClickEdges", { edge: i3, captor: e4.data })) : a.dispatchEvent("doubleClickStage", { captor: e4.data }));
            }), e3.bind("rightclick", function(e4) {
              a.settings("eventsEnabled") && (a.dispatchEvent("rightClick", e4.data), t3 = o2(e4), i3 = d(e4), t3.length ? (a.dispatchEvent("rightClickNode", { node: t3[0], captor: e4.data }), a.dispatchEvent("rightClickNodes", { node: t3, captor: e4.data })) : i3.length ? (a.dispatchEvent("rightClickEdge", { edge: i3[0], captor: e4.data }), a.dispatchEvent("rightClickEdges", { edge: i3, captor: e4.data })) : a.dispatchEvent("rightClickStage", { captor: e4.data }));
            }), a.bind("render", r2);
          }
          for (i2 = 0, n = this.captors.length; i2 < n; i2++)
            l(this.captors[i2]);
        };
      }).call(this);
    }).call(window);
  }, 140: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.misc"), sigma.misc.bindDOMEvents = function(e3) {
          var t2 = this, i2 = this.graph;
          function n(e4) {
            this.attr = function(t3) {
              return e4.getAttributeNS(null, t3);
            }, this.tag = e4.tagName, this.class = this.attr("class"), this.id = this.attr("id"), this.isNode = function() {
              return !!~this.class.indexOf(t2.settings("classPrefix") + "-node");
            }, this.isEdge = function() {
              return !!~this.class.indexOf(t2.settings("classPrefix") + "-edge");
            }, this.isHover = function() {
              return !!~this.class.indexOf(t2.settings("classPrefix") + "-hover");
            };
          }
          function s(e4) {
            if (t2.settings("eventsEnabled")) {
              t2.dispatchEvent("click", e4);
              var s2 = new n(e4.target);
              s2.isNode() ? t2.dispatchEvent("clickNode", { node: i2.nodes(s2.attr("data-node-id")) }) : t2.dispatchEvent("clickStage"), e4.preventDefault(), e4.stopPropagation();
            }
          }
          function r(e4) {
            if (t2.settings("eventsEnabled")) {
              t2.dispatchEvent("doubleClick", e4);
              var s2 = new n(e4.target);
              s2.isNode() ? t2.dispatchEvent("doubleClickNode", { node: i2.nodes(s2.attr("data-node-id")) }) : t2.dispatchEvent("doubleClickStage"), e4.preventDefault(), e4.stopPropagation();
            }
          }
          e3.addEventListener("click", s, false), sigma.utils.doubleClick(e3, "click", r), e3.addEventListener("touchstart", s, false), sigma.utils.doubleClick(e3, "touchstart", r), e3.addEventListener("mouseover", function(e4) {
            var s2 = e4.toElement || e4.target;
            if (t2.settings("eventsEnabled") && s2) {
              var r2 = new n(s2);
              if (r2.isNode())
                t2.dispatchEvent("overNode", { node: i2.nodes(r2.attr("data-node-id")) });
              else if (r2.isEdge()) {
                var a = i2.edges(r2.attr("data-edge-id"));
                t2.dispatchEvent("overEdge", { edge: a, source: i2.nodes(a.source), target: i2.nodes(a.target) });
              }
            }
          }, true), e3.addEventListener("mouseout", function(e4) {
            var s2 = e4.fromElement || e4.originalTarget;
            if (t2.settings("eventsEnabled")) {
              var r2 = new n(s2);
              if (r2.isNode())
                t2.dispatchEvent("outNode", { node: i2.nodes(r2.attr("data-node-id")) });
              else if (r2.isEdge()) {
                var a = i2.edges(r2.attr("data-edge-id"));
                t2.dispatchEvent("outEdge", { edge: a, source: i2.nodes(a.source), target: i2.nodes(a.target) });
              }
            }
          }, true);
        };
      }).call(this);
    }).call(window);
  }, 141: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.misc"), sigma.misc.drawHovers = function(e3) {
          var t2 = this, i2 = {}, n = {};
          function s() {
            var s2, r, a, o2, d, l = t2.contexts.hover.canvas, h = t2.settings("defaultNodeType"), c = t2.settings("defaultEdgeType"), u = sigma.canvas.hovers, g = sigma.canvas.edgehovers, f = sigma.canvas.extremities, m = t2.settings.embedObjects({ prefix: e3 });
            if (t2.contexts.hover.clearRect(0, 0, l.width, l.height), m("enableHovering") && m("singleHover") && Object.keys(i2).length && (u[(o2 = i2[Object.keys(i2)[0]]).type] || u[h] || u.def)(o2, t2.contexts.hover, m), m("enableHovering") && !m("singleHover"))
              for (s2 in i2)
                (u[i2[s2].type] || u[h] || u.def)(i2[s2], t2.contexts.hover, m);
            if (m("enableEdgeHovering") && m("singleHover") && Object.keys(n).length && (d = n[Object.keys(n)[0]], r = t2.graph.nodes(d.source), a = t2.graph.nodes(d.target), d.hidden || ((g[d.type] || g[c] || g.def)(d, r, a, t2.contexts.hover, m), m("edgeHoverExtremities") ? (f[d.type] || f.def)(d, r, a, t2.contexts.hover, m) : ((sigma.canvas.nodes[r.type] || sigma.canvas.nodes.def)(r, t2.contexts.hover, m), (sigma.canvas.nodes[a.type] || sigma.canvas.nodes.def)(a, t2.contexts.hover, m)))), m("enableEdgeHovering") && !m("singleHover"))
              for (s2 in n)
                d = n[s2], r = t2.graph.nodes(d.source), a = t2.graph.nodes(d.target), d.hidden || ((g[d.type] || g[c] || g.def)(d, r, a, t2.contexts.hover, m), m("edgeHoverExtremities") ? (f[d.type] || f.def)(d, r, a, t2.contexts.hover, m) : ((sigma.canvas.nodes[r.type] || sigma.canvas.nodes.def)(r, t2.contexts.hover, m), (sigma.canvas.nodes[a.type] || sigma.canvas.nodes.def)(a, t2.contexts.hover, m)));
          }
          this.bind("overNode", function(e4) {
            var t3 = e4.data.node;
            t3.hidden || (i2[t3.id] = t3, s());
          }), this.bind("outNode", function(e4) {
            delete i2[e4.data.node.id], s();
          }), this.bind("overEdge", function(e4) {
            var t3 = e4.data.edge;
            t3.hidden || (n[t3.id] = t3, s());
          }), this.bind("outEdge", function(e4) {
            delete n[e4.data.edge.id], s();
          }), this.bind("render", function(e4) {
            s();
          });
        };
      }).call(this);
    }).call(window);
  } });

  // node_modules/react-sigma/es/Sigma.js
  var import_prop_types4 = __toESM(require_prop_types());
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf2(subClass, superClass);
  }
  function _setPrototypeOf2(o2, p) {
    _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf2(o2, p);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf(o2);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Sigma3 = /* @__PURE__ */ function(_React$Component) {
    _inherits(Sigma15, _React$Component);
    var _super = _createSuper(Sigma15);
    function Sigma15(props) {
      var _this2;
      _classCallCheck(this, Sigma15);
      _this2 = _super.call(this, props);
      _defineProperty(_assertThisInitialized(_this2), "initRenderer", function(container) {
        if (container) {
          var options2 = {
            container
          };
          if (_this2.props.renderer)
            options2.type = _this2.props.renderer;
          _this2.sigmaRenderer = _this2.sigma.addRenderer(options2);
          _this2.sigma.refresh();
          _this2.setState({
            renderer: true
          });
        } else if (_this2.sigmaRenderer) {
          _this2.sigma.killRenderer(_this2.sigmaRenderer);
          _this2.sigmaRenderer = null;
          _this2.setState({
            renderer: false
          });
        }
      });
      _this2.state = {
        renderer: false
      };
      var settings2 = _this2.props.settings ? _this2.props.settings : {};
      _this2.sigma = new sigma({
        settings: settings2
      });
      if (CustomShapes)
        CustomShapes.init(_this2.sigma);
      Sigma15.bindHandlers(_this2.props, _this2.sigma);
      if (_this2.props.graph) {
        try {
          _this2.sigma.graph.read(_this2.props.graph);
        } catch (e) {
          if (_this2.props.onSigmaException)
            _this2.props.onSigmaException(e);
        }
      }
      return _this2;
    }
    _createClass(Sigma15, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.sigma.kill();
        this.sigmaRenderer = null;
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.state.renderer ? embedProps(this.props.children, {
          sigma: this.sigma
        }) : null;
        return /* @__PURE__ */ import_react33.default.createElement("div", {
          ref: this.initRenderer,
          style: this.props.style
        }, children);
      }
      /**
      Initialize event handlers with sigma.
      
      Event handler function receives [Sigma Event](https://github.com/jacomyal/sigma.js/wiki/Events-API)
      with the structure of following type:
      ```
      type Sigma$Event = {
        data: {
          node?: Neo4j$Node, //for node events is sigma node data
          edge?: Neo4j$Edge, //for edge events is sigma edge data
          captor: {   // information about event handler, for instance position on the page {clientX, clientY}
            clientX: number,
            clientY: number
      }}}
      
      type Sigma$EventHandler = (node:Sigma$Event) => void
      
      ```
      **/
    }], [{
      key: "bindHandlers",
      value: function bindHandlers(handlers, sigma6) {
        ["clickNode", "overNode", "outNode", "clickEdge", "overEdge", "outEdge", "clickStage"].forEach(function(event) {
          var handler = "on" + event[0].toUpperCase() + event.substr(1);
          if (handlers[handler]) {
            sigma6.bind(event, handlers[handler]);
          }
        });
      }
    }]);
    return Sigma15;
  }(import_react33.default.Component);
  _defineProperty(Sigma3, "defaultProps", {
    settings: {
      defaultNodeColor: "#3388AA",
      defaultLabelSize: 8,
      defaultLabelColor: "#777",
      labelThreshold: 12,
      hoverFontStyle: "text-size: 11",
      batchEdgesDrawing: true,
      drawEdges: true,
      drawEdgeLabels: false
    },
    style: {
      maxWidth: "inherit",
      height: "400px"
    }
  });
  _defineProperty(Sigma3, "propTypes", {
    settings: function settings() {
      return (typeof Sigma$Settings === "function" ? import_prop_types4.default.instanceOf(Sigma$Settings) : import_prop_types4.default.any).apply(this, arguments);
    },
    renderer: import_prop_types4.default.oneOf(["webgl", "canvas", "svg"]),
    style: import_prop_types4.default.object,
    children: import_prop_types4.default.any,
    graph: function graph() {
      return (typeof Sigma$Graph$Data === "function" ? import_prop_types4.default.instanceOf(Sigma$Graph$Data) : import_prop_types4.default.any).apply(this, arguments);
    },
    onSigmaException: import_prop_types4.default.func,
    onClickNode: import_prop_types4.default.func,
    onClickEdge: import_prop_types4.default.func,
    onOverNode: import_prop_types4.default.func,
    onOutNode: import_prop_types4.default.func,
    onOverEdge: import_prop_types4.default.func,
    // TODO: onOverEdge does not work?
    onOutEdge: import_prop_types4.default.func,
    onClickStage: import_prop_types4.default.func
  });
  var Sigma_default = Sigma3;

  // node_modules/react-sigma/es/DragNodes.js
  var import_react34 = __toESM(require_react());

  // node_modules/react-sigma/sigma/sigma.plugins.dragNodes.js
  var Sigma4 = function(e) {
    var n = {};
    function t(r) {
      if (n[r])
        return n[r].exports;
      var o2 = n[r] = { i: r, l: false, exports: {} };
      return e[r].call(o2.exports, o2, o2.exports, t), o2.l = true, o2.exports;
    }
    return t.m = e, t.c = n, t.d = function(e2, n2, r) {
      t.o(e2, n2) || Object.defineProperty(e2, n2, { enumerable: true, get: r });
    }, t.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, t.t = function(e2, n2) {
      if (1 & n2 && (e2 = t(e2)), 8 & n2)
        return e2;
      if (4 & n2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var r = /* @__PURE__ */ Object.create(null);
      if (t.r(r), Object.defineProperty(r, "default", { enumerable: true, value: e2 }), 2 & n2 && "string" != typeof e2)
        for (var o2 in e2)
          t.d(r, o2, function(n3) {
            return e2[n3];
          }.bind(null, o2));
      return r;
    }, t.n = function(e2) {
      var n2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return t.d(n2, "a", n2), n2;
    }, t.o = function(e2, n2) {
      return Object.prototype.hasOwnProperty.call(e2, n2);
    }, t.p = "", t(t.s = 179);
  }({ 179: function(e, n) {
    (function() {
      (function() {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        function e2(e3, n3) {
          sigma.classes.dispatcher.extend(this);
          var t = this, r = e3, o2 = document.body, i2 = n3, d = n3.container.lastChild, a = n3.camera, s = null, u = "", l = [], c = {}, f = false, g = false;
          function p(e4) {
            c[e4.data.node.id] || (l.push(e4.data.node), c[e4.data.node.id] = true, l.length && !f && (s = l[l.length - 1], d.addEventListener("mousedown", m)));
          }
          function v(e4) {
            var n4 = l.map(function(e5) {
              return e5;
            }).indexOf(e4.data.node);
            l.splice(n4, 1), delete c[e4.data.node.id], l.length && !f ? s = l[l.length - 1] : d.removeEventListener("mousedown", m);
          }
          function m(e4) {
            f = true;
            var n4 = r.graph.nodes().length;
            if (s && n4 > 1) {
              var a3, u2;
              for (a3 in d.removeEventListener("mousedown", m), o2.addEventListener("mousemove", y), o2.addEventListener("mouseup", b), r.cameras)
                void 0 !== (u2 = r.cameras[a3]).edgequadtree && (u2.edgequadtree._enabled = false);
              i2.settings({ mouseEnabled: false, enableHovering: false }), r.refresh(), t.dispatchEvent("startdrag", { node: s, captor: e4, renderer: i2 });
            }
          }
          function b(e4) {
            var n4, a3;
            for (n4 in f = false, d.addEventListener("mousedown", m), o2.removeEventListener("mousemove", y), o2.removeEventListener("mouseup", b), r.cameras)
              void 0 !== (a3 = r.cameras[n4]).edgequadtree && (a3.edgequadtree._enabled = true);
            i2.settings({ mouseEnabled: true, enableHovering: true }), r.refresh(), g && t.dispatchEvent("drop", { node: s, captor: e4, renderer: i2 }), t.dispatchEvent("dragend", { node: s, captor: e4, renderer: i2 }), g = false, s = null;
          }
          function y(e4) {
            if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
              clearTimeout(n4);
              var n4 = setTimeout(o3, 0);
            } else
              o3();
            function o3() {
              for (var n5, o4, d2, l2 = (n5 = i2.container, o4 = window.getComputedStyle(n5), d2 = function(e5) {
                return parseInt(o4.getPropertyValue(e5).replace("px", "")) || 0;
              }, { left: n5.getBoundingClientRect().left + d2("padding-left"), top: n5.getBoundingClientRect().top + d2("padding-top") }), c2 = e4.clientX - l2.left, f2 = e4.clientY - l2.top, p2 = Math.cos(a.angle), v2 = Math.sin(a.angle), m2 = r.graph.nodes(), b2 = [], y2 = 0; y2 < 2; y2++) {
                var h = m2[y2], x = { x: h.x * p2 + h.y * v2, y: h.y * p2 - h.x * v2, renX: h[u + "x"], renY: h[u + "y"] };
                b2.push(x);
              }
              if (b2[0].x === b2[1].x && b2[0].y === b2[1].y) {
                var E = 0 === b2[0].renX ? 1 : b2[0].renX, w = 0 === b2[0].renY ? 1 : b2[0].renY;
                c2 = b2[0].x / E * (c2 - b2[0].renX) + b2[0].x, f2 = b2[0].y / w * (f2 - b2[0].renY) + b2[0].y;
              } else {
                E = (b2[1].renX - b2[0].renX) / (b2[1].x - b2[0].x), w = (b2[1].renY - b2[0].renY) / (b2[1].y - b2[0].y);
                b2[1].x === b2[0].x && (E = w), b2[1].y === b2[0].y && (w = E), c2 = (c2 - b2[0].renX) / E + b2[0].x, f2 = (f2 - b2[0].renY) / w + b2[0].y;
              }
              s.x = c2 * p2 - f2 * v2, s.y = f2 * p2 + c2 * v2, r.refresh(), g = true, t.dispatchEvent("drag", { node: s, captor: e4, renderer: i2 });
            }
          }
          n3 instanceof sigma.renderers.svg && (d = n3.container.firstChild), u = n3 instanceof sigma.renderers.webgl ? n3.options.prefix.substr(5) : n3.options.prefix, n3.bind("overNode", p), n3.bind("outNode", v), n3.bind("click", function(e4) {
            f = false, o2.removeEventListener("mousemove", y), o2.removeEventListener("mouseup", b), l.length || (s = null);
          }), r.bind("kill", function() {
            t.unbindAll();
          }), this.unbindAll = function() {
            d.removeEventListener("mousedown", m), o2.removeEventListener("mousemove", y), o2.removeEventListener("mouseup", b), i2.unbind("overNode", p), i2.unbind("outNode", v);
          };
        }
        sigma.utils.pkg("sigma.plugins");
        var n2 = {};
        sigma.plugins.dragNodes = function(t, r) {
          return n2[t.id] || (n2[t.id] = new e2(t, r)), t.bind("kill", function() {
            sigma.plugins.killDragNodes(t);
          }), n2[t.id];
        }, sigma.plugins.killDragNodes = function(t) {
          n2[t.id] instanceof e2 && (n2[t.id].unbindAll(), delete n2[t.id]);
        };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/es/DragNodes.js
  var import_prop_types5 = __toESM(require_prop_types());
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf3(subClass, superClass);
  }
  function _setPrototypeOf3(o2, p) {
    _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf3(o2, p);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf2(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf2(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result);
    };
  }
  function _possibleConstructorReturn2(self2, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf2(o2) {
    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf2(o2);
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var DragNodes = /* @__PURE__ */ function(_React$Component) {
    _inherits2(DragNodes2, _React$Component);
    var _super = _createSuper2(DragNodes2);
    function DragNodes2(props) {
      var _this2;
      _classCallCheck2(this, DragNodes2);
      _this2 = _super.call(this, props);
      _defineProperty2(_assertThisInitialized2(_this2), "render", function() {
        return null;
      });
      if (_this2.props.sigma) {
        var dragListener = sigma.plugins.dragNodes(_this2.props.sigma, _this2.props.sigma.renderers[0]);
        DragNodes2.bindHandlers(props, dragListener);
      }
      return _this2;
    }
    _createClass2(DragNodes2, null, [{
      key: "bindHandlers",
      value: function bindHandlers(handlers, dragListener) {
        ["startdrag", "drag", "drop", "dragend"].forEach(function(event) {
          var handler = "on" + event[0].toUpperCase() + event.substr(1);
          if (handlers[handler]) {
            dragListener.bind(event, handlers[handler]);
          }
        });
      }
    }]);
    return DragNodes2;
  }(import_react34.default.Component);
  _defineProperty2(DragNodes, "propTypes", {
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types5.default.instanceOf(sigma) : import_prop_types5.default.any).apply(this, arguments);
    }),
    onStartdrag: import_prop_types5.default.func,
    onDrag: import_prop_types5.default.func,
    onDrop: import_prop_types5.default.func,
    onDragend: import_prop_types5.default.func
  });

  // node_modules/react-sigma/es/EdgeShapes.js
  var import_react35 = __toESM(require_react());

  // node_modules/react-sigma/sigma/edges.js
  var Sigma5 = function(e) {
    var o2 = {};
    function t(i2) {
      if (o2[i2])
        return o2[i2].exports;
      var a = o2[i2] = { i: i2, l: false, exports: {} };
      return e[i2].call(a.exports, a, a.exports, t), a.l = true, a.exports;
    }
    return t.m = e, t.c = o2, t.d = function(e2, o3, i2) {
      t.o(e2, o3) || Object.defineProperty(e2, o3, { enumerable: true, get: i2 });
    }, t.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, t.t = function(e2, o3) {
      if (1 & o3 && (e2 = t(e2)), 8 & o3)
        return e2;
      if (4 & o3 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var i2 = /* @__PURE__ */ Object.create(null);
      if (t.r(i2), Object.defineProperty(i2, "default", { enumerable: true, value: e2 }), 2 & o3 && "string" != typeof e2)
        for (var a in e2)
          t.d(i2, a, function(o4) {
            return e2[o4];
          }.bind(null, a));
      return i2;
    }, t.n = function(e2) {
      var o3 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return t.d(o3, "a", o3), o3;
    }, t.o = function(e2, o3) {
      return Object.prototype.hasOwnProperty.call(e2, o3);
    }, t.p = "", t(t.s = 158);
  }({ 158: function(e, o2, t) {
    "use strict";
    t.r(o2);
    t(159), t(160), t(161), t(162), t(163), t(164), t(165), t(166), t(167), t(168), t(169), t(170), t(171), t(172), t(173), t(174), t(175);
  }, 159: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.curve = function(e2, o3, t, i2, a) {
          var l, r = e2.color, s = a("prefix") || "", c = e2[s + "size"] || 1, n = a("edgeColor"), d = a("defaultNodeColor"), g = a("defaultEdgeColor"), u = o3[s + "size"], f = o3[s + "x"], v = o3[s + "y"], h = t[s + "x"], y = t[s + "y"];
          if (l = o3.id === t.id ? sigma.utils.getSelfLoopControlPoints(f, v, u) : sigma.utils.getQuadraticControlPoint(f, v, h, y), !r)
            switch (n) {
              case "source":
                r = o3.color || d;
                break;
              case "target":
                r = t.color || d;
                break;
              default:
                r = g;
            }
          i2.strokeStyle = r, i2.lineWidth = c, i2.beginPath(), i2.moveTo(f, v), o3.id === t.id ? i2.bezierCurveTo(l.x1, l.y1, l.x2, l.y2, h, y) : i2.quadraticCurveTo(l.x, l.y, h, y), i2.stroke();
        };
      }();
    }).call(window);
  }, 160: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.arrow = function(e2, o3, t, i2, a) {
          var l = e2.color, r = a("prefix") || "", s = a("edgeColor"), c = a("defaultNodeColor"), n = a("defaultEdgeColor"), d = e2[r + "size"] || 1, g = t[r + "size"], u = o3[r + "x"], f = o3[r + "y"], v = t[r + "x"], h = t[r + "y"], y = Math.max(2.5 * d, a("minArrowSize")), m = Math.sqrt(Math.pow(v - u, 2) + Math.pow(h - f, 2)), x = u + (v - u) * (m - y - g) / m, C = f + (h - f) * (m - y - g) / m, b = (v - u) * y / m, p = (h - f) * y / m;
          if (!l)
            switch (s) {
              case "source":
                l = o3.color || c;
                break;
              case "target":
                l = t.color || c;
                break;
              default:
                l = n;
            }
          i2.strokeStyle = l, i2.lineWidth = d, i2.beginPath(), i2.moveTo(u, f), i2.lineTo(x, C), i2.stroke(), i2.fillStyle = l, i2.beginPath(), i2.moveTo(x + b, C + p), i2.lineTo(x + 0.6 * p, C - 0.6 * b), i2.lineTo(x - 0.6 * p, C + 0.6 * b), i2.lineTo(x + b, C + p), i2.closePath(), i2.fill();
        };
      }();
    }).call(window);
  }, 161: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.curvedArrow = function(e2, o3, t, i2, a) {
          var l, r, s, c, n, d, g = e2.color, u = a("prefix") || "", f = a("edgeColor"), v = a("defaultNodeColor"), h = a("defaultEdgeColor"), y = e2[u + "size"] || 1, m = t[u + "size"], x = o3[u + "x"], C = o3[u + "y"], b = t[u + "x"], p = t[u + "y"], w = Math.max(2.5 * y, a("minArrowSize"));
          if (l = o3.id === t.id ? sigma.utils.getSelfLoopControlPoints(x, C, m) : sigma.utils.getQuadraticControlPoint(x, C, b, p), o3.id === t.id ? (r = Math.sqrt(Math.pow(b - l.x1, 2) + Math.pow(p - l.y1, 2)), s = l.x1 + (b - l.x1) * (r - w - m) / r, c = l.y1 + (p - l.y1) * (r - w - m) / r, n = (b - l.x1) * w / r, d = (p - l.y1) * w / r) : (r = Math.sqrt(Math.pow(b - l.x, 2) + Math.pow(p - l.y, 2)), s = l.x + (b - l.x) * (r - w - m) / r, c = l.y + (p - l.y) * (r - w - m) / r, n = (b - l.x) * w / r, d = (p - l.y) * w / r), !g)
            switch (f) {
              case "source":
                g = o3.color || v;
                break;
              case "target":
                g = t.color || v;
                break;
              default:
                g = h;
            }
          i2.strokeStyle = g, i2.lineWidth = y, i2.beginPath(), i2.moveTo(x, C), o3.id === t.id ? i2.bezierCurveTo(l.x2, l.y2, l.x1, l.y1, s, c) : i2.quadraticCurveTo(l.x, l.y, s, c), i2.stroke(), i2.fillStyle = g, i2.beginPath(), i2.moveTo(s + n, c + d), i2.lineTo(s + 0.6 * d, c - 0.6 * n), i2.lineTo(s - 0.6 * d, c + 0.6 * n), i2.lineTo(s + n, c + d), i2.closePath(), i2.fill();
        };
      }();
    }).call(window);
  }, 162: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.curve = function(e2, o3, t, i2, a) {
          var l, r = e2.color, s = a("prefix") || "", c = a("edgeHoverSizeRatio") * (e2[s + "size"] || 1), n = a("edgeColor"), d = a("defaultNodeColor"), g = a("defaultEdgeColor"), u = o3[s + "size"], f = o3[s + "x"], v = o3[s + "y"], h = t[s + "x"], y = t[s + "y"];
          if (l = o3.id === t.id ? sigma.utils.getSelfLoopControlPoints(f, v, u) : sigma.utils.getQuadraticControlPoint(f, v, h, y), !r)
            switch (n) {
              case "source":
                r = o3.color || d;
                break;
              case "target":
                r = t.color || d;
                break;
              default:
                r = g;
            }
          r = "edge" === a("edgeHoverColor") ? e2.hover_color || r : e2.hover_color || a("defaultEdgeHoverColor") || r, i2.strokeStyle = r, i2.lineWidth = c, i2.beginPath(), i2.moveTo(f, v), o3.id === t.id ? i2.bezierCurveTo(l.x1, l.y1, l.x2, l.y2, h, y) : i2.quadraticCurveTo(l.x, l.y, h, y), i2.stroke();
        };
      }();
    }).call(window);
  }, 163: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.arrow = function(e2, o3, t, i2, a) {
          var l = e2.color, r = a("prefix") || "", s = a("edgeColor"), c = a("defaultNodeColor"), n = a("defaultEdgeColor"), d = e2[r + "size"] || 1, g = t[r + "size"], u = o3[r + "x"], f = o3[r + "y"], v = t[r + "x"], h = t[r + "y"], y = 2.5 * (d = e2.hover ? a("edgeHoverSizeRatio") * d : d), m = Math.sqrt(Math.pow(v - u, 2) + Math.pow(h - f, 2)), x = u + (v - u) * (m - y - g) / m, C = f + (h - f) * (m - y - g) / m, b = (v - u) * y / m, p = (h - f) * y / m;
          if (!l)
            switch (s) {
              case "source":
                l = o3.color || c;
                break;
              case "target":
                l = t.color || c;
                break;
              default:
                l = n;
            }
          l = "edge" === a("edgeHoverColor") ? e2.hover_color || l : e2.hover_color || a("defaultEdgeHoverColor") || l, i2.strokeStyle = l, i2.lineWidth = d, i2.beginPath(), i2.moveTo(u, f), i2.lineTo(x, C), i2.stroke(), i2.fillStyle = l, i2.beginPath(), i2.moveTo(x + b, C + p), i2.lineTo(x + 0.6 * p, C - 0.6 * b), i2.lineTo(x - 0.6 * p, C + 0.6 * b), i2.lineTo(x + b, C + p), i2.closePath(), i2.fill();
        };
      }();
    }).call(window);
  }, 164: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.curvedArrow = function(e2, o3, t, i2, a) {
          var l, r, s, c, n, d, g, u = e2.color, f = a("prefix") || "", v = a("edgeColor"), h = a("defaultNodeColor"), y = a("defaultEdgeColor"), m = a("edgeHoverSizeRatio") * (e2[f + "size"] || 1), x = t[f + "size"], C = o3[f + "x"], b = o3[f + "y"], p = t[f + "x"], w = t[f + "y"];
          if (l = o3.id === t.id ? sigma.utils.getSelfLoopControlPoints(C, b, x) : sigma.utils.getQuadraticControlPoint(C, b, p, w), o3.id === t.id ? (r = Math.sqrt(Math.pow(p - l.x1, 2) + Math.pow(w - l.y1, 2)), s = 2.5 * m, c = l.x1 + (p - l.x1) * (r - s - x) / r, n = l.y1 + (w - l.y1) * (r - s - x) / r, d = (p - l.x1) * s / r, g = (w - l.y1) * s / r) : (r = Math.sqrt(Math.pow(p - l.x, 2) + Math.pow(w - l.y, 2)), s = 2.5 * m, c = l.x + (p - l.x) * (r - s - x) / r, n = l.y + (w - l.y) * (r - s - x) / r, d = (p - l.x) * s / r, g = (w - l.y) * s / r), !u)
            switch (v) {
              case "source":
                u = o3.color || h;
                break;
              case "target":
                u = t.color || h;
                break;
              default:
                u = y;
            }
          u = "edge" === a("edgeHoverColor") ? e2.hover_color || u : e2.hover_color || a("defaultEdgeHoverColor") || u, i2.strokeStyle = u, i2.lineWidth = m, i2.beginPath(), i2.moveTo(C, b), o3.id === t.id ? i2.bezierCurveTo(l.x2, l.y2, l.x1, l.y1, c, n) : i2.quadraticCurveTo(l.x, l.y, c, n), i2.stroke(), i2.fillStyle = u, i2.beginPath(), i2.moveTo(c + d, n + g), i2.lineTo(c + 0.6 * g, n - 0.6 * d), i2.lineTo(c - 0.6 * g, n + 0.6 * d), i2.lineTo(c + d, n + g), i2.closePath(), i2.fill();
        };
      }();
    }).call(window);
  }, 165: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.dashed = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = a("prefix") || "", s = e2[r + "size"] || 1, c = a("edgeColor"), n = a("defaultNodeColor"), d = a("defaultEdgeColor");
          if (!l)
            switch (c) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          l = "edge" === a("edgeHoverColor") ? e2.hover_color || l : e2.hover_color || a("defaultEdgeHoverColor") || l, s *= a("edgeHoverSizeRatio"), i2.save(), i2.setLineDash([8, 3]), i2.strokeStyle = l, i2.lineWidth = s, i2.beginPath(), i2.moveTo(o3[r + "x"], o3[r + "y"]), i2.lineTo(t[r + "x"], t[r + "y"]), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 166: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.dotted = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = a("prefix") || "", s = e2[r + "size"] || 1, c = a("edgeColor"), n = a("defaultNodeColor"), d = a("defaultEdgeColor");
          if (!l)
            switch (c) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          l = "edge" === a("edgeHoverColor") ? e2.hover_color || l : e2.hover_color || a("defaultEdgeHoverColor") || l, s *= a("edgeHoverSizeRatio"), i2.save(), i2.setLineDash([2]), i2.strokeStyle = l, i2.lineWidth = s, i2.beginPath(), i2.moveTo(o3[r + "x"], o3[r + "y"]), i2.lineTo(t[r + "x"], t[r + "y"]), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 167: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.parallel = function(e2, o3, t, i2, a) {
          var l, r, s = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, c = a("prefix") || "", n = e2[c + "size"] || 1, d = a("edgeColor"), g = a("defaultNodeColor"), u = a("defaultEdgeColor"), f = o3[c + "x"], v = o3[c + "y"], h = t[c + "x"], y = t[c + "y"], m = sigma.utils.getDistance(f, v, h, y);
          if (!s)
            switch (d) {
              case "source":
                s = o3.color || g;
                break;
              case "target":
                s = t.color || g;
                break;
              default:
                s = u;
            }
          s = "edge" === a("edgeHoverColor") ? e2.hover_color || s : e2.hover_color || a("defaultEdgeHoverColor") || s, n *= a("edgeHoverSizeRatio"), l = sigma.utils.getCircleIntersection(f, v, n, h, y, m), r = sigma.utils.getCircleIntersection(h, y, n, f, v, m), i2.save(), i2.strokeStyle = s, i2.lineWidth = n, i2.beginPath(), i2.moveTo(l.xi, l.yi), i2.lineTo(r.xi_prime, r.yi_prime), i2.closePath(), i2.stroke(), i2.beginPath(), i2.moveTo(l.xi_prime, l.yi_prime), i2.lineTo(r.xi, r.yi), i2.closePath(), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 168: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.tapered = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = e2[(c = a("prefix") || "") + "size"] || 1, s = a("edgeColor"), c = a("prefix") || "", n = a("defaultNodeColor"), d = a("defaultEdgeColor"), g = o3[c + "x"], u = o3[c + "y"], f = t[c + "x"], v = t[c + "y"], h = sigma.utils.getDistance(g, u, f, v);
          if (!l)
            switch (s) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          l = "edge" === a("edgeHoverColor") ? e2.hover_color || l : e2.hover_color || a("defaultEdgeHoverColor") || l, r *= a("edgeHoverSizeRatio");
          var y = sigma.utils.getCircleIntersection(g, u, r, f, v, h);
          i2.save(), i2.globalAlpha = 0.65, i2.fillStyle = l, i2.beginPath(), i2.moveTo(f, v), i2.lineTo(y.xi, y.yi), i2.lineTo(y.xi_prime, y.yi_prime), i2.closePath(), i2.fill(), i2.restore();
        };
      }();
    }).call(window);
  }, 169: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.dashed = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = a("prefix") || "", s = e2[r + "size"] || 1, c = a("edgeColor"), n = a("defaultNodeColor"), d = a("defaultEdgeColor");
          if (!l)
            switch (c) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          i2.save(), e2.active ? i2.strokeStyle = "edge" === a("edgeActiveColor") ? l || d : a("defaultEdgeActiveColor") : i2.strokeStyle = l, i2.setLineDash([8, 3]), i2.lineWidth = s, i2.beginPath(), i2.moveTo(o3[r + "x"], o3[r + "y"]), i2.lineTo(t[r + "x"], t[r + "y"]), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 170: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.dotted = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = a("prefix") || "", s = e2[r + "size"] || 1, c = a("edgeColor"), n = a("defaultNodeColor"), d = a("defaultEdgeColor");
          if (!l)
            switch (c) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          i2.save(), e2.active ? i2.strokeStyle = "edge" === a("edgeActiveColor") ? l || d : a("defaultEdgeActiveColor") : i2.strokeStyle = l, i2.setLineDash([2]), i2.lineWidth = s, i2.beginPath(), i2.moveTo(o3[r + "x"], o3[r + "y"]), i2.lineTo(t[r + "x"], t[r + "y"]), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 171: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.parallel = function(e2, o3, t, i2, a) {
          var l, r, s = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, c = a("prefix") || "", n = e2[c + "size"] || 1, d = a("edgeColor"), g = a("defaultNodeColor"), u = a("defaultEdgeColor"), f = o3[c + "x"], v = o3[c + "y"], h = t[c + "x"], y = t[c + "y"], m = sigma.utils.getDistance(f, v, h, y);
          if (!s)
            switch (d) {
              case "source":
                s = o3.color || g;
                break;
              case "target":
                s = t.color || g;
                break;
              default:
                s = u;
            }
          l = sigma.utils.getCircleIntersection(f, v, n, h, y, m), r = sigma.utils.getCircleIntersection(h, y, n, f, v, m), i2.save(), e2.active ? i2.strokeStyle = "edge" === a("edgeActiveColor") ? s || u : a("defaultEdgeActiveColor") : i2.strokeStyle = s, i2.lineWidth = n, i2.beginPath(), i2.moveTo(l.xi, l.yi), i2.lineTo(r.xi_prime, r.yi_prime), i2.closePath(), i2.stroke(), i2.beginPath(), i2.moveTo(l.xi_prime, l.yi_prime), i2.lineTo(r.xi, r.yi), i2.closePath(), i2.stroke(), i2.restore();
        };
      }();
    }).call(window);
  }, 172: function(e, o2) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.tapered = function(e2, o3, t, i2, a) {
          var l = e2.active ? e2.active_color || a("defaultEdgeActiveColor") : e2.color, r = e2[(c = a("prefix") || "") + "size"] || 1, s = a("edgeColor"), c = a("prefix") || "", n = a("defaultNodeColor"), d = a("defaultEdgeColor"), g = o3[c + "x"], u = o3[c + "y"], f = t[c + "x"], v = t[c + "y"], h = sigma.utils.getDistance(g, u, f, v);
          if (!l)
            switch (s) {
              case "source":
                l = o3.color || n;
                break;
              case "target":
                l = t.color || n;
                break;
              default:
                l = d;
            }
          var y = sigma.utils.getCircleIntersection(g, u, r, f, v, h);
          i2.save(), e2.active ? i2.fillStyle = "edge" === a("edgeActiveColor") ? l || d : a("defaultEdgeActiveColor") : i2.fillStyle = l, i2.globalAlpha = 0.65, i2.beginPath(), i2.moveTo(f, v), i2.lineTo(y.xi, y.yi), i2.lineTo(y.xi_prime, y.yi_prime), i2.closePath(), i2.fill(), i2.restore();
        };
      }();
    }).call(window);
  }, 173: function(e, o2) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.edges.labels"), sigma.canvas.edges.labels.def = function(e3, o3, t, i2, a) {
          if ("string" == typeof e3.label && o3 != t) {
            var l = a("prefix") || "", r = e3[l + "size"] || 1;
            if (!(r < a("edgeLabelThreshold"))) {
              if (0 === a("edgeLabelSizePowRatio"))
                throw '"edgeLabelSizePowRatio" must not be 0.';
              var s, c = (o3[l + "x"] + t[l + "x"]) / 2, n = (o3[l + "y"] + t[l + "y"]) / 2, d = t[l + "x"] - o3[l + "x"], g = t[l + "y"] - o3[l + "y"], u = o3[l + "x"] < t[l + "x"] ? 1 : -1, f = Math.atan2(g * u, d * u);
              s = "fixed" === a("edgeLabelSize") ? a("defaultEdgeLabelSize") : a("defaultEdgeLabelSize") * r * Math.pow(r, -1 / a("edgeLabelSizePowRatio")), i2.save(), e3.active ? (i2.font = [a("activeFontStyle"), s + "px", a("activeFont") || a("font")].join(" "), i2.fillStyle = "edge" === a("edgeActiveColor") ? e3.active_color || a("defaultEdgeActiveColor") : a("defaultEdgeLabelActiveColor")) : (i2.font = [a("fontStyle"), s + "px", a("font")].join(" "), i2.fillStyle = "edge" === a("edgeLabelColor") ? e3.color || a("defaultEdgeColor") : a("defaultEdgeLabelColor")), i2.textAlign = "center", i2.textBaseline = "alphabetic", i2.translate(c, n), i2.rotate(f), i2.fillText(e3.label, 0, -r / 2 - 3), i2.restore();
            }
          }
        };
      }).call(this);
    }).call(window);
  }, 174: function(e, o2) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.edges.labels"), sigma.canvas.edges.labels.curve = function(e3, o3, t, i2, a) {
          if ("string" == typeof e3.label) {
            var l = a("prefix") || "", r = e3[l + "size"] || 1;
            if (!(r < a("edgeLabelThreshold"))) {
              var s, c, n, d = o3[l + "size"], g = o3[l + "x"], u = o3[l + "y"], f = t[l + "x"], v = t[l + "y"], h = e3.count || 0, y = f - g, m = v - u, x = g < f ? 1 : -1, C = {};
              o3.id === t.id ? (C = sigma.utils.getSelfLoopControlPoints(g, u, d, h), c = sigma.utils.getPointOnBezierCurve(0.5, g, u, f, v, C.x1, C.y1, C.x2, C.y2), n = Math.atan2(1, 1)) : (C = sigma.utils.getQuadraticControlPoint(g, u, f, v, h), c = sigma.utils.getPointOnQuadraticCurve(0.5, g, u, f, v, C.x, C.y), n = Math.atan2(m * x, y * x)), s = "fixed" === a("edgeLabelSize") ? a("defaultEdgeLabelSize") : a("defaultEdgeLabelSize") * r * Math.pow(r, -1 / a("edgeLabelSizePowRatio")), i2.save(), e3.active ? (i2.font = [a("activeFontStyle"), s + "px", a("activeFont") || a("font")].join(" "), i2.fillStyle = "edge" === a("edgeActiveColor") ? e3.active_color || a("defaultEdgeActiveColor") : a("defaultEdgeLabelActiveColor")) : (i2.font = [a("fontStyle"), s + "px", a("font")].join(" "), i2.fillStyle = "edge" === a("edgeLabelColor") ? e3.color || a("defaultEdgeColor") : a("defaultEdgeLabelColor")), i2.textAlign = "center", i2.textBaseline = "alphabetic", i2.translate(c.x, c.y), i2.rotate(n), i2.fillText(e3.label, 0, -r / 2 - 3), i2.restore();
            }
          }
        };
      }).call(this);
    }).call(window);
  }, 175: function(e, o2) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.canvas.edges.labels"), sigma.canvas.edges.labels.curvedArrow = function(e3, o3, t, i2, a) {
          sigma.canvas.edges.labels.curve(e3, o3, t, i2, a);
        };
      }).call(this);
    }).call(window);
  } });

  // node_modules/react-sigma/es/EdgeShapes.js
  var import_prop_types6 = __toESM(require_prop_types());
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof3 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof3 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof3(obj);
  }
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf4(subClass, superClass);
  }
  function _setPrototypeOf4(o2, p) {
    _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf4(o2, p);
  }
  function _createSuper3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf3(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf3(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn3(this, result);
    };
  }
  function _possibleConstructorReturn3(self2, call) {
    if (call && (_typeof3(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized3(self2);
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf3(o2) {
    _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf3(o2);
  }
  function _defineProperty3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var EdgeShapes = /* @__PURE__ */ function(_React$Component) {
    _inherits3(EdgeShapes2, _React$Component);
    var _super = _createSuper3(EdgeShapes2);
    function EdgeShapes2(props) {
      var _this2;
      _classCallCheck3(this, EdgeShapes2);
      _this2 = _super.call(this, props);
      _defineProperty3(_assertThisInitialized3(_this2), "render", function() {
        return null;
      });
      if (_this2.props.sigma && _this2.props["default"])
        _this2.props.sigma.settings({
          defaultEdgeType: _this2.props["default"]
        });
      return _this2;
    }
    return EdgeShapes2;
  }(import_react35.default.Component);
  _defineProperty3(EdgeShapes, "propTypes", {
    "default": function _default() {
      return (typeof Sigma$Edge$Shapes === "function" ? import_prop_types6.default.instanceOf(Sigma$Edge$Shapes) : import_prop_types6.default.any).apply(this, arguments);
    },
    sigma: function sigma2() {
      return (typeof Sigma === "function" ? import_prop_types6.default.instanceOf(Sigma) : import_prop_types6.default.any).apply(this, arguments);
    }
  });

  // node_modules/react-sigma/es/NodeShapes.js
  var import_react36 = __toESM(require_react());

  // node_modules/react-sigma/sigma/nodes.js
  var Sigma6 = function(e) {
    var t = {};
    function n(i2) {
      if (t[i2])
        return t[i2].exports;
      var a = t[i2] = { i: i2, l: false, exports: {} };
      return e[i2].call(a.exports, a, a.exports, n), a.l = true, a.exports;
    }
    return n.m = e, n.c = t, n.d = function(e2, t2, i2) {
      n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: i2 });
    }, n.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, n.t = function(e2, t2) {
      if (1 & t2 && (e2 = n(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var i2 = /* @__PURE__ */ Object.create(null);
      if (n.r(i2), Object.defineProperty(i2, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var a in e2)
          n.d(i2, a, function(t3) {
            return e2[t3];
          }.bind(null, a));
      return i2;
    }, n.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return n.d(t2, "a", t2), t2;
    }, n.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, n.p = "", n(n.s = 176);
  }({ 176: function(e, t, n) {
    "use strict";
    n.r(t);
    n(177), n(178);
  }, 177: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        var t2 = [], n = function(e3, n2, i3) {
          t2.push({ name: e3, drawShape: n2, drawBorder: i3 });
        }, i2 = function(e3) {
          return function(t3, n2, i3, a3, r2, l2) {
            l2.fillStyle = r2, l2.beginPath(), e3(t3, n2, i3, a3, l2), l2.closePath(), l2.fill();
          };
        }, a = function(e3) {
          return function(t3, n2, i3, a3, r2, l2) {
            l2.strokeStyle = r2, l2.lineWidth = a3 / 5, l2.beginPath(), e3(t3, n2, i3, a3, l2), l2.closePath(), l2.stroke();
          };
        }, r = function(e3, t3, n2, i3, a3) {
          var r2 = 45 * Math.PI / 180;
          a3.moveTo(t3 + i3 * Math.sin(r2), n2 - i3 * Math.cos(r2));
          for (var l2 = 1; l2 < 4; l2++)
            a3.lineTo(t3 + Math.sin(r2 + 2 * Math.PI * l2 / 4) * i3, n2 - Math.cos(r2 + 2 * Math.PI * l2 / 4) * i3);
        };
        n("square", i2(r), a(r));
        var l = function(e3, t3, n2, i3, a3) {
          a3.arc(t3, n2, i3, 0, 2 * Math.PI, true);
        };
        n("circle", i2(l), a(l));
        var o2 = function(e3, t3, n2, i3, a3) {
          a3.moveTo(t3 - i3, n2), a3.lineTo(t3, n2 - i3), a3.lineTo(t3 + i3, n2), a3.lineTo(t3, n2 + i3);
        };
        n("diamond", i2(o2), a(o2));
        var s = function(e3, t3, n2, i3, a3) {
          var r2 = e3.cross && e3.cross.lineWeight || 5;
          a3.moveTo(t3 - i3, n2 - r2), a3.lineTo(t3 - i3, n2 + r2), a3.lineTo(t3 - r2, n2 + r2), a3.lineTo(t3 - r2, n2 + i3), a3.lineTo(t3 + r2, n2 + i3), a3.lineTo(t3 + r2, n2 + r2), a3.lineTo(t3 + i3, n2 + r2), a3.lineTo(t3 + i3, n2 - r2), a3.lineTo(t3 + r2, n2 - r2), a3.lineTo(t3 + r2, n2 - i3), a3.lineTo(t3 - r2, n2 - i3), a3.lineTo(t3 - r2, n2 - r2);
        };
        n("cross", i2(s), a(s));
        var u = function(e3, t3, n2, i3, a3) {
          var r2 = e3.equilateral && e3.equilateral.numPoints || 5, l2 = (e3.equilateral && e3.equilateral.rotate || 0) * Math.PI / 180, o3 = i3;
          a3.moveTo(t3 + o3 * Math.sin(l2), n2 - o3 * Math.cos(l2));
          for (var s2 = 1; s2 < r2; s2++)
            a3.lineTo(t3 + Math.sin(l2 + 2 * Math.PI * s2 / r2) * o3, n2 - Math.cos(l2 + 2 * Math.PI * s2 / r2) * o3);
        };
        n("equilateral", i2(u), a(u));
        var c = function(e3, t3, n2, i3, a3) {
          var r2 = e3.star && e3.star.numPoints || 5, l2 = i3, o3 = i3 * (e3.star && e3.star.innerRatio || 0.5), s2 = Math.PI / r2;
          a3.moveTo(t3, n2 - i3);
          for (var u2 = 0; u2 < r2; u2++)
            a3.lineTo(t3 + Math.sin(s2 + 2 * Math.PI * u2 / r2) * o3, n2 - Math.cos(s2 + 2 * Math.PI * u2 / r2) * o3), a3.lineTo(t3 + Math.sin(2 * Math.PI * (u2 + 1) / r2) * l2, n2 - Math.cos(2 * Math.PI * (u2 + 1) / r2) * l2);
        };
        n("star", i2(c), a(c));
        n("pacman", function(e3, t3, n2, i3, a3, r2) {
          r2.fillStyle = "yellow", r2.beginPath(), r2.arc(t3, n2, i3, 1.25 * Math.PI, 0, false), r2.arc(t3, n2, i3, 0, 0.75 * Math.PI, false), r2.lineTo(t3, n2), r2.closePath(), r2.fill(), r2.fillStyle = "white", r2.strokeStyle = "black", r2.beginPath(), r2.arc(t3 + i3 / 3, n2 - i3 / 3, i3 / 4, 0, 2 * Math.PI, false), r2.closePath(), r2.fill(), r2.stroke(), r2.fillStyle = "black", r2.beginPath(), r2.arc(t3 + 4 * i3 / 9, n2 - i3 / 3, i3 / 8, 0, 2 * Math.PI, false), r2.closePath(), r2.fill();
        }, null), this.ShapeLibrary = { enumerate: function() {
          return t2;
        }, version: "0.1" };
      }).call(window);
    }).call(window);
  }, 178: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        if ("undefined" == typeof ShapeLibrary)
          throw "ShapeLibrary is not declared";
        sigma.utils.pkg("sigma.canvas.nodes"), sigma.utils.pkg("sigma.svg.nodes");
        var t2 = e2, n = {}, i2 = function(e3, i3, a3, r, l) {
          if (t2 && e3.image && e3.image.url) {
            var o2 = e3.image.url, s = e3.image.h || 1, u = e3.image.w || 1, c = e3.image.scale || 1, d = e3.image.clip || 1, f = n[o2];
            f || ((f = document.createElement("IMG")).src = o2, f.status = "loading", f.onerror = function() {
              console.log("error loading", o2), f.status = "error";
            }, f.onload = function() {
              console.log("redraw on image load", o2), f.status = "ok", t2.refresh();
            }, n[o2] = f);
            var h = u < s ? u / s : 1, m = s < u ? s / u : 1, g = r * c;
            l.save(), l.beginPath(), l.arc(i3, a3, r * d, 0, 2 * Math.PI, true), l.closePath(), l.clip(), "ok" === f.status && l.drawImage(f, i3 + Math.sin(-0.7855) * g * h, a3 - Math.cos(-0.7855) * g * m, g * h * 2 * Math.sin(-0.7855) * -1, g * m * 2 * Math.cos(-0.7855)), l.restore();
          }
        }, a = function(e3, n2, a3) {
          sigma.canvas.nodes[e3] = function(e4, t3, r) {
            var l = r("prefix") || "", o2 = e4[l + "size"], s = e4.color || r("defaultNodeColor"), u = e4.borderColor || s, c = e4[l + "x"], d = e4[l + "y"];
            t3.save(), n2 && n2(e4, c, d, o2, s, t3), a3 && a3(e4, c, d, o2, u, t3), i2(e4, c, d, o2, t3), t3.restore();
          }, sigma.svg.nodes[e3] = { create: function(e4, n3) {
            var i3 = document.createElementNS(n3("xmlns"), "g"), a4 = document.createElementNS(n3("xmlns"), "circle");
            return i3.setAttributeNS(null, "class", n3("classPrefix") + "-node-group"), i3.setAttributeNS(null, "data-node-id", e4.id), a4.setAttributeNS(null, "data-node-id", e4.id), a4.setAttributeNS(null, "class", n3("classPrefix") + "-node"), a4.setAttributeNS(null, "fill", e4.color || n3("defaultNodeColor")), i3.appendChild(a4), function(e5, n4, i4) {
              if (t2 && e5.image && e5.image.url) {
                var a5 = document.createElementNS(i4("xmlns"), "circle"), r = document.createElementNS(i4("xmlns"), "clipPath"), l = i4("classPrefix") + "-clip-path-" + e5.id, o2 = document.createElementNS(i4("xmlns"), "defs"), s = document.createElementNS(i4("xmlns"), "image");
                e5.image.url;
                r.setAttributeNS(null, "id", l), r.appendChild(a5), o2.appendChild(r);
                var u = /MSIE [5-9]/.test(navigator.userAgent) ? "" : document.location.href;
                u = u.split("#")[0], s.setAttributeNS(null, "class", i4("classPrefix") + "-node-image"), s.setAttributeNS(null, "clip-path", "url(" + u + "#" + l + ")"), s.setAttributeNS(null, "pointer-events", "none"), s.setAttributeNS("http://www.w3.org/1999/xlink", "href", e5.image.url), n4.appendChild(o2), n4.appendChild(s);
              }
            }(e4, i3, n3), i3;
          }, update: function(e4, t3, n3) {
            for (var i3 = n3("classPrefix"), a4 = e4.image.clip || 1, r = e4.image.h || 1, l = e4.image.w || 1, o2 = n3("prefix") || "", s = e4.image.scale || 1, u = e4[o2 + "size"], c = e4[o2 + "x"], d = e4[o2 + "y"], f = s * u, h = l < r ? l / r : 1, m = r < l ? r / l : 1, g = 0, p = t3.childNodes; g < p.length; g++) {
              switch (p[g].getAttribute("class")) {
                case i3 + "-node":
                  p[g].setAttributeNS(null, "cx", c), p[g].setAttributeNS(null, "cy", d), p[g].setAttributeNS(null, "r", u), n3("freeStyle") || p[g].setAttributeNS(null, "fill", e4.color || n3("defaultNodeColor"));
                  break;
                case i3 + "-node-image":
                  p[g].setAttributeNS(null, "x", c + Math.sin(-0.7855) * f * h), p[g].setAttributeNS(null, "y", d - Math.cos(-0.7855) * f * m), p[g].setAttributeNS(null, "width", f * h * 2 * Math.sin(-0.7855) * -1), p[g].setAttributeNS(null, "height", f * m * 2 * Math.cos(-0.7855));
                  break;
                default:
                  var b = p[g].firstChild;
                  if (null != b) {
                    var S = i3 + "-clip-path-" + e4.id;
                    b.getAttribute("id") === S && (b.firstChild.setAttributeNS(null, "cx", c), b.firstChild.setAttributeNS(null, "cy", d), b.firstChild.setAttributeNS(null, "r", a4 * u));
                  }
              }
            }
            t3.style.display = "";
          } };
        };
        ShapeLibrary.enumerate().forEach(function(e3) {
          a(e3.name, e3.drawShape, e3.drawBorder);
        }), this.CustomShapes = { init: function(e3) {
          t2 = e3;
        }, version: "0.1" };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/es/NodeShapes.js
  var import_prop_types7 = __toESM(require_prop_types());
  function _typeof4(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof4 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof4 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof4(obj);
  }
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf5(subClass, superClass);
  }
  function _setPrototypeOf5(o2, p) {
    _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf5(o2, p);
  }
  function _createSuper4(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct4();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf4(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf4(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn4(this, result);
    };
  }
  function _possibleConstructorReturn4(self2, call) {
    if (call && (_typeof4(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized4(self2);
  }
  function _assertThisInitialized4(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct4() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf4(o2) {
    _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf4(o2);
  }
  function _defineProperty4(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var NodeShapes = /* @__PURE__ */ function(_React$Component) {
    _inherits4(NodeShapes2, _React$Component);
    var _super = _createSuper4(NodeShapes2);
    function NodeShapes2(props) {
      var _this2;
      _classCallCheck4(this, NodeShapes2);
      _this2 = _super.call(this, props);
      _defineProperty4(_assertThisInitialized4(_this2), "render", function() {
        return null;
      });
      if (_this2.props.sigma && _this2.props["default"])
        _this2.props.sigma.settings({
          defaultNodeType: _this2.props["default"]
        });
      return _this2;
    }
    return NodeShapes2;
  }(import_react36.default.Component);
  _defineProperty4(NodeShapes, "propTypes", {
    "default": function _default2() {
      return (typeof Sigma$Node$Shapes === "function" ? import_prop_types7.default.instanceOf(Sigma$Node$Shapes) : import_prop_types7.default.any).apply(this, arguments);
    },
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types7.default.instanceOf(sigma) : import_prop_types7.default.any).apply(this, arguments);
    })
  });

  // node_modules/react-sigma/es/LoadJSON.js
  var import_react37 = __toESM(require_react());

  // node_modules/react-sigma/sigma/parsers.json.js
  var Sigma7 = function(e) {
    var t = {};
    function n(r) {
      if (t[r])
        return t[r].exports;
      var o2 = t[r] = { i: r, l: false, exports: {} };
      return e[r].call(o2.exports, o2, o2.exports, n), o2.l = true, o2.exports;
    }
    return n.m = e, n.c = t, n.d = function(e2, t2, r) {
      n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: r });
    }, n.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, n.t = function(e2, t2) {
      if (1 & t2 && (e2 = n(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var r = /* @__PURE__ */ Object.create(null);
      if (n.r(r), Object.defineProperty(r, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var o2 in e2)
          n.d(r, o2, function(t3) {
            return e2[t3];
          }.bind(null, o2));
      return r;
    }, n.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return n.d(t2, "a", t2), t2;
    }, n.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, n.p = "", n(n.s = 180);
  }({ 180: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.parsers"), sigma.utils.pkg("sigma.utils"), sigma.utils.xhr = function() {
          if (window.XMLHttpRequest)
            return new XMLHttpRequest();
          var e3, t2;
          if (window.ActiveXObject)
            for (t2 in e3 = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"])
              try {
                return new ActiveXObject(e3[t2]);
              } catch (e4) {
              }
          return null;
        }, sigma.parsers.json = function(e3, t2, n) {
          var r, o2 = sigma.utils.xhr();
          if (!o2)
            throw "XMLHttpRequest not supported, cannot load the file.";
          o2.open("GET", e3, true), o2.onreadystatechange = function() {
            4 === o2.readyState && (r = JSON.parse(o2.responseText), t2 instanceof sigma ? (t2.graph.clear(), t2.graph.read(r)) : "object" == typeof t2 ? (t2.graph = r, t2 = new sigma(t2)) : "function" == typeof t2 && (n = t2, t2 = null), n && n(t2 || r));
          }, o2.send();
        };
      }).call(this);
    }).call(window);
  } });

  // node_modules/react-sigma/es/LoadJSON.js
  var import_prop_types8 = __toESM(require_prop_types());
  function _typeof5(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof5 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof5 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof5(obj);
  }
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties3(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass3(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties3(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties3(Constructor, staticProps);
    return Constructor;
  }
  function _inherits5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf6(subClass, superClass);
  }
  function _setPrototypeOf6(o2, p) {
    _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf6(o2, p);
  }
  function _createSuper5(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct5();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf5(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf5(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn5(this, result);
    };
  }
  function _possibleConstructorReturn5(self2, call) {
    if (call && (_typeof5(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized5(self2);
  }
  function _assertThisInitialized5(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct5() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf5(o2) {
    _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf5(o2);
  }
  function _defineProperty5(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var LoadJSON = /* @__PURE__ */ function(_React$Component) {
    _inherits5(LoadJSON2, _React$Component);
    var _super = _createSuper5(LoadJSON2);
    function LoadJSON2(props) {
      var _this2;
      _classCallCheck5(this, LoadJSON2);
      _this2 = _super.call(this, props);
      _defineProperty5(_assertThisInitialized5(_this2), "onLoad", function() {
        if (_this2.props.sigma)
          _this2.props.sigma.refresh();
        _this2.setState({
          loaded: true
        });
        if (_this2.props.onGraphLoaded)
          return _this2.props.onGraphLoaded();
      });
      _this2.state = {
        loaded: false
      };
      return _this2;
    }
    _createClass3(LoadJSON2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._load(this.props.path);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(props) {
        if (this.props.path !== props.path) {
          this.setState({
            loaded: false
          });
          this._load(props.path);
        }
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.loaded)
          return null;
        return /* @__PURE__ */ import_react37.default.createElement("div", null, embedProps(this.props.children, {
          sigma: this.props.sigma
        }));
      }
    }, {
      key: "_load",
      value: function _load(url) {
        sigma.parsers.json(this.props.path, this.props.sigma, this.onLoad);
      }
    }]);
    return LoadJSON2;
  }(import_react37.default.Component);
  _defineProperty5(LoadJSON, "propTypes", {
    path: import_prop_types8.default.string.isRequired,
    onGraphLoaded: import_prop_types8.default.func,
    children: import_prop_types8.default.any,
    sigma: function sigma3() {
      return (typeof Sigma === "function" ? import_prop_types8.default.instanceOf(Sigma) : import_prop_types8.default.any).apply(this, arguments);
    }
  });

  // node_modules/react-sigma/es/LoadGEXF.js
  var import_react38 = __toESM(require_react());

  // node_modules/react-sigma/sigma/parsers.gexf.js
  var Sigma8 = function(e) {
    var t = {};
    function r(n) {
      if (t[n])
        return t[n].exports;
      var i2 = t[n] = { i: n, l: false, exports: {} };
      return e[n].call(i2.exports, i2, i2.exports, r), i2.l = true, i2.exports;
    }
    return r.m = e, r.c = t, r.d = function(e2, t2, n) {
      r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
    }, r.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, r.t = function(e2, t2) {
      if (1 & t2 && (e2 = r(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var n = /* @__PURE__ */ Object.create(null);
      if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var i2 in e2)
          r.d(n, i2, function(t3) {
            return e2[t3];
          }.bind(null, i2));
      return n;
    }, r.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return r.d(t2, "a", t2), t2;
    }, r.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, r.p = "", r(r.s = 181);
  }({ 181: function(e, t, r) {
    r(182), e.exports = r(183);
  }, 182: function(e, t, r) {
    (function() {
      (function(r2) {
        "use strict";
        var n = { getModelTags: function(e2) {
          var t2, r3 = e2.getElementsByTagName("attributes"), n2 = {}, i3 = r3.length;
          for (t2 = 0; t2 < i3; t2++)
            n2[r3[t2].getAttribute("class")] = r3[t2].childNodes;
          return n2;
        }, nodeListToArray: function(e2) {
          for (var t2 = [], r3 = 0, n2 = e2.length; r3 < n2; ++r3)
            "#text" !== e2[r3].nodeName && t2.push(e2[r3]);
          return t2;
        }, nodeListEach: function(e2, t2) {
          for (var r3 = 0, n2 = e2.length; r3 < n2; ++r3)
            "#text" !== e2[r3].nodeName && t2(e2[r3]);
        }, nodeListToHash: function(e2, t2) {
          for (var r3 = {}, n2 = 0; n2 < e2.length; n2++)
            if ("#text" !== e2[n2].nodeName) {
              var i3 = t2(e2[n2]);
              r3[i3.key] = i3.value;
            }
          return r3;
        }, namedNodeMapToObject: function(e2) {
          for (var t2 = {}, r3 = 0; r3 < e2.length; r3++)
            t2[e2[r3].name] = e2[r3].value;
          return t2;
        }, getFirstElementByTagNS: function(e2, t2, r3) {
          var n2 = e2.getElementsByTagName(t2 + ":" + r3)[0];
          return n2 || (n2 = e2.getElementsByTagNameNS(t2, r3)[0]), n2 || (n2 = e2.getElementsByTagName(r3)[0]), n2;
        }, getAttributeNS: function(e2, t2, n2) {
          var i3 = e2.getAttribute(t2 + ":" + n2);
          return i3 === r2 && (i3 = e2.getAttributeNS(t2, n2)), i3 === r2 && (i3 = e2.getAttribute(n2)), i3;
        }, enforceType: function(e2, t2) {
          switch (e2) {
            case "boolean":
              t2 = "true" === t2;
              break;
            case "integer":
            case "long":
            case "float":
            case "double":
              t2 = +t2;
              break;
            case "liststring":
              t2 = t2 ? t2.split("|") : [];
          }
          return t2;
        }, getRGB: function(e2) {
          return e2[3] ? "rgba(" + e2.join(",") + ")" : "rgb(" + e2.slice(0, -1).join(",") + ")";
        } };
        function i2(e2) {
          var t2 = {};
          t2.els = { root: e2.getElementsByTagName("gexf")[0], graph: e2.getElementsByTagName("graph")[0], meta: e2.getElementsByTagName("meta")[0], nodes: e2.getElementsByTagName("node"), edges: e2.getElementsByTagName("edge"), model: n.getModelTags(e2) }, t2.hasViz = !!n.getAttributeNS(t2.els.root, "xmlns", "viz"), t2.version = t2.els.root.getAttribute("version") || "1.0", t2.mode = t2.els.graph.getAttribute("mode") || "static";
          var r3 = t2.els.graph.getAttribute("defaultedgetype");
          function i3(e3) {
            var r4 = [];
            return t2.els.model[e3] && n.nodeListEach(t2.els.model[e3], function(e4) {
              var t3 = { id: e4.getAttribute("id") || e4.getAttribute("for"), type: e4.getAttribute("type") || "string", title: e4.getAttribute("title") || "" }, i4 = n.nodeListToArray(e4.childNodes);
              i4.length > 0 && (t3.defaultValue = i4[0].textContent), r4.push(t3);
            }), r4.length > 0 && r4;
          }
          function o3(e3, t3) {
            var r4 = {}, i4 = t3.getElementsByTagName("attvalue"), o4 = n.nodeListToHash(i4, function(e4) {
              var t4 = n.namedNodeMapToObject(e4.attributes);
              return { key: t4.id || t4.for, value: t4.value };
            });
            return e3.map(function(e4) {
              r4[e4.id] = !(e4.id in o4) && "defaultValue" in e4 ? n.enforceType(e4.type, e4.defaultValue) : n.enforceType(e4.type, o4[e4.id]);
            }), r4;
          }
          t2.defaultEdgetype = r3 || "undirected";
          var a, s, u, l = i3("node"), g = i3("edge"), d = { version: t2.version, mode: t2.mode, defaultEdgeType: t2.defaultEdgetype, meta: (u = {}, t2.els.meta ? (u.lastmodifieddate = t2.els.meta.getAttribute("lastmodifieddate"), n.nodeListEach(t2.els.meta.childNodes, function(e3) {
            u[e3.tagName.toLowerCase()] = e3.textContent;
          }), u) : u), model: {}, nodes: (a = l, s = [], n.nodeListEach(t2.els.nodes, function(e3) {
            var r4 = { id: e3.getAttribute("id"), label: e3.getAttribute("label") || "" };
            a && (r4.attributes = o3(a, e3)), t2.hasViz && (r4.viz = function(e4) {
              var t3 = {}, r5 = n.getFirstElementByTagNS(e4, "viz", "color");
              if (r5) {
                var i4 = ["r", "g", "b", "a"].map(function(e5) {
                  return r5.getAttribute(e5);
                });
                t3.color = n.getRGB(i4);
              }
              var o4 = n.getFirstElementByTagNS(e4, "viz", "position");
              o4 && (t3.position = {}, ["x", "y", "z"].map(function(e5) {
                t3.position[e5] = +o4.getAttribute(e5);
              }));
              var a3 = n.getFirstElementByTagNS(e4, "viz", "size");
              a3 && (t3.size = +a3.getAttribute("value"));
              var s2 = n.getFirstElementByTagNS(e4, "viz", "shape");
              return s2 && (t3.shape = s2.getAttribute("value")), t3;
            }(e3)), s.push(function(e4) {
              var t3 = { id: e4.id, label: e4.label };
              return e4.viz && (t3.viz = e4.viz), e4.attributes && (t3.attributes = e4.attributes), t3;
            }(r4));
          }), s), edges: function(e3, r4) {
            var i4 = [];
            return n.nodeListEach(t2.els.edges, function(a3) {
              var s2 = n.namedNodeMapToObject(a3.attributes);
              "type" in s2 || (s2.type = r4), e3 && (s2.attributes = o3(e3, a3)), t2.hasViz && (s2.viz = function(e4) {
                var t3 = {}, r5 = n.getFirstElementByTagNS(e4, "viz", "color");
                if (r5) {
                  var i5 = ["r", "g", "b", "a"].map(function(e5) {
                    return r5.getAttribute(e5);
                  });
                  t3.color = n.getRGB(i5);
                }
                var o4 = n.getFirstElementByTagNS(e4, "viz", "shape");
                o4 && (t3.shape = o4.getAttribute("value"));
                var a4 = n.getFirstElementByTagNS(e4, "viz", "thickness");
                a4 && (t3.thickness = +a4.getAttribute("value"));
                return t3;
              }(a3)), i4.push(function(e4) {
                var t3 = { id: e4.id, type: e4.type || "undirected", label: e4.label || "", source: e4.source, target: e4.target, weight: +e4.weight || 1 };
                return e4.viz && (t3.viz = e4.viz), e4.attributes && (t3.attributes = e4.attributes), t3;
              }(s2));
            }), i4;
          }(g, t2.defaultEdgetype) };
          return l && (d.model.node = l), g && (d.model.edge = g), d;
        }
        function o2(e2, t2) {
          var r3 = function() {
            if (window.XMLHttpRequest)
              return new XMLHttpRequest();
            var e3, t3;
            if (window.ActiveXObject)
              for (t3 in e3 = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"])
                try {
                  return new ActiveXObject(e3[t3]);
                } catch (e4) {
                }
            return null;
          }();
          if (!r3)
            throw "XMLHttpRequest not supported, cannot load the file.";
          var n2, i3 = "function" == typeof t2;
          return r3.overrideMimeType ? (r3.overrideMimeType("text/xml"), n2 = function(e3) {
            return e3.responseXML;
          }) : n2 = function(e3) {
            return new DOMParser().parseFromString(e3.responseText, "application/xml");
          }, r3.open("GET", e2, i3), i3 && (r3.onreadystatechange = function() {
            4 === r3.readyState && t2(n2(r3));
          }), r3.send(), i3 ? r3 : n2(r3);
        }
        if (void 0 !== this.gexf)
          throw 'gexf: error - a variable called "gexf" already exists in the global scope';
        this.gexf = { parse: function(e2) {
          return i2(e2);
        }, fetch: function(e2, t2) {
          return "function" == typeof t2 ? o2(e2, function(e3) {
            t2(i2(e3));
          }) : i2(o2(e2));
        }, version: "0.1.1" }, this.exports !== t && (e.exports = this.gexf);
      }).call(window);
    }).call(window);
  }, 183: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.parsers");
        var t2 = 0;
        sigma.parsers.gexf = function(e3, r, n) {
          var i2, o2, a, s;
          function u(e4) {
            for (a = e4.nodes, i2 = 0, o2 = a.length; i2 < o2; i2++)
              (s = a[i2]).id = s.id, s.viz && "object" == typeof s.viz && (s.viz.position && "object" == typeof s.viz.position && (s.x = s.viz.position.x, s.y = -s.viz.position.y), s.size = s.viz.size, s.color = s.viz.color, s.viz.shape && (s.type = s.viz.shape));
            for (a = e4.edges, i2 = 0, o2 = a.length; i2 < o2; i2++)
              (s = a[i2]).id = "string" == typeof s.id ? s.id : "e" + t2++, s.source = "" + s.source, s.target = "" + s.target, s.viz && "object" == typeof s.viz && (s.color = s.viz.color, s.size = s.viz.thickness), s.size = s.weight, s.direction = s.type, delete s.type;
            if (r instanceof sigma) {
              for (r.graph.clear(), a = e4.nodes, i2 = 0, o2 = a.length; i2 < o2; i2++)
                r.graph.addNode(a[i2]);
              for (a = e4.edges, i2 = 0, o2 = a.length; i2 < o2; i2++)
                r.graph.addEdge(a[i2]);
            } else
              "object" == typeof r ? (r.graph = e4, r = new sigma(r)) : "function" == typeof r && (n = r, r = null);
            return n ? void n(r || e4) : e4;
          }
          if ("string" == typeof e3)
            gexf.fetch(e3, u);
          else if ("object" == typeof e3)
            return u(gexf.parse(e3));
        };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/es/LoadGEXF.js
  var import_prop_types9 = __toESM(require_prop_types());
  function _typeof6(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof6 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof6 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof6(obj);
  }
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties4(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass4(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties4(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties4(Constructor, staticProps);
    return Constructor;
  }
  function _inherits6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf7(subClass, superClass);
  }
  function _setPrototypeOf7(o2, p) {
    _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf7(o2, p);
  }
  function _createSuper6(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct6();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf6(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf6(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn6(this, result);
    };
  }
  function _possibleConstructorReturn6(self2, call) {
    if (call && (_typeof6(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized6(self2);
  }
  function _assertThisInitialized6(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct6() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf6(o2) {
    _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf6(o2);
  }
  function _defineProperty6(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var LoadGEXF = /* @__PURE__ */ function(_React$Component) {
    _inherits6(LoadGEXF2, _React$Component);
    var _super = _createSuper6(LoadGEXF2);
    function LoadGEXF2(props) {
      var _this2;
      _classCallCheck6(this, LoadGEXF2);
      _this2 = _super.call(this, props);
      _defineProperty6(_assertThisInitialized6(_this2), "onLoad", function() {
        if (_this2.props.sigma)
          _this2.props.sigma.refresh();
        _this2.setState({
          loaded: true
        });
        if (_this2.props.onGraphLoaded)
          return _this2.props.onGraphLoaded();
      });
      _this2.state = {
        loaded: false
      };
      return _this2;
    }
    _createClass4(LoadGEXF2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._load(this.props.path);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(props) {
        if (this.props.path !== props.path) {
          this.setState({
            loaded: false
          });
          this._load(props.path);
        }
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.loaded)
          return null;
        return /* @__PURE__ */ import_react38.default.createElement("div", null, embedProps(this.props.children, {
          sigma: this.props.sigma
        }));
      }
    }, {
      key: "_load",
      value: function _load(url) {
        sigma.parsers.gexf(this.props.path, this.props.sigma, this.onLoad);
      }
    }]);
    return LoadGEXF2;
  }(import_react38.default.Component);
  _defineProperty6(LoadGEXF, "propTypes", {
    path: import_prop_types9.default.string.isRequired,
    onGraphLoaded: import_prop_types9.default.func,
    children: import_prop_types9.default.any,
    sigma: function sigma4() {
      return (typeof Sigma === "function" ? import_prop_types9.default.instanceOf(Sigma) : import_prop_types9.default.any).apply(this, arguments);
    }
  });

  // node_modules/react-sigma/es/Filter.js
  var import_react39 = __toESM(require_react());
  var import_plugins = __toESM(require_plugins_filter());
  var import_prop_types10 = __toESM(require_prop_types());
  function _typeof7(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof7 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof7 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof7(obj);
  }
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties5(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass5(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties5(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties5(Constructor, staticProps);
    return Constructor;
  }
  function _inherits7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf8(subClass, superClass);
  }
  function _setPrototypeOf8(o2, p) {
    _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf8(o2, p);
  }
  function _createSuper7(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct7();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf7(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf7(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn7(this, result);
    };
  }
  function _possibleConstructorReturn7(self2, call) {
    if (call && (_typeof7(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized7(self2);
  }
  function _assertThisInitialized7(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct7() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf7(o2) {
    _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf7(o2);
  }
  function _defineProperty7(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var Filter2 = /* @__PURE__ */ function(_React$Component) {
    _inherits7(Filter3, _React$Component);
    var _super = _createSuper7(Filter3);
    function Filter3() {
      var _this2;
      _classCallCheck7(this, Filter3);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this2 = _super.call.apply(_super, [this].concat(args));
      _defineProperty7(_assertThisInitialized7(_this2), "render", function() {
        return null;
      });
      return _this2;
    }
    _createClass5(Filter3, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.filter = new sigma.plugins.filter(this.props.sigma);
        this._apply(this.props);
      }
      // TODO: will it work in composition with ForceAtlas for instance?
      //It should hide nodes before rendering of subplugins, therefore used in componentWillUpdate.. is it right?
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate2(props) {
        if (props.nodesBy !== this.props.nodesBy || props.neighborsOf !== this.props.neighborsOf)
          this._apply(props);
      }
      // TODO: Composition is not working yet!!
    }, {
      key: "_apply",
      value: function _apply(props) {
        this.filter.undo(["neighborsOf", "nodesBy"]);
        if (props.neighborsOf) {
          this.filter.neighborsOf(props.neighborsOf, "neighborsOf");
        }
        if (props.nodesBy)
          this.filter.nodesBy(props.nodesBy, "nodesBy");
        this.filter.apply();
        if (this.props.sigma)
          this.props.sigma.refresh();
      }
    }]);
    return Filter3;
  }(import_react39.default.Component);
  _defineProperty7(Filter2, "propTypes", {
    nodesBy: function nodesBy() {
      return (typeof Nodes$Filter === "function" ? import_prop_types10.default.instanceOf(Nodes$Filter) : import_prop_types10.default.any).apply(this, arguments);
    },
    neighborsOf: import_prop_types10.default.string,
    sigma: function sigma5() {
      return (typeof Sigma === "function" ? import_prop_types10.default.instanceOf(Sigma) : import_prop_types10.default.any).apply(this, arguments);
    }
  });

  // node_modules/react-sigma/es/ForceAtlas2.js
  var import_react40 = __toESM(require_react());
  var import_layout = __toESM(require_layout_forceAtlas2());
  var import_prop_types11 = __toESM(require_prop_types());
  function _typeof8(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof8 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof8 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof8(obj);
  }
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties6(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass6(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties6(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties6(Constructor, staticProps);
    return Constructor;
  }
  function _inherits8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf9(subClass, superClass);
  }
  function _setPrototypeOf9(o2, p) {
    _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf9(o2, p);
  }
  function _createSuper8(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct8();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf8(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf8(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn8(this, result);
    };
  }
  function _possibleConstructorReturn8(self2, call) {
    if (call && (_typeof8(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized8(self2);
  }
  function _assertThisInitialized8(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct8() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf8(o2) {
    _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf8(o2);
  }
  function _defineProperty8(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var ForceAtlas2 = /* @__PURE__ */ function(_React$Component) {
    _inherits8(ForceAtlas22, _React$Component);
    var _super = _createSuper8(ForceAtlas22);
    function ForceAtlas22(props) {
      var _this2;
      _classCallCheck8(this, ForceAtlas22);
      _this2 = _super.call(this, props);
      _this2.state = {
        running: false
      };
      return _this2;
    }
    _createClass6(ForceAtlas22, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._refreshGraph();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        var s = this.props.sigma;
        if (prevState.running && !this.state.running && s) {
          s.stopForceAtlas2();
          s.settings({
            drawEdges: prevState.drawEdges === false ? false : true
          });
          s.refresh();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.props.sigma)
          this.props.sigma.killForceAtlas2();
        if (this.state.timer)
          clearTimeout(this.state.timer);
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.running) {
          return /* @__PURE__ */ import_react40.default.createElement("div", null, embedProps(this.props.children, {
            sigma: this.props.sigma
          }));
        }
        return null;
      }
    }, {
      key: "_refreshGraph",
      value: function _refreshGraph() {
        var _this2 = this;
        var s = this.props.sigma;
        if (!sigma || !s)
          return;
        var drawEdges = s.settings("drawEdges");
        if (s.graph.edges().length > 1e3)
          s.settings({
            drawEdges: false
          });
        s.startForceAtlas2(this._stripOptions(this.props));
        var timer = setTimeout(function() {
          _this2.setState({
            running: false,
            timer: void 0
          });
        }, this.props.timeout || s.graph.nodes().length * 8);
        this.setState({
          running: true,
          timer,
          drawEdges
        });
      }
      //strip force atlas options from component props
    }, {
      key: "_stripOptions",
      value: function _stripOptions(props) {
        return Object.assign({}, props, {
          sigma: void 0,
          children: void 0
        });
      }
    }]);
    return ForceAtlas22;
  }(import_react40.default.Component);
  _defineProperty8(ForceAtlas2, "defaultProps", {
    worker: true,
    linLogMode: true
  });
  _defineProperty8(ForceAtlas2, "propTypes", {
    worker: import_prop_types11.default.bool,
    barnesHutOptimize: import_prop_types11.default.bool,
    barnesHutTheta: import_prop_types11.default.number,
    adjustSizes: import_prop_types11.default.bool,
    iterationsPerRender: import_prop_types11.default.number,
    linLogMode: import_prop_types11.default.bool,
    outboundAttractionDistribution: import_prop_types11.default.bool,
    edgeWeightInfluence: import_prop_types11.default.number,
    scalingRatio: import_prop_types11.default.number,
    strongGravityMode: import_prop_types11.default.bool,
    slowDown: import_prop_types11.default.number,
    gravity: import_prop_types11.default.number,
    timeout: import_prop_types11.default.number,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types11.default.instanceOf(sigma) : import_prop_types11.default.any).apply(this, arguments);
    }),
    children: import_prop_types11.default.any
  });

  // node_modules/react-sigma/es/RelativeSize.js
  var import_react41 = __toESM(require_react());

  // node_modules/react-sigma/sigma/plugins.relativeSize.js
  var Sigma9 = function(e) {
    var t = {};
    function r(n) {
      if (t[n])
        return t[n].exports;
      var o2 = t[n] = { i: n, l: false, exports: {} };
      return e[n].call(o2.exports, o2, o2.exports, r), o2.l = true, o2.exports;
    }
    return r.m = e, r.c = t, r.d = function(e2, t2, n) {
      r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
    }, r.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, r.t = function(e2, t2) {
      if (1 & t2 && (e2 = r(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var n = /* @__PURE__ */ Object.create(null);
      if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var o2 in e2)
          r.d(n, o2, function(t3) {
            return e2[t3];
          }.bind(null, o2));
      return n;
    }, r.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return r.d(t2, "a", t2), t2;
    }, r.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, r.p = "", r(r.s = 373);
  }({ 373: function(e, t) {
    (function() {
      (function() {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.plugins");
        sigma.plugins.relativeSize = function(e2, t2) {
          for (var r = e2.graph.nodes(), n = 0; n < r.length; n++) {
            var o2 = e2.graph.degree(r[n].id);
            r[n].size = t2 * Math.sqrt(o2);
          }
          e2.refresh();
        };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/es/RelativeSize.js
  var import_prop_types12 = __toESM(require_prop_types());
  function _typeof9(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof9 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof9 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof9(obj);
  }
  function _classCallCheck9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _inherits9(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf10(subClass, superClass);
  }
  function _setPrototypeOf10(o2, p) {
    _setPrototypeOf10 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf10(o2, p);
  }
  function _createSuper9(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct9();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf9(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf9(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn9(this, result);
    };
  }
  function _possibleConstructorReturn9(self2, call) {
    if (call && (_typeof9(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized9(self2);
  }
  function _assertThisInitialized9(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct9() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf9(o2) {
    _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf9(o2);
  }
  function _defineProperty9(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var RelativeSize = /* @__PURE__ */ function(_React$Component) {
    _inherits9(RelativeSize2, _React$Component);
    var _super = _createSuper9(RelativeSize2);
    function RelativeSize2(props) {
      var _this2;
      _classCallCheck9(this, RelativeSize2);
      _this2 = _super.call(this, props);
      _defineProperty9(_assertThisInitialized9(_this2), "render", function() {
        return null;
      });
      sigma.plugins.relativeSize(_this2.props.sigma, _this2.props.initialSize);
      return _this2;
    }
    return RelativeSize2;
  }(import_react41.default.Component);
  _defineProperty9(RelativeSize, "propTypes", {
    initialSize: import_prop_types12.default.number.isRequired,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types12.default.instanceOf(sigma) : import_prop_types12.default.any).apply(this, arguments);
    })
  });
  var RelativeSize_default = RelativeSize;

  // node_modules/react-sigma/es/NOverlap.js
  var import_react43 = __toESM(require_react());

  // node_modules/react-sigma/sigma/plugins.animate.js
  var Sigma10 = function(e) {
    var n = {};
    function t(r) {
      if (n[r])
        return n[r].exports;
      var a = n[r] = { i: r, l: false, exports: {} };
      return e[r].call(a.exports, a, a.exports, t), a.l = true, a.exports;
    }
    return t.m = e, t.c = n, t.d = function(e2, n2, r) {
      t.o(e2, n2) || Object.defineProperty(e2, n2, { enumerable: true, get: r });
    }, t.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, t.t = function(e2, n2) {
      if (1 & n2 && (e2 = t(e2)), 8 & n2)
        return e2;
      if (4 & n2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var r = /* @__PURE__ */ Object.create(null);
      if (t.r(r), Object.defineProperty(r, "default", { enumerable: true, value: e2 }), 2 & n2 && "string" != typeof e2)
        for (var a in e2)
          t.d(r, a, function(n3) {
            return e2[n3];
          }.bind(null, a));
      return r;
    }, t.n = function(e2) {
      var n2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return t.d(n2, "a", n2), n2;
    }, t.o = function(e2, n2) {
      return Object.prototype.hasOwnProperty.call(e2, n2);
    }, t.p = "", t(t.s = 370);
  }({ 370: function(e, n) {
    (function() {
      (function() {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.plugins");
        var e2 = 0, n2 = {};
        function t(e3) {
          if (n2[e3])
            return n2[e3];
          var t2 = [0, 0, 0];
          return e3.match(/^#/) ? t2 = 3 === (e3 = (e3 || "").replace(/^#/, "")).length ? [parseInt(e3.charAt(0) + e3.charAt(0), 16), parseInt(e3.charAt(1) + e3.charAt(1), 16), parseInt(e3.charAt(2) + e3.charAt(2), 16)] : [parseInt(e3.charAt(0) + e3.charAt(1), 16), parseInt(e3.charAt(2) + e3.charAt(3), 16), parseInt(e3.charAt(4) + e3.charAt(5), 16)] : e3.match(/^ *rgba? *\(/) && (t2 = [+(e3 = e3.match(/^ *rgba? *\( *([0-9]*) *, *([0-9]*) *, *([0-9]*) *(,.*)?\) *$/))[1], +e3[2], +e3[3]]), n2[e3] = { r: t2[0], g: t2[1], b: t2[2] }, n2[e3];
        }
        function r(e3, n3, r2) {
          return e3 = t(e3), n3 = t(n3), "rgb(" + [0 | e3.r * (1 - r2) + n3.r * r2, 0 | e3.g * (1 - r2) + n3.g * r2, 0 | e3.b * (1 - r2) + n3.b * r2].join(",") + ")";
        }
        sigma.plugins.animate = function(n3, t2, a) {
          var i2, o2, s, c = a || {}, u = ++e2, f = c.duration || n3.settings("animationsTime"), l = "string" == typeof c.easing ? sigma.utils.easings[c.easing] : "function" == typeof c.easing ? c.easing : sigma.utils.easings.quadraticInOut, d = sigma.utils.dateNow();
          for (s in i2 = c.nodes && c.nodes.length ? "object" == typeof c.nodes[0] ? c.nodes : n3.graph.nodes(c.nodes) : n3.graph.nodes(), o2 = i2.reduce(function(e3, n4) {
            var r2;
            for (r2 in e3[n4.id] = {}, t2)
              r2 in n4 && (e3[n4.id][r2] = n4[r2]);
            return e3;
          }, {}), n3.animations = n3.animations || /* @__PURE__ */ Object.create({}), sigma.plugins.kill(n3), n3.cameras)
            n3.cameras[s].edgequadtree._enabled = false;
          !function e3() {
            var a3 = (sigma.utils.dateNow() - d) / f;
            if (a3 >= 1) {
              var s2;
              for (s2 in i2.forEach(function(e4) {
                for (var n4 in t2)
                  n4 in t2 && (e4[n4] = e4[t2[n4]]);
              }), n3.cameras)
                n3.cameras[s2].edgequadtree._enabled = true;
              n3.refresh(), "function" == typeof c.onComplete && c.onComplete();
            } else
              a3 = l(a3), i2.forEach(function(e4) {
                for (var n4 in t2)
                  n4 in t2 && (n4.match(/color$/) ? e4[n4] = r(o2[e4.id][n4], e4[t2[n4]], a3) : e4[n4] = e4[t2[n4]] * a3 + o2[e4.id][n4] * (1 - a3));
              }), n3.refresh(), n3.animations[u] = requestAnimationFrame(e3);
          }();
        }, sigma.plugins.kill = function(e3) {
          for (var n3 in e3.animations || {})
            cancelAnimationFrame(e3.animations[n3]);
          for (n3 in e3.cameras)
            e3.cameras[n3].edgequadtree._enabled = true;
        };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/sigma/layout.noverlap.js
  var Sigma11 = function(n) {
    var i2 = {};
    function t(e) {
      if (i2[e])
        return i2[e].exports;
      var o2 = i2[e] = { i: e, l: false, exports: {} };
      return n[e].call(o2.exports, o2, o2.exports, t), o2.l = true, o2.exports;
    }
    return t.m = n, t.c = i2, t.d = function(n2, i3, e) {
      t.o(n2, i3) || Object.defineProperty(n2, i3, { enumerable: true, get: e });
    }, t.r = function(n2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
    }, t.t = function(n2, i3) {
      if (1 & i3 && (n2 = t(n2)), 8 & i3)
        return n2;
      if (4 & i3 && "object" == typeof n2 && n2 && n2.__esModule)
        return n2;
      var e = /* @__PURE__ */ Object.create(null);
      if (t.r(e), Object.defineProperty(e, "default", { enumerable: true, value: n2 }), 2 & i3 && "string" != typeof n2)
        for (var o2 in n2)
          t.d(e, o2, function(i4) {
            return n2[i4];
          }.bind(null, o2));
      return e;
    }, t.n = function(n2) {
      var i3 = n2 && n2.__esModule ? function() {
        return n2.default;
      } : function() {
        return n2;
      };
      return t.d(i3, "a", i3), i3;
    }, t.o = function(n2, i3) {
      return Object.prototype.hasOwnProperty.call(n2, i3);
    }, t.p = "", t(t.s = 372);
  }({ 372: function(n, i2) {
    (function() {
      (function(n2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw new Error("sigma is not declared");
        sigma.utils.pkg("sigma.layout.noverlap");
        var i3 = { speed: 3, scaleNodes: 1.2, nodeMargin: 5, gridSize: 20, permittedExpansion: 1.1, rendererIndex: 0, maxIterations: 500 }, t = {}, e = {};
        function o2() {
          var n3 = this;
          this.init = function(n4, t2) {
            if (t2 = t2 || {}, this.sigInst = n4, this.config = sigma.utils.extend(t2, i3), this.easing = t2.easing, this.duration = t2.duration, t2.nodes && (this.nodes = t2.nodes, delete t2.nodes), !sigma.plugins || void 0 === sigma.plugins.animate)
              throw new Error("sigma.plugins.animate is not declared");
            this.running = false;
          }, this.atomicGo = function() {
            if (!this.running || this.iterCount < 1)
              return false;
            var i4, t2, e2, o3, s, r, d, a, g, f, c, u, l, h, p, _, m, x, y, M, v, z = this.nodes || this.sigInst.graph.nodes(), I = z.length, S = 1 / 0, E = -1 / 0, N = 1 / 0, b = -1 / 0;
            for (this.iterCount--, this.running = false, i4 = 0; i4 < I; i4++)
              (t2 = z[i4]).dn.dx = 0, t2.dn.dy = 0, S = Math.min(S, t2.dn_x - (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin)), E = Math.max(E, t2.dn_x + (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin)), N = Math.min(N, t2.dn_y - (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin)), b = Math.max(b, t2.dn_y + (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin));
            for (o3 = E - S, s = b - N, d = (N + b) / 2, S = (r = (S + E) / 2) - n3.config.permittedExpansion * o3 / 2, E = r + n3.config.permittedExpansion * o3 / 2, N = d - n3.config.permittedExpansion * s / 2, b = d + n3.config.permittedExpansion * s / 2, a = {}, g = 0; g < n3.config.gridSize; g++)
              for (a[g] = {}, f = 0; f < n3.config.gridSize; f++)
                a[g][f] = [];
            for (i4 = 0; i4 < I; i4++)
              for (x = (t2 = z[i4]).dn_x - (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin), y = t2.dn_x + (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin), M = t2.dn_y - (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin), v = t2.dn_y + (t2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin), c = Math.floor(n3.config.gridSize * (x - S) / (E - S)), u = Math.floor(n3.config.gridSize * (y - S) / (E - S)), l = Math.floor(n3.config.gridSize * (M - N) / (b - N)), h = Math.floor(n3.config.gridSize * (v - N) / (b - N)), f = c; f <= u; f++)
                for (g = l; g <= h; g++)
                  a[g][f].push(t2.id);
            for (p = {}, g = 0; g < n3.config.gridSize; g++)
              for (f = 0; f < n3.config.gridSize; f++)
                a[g][f].forEach(function(i5) {
                  for (p[i5] || (p[i5] = []), _ = Math.max(0, g - 1); _ <= Math.min(g + 1, n3.config.gridSize - 1); _++)
                    for (m = Math.max(0, f - 1); m <= Math.min(f + 1, n3.config.gridSize - 1); m++)
                      a[_][m].forEach(function(n4) {
                        n4 !== i5 && -1 === p[i5].indexOf(n4) && p[i5].push(n4);
                      });
                });
            for (i4 = 0; i4 < I; i4++)
              e2 = z[i4], p[e2.id].forEach(function(i5) {
                var t3 = n3.sigInst.graph.nodes(i5), r2 = t3.dn_x - e2.dn_x, d2 = t3.dn_y - e2.dn_y, a3 = Math.sqrt(r2 * r2 + d2 * d2);
                a3 < e2.dn_size * n3.config.scaleNodes + n3.config.nodeMargin + (t3.dn_size * n3.config.scaleNodes + n3.config.nodeMargin) && (n3.running = true, a3 > 0 ? (t3.dn.dx += r2 / a3 * (1 + e2.dn_size), t3.dn.dy += d2 / a3 * (1 + e2.dn_size)) : (t3.dn.dx += 0.01 * o3 * (0.5 - Math.random()), t3.dn.dy += 0.01 * s * (0.5 - Math.random())));
              });
            for (i4 = 0; i4 < I; i4++)
              (t2 = z[i4]).fixed || (t2.dn_x = t2.dn_x + 0.1 * t2.dn.dx * n3.config.speed, t2.dn_y = t2.dn_y + 0.1 * t2.dn.dy * n3.config.speed);
            return this.running && this.iterCount < 1 && (this.running = false), this.running;
          }, this.go = function() {
            for (this.iterCount = this.config.maxIterations; this.running; )
              this.atomicGo();
            this.stop();
          }, this.start = function() {
            if (!this.running) {
              var i4 = this.sigInst.graph.nodes(), t2 = this.sigInst.renderers[n3.config.rendererIndex].options.prefix;
              this.running = true;
              for (var o3 = 0; o3 < i4.length; o3++)
                i4[o3].dn_x = i4[o3][t2 + "x"], i4[o3].dn_y = i4[o3][t2 + "y"], i4[o3].dn_size = i4[o3][t2 + "size"], i4[o3].dn = { dx: 0, dy: 0 };
              e[n3.sigInst.id].dispatchEvent("start"), this.go();
            }
          }, this.stop = function() {
            var i4 = this.sigInst.graph.nodes();
            if (this.running = false, this.easing)
              e[n3.sigInst.id].dispatchEvent("interpolate"), sigma.plugins.animate(n3.sigInst, { x: "dn_x", y: "dn_y" }, { easing: n3.easing, onComplete: function() {
                n3.sigInst.refresh();
                for (var t3 = 0; t3 < i4.length; t3++)
                  i4[t3].dn = null, i4[t3].dn_x = null, i4[t3].dn_y = null;
                e[n3.sigInst.id].dispatchEvent("stop");
              }, duration: n3.duration });
            else {
              for (var t2 = 0; t2 < i4.length; t2++)
                i4[t2].x = i4[t2].dn_x, i4[t2].y = i4[t2].dn_y;
              this.sigInst.refresh();
              for (t2 = 0; t2 < i4.length; t2++)
                i4[t2].dn = null, i4[t2].dn_x = null, i4[t2].dn_y = null;
              e[n3.sigInst.id].dispatchEvent("stop");
            }
          }, this.kill = function() {
            this.sigInst = null, this.config = null, this.easing = null;
          };
        }
        sigma.prototype.configNoverlap = function(n3) {
          var i4 = this;
          if (!n3)
            throw new Error('Missing argument: "config"');
          return t[i4.id] || (t[i4.id] = new o2(), e[i4.id] = {}, sigma.classes.dispatcher.extend(e[i4.id]), i4.bind("kill", function() {
            t[i4.id].kill(), t[i4.id] = null, e[i4.id] = null;
          })), t[i4.id].init(i4, n3), e[i4.id];
        }, sigma.prototype.startNoverlap = function(n3) {
          return n3 && this.configNoverlap(this, n3), t[this.id].start(), e[this.id];
        }, sigma.prototype.isNoverlapRunning = function() {
          return !!t[this.id] && t[this.id].running;
        };
      }).call(this);
    }).call(window);
  } });

  // node_modules/react-sigma/es/ReactSigmaLayoutPlugin.js
  var import_react42 = __toESM(require_react());

  // node_modules/react-sigma/es/Utils.js
  function propsChanged(prev, next) {
    for (var key in prev) {
      if (prev[key] !== next[key])
        return true;
    }
    return false;
  }

  // node_modules/react-sigma/es/ReactSigmaLayoutPlugin.js
  var import_prop_types13 = __toESM(require_prop_types());
  function _typeof10(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof10 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof10 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof10(obj);
  }
  function _classCallCheck10(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties7(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass7(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties7(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties7(Constructor, staticProps);
    return Constructor;
  }
  function _inherits10(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf11(subClass, superClass);
  }
  function _setPrototypeOf11(o2, p) {
    _setPrototypeOf11 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf11(o2, p);
  }
  function _createSuper10(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct10();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf10(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf10(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn10(this, result);
    };
  }
  function _possibleConstructorReturn10(self2, call) {
    if (call && (_typeof10(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized10(self2);
  }
  function _assertThisInitialized10(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct10() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf10(o2) {
    _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf10(o2);
  }
  function _defineProperty10(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var ReactSigmaLayoutPlugin = /* @__PURE__ */ function(_React$Component) {
    _inherits10(ReactSigmaLayoutPlugin2, _React$Component);
    var _super = _createSuper10(ReactSigmaLayoutPlugin2);
    function ReactSigmaLayoutPlugin2(props) {
      var _this2;
      _classCallCheck10(this, ReactSigmaLayoutPlugin2);
      _this2 = _super.call(this, props);
      _defineProperty10(_assertThisInitialized10(_this2), "_mounted", false);
      _defineProperty10(_assertThisInitialized10(_this2), "render", function() {
        return null;
      });
      _this2.state = {
        running: false
      };
      return _this2;
    }
    _createClass7(ReactSigmaLayoutPlugin2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._start();
        this._mounted = true;
      }
      // Change sigma status only after react rendering complete
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.running && !this.state.running && this._mounted) {
          if (this.props.sigma)
            this.props.sigma.refresh();
        } else if (propsChanged(prevProps, this.props)) {
          this.props.stop();
          this._start();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
        this.props.stop();
      }
      //TODO: Render composition of child components after animation
    }, {
      key: "_start",
      value: function _start() {
        var _this2 = this;
        this.props.config(ReactSigmaLayoutPlugin2._stripOptions(this.props));
        var listener = this.props.start();
        listener.bind("stop", function() {
          _this2._mounted && _this2.setState({
            running: false
          });
        });
        this.setState({
          running: true
        });
      }
    }], [{
      key: "_stripOptions",
      value: function _stripOptions(props) {
        var config = {};
        for (var key in props) {
          if (key !== "start" && key !== "stop" && key !== "config" && key !== "sigma" && key !== "children")
            config[key] = props[key];
        }
        return config;
      }
    }]);
    return ReactSigmaLayoutPlugin2;
  }(import_react42.default.Component);
  _defineProperty10(ReactSigmaLayoutPlugin, "propTypes", {
    config: import_prop_types13.default.func.isRequired,
    start: import_prop_types13.default.func.isRequired,
    stop: import_prop_types13.default.func.isRequired,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types13.default.instanceOf(sigma) : import_prop_types13.default.any).apply(this, arguments);
    })
  });
  var ReactSigmaLayoutPlugin_default = ReactSigmaLayoutPlugin;

  // node_modules/react-sigma/es/NOverlap.js
  var import_prop_types14 = __toESM(require_prop_types());
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var NOverlap = function NOverlap2(props) {
    var s = props.sigma;
    if (s)
      return /* @__PURE__ */ import_react43.default.createElement(ReactSigmaLayoutPlugin_default, _extends2({
        start: function start() {
          return s.startNoverlap();
        },
        config: function config(options2) {
          return s.configNoverlap(options2);
        },
        stop: function stop() {
          return !!s && !!s.stopNoverlap && s.stopNoverlap();
        }
      }, props));
    return null;
  };
  NOverlap.propTypes = {
    nodes: import_prop_types14.default.arrayOf(function() {
      return (typeof Sigma$Node === "function" ? import_prop_types14.default.instanceOf(Sigma$Node).isRequired : import_prop_types14.default.any.isRequired).apply(this, arguments);
    }),
    nodeMargin: import_prop_types14.default.number,
    scaleNodes: import_prop_types14.default.number,
    gridSize: import_prop_types14.default.number,
    permittedExpansion: import_prop_types14.default.number,
    speed: import_prop_types14.default.number,
    maxIterations: import_prop_types14.default.number,
    easing: function easing() {
      return (typeof Sigma$Easing === "function" ? import_prop_types14.default.instanceOf(Sigma$Easing) : import_prop_types14.default.any).apply(this, arguments);
    },
    duration: import_prop_types14.default.number,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types14.default.instanceOf(sigma) : import_prop_types14.default.any).apply(this, arguments);
    })
  };

  // node_modules/react-sigma/es/NeoCypher.js
  var import_react44 = __toESM(require_react());

  // node_modules/react-sigma/sigma/neo4j.cypher.js
  var Sigma12 = function(e) {
    var t = {};
    function n(o2) {
      if (t[o2])
        return t[o2].exports;
      var r = t[o2] = { i: o2, l: false, exports: {} };
      return e[o2].call(r.exports, r, r.exports, n), r.l = true, r.exports;
    }
    return n.m = e, n.c = t, n.d = function(e2, t2, o2) {
      n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: o2 });
    }, n.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, n.t = function(e2, t2) {
      if (1 & t2 && (e2 = n(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var o2 = /* @__PURE__ */ Object.create(null);
      if (n.r(o2), Object.defineProperty(o2, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var r in e2)
          n.d(o2, r, function(t3) {
            return e2[t3];
          }.bind(null, r));
      return o2;
    }, n.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return n.d(t2, "a", t2), t2;
    }, n.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, n.p = "", n(n.s = 184);
  }({ 184: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.neo4j"), sigma.utils.pkg("sigma.utils"), sigma.neo4j.send = function(e3, t2, n, o2, r) {
          var a, i2, s, u = sigma.utils.xhr();
          if (a = e3, "object" == typeof e3 && (a = e3.url, i2 = e3.user, s = e3.password), !u)
            throw "XMLHttpRequest not supported, cannot load the file.";
          a += t2, u.open(n, a, true), i2 && s && u.setRequestHeader("Authorization", "Basic " + btoa(i2 + ":" + s)), u.setRequestHeader("Accept", "application/json"), u.setRequestHeader("Content-type", "application/json; charset=utf-8"), u.onreadystatechange = function() {
            4 === u.readyState && r(JSON.parse(u.responseText));
          }, u.send(o2);
        }, sigma.neo4j.cypher_parse = function(e3, t2) {
          var n, o2 = { nodes: [], edges: [] }, r = {}, a = {};
          for (n in e3.results[0].data.forEach(function(e4) {
            e4.graph.nodes.forEach(function(e5) {
              var n2 = t2.node(e5);
              n2.id in r || (r[n2.id] = n2);
            }), e4.graph.relationships.forEach(function(e5) {
              var n2 = t2.edge(e5);
              n2.id in a || (a[n2.id] = n2);
            });
          }), r)
            o2.nodes.push(r[n]);
          for (n in a)
            o2.edges.push(a[n]);
          return o2;
        }, sigma.neo4j.cypher = function(e3, t2, n, o2, r) {
          var a, i2;
          r || (r = sigma.neo4j.defaultProducers), a = JSON.stringify({ statements: [{ statement: t2, resultDataContents: ["graph"], includeStats: false }] }), i2 = function(e4) {
            return function(t3) {
              var o3;
              o3 = sigma.neo4j.cypher_parse(t3, r), n instanceof sigma ? (n.graph.clear(), n.graph.read(o3)) : "object" == typeof n ? ((n = new sigma(n)).graph.read(o3), n.refresh()) : "function" == typeof n && (e4 = n, n = null), e4 && e4(n || o3);
            };
          }, sigma.neo4j.send(e3, "/db/data/transaction/commit", "POST", a, i2(o2));
        }, sigma.neo4j.getLabels = function(e3, t2) {
          sigma.neo4j.send(e3, "/db/data/labels", "GET", null, t2);
        }, sigma.neo4j.getTypes = function(e3, t2) {
          sigma.neo4j.send(e3, "/db/data/relationship/types", "GET", null, t2);
        }, sigma.neo4j.defaultProducers = { node: function(e3) {
          return { id: e3.id, label: e3.id, x: Math.random(), y: Math.random(), size: 1, color: "#666666", neo4j_labels: e3.labels, neo4j_data: e3.properties };
        }, edge: function(e3) {
          return { id: e3.id, label: e3.type, source: e3.startNode, target: e3.endNode, color: "#7D7C8E", neo4j_type: e3.type, neo4j_data: e3.properties };
        } };
      }).call(window);
    }).call(window);
  } });

  // node_modules/react-sigma/es/NeoGraphItemsProducers.js
  function _classCallCheck11(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties8(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass8(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties8(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties8(Constructor, staticProps);
    return Constructor;
  }
  var palette = ["#5DA5DA", "#60BD68", "#B2912F", "#F15854", "#DECF3F", "#FAA43A", "#B276B2", "#F17CB0", "#4D4D4D"];
  var NeoGraphItemsProducers = /* @__PURE__ */ function() {
    function NeoGraphItemsProducers2() {
      _classCallCheck11(this, NeoGraphItemsProducers2);
      this._currentColor = 0;
      this._colorsMap = {};
    }
    _createClass8(NeoGraphItemsProducers2, [{
      key: "node",
      value: function node(_node) {
        return {
          id: _node.id,
          label: _node.properties.name,
          x: Math.random(),
          y: Math.random(),
          size: 1,
          color: this.colorsMap(_node.labels[0]),
          neo4j_labels: _node.labels,
          neo4j_data: _node.properties
        };
      }
    }, {
      key: "edge",
      value: function edge(_edge) {
        return {
          id: _edge.id,
          label: _edge.type,
          source: _edge.startNode,
          target: _edge.endNode,
          color: this.colorsMap(_edge.type),
          neo4j_type: _edge.type,
          neo4j_data: _edge.properties
        };
      }
    }, {
      key: "colorsMap",
      value: function colorsMap(label) {
        var color = this._colorsMap[label];
        if (!color) {
          color = palette[this._currentColor++ % palette.length];
          this._colorsMap[label] = color;
        }
        return color;
      }
    }]);
    return NeoGraphItemsProducers2;
  }();
  var NeoGraphItemsProducers_default = NeoGraphItemsProducers;

  // node_modules/react-sigma/es/NeoCypher.js
  var import_prop_types15 = __toESM(require_prop_types());
  function _typeof11(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof11 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof11 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof11(obj);
  }
  function _classCallCheck12(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties9(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass9(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties9(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties9(Constructor, staticProps);
    return Constructor;
  }
  function _inherits11(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf12(subClass, superClass);
  }
  function _setPrototypeOf12(o2, p) {
    _setPrototypeOf12 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf12(o2, p);
  }
  function _createSuper11(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct11();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf11(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf11(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn11(this, result);
    };
  }
  function _possibleConstructorReturn11(self2, call) {
    if (call && (_typeof11(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized11(self2);
  }
  function _assertThisInitialized11(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct11() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf11(o2) {
    _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf11(o2);
  }
  function _defineProperty11(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var NeoCypher = /* @__PURE__ */ function(_React$Component) {
    _inherits11(NeoCypher2, _React$Component);
    var _super = _createSuper11(NeoCypher2);
    function NeoCypher2(props) {
      var _this2;
      _classCallCheck12(this, NeoCypher2);
      if (!props.producers) {
        props.producers = new NeoGraphItemsProducers_default();
      }
      _this2 = _super.call(this, props);
      _defineProperty11(_assertThisInitialized11(_this2), "onLoad", function() {
        _this2.setState({
          loaded: true
        });
        if (_this2.props.sigma)
          _this2.props.sigma.refresh();
        if (_this2.props.onGraphLoaded)
          return _this2.props.onGraphLoaded();
      });
      _this2.state = {
        loaded: false
      };
      return _this2;
    }
    _createClass9(NeoCypher2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._runQuery(this.props.query);
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate2(props) {
        if (this.props.query !== props.query) {
          this.setState({
            loaded: false
          });
          this._runQuery(props.query);
        }
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.loaded)
          return null;
        return /* @__PURE__ */ import_react44.default.createElement("div", null, embedProps(this.props.children, {
          sigma: this.props.sigma
        }));
      }
    }, {
      key: "_runQuery",
      value: function _runQuery(query) {
        sigma.neo4j.cypher({
          url: this.props.url,
          user: this.props.user,
          password: this.props.password
        }, query, this.props.sigma, this.onLoad, this.props.producers);
      }
    }]);
    return NeoCypher2;
  }(import_react44.default.Component);
  _defineProperty11(NeoCypher, "propTypes", {
    url: import_prop_types15.default.string.isRequired,
    user: import_prop_types15.default.string.isRequired,
    password: import_prop_types15.default.string.isRequired,
    query: import_prop_types15.default.string.isRequired,
    producers: import_prop_types15.default.shape({
      node: import_prop_types15.default.func.isRequired,
      edge: import_prop_types15.default.func.isRequired
    }),
    onGraphLoaded: import_prop_types15.default.func,
    children: import_prop_types15.default.any,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types15.default.instanceOf(sigma) : import_prop_types15.default.any).apply(this, arguments);
    })
  });

  // node_modules/react-sigma/es/RandomizeNodePositions.js
  var import_react45 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  function _typeof12(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof12 = function _typeof13(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof12 = function _typeof13(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof12(obj);
  }
  function _classCallCheck13(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties10(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass10(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties10(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties10(Constructor, staticProps);
    return Constructor;
  }
  function _inherits12(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    if (superClass)
      _setPrototypeOf13(subClass, superClass);
  }
  function _setPrototypeOf13(o2, p) {
    _setPrototypeOf13 = Object.setPrototypeOf || function _setPrototypeOf14(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf13(o2, p);
  }
  function _createSuper12(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct12();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf12(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf12(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn12(this, result);
    };
  }
  function _possibleConstructorReturn12(self2, call) {
    if (call && (_typeof12(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized12(self2);
  }
  function _assertThisInitialized12(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _isNativeReflectConstruct12() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf12(o2) {
    _getPrototypeOf12 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf13(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf12(o2);
  }
  function _defineProperty12(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var RandomizeNodePositions = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits12(RandomizeNodePositions2, _React$PureComponent);
    var _super = _createSuper12(RandomizeNodePositions2);
    function RandomizeNodePositions2(props) {
      var _this2;
      _classCallCheck13(this, RandomizeNodePositions2);
      _this2 = _super.call(this, props);
      if (_this2.props.sigma) {
        _this2.props.sigma.graph.nodes().forEach(function(n) {
          n.x = Math.random();
          n.y = Math.random();
        });
      }
      if (_this2.props.sigma)
        _this2.props.sigma.refresh();
      return _this2;
    }
    _createClass10(RandomizeNodePositions2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.sigma)
          this.props.sigma.refresh();
      }
    }, {
      key: "render",
      value: function render() {
        return /* @__PURE__ */ import_react45.default.createElement("div", null, embedProps(this.props.children, {
          sigma: this.props.sigma
        }));
      }
    }]);
    return RandomizeNodePositions2;
  }(import_react45.default.PureComponent);
  _defineProperty12(RandomizeNodePositions, "propTypes", {
    children: import_prop_types16.default.any,
    sigma: function(_sigma) {
      function sigma6() {
        return _sigma.apply(this, arguments);
      }
      sigma6.toString = function() {
        return _sigma.toString();
      };
      return sigma6;
    }(function() {
      return (typeof sigma === "function" ? import_prop_types16.default.instanceOf(sigma) : import_prop_types16.default.any).apply(this, arguments);
    })
  });
  var RandomizeNodePositions_default = RandomizeNodePositions;

  // node_modules/react-sigma/sigma/webgl.js
  var Sigma13 = function(t) {
    var e = {};
    function i2(r) {
      if (e[r])
        return e[r].exports;
      var o2 = e[r] = { i: r, l: false, exports: {} };
      return t[r].call(o2.exports, o2, o2.exports, i2), o2.l = true, o2.exports;
    }
    return i2.m = t, i2.c = e, i2.d = function(t2, e2, r) {
      i2.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: r });
    }, i2.r = function(t2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
    }, i2.t = function(t2, e2) {
      if (1 & e2 && (t2 = i2(t2)), 8 & e2)
        return t2;
      if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
        return t2;
      var r = /* @__PURE__ */ Object.create(null);
      if (i2.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
        for (var o2 in t2)
          i2.d(r, o2, function(e3) {
            return t2[e3];
          }.bind(null, o2));
      return r;
    }, i2.n = function(t2) {
      var e2 = t2 && t2.__esModule ? function() {
        return t2.default;
      } : function() {
        return t2;
      };
      return i2.d(e2, "a", e2), e2;
    }, i2.o = function(t2, e2) {
      return Object.prototype.hasOwnProperty.call(t2, e2);
    }, i2.p = "", i2(i2.s = 142);
  }({ 142: function(t, e, i2) {
    "use strict";
    i2.r(e);
    i2(143), i2(144), i2(145), i2(146), i2(147), i2(148), i2(149);
  }, 143: function(t, e) {
    (function() {
      (function(t2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.renderers"), sigma.renderers.webgl = function(t3, e2, i2, r) {
          if ("object" != typeof r)
            throw "sigma.renderers.webgl: Wrong arguments.";
          if (!(r.container instanceof HTMLElement))
            throw "Container not found.";
          var o2, a, s, n;
          for (sigma.classes.dispatcher.extend(this), this.jobs = {}, Object.defineProperty(this, "conradId", { value: sigma.utils.id() }), this.graph = t3, this.camera = e2, this.contexts = {}, this.domElements = {}, this.options = r, this.container = this.options.container, this.settings = "object" == typeof r.settings && r.settings ? i2.embedObjects(r.settings) : i2, this.options.prefix = this.camera.readPrefix, Object.defineProperty(this, "nodePrograms", { value: {} }), Object.defineProperty(this, "edgePrograms", { value: {} }), Object.defineProperty(this, "nodeFloatArrays", { value: {} }), Object.defineProperty(this, "edgeFloatArrays", { value: {} }), Object.defineProperty(this, "edgeIndicesArrays", { value: {} }), this.settings(r, "batchEdgesDrawing") ? (this.initDOM("canvas", "edges", true), this.initDOM("canvas", "nodes", true)) : (this.initDOM("canvas", "scene", true), this.contexts.nodes = this.contexts.scene, this.contexts.edges = this.contexts.scene), this.initDOM("canvas", "labels"), this.initDOM("canvas", "mouse"), this.contexts.hover = this.contexts.mouse, this.captors = [], o2 = 0, a = (s = this.options.captors || [sigma.captors.mouse, sigma.captors.touch]).length; o2 < a; o2++)
            n = "function" == typeof s[o2] ? s[o2] : sigma.captors[s[o2]], this.captors.push(new n(this.domElements.mouse, this.camera, this.settings));
          sigma.misc.bindEvents.call(this, this.camera.prefix), sigma.misc.drawHovers.call(this, this.camera.prefix), this.resize();
        }, sigma.renderers.webgl.prototype.process = function() {
          var t3, e2, i2, r, o2, a, s = this.graph, n = sigma.utils.extend(n, this.options), l = this.settings(n, "defaultEdgeType"), c = this.settings(n, "defaultNodeType");
          for (r in this.nodeFloatArrays)
            delete this.nodeFloatArrays[r];
          for (r in this.edgeFloatArrays)
            delete this.edgeFloatArrays[r];
          for (r in this.edgeIndicesArrays)
            delete this.edgeIndicesArrays[r];
          for (e2 = 0, i2 = (t3 = s.edges()).length; e2 < i2; e2++)
            r = (o2 = t3[e2].type || l) && sigma.webgl.edges[o2] ? o2 : "def", this.edgeFloatArrays[r] || (this.edgeFloatArrays[r] = { edges: [] }), this.edgeFloatArrays[r].edges.push(t3[e2]);
          for (e2 = 0, i2 = (t3 = s.nodes()).length; e2 < i2; e2++)
            r = (o2 = t3[e2].type || c) && sigma.webgl.nodes[o2] ? o2 : "def", this.nodeFloatArrays[r] || (this.nodeFloatArrays[r] = { nodes: [] }), this.nodeFloatArrays[r].nodes.push(t3[e2]);
          for (r in this.edgeFloatArrays) {
            for (a = sigma.webgl.edges[r], t3 = this.edgeFloatArrays[r].edges, this.edgeFloatArrays[r].array = new Float32Array(t3.length * a.POINTS * a.ATTRIBUTES), e2 = 0, i2 = t3.length; e2 < i2; e2++)
              t3[e2].hidden || s.nodes(t3[e2].source).hidden || s.nodes(t3[e2].target).hidden || a.addEdge(t3[e2], s.nodes(t3[e2].source), s.nodes(t3[e2].target), this.edgeFloatArrays[r].array, e2 * a.POINTS * a.ATTRIBUTES, n.prefix, this.settings);
            "function" == typeof a.computeIndices && (this.edgeIndicesArrays[r] = a.computeIndices(this.edgeFloatArrays[r].array));
          }
          for (r in this.nodeFloatArrays)
            for (a = sigma.webgl.nodes[r], t3 = this.nodeFloatArrays[r].nodes, this.nodeFloatArrays[r].array = new Float32Array(t3.length * a.POINTS * a.ATTRIBUTES), e2 = 0, i2 = t3.length; e2 < i2; e2++)
              this.nodeFloatArrays[r].array || (this.nodeFloatArrays[r].array = new Float32Array(t3.length * a.POINTS * a.ATTRIBUTES)), t3[e2].hidden || a.addNode(t3[e2], this.nodeFloatArrays[r].array, e2 * a.POINTS * a.ATTRIBUTES, n.prefix, this.settings);
          return this;
        }, sigma.renderers.webgl.prototype.render = function(e2) {
          var i2, r, o2, a, s, n, l = this, c = (this.graph, this.contexts.nodes), g = this.contexts.edges, d = this.camera.getMatrix(), u = sigma.utils.extend(e2, this.options), h = this.settings(u, "drawLabels"), m = this.settings(u, "drawEdges"), f = this.settings(u, "drawNodes");
          for (a in this.resize(false), this.settings(u, "hideEdgesOnMove") && (this.camera.isAnimated || this.camera.isMoving) && (m = false), this.clear(), d = sigma.utils.matrices.multiply(d, sigma.utils.matrices.translation(this.width / 2, this.height / 2)), this.jobs)
            conrad.hasJob(a) && conrad.killJob(a);
          if (m)
            if (this.settings(u, "batchEdgesDrawing"))
              (function() {
                var t3, e3, i3, r2, o3, a3, s2, n2, l2, c2;
                i3 = "edges_" + this.conradId, c2 = this.settings(u, "webglEdgesBatchSize"), (t3 = Object.keys(this.edgeFloatArrays)).length && (e3 = 0, l2 = sigma.webgl.edges[t3[e3]], o3 = this.edgeFloatArrays[t3[e3]].array, n2 = this.edgeIndicesArrays[t3[e3]], s2 = 0, a3 = Math.min(s2 + c2 * l2.POINTS, o3.length / l2.ATTRIBUTES), r2 = function() {
                  return this.edgePrograms[t3[e3]] || (this.edgePrograms[t3[e3]] = l2.initProgram(g)), s2 < a3 && (g.useProgram(this.edgePrograms[t3[e3]]), l2.render(g, this.edgePrograms[t3[e3]], o3, { settings: this.settings, matrix: d, width: this.width, height: this.height, ratio: this.camera.ratio, scalingRatio: this.settings(u, "webglOversamplingRatio"), start: s2, count: a3 - s2, indicesData: n2 })), a3 >= o3.length / l2.ATTRIBUTES && e3 === t3.length - 1 ? (delete this.jobs[i3], false) : (a3 >= o3.length / l2.ATTRIBUTES ? (e3++, o3 = this.edgeFloatArrays[t3[e3]].array, l2 = sigma.webgl.edges[t3[e3]], s2 = 0, a3 = Math.min(s2 + c2 * l2.POINTS, o3.length / l2.ATTRIBUTES)) : (s2 = a3, a3 = Math.min(s2 + c2 * l2.POINTS, o3.length / l2.ATTRIBUTES)), true);
                }, this.jobs[i3] = r2, conrad.addJob(i3, r2.bind(this)));
              }).call(this);
            else
              for (a in this.edgeFloatArrays)
                n = sigma.webgl.edges[a], this.edgePrograms[a] || (this.edgePrograms[a] = n.initProgram(g)), this.edgeFloatArrays[a] && (g.useProgram(this.edgePrograms[a]), n.render(g, this.edgePrograms[a], this.edgeFloatArrays[a].array, { settings: this.settings, matrix: d, width: this.width, height: this.height, ratio: this.camera.ratio, scalingRatio: this.settings(u, "webglOversamplingRatio"), indicesData: this.edgeIndicesArrays[a] }));
          if (f)
            for (a in c.blendFunc(c.SRC_ALPHA, c.ONE_MINUS_SRC_ALPHA), c.enable(c.BLEND), this.nodeFloatArrays)
              n = sigma.webgl.nodes[a], this.nodePrograms[a] || (this.nodePrograms[a] = n.initProgram(c)), this.nodeFloatArrays[a] && (c.useProgram(this.nodePrograms[a]), n.render(c, this.nodePrograms[a], this.nodeFloatArrays[a].array, { settings: this.settings, matrix: d, width: this.width, height: this.height, ratio: this.camera.ratio, scalingRatio: this.settings(u, "webglOversamplingRatio") }));
          if (i2 = this.camera.quadtree.area(this.camera.getRectangle(this.width, this.height)), this.camera.applyView(t2, t2, { nodes: i2, edges: [], width: this.width, height: this.height }), h)
            for (s = function(t3) {
              return l.settings({ prefix: l.camera.prefix }, t3);
            }, r = 0, o2 = i2.length; r < o2; r++)
              i2[r].hidden || (sigma.canvas.labels[i2[r].type || this.settings(u, "defaultNodeType")] || sigma.canvas.labels.def)(i2[r], this.contexts.labels, s);
          return this.dispatchEvent("render"), this;
        }, sigma.renderers.webgl.prototype.initDOM = function(t3, e2, i2) {
          var r = document.createElement(t3), o2 = this;
          r.style.position = "absolute", r.setAttribute("class", "sigma-" + e2), this.domElements[e2] = r, this.container.appendChild(r), "canvas" === t3.toLowerCase() && (this.contexts[e2] = r.getContext(i2 ? "experimental-webgl" : "2d", { preserveDrawingBuffer: true }), i2 && (r.addEventListener("webglcontextlost", function(t4) {
            t4.preventDefault();
          }, false), r.addEventListener("webglcontextrestored", function(t4) {
            o2.render();
          }, false)));
        }, sigma.renderers.webgl.prototype.resize = function(e2, i2) {
          var r, o2 = this.width, a = this.height, s = sigma.utils.getPixelRatio();
          if (e2 !== t2 && i2 !== t2 ? (this.width = e2, this.height = i2) : (this.width = this.container.offsetWidth, this.height = this.container.offsetHeight, e2 = this.width, i2 = this.height), o2 !== this.width || a !== this.height)
            for (r in this.domElements)
              this.domElements[r].style.width = e2 + "px", this.domElements[r].style.height = i2 + "px", "canvas" === this.domElements[r].tagName.toLowerCase() && (this.contexts[r] && this.contexts[r].scale ? (this.domElements[r].setAttribute("width", e2 * s + "px"), this.domElements[r].setAttribute("height", i2 * s + "px"), 1 !== s && this.contexts[r].scale(s, s)) : (this.domElements[r].setAttribute("width", e2 * this.settings("webglOversamplingRatio") + "px"), this.domElements[r].setAttribute("height", i2 * this.settings("webglOversamplingRatio") + "px")));
          for (r in this.contexts)
            this.contexts[r] && this.contexts[r].viewport && this.contexts[r].viewport(0, 0, this.width * this.settings("webglOversamplingRatio"), this.height * this.settings("webglOversamplingRatio"));
          return this;
        }, sigma.renderers.webgl.prototype.clear = function() {
          return this.contexts.labels.clearRect(0, 0, this.width, this.height), this.contexts.nodes.clear(this.contexts.nodes.COLOR_BUFFER_BIT), this.contexts.edges.clear(this.contexts.edges.COLOR_BUFFER_BIT), this;
        }, sigma.renderers.webgl.prototype.kill = function() {
          for (var t3, e2; e2 = this.captors.pop(); )
            e2.kill();
          for (t3 in delete this.captors, this.domElements)
            this.domElements[t3].parentNode.removeChild(this.domElements[t3]), delete this.domElements[t3], delete this.contexts[t3];
          delete this.domElements, delete this.contexts;
        }, sigma.utils.pkg("sigma.webgl.nodes"), sigma.utils.pkg("sigma.webgl.edges"), sigma.utils.pkg("sigma.canvas.labels");
      }).call(this);
    }).call(window);
  }, 144: function(t, e) {
    (function() {
      !function(t2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.renderers");
        var e2, i2 = !!t2.WebGLRenderingContext;
        if (i2) {
          e2 = document.createElement("canvas");
          try {
            i2 = !(!e2.getContext("webgl") && !e2.getContext("experimental-webgl"));
          } catch (t3) {
            i2 = false;
          }
        }
        sigma.renderers.def = i2 ? sigma.renderers.webgl : sigma.renderers.canvas;
      }(this);
    }).call(window);
  }, 145: function(t, e) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.webgl.nodes"), sigma.webgl.nodes.def = { POINTS: 3, ATTRIBUTES: 5, addNode: function(t2, e2, i2, r, o2) {
          var a = sigma.utils.floatColor(t2.color || o2("defaultNodeColor"));
          e2[i2++] = t2[r + "x"], e2[i2++] = t2[r + "y"], e2[i2++] = t2[r + "size"], e2[i2++] = a, e2[i2++] = 0, e2[i2++] = t2[r + "x"], e2[i2++] = t2[r + "y"], e2[i2++] = t2[r + "size"], e2[i2++] = a, e2[i2++] = 2 * Math.PI / 3, e2[i2++] = t2[r + "x"], e2[i2++] = t2[r + "y"], e2[i2++] = t2[r + "size"], e2[i2++] = a, e2[i2++] = 4 * Math.PI / 3;
        }, render: function(t2, e2, i2, r) {
          var o2, a = t2.getAttribLocation(e2, "a_position"), s = t2.getAttribLocation(e2, "a_size"), n = t2.getAttribLocation(e2, "a_color"), l = t2.getAttribLocation(e2, "a_angle"), c = t2.getUniformLocation(e2, "u_resolution"), g = t2.getUniformLocation(e2, "u_matrix"), d = t2.getUniformLocation(e2, "u_ratio"), u = t2.getUniformLocation(e2, "u_scale");
          o2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, o2), t2.bufferData(t2.ARRAY_BUFFER, i2, t2.DYNAMIC_DRAW), t2.uniform2f(c, r.width, r.height), t2.uniform1f(d, 1 / Math.pow(r.ratio, r.settings("nodesPowRatio"))), t2.uniform1f(u, r.scalingRatio), t2.uniformMatrix3fv(g, false, r.matrix), t2.enableVertexAttribArray(a), t2.enableVertexAttribArray(s), t2.enableVertexAttribArray(n), t2.enableVertexAttribArray(l), t2.vertexAttribPointer(a, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0), t2.vertexAttribPointer(s, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8), t2.vertexAttribPointer(n, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 12), t2.vertexAttribPointer(l, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 16), t2.drawArrays(t2.TRIANGLES, r.start || 0, r.count || i2.length / this.ATTRIBUTES);
        }, initProgram: function(t2) {
          var e2, i2;
          return e2 = sigma.utils.loadShader(t2, ["attribute vec2 a_position;", "attribute float a_size;", "attribute float a_color;", "attribute float a_angle;", "uniform vec2 u_resolution;", "uniform float u_ratio;", "uniform float u_scale;", "uniform mat3 u_matrix;", "varying vec4 color;", "varying vec2 center;", "varying float radius;", "void main() {", "radius = a_size * u_ratio;", "vec2 position = (u_matrix * vec3(a_position, 1)).xy;", "center = position * u_scale;", "center = vec2(center.x, u_scale * u_resolution.y - center.y);", "position = position +", "2.0 * radius * vec2(cos(a_angle), sin(a_angle));", "position = (position / u_resolution * 2.0 - 1.0) * vec2(1, -1);", "radius = radius * u_scale;", "gl_Position = vec4(position, 0, 1);", "float c = a_color;", "color.b = mod(c, 256.0); c = floor(c / 256.0);", "color.g = mod(c, 256.0); c = floor(c / 256.0);", "color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;", "color.a = 1.0;", "}"].join("\n"), t2.VERTEX_SHADER), i2 = sigma.utils.loadShader(t2, ["precision mediump float;", "varying vec4 color;", "varying vec2 center;", "varying float radius;", "void main(void) {", "vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);", "vec2 m = gl_FragCoord.xy - center;", "float diff = radius - sqrt(m.x * m.x + m.y * m.y);", "if (diff > 0.0)", "gl_FragColor = color;", "else", "gl_FragColor = color0;", "}"].join("\n"), t2.FRAGMENT_SHADER), sigma.utils.loadProgram(t2, [e2, i2]);
        } };
      }();
    }).call(window);
  }, 146: function(t, e) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.webgl.nodes"), sigma.webgl.nodes.fast = { POINTS: 1, ATTRIBUTES: 4, addNode: function(t2, e2, i2, r, o2) {
          e2[i2++] = t2[r + "x"], e2[i2++] = t2[r + "y"], e2[i2++] = t2[r + "size"], e2[i2++] = sigma.utils.floatColor(t2.color || o2("defaultNodeColor"));
        }, render: function(t2, e2, i2, r) {
          var o2, a = t2.getAttribLocation(e2, "a_position"), s = t2.getAttribLocation(e2, "a_size"), n = t2.getAttribLocation(e2, "a_color"), l = t2.getUniformLocation(e2, "u_resolution"), c = t2.getUniformLocation(e2, "u_matrix"), g = t2.getUniformLocation(e2, "u_ratio"), d = t2.getUniformLocation(e2, "u_scale");
          o2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, o2), t2.bufferData(t2.ARRAY_BUFFER, i2, t2.DYNAMIC_DRAW), t2.uniform2f(l, r.width, r.height), t2.uniform1f(g, 1 / Math.pow(r.ratio, r.settings("nodesPowRatio"))), t2.uniform1f(d, r.scalingRatio), t2.uniformMatrix3fv(c, false, r.matrix), t2.enableVertexAttribArray(a), t2.enableVertexAttribArray(s), t2.enableVertexAttribArray(n), t2.vertexAttribPointer(a, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0), t2.vertexAttribPointer(s, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8), t2.vertexAttribPointer(n, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 12), t2.drawArrays(t2.POINTS, r.start || 0, r.count || i2.length / this.ATTRIBUTES);
        }, initProgram: function(t2) {
          var e2, i2;
          return e2 = sigma.utils.loadShader(t2, ["attribute vec2 a_position;", "attribute float a_size;", "attribute float a_color;", "uniform vec2 u_resolution;", "uniform float u_ratio;", "uniform float u_scale;", "uniform mat3 u_matrix;", "varying vec4 color;", "void main() {", "gl_Position = vec4(", "((u_matrix * vec3(a_position, 1)).xy /", "u_resolution * 2.0 - 1.0) * vec2(1, -1),", "0,", "1", ");", "gl_PointSize = a_size * u_ratio * u_scale * 2.0;", "float c = a_color;", "color.b = mod(c, 256.0); c = floor(c / 256.0);", "color.g = mod(c, 256.0); c = floor(c / 256.0);", "color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;", "color.a = 1.0;", "}"].join("\n"), t2.VERTEX_SHADER), i2 = sigma.utils.loadShader(t2, ["precision mediump float;", "varying vec4 color;", "void main(void) {", "float border = 0.01;", "float radius = 0.5;", "vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);", "vec2 m = gl_PointCoord - vec2(0.5, 0.5);", "float dist = radius - sqrt(m.x * m.x + m.y * m.y);", "float t = 0.0;", "if (dist > border)", "t = 1.0;", "else if (dist > 0.0)", "t = dist / border;", "gl_FragColor = mix(color0, color, t);", "}"].join("\n"), t2.FRAGMENT_SHADER), sigma.utils.loadProgram(t2, [e2, i2]);
        } };
      }();
    }).call(window);
  }, 147: function(t, e) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.webgl.edges"), sigma.webgl.edges.def = { POINTS: 6, ATTRIBUTES: 7, addEdge: function(t2, e2, i2, r, o2, a, s) {
          var n = (t2[a + "size"] || 1) / 2, l = e2[a + "x"], c = e2[a + "y"], g = i2[a + "x"], d = i2[a + "y"], u = t2.color;
          if (!u)
            switch (s("edgeColor")) {
              case "source":
                u = e2.color || s("defaultNodeColor");
                break;
              case "target":
                u = i2.color || s("defaultNodeColor");
                break;
              default:
                u = s("defaultEdgeColor");
            }
          u = sigma.utils.floatColor(u), r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = 0, r[o2++] = u, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = 1, r[o2++] = u, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = 0, r[o2++] = u, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = 0, r[o2++] = u, r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = 1, r[o2++] = u, r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = 0, r[o2++] = u;
        }, render: function(t2, e2, i2, r) {
          var o2, a = t2.getAttribLocation(e2, "a_color"), s = t2.getAttribLocation(e2, "a_position1"), n = t2.getAttribLocation(e2, "a_position2"), l = t2.getAttribLocation(e2, "a_thickness"), c = t2.getAttribLocation(e2, "a_minus"), g = t2.getUniformLocation(e2, "u_resolution"), d = t2.getUniformLocation(e2, "u_matrix"), u = t2.getUniformLocation(e2, "u_matrixHalfPi"), h = t2.getUniformLocation(e2, "u_matrixHalfPiMinus"), m = t2.getUniformLocation(e2, "u_ratio"), f = t2.getUniformLocation(e2, "u_scale");
          o2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, o2), t2.bufferData(t2.ARRAY_BUFFER, i2, t2.STATIC_DRAW), t2.uniform2f(g, r.width, r.height), t2.uniform1f(m, r.ratio / Math.pow(r.ratio, r.settings("edgesPowRatio"))), t2.uniform1f(f, r.scalingRatio), t2.uniformMatrix3fv(d, false, r.matrix), t2.uniformMatrix2fv(u, false, sigma.utils.matrices.rotation(Math.PI / 2, true)), t2.uniformMatrix2fv(h, false, sigma.utils.matrices.rotation(-Math.PI / 2, true)), t2.enableVertexAttribArray(a), t2.enableVertexAttribArray(s), t2.enableVertexAttribArray(n), t2.enableVertexAttribArray(l), t2.enableVertexAttribArray(c), t2.vertexAttribPointer(s, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0), t2.vertexAttribPointer(n, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8), t2.vertexAttribPointer(l, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 16), t2.vertexAttribPointer(c, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 20), t2.vertexAttribPointer(a, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 24), t2.drawArrays(t2.TRIANGLES, r.start || 0, r.count || i2.length / this.ATTRIBUTES);
        }, initProgram: function(t2) {
          var e2, i2;
          return e2 = sigma.utils.loadShader(t2, ["attribute vec2 a_position1;", "attribute vec2 a_position2;", "attribute float a_thickness;", "attribute float a_minus;", "attribute float a_color;", "uniform vec2 u_resolution;", "uniform float u_ratio;", "uniform float u_scale;", "uniform mat3 u_matrix;", "uniform mat2 u_matrixHalfPi;", "uniform mat2 u_matrixHalfPiMinus;", "varying vec4 color;", "void main() {", "vec2 position = a_thickness * u_ratio *", "normalize(a_position2 - a_position1);", "mat2 matrix = a_minus * u_matrixHalfPiMinus +", "(1.0 - a_minus) * u_matrixHalfPi;", "position = matrix * position + a_position1;", "gl_Position = vec4(", "((u_matrix * vec3(position, 1)).xy /", "u_resolution * 2.0 - 1.0) * vec2(1, -1),", "0,", "1", ");", "float c = a_color;", "color.b = mod(c, 256.0); c = floor(c / 256.0);", "color.g = mod(c, 256.0); c = floor(c / 256.0);", "color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;", "color.a = 1.0;", "}"].join("\n"), t2.VERTEX_SHADER), i2 = sigma.utils.loadShader(t2, ["precision mediump float;", "varying vec4 color;", "void main(void) {", "gl_FragColor = color;", "}"].join("\n"), t2.FRAGMENT_SHADER), sigma.utils.loadProgram(t2, [e2, i2]);
        } };
      }();
    }).call(window);
  }, 148: function(t, e) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.webgl.edges"), sigma.webgl.edges.fast = { POINTS: 2, ATTRIBUTES: 3, addEdge: function(t2, e2, i2, r, o2, a, s) {
          t2[a + "size"];
          var n = e2[a + "x"], l = e2[a + "y"], c = i2[a + "x"], g = i2[a + "y"], d = t2.color;
          if (!d)
            switch (s("edgeColor")) {
              case "source":
                d = e2.color || s("defaultNodeColor");
                break;
              case "target":
                d = i2.color || s("defaultNodeColor");
                break;
              default:
                d = s("defaultEdgeColor");
            }
          d = sigma.utils.floatColor(d), r[o2++] = n, r[o2++] = l, r[o2++] = d, r[o2++] = c, r[o2++] = g, r[o2++] = d;
        }, render: function(t2, e2, i2, r) {
          var o2, a = t2.getAttribLocation(e2, "a_color"), s = t2.getAttribLocation(e2, "a_position"), n = t2.getUniformLocation(e2, "u_resolution"), l = t2.getUniformLocation(e2, "u_matrix");
          o2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, o2), t2.bufferData(t2.ARRAY_BUFFER, i2, t2.DYNAMIC_DRAW), t2.uniform2f(n, r.width, r.height), t2.uniformMatrix3fv(l, false, r.matrix), t2.enableVertexAttribArray(s), t2.enableVertexAttribArray(a), t2.vertexAttribPointer(s, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0), t2.vertexAttribPointer(a, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8), t2.lineWidth(3), t2.drawArrays(t2.LINES, r.start || 0, r.count || i2.length / this.ATTRIBUTES);
        }, initProgram: function(t2) {
          var e2, i2;
          return e2 = sigma.utils.loadShader(t2, ["attribute vec2 a_position;", "attribute float a_color;", "uniform vec2 u_resolution;", "uniform mat3 u_matrix;", "varying vec4 color;", "void main() {", "gl_Position = vec4(", "((u_matrix * vec3(a_position, 1)).xy /", "u_resolution * 2.0 - 1.0) * vec2(1, -1),", "0,", "1", ");", "float c = a_color;", "color.b = mod(c, 256.0); c = floor(c / 256.0);", "color.g = mod(c, 256.0); c = floor(c / 256.0);", "color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;", "color.a = 1.0;", "}"].join("\n"), t2.VERTEX_SHADER), i2 = sigma.utils.loadShader(t2, ["precision mediump float;", "varying vec4 color;", "void main(void) {", "gl_FragColor = color;", "}"].join("\n"), t2.FRAGMENT_SHADER), sigma.utils.loadProgram(t2, [e2, i2]);
        } };
      }();
    }).call(window);
  }, 149: function(t, e) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.webgl.edges"), sigma.webgl.edges.arrow = { POINTS: 9, ATTRIBUTES: 11, addEdge: function(t2, e2, i2, r, o2, a, s) {
          var n = (t2[a + "size"] || 1) / 2, l = e2[a + "x"], c = e2[a + "y"], g = i2[a + "x"], d = i2[a + "y"], u = i2[a + "size"], h = t2.color;
          if (!h)
            switch (s("edgeColor")) {
              case "source":
                h = e2.color || s("defaultNodeColor");
                break;
              case "target":
                h = i2.color || s("defaultNodeColor");
                break;
              default:
                h = s("defaultEdgeColor");
            }
          h = sigma.utils.floatColor(h), r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = u, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 1, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = u, r[o2++] = 0, r[o2++] = 1, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = l, r[o2++] = c, r[o2++] = g, r[o2++] = d, r[o2++] = n, r[o2++] = u, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = 0, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 0, r[o2++] = 1, r[o2++] = -1, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 0, r[o2++] = 1, r[o2++] = 0, r[o2++] = h, r[o2++] = g, r[o2++] = d, r[o2++] = l, r[o2++] = c, r[o2++] = n, r[o2++] = u, r[o2++] = 1, r[o2++] = 0, r[o2++] = 1, r[o2++] = 1, r[o2++] = h;
        }, render: function(t2, e2, i2, r) {
          var o2, a = t2.getAttribLocation(e2, "a_pos1"), s = t2.getAttribLocation(e2, "a_pos2"), n = t2.getAttribLocation(e2, "a_thickness"), l = t2.getAttribLocation(e2, "a_tSize"), c = t2.getAttribLocation(e2, "a_delay"), g = t2.getAttribLocation(e2, "a_minus"), d = t2.getAttribLocation(e2, "a_head"), u = t2.getAttribLocation(e2, "a_headPosition"), h = t2.getAttribLocation(e2, "a_color"), m = t2.getUniformLocation(e2, "u_resolution"), f = t2.getUniformLocation(e2, "u_matrix"), A = t2.getUniformLocation(e2, "u_matrixHalfPi"), _ = t2.getUniformLocation(e2, "u_matrixHalfPiMinus"), E = t2.getUniformLocation(e2, "u_ratio"), T = t2.getUniformLocation(e2, "u_nodeRatio"), b = t2.getUniformLocation(e2, "u_arrowHead"), y = t2.getUniformLocation(e2, "u_scale");
          o2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, o2), t2.bufferData(t2.ARRAY_BUFFER, i2, t2.STATIC_DRAW), t2.uniform2f(m, r.width, r.height), t2.uniform1f(E, r.ratio / Math.pow(r.ratio, r.settings("edgesPowRatio"))), t2.uniform1f(T, Math.pow(r.ratio, r.settings("nodesPowRatio")) / r.ratio), t2.uniform1f(b, 5), t2.uniform1f(y, r.scalingRatio), t2.uniformMatrix3fv(f, false, r.matrix), t2.uniformMatrix2fv(A, false, sigma.utils.matrices.rotation(Math.PI / 2, true)), t2.uniformMatrix2fv(_, false, sigma.utils.matrices.rotation(-Math.PI / 2, true)), t2.enableVertexAttribArray(a), t2.enableVertexAttribArray(s), t2.enableVertexAttribArray(n), t2.enableVertexAttribArray(l), t2.enableVertexAttribArray(c), t2.enableVertexAttribArray(g), t2.enableVertexAttribArray(d), t2.enableVertexAttribArray(u), t2.enableVertexAttribArray(h), t2.vertexAttribPointer(a, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0), t2.vertexAttribPointer(s, 2, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8), t2.vertexAttribPointer(n, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 16), t2.vertexAttribPointer(l, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 20), t2.vertexAttribPointer(c, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 24), t2.vertexAttribPointer(g, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 28), t2.vertexAttribPointer(d, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 32), t2.vertexAttribPointer(u, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 36), t2.vertexAttribPointer(h, 1, t2.FLOAT, false, this.ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 40), t2.drawArrays(t2.TRIANGLES, r.start || 0, r.count || i2.length / this.ATTRIBUTES);
        }, initProgram: function(t2) {
          var e2, i2;
          return e2 = sigma.utils.loadShader(t2, ["attribute vec2 a_pos1;", "attribute vec2 a_pos2;", "attribute float a_thickness;", "attribute float a_tSize;", "attribute float a_delay;", "attribute float a_minus;", "attribute float a_head;", "attribute float a_headPosition;", "attribute float a_color;", "uniform vec2 u_resolution;", "uniform float u_ratio;", "uniform float u_nodeRatio;", "uniform float u_arrowHead;", "uniform float u_scale;", "uniform mat3 u_matrix;", "uniform mat2 u_matrixHalfPi;", "uniform mat2 u_matrixHalfPiMinus;", "varying vec4 color;", "void main() {", "vec2 pos = normalize(a_pos2 - a_pos1);", "mat2 matrix = (1.0 - a_head) *", "(", "a_minus * u_matrixHalfPiMinus +", "(1.0 - a_minus) * u_matrixHalfPi", ") + a_head * (", "a_headPosition * u_matrixHalfPiMinus * 0.6 +", "(a_headPosition * a_headPosition - 1.0) * mat2(1.0)", ");", "pos = a_pos1 + (", "(1.0 - a_head) * a_thickness * u_ratio * matrix * pos +", "a_head * u_arrowHead * a_thickness * u_ratio * matrix * pos +", "a_delay * pos * (", "a_tSize / u_nodeRatio +", "u_arrowHead * a_thickness * u_ratio", ")", ");", "gl_Position = vec4(", "((u_matrix * vec3(pos, 1)).xy /", "u_resolution * 2.0 - 1.0) * vec2(1, -1),", "0,", "1", ");", "float c = a_color;", "color.b = mod(c, 256.0); c = floor(c / 256.0);", "color.g = mod(c, 256.0); c = floor(c / 256.0);", "color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;", "color.a = 1.0;", "}"].join("\n"), t2.VERTEX_SHADER), i2 = sigma.utils.loadShader(t2, ["precision mediump float;", "varying vec4 color;", "void main(void) {", "gl_FragColor = color;", "}"].join("\n"), t2.FRAGMENT_SHADER), sigma.utils.loadProgram(t2, [e2, i2]);
        } };
      }();
    }).call(window);
  } });

  // node_modules/react-sigma/sigma/svg.js
  var Sigma14 = function(e) {
    var t = {};
    function s(i2) {
      if (t[i2])
        return t[i2].exports;
      var n = t[i2] = { i: i2, l: false, exports: {} };
      return e[i2].call(n.exports, n, n.exports, s), n.l = true, n.exports;
    }
    return s.m = e, s.c = t, s.d = function(e2, t2, i2) {
      s.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: i2 });
    }, s.r = function(e2) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
    }, s.t = function(e2, t2) {
      if (1 & t2 && (e2 = s(e2)), 8 & t2)
        return e2;
      if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
        return e2;
      var i2 = /* @__PURE__ */ Object.create(null);
      if (s.r(i2), Object.defineProperty(i2, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
        for (var n in e2)
          s.d(i2, n, function(t3) {
            return e2[t3];
          }.bind(null, n));
      return i2;
    }, s.n = function(e2) {
      var t2 = e2 && e2.__esModule ? function() {
        return e2.default;
      } : function() {
        return e2;
      };
      return s.d(t2, "a", t2), t2;
    }, s.o = function(e2, t2) {
      return Object.prototype.hasOwnProperty.call(e2, t2);
    }, s.p = "", s(s.s = 150);
  }({ 150: function(e, t, s) {
    "use strict";
    s.r(t);
    s(151), s(152), s(153), s(154), s(155), s(156), s(157);
  }, 151: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        if ("undefined" == typeof conrad)
          throw "conrad is not declared";
        sigma.utils.pkg("sigma.renderers"), sigma.renderers.svg = function(e3, t2, s, i2) {
          if ("object" != typeof i2)
            throw "sigma.renderers.svg: Wrong arguments.";
          if (!(i2.container instanceof HTMLElement))
            throw "Container not found.";
          var n, r, l, o2, a = this;
          for (sigma.classes.dispatcher.extend(this), this.graph = e3, this.camera = t2, this.domElements = { graph: null, groups: {}, nodes: {}, edges: {}, labels: {}, hovers: {} }, this.measurementCanvas = null, this.options = i2, this.container = this.options.container, this.settings = "object" == typeof i2.settings && i2.settings ? s.embedObjects(i2.settings) : s, this.settings("freeStyle", !!this.options.freeStyle), this.settings("xmlns", "http://www.w3.org/2000/svg"), this.nodesOnScreen = [], this.edgesOnScreen = [], this.options.prefix = "renderer" + sigma.utils.id() + ":", this.initDOM("svg"), this.captors = [], n = 0, r = (l = this.options.captors || [sigma.captors.mouse, sigma.captors.touch]).length; n < r; n++)
            o2 = "function" == typeof l[n] ? l[n] : sigma.captors[l[n]], this.captors.push(new o2(this.domElements.graph, this.camera, this.settings));
          window.addEventListener("resize", function() {
            a.resize();
          }), sigma.misc.bindDOMEvents.call(this, this.domElements.graph), this.bindHovers(this.options.prefix), this.resize(false);
        }, sigma.renderers.svg.prototype.render = function(t2) {
          t2 = t2 || {};
          var s, i2, n, r, l, o2, a, d, u, h = {}, c = this.graph, g = this.graph.nodes, m = (this.options.prefix, this.settings(t2, "drawEdges")), f = this.settings(t2, "drawNodes"), p = (this.settings(t2, "drawLabels"), this.settings.embedObjects(t2, { prefix: this.options.prefix, forceLabels: this.options.forceLabels }));
          for (this.settings(t2, "hideEdgesOnMove") && (this.camera.isAnimated || this.camera.isMoving) && (m = false), this.camera.applyView(e2, this.options.prefix, { width: this.width, height: this.height }), this.hideDOMElements(this.domElements.nodes), this.hideDOMElements(this.domElements.edges), this.hideDOMElements(this.domElements.labels), this.edgesOnScreen = [], this.nodesOnScreen = this.camera.quadtree.area(this.camera.getRectangle(this.width, this.height)), i2 = 0, r = (s = this.nodesOnScreen).length; i2 < r; i2++)
            h[s[i2].id] = s[i2];
          for (i2 = 0, r = (s = c.edges()).length; i2 < r; i2++)
            !h[(l = s[i2]).source] && !h[l.target] || l.hidden || g(l.source).hidden || g(l.target).hidden || this.edgesOnScreen.push(l);
          if (d = sigma.svg.nodes, u = sigma.svg.labels, f)
            for (i2 = 0, r = (s = this.nodesOnScreen).length; i2 < r; i2++)
              s[i2].hidden || this.domElements.nodes[s[i2].id] || (n = (d[s[i2].type] || d.def).create(s[i2], p), this.domElements.nodes[s[i2].id] = n, this.domElements.groups.nodes.appendChild(n), n = (u[s[i2].type] || u.def).create(s[i2], p), this.domElements.labels[s[i2].id] = n, this.domElements.groups.labels.appendChild(n));
          if (f)
            for (i2 = 0, r = (s = this.nodesOnScreen).length; i2 < r; i2++)
              s[i2].hidden || ((d[s[i2].type] || d.def).update(s[i2], this.domElements.nodes[s[i2].id], p), (u[s[i2].type] || u.def).update(s[i2], this.domElements.labels[s[i2].id], p));
          if (d = sigma.svg.edges, m)
            for (i2 = 0, r = (s = this.edgesOnScreen).length; i2 < r; i2++)
              this.domElements.edges[s[i2].id] || (o2 = g(s[i2].source), a = g(s[i2].target), n = (d[s[i2].type] || d.def).create(s[i2], o2, a, p), this.domElements.edges[s[i2].id] = n, this.domElements.groups.edges.appendChild(n));
          if (m)
            for (i2 = 0, r = (s = this.edgesOnScreen).length; i2 < r; i2++)
              o2 = g(s[i2].source), a = g(s[i2].target), (d[s[i2].type] || d.def).update(s[i2], this.domElements.edges[s[i2].id], o2, a, p);
          return this.dispatchEvent("render"), this;
        }, sigma.renderers.svg.prototype.initDOM = function(e3) {
          var t2, s, i2, n = document.createElementNS(this.settings("xmlns"), e3), r = this.settings("classPrefix");
          n.style.position = "absolute", n.setAttribute("class", r + "-svg"), n.setAttribute("xmlns", this.settings("xmlns")), n.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n.setAttribute("version", "1.1");
          var l = document.createElement("canvas");
          l.setAttribute("class", r + "-measurement-canvas"), this.domElements.graph = this.container.appendChild(n);
          var o2 = ["edges", "nodes", "labels", "hovers"];
          for (i2 = 0, s = o2.length; i2 < s; i2++)
            (t2 = document.createElementNS(this.settings("xmlns"), "g")).setAttributeNS(null, "id", r + "-group-" + o2[i2]), t2.setAttributeNS(null, "class", r + "-group"), this.domElements.groups[o2[i2]] = this.domElements.graph.appendChild(t2);
          this.container.appendChild(l), this.measurementCanvas = l.getContext("2d");
        }, sigma.renderers.svg.prototype.hideDOMElements = function(e3) {
          var t2, s;
          for (s in e3)
            t2 = e3[s], sigma.svg.utils.hide(t2);
          return this;
        }, sigma.renderers.svg.prototype.bindHovers = function(e3) {
          var t2, s = sigma.svg.hovers, i2 = this;
          this.bind("overNode", function(n) {
            var r = n.data.node, l = i2.settings.embedObjects({ prefix: e3 });
            if (l("enableHovering")) {
              var o2 = (s[r.type] || s.def).create(r, i2.domElements.nodes[r.id], i2.measurementCanvas, l);
              i2.domElements.hovers[r.id] = o2, i2.domElements.groups.hovers.appendChild(o2), t2 = r;
            }
          }), this.bind("outNode", function(s2) {
            var n = s2.data.node;
            i2.settings.embedObjects({ prefix: e3 })("enableHovering") && (i2.domElements.groups.hovers.removeChild(i2.domElements.hovers[n.id]), t2 = null, delete i2.domElements.hovers[n.id], i2.domElements.groups.nodes.appendChild(i2.domElements.nodes[n.id]));
          }), this.bind("render", function() {
            if (t2) {
              var n = i2.settings.embedObjects({ prefix: e3 });
              i2.domElements.groups.hovers.removeChild(i2.domElements.hovers[t2.id]), delete i2.domElements.hovers[t2.id];
              var r = (s[t2.type] || s.def).create(t2, i2.domElements.nodes[t2.id], i2.measurementCanvas, n);
              i2.domElements.hovers[t2.id] = r, i2.domElements.groups.hovers.appendChild(r);
            }
          });
        }, sigma.renderers.svg.prototype.resize = function(t2, s) {
          var i2 = this.width, n = this.height;
          return t2 !== e2 && s !== e2 ? (this.width = t2, this.height = s) : (this.width = this.container.offsetWidth, this.height = this.container.offsetHeight, t2 = this.width, s = this.height), i2 === this.width && n === this.height || (this.domElements.graph.style.width = t2 + "px", this.domElements.graph.style.height = s + "px", "svg" === this.domElements.graph.tagName.toLowerCase() && (this.domElements.graph.setAttribute("width", 1 * t2), this.domElements.graph.setAttribute("height", 1 * s))), this;
        }, sigma.utils.pkg("sigma.svg.nodes"), sigma.utils.pkg("sigma.svg.edges"), sigma.utils.pkg("sigma.svg.labels");
      }).call(this);
    }).call(window);
  }, 152: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.svg.utils"), sigma.svg.utils = { show: function(e2) {
          return e2.style.display = "", this;
        }, hide: function(e2) {
          return e2.style.display = "none", this;
        } };
      }();
    }).call(window);
  }, 153: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.svg.nodes"), sigma.svg.nodes.def = { create: function(e2, t2) {
          t2("prefix");
          var s = document.createElementNS(t2("xmlns"), "circle");
          return s.setAttributeNS(null, "data-node-id", e2.id), s.setAttributeNS(null, "class", t2("classPrefix") + "-node"), s.setAttributeNS(null, "fill", e2.color || t2("defaultNodeColor")), s;
        }, update: function(e2, t2, s) {
          var i2 = s("prefix") || "";
          return t2.setAttributeNS(null, "cx", e2[i2 + "x"]), t2.setAttributeNS(null, "cy", e2[i2 + "y"]), t2.setAttributeNS(null, "r", e2[i2 + "size"]), s("freeStyle") || t2.setAttributeNS(null, "fill", e2.color || s("defaultNodeColor")), t2.style.display = "", this;
        } };
      }();
    }).call(window);
  }, 154: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.svg.edges"), sigma.svg.edges.def = { create: function(e2, t2, s, i2) {
          var n = e2.color, r = (i2("prefix"), i2("edgeColor")), l = i2("defaultNodeColor"), o2 = i2("defaultEdgeColor");
          if (!n)
            switch (r) {
              case "source":
                n = t2.color || l;
                break;
              case "target":
                n = s.color || l;
                break;
              default:
                n = o2;
            }
          var a = document.createElementNS(i2("xmlns"), "line");
          return a.setAttributeNS(null, "data-edge-id", e2.id), a.setAttributeNS(null, "class", i2("classPrefix") + "-edge"), a.setAttributeNS(null, "stroke", n), a;
        }, update: function(e2, t2, s, i2, n) {
          var r = n("prefix") || "";
          return t2.setAttributeNS(null, "stroke-width", e2[r + "size"] || 1), t2.setAttributeNS(null, "x1", s[r + "x"]), t2.setAttributeNS(null, "y1", s[r + "y"]), t2.setAttributeNS(null, "x2", i2[r + "x"]), t2.setAttributeNS(null, "y2", i2[r + "y"]), t2.style.display = "", this;
        } };
      }();
    }).call(window);
  }, 155: function(e, t) {
    (function() {
      !function() {
        "use strict";
        sigma.utils.pkg("sigma.svg.edges"), sigma.svg.edges.curve = { create: function(e2, t2, s, i2) {
          var n = e2.color, r = (i2("prefix"), i2("edgeColor")), l = i2("defaultNodeColor"), o2 = i2("defaultEdgeColor");
          if (!n)
            switch (r) {
              case "source":
                n = t2.color || l;
                break;
              case "target":
                n = s.color || l;
                break;
              default:
                n = o2;
            }
          var a = document.createElementNS(i2("xmlns"), "path");
          return a.setAttributeNS(null, "data-edge-id", e2.id), a.setAttributeNS(null, "class", i2("classPrefix") + "-edge"), a.setAttributeNS(null, "stroke", n), a;
        }, update: function(e2, t2, s, i2, n) {
          var r = n("prefix") || "";
          t2.setAttributeNS(null, "stroke-width", e2[r + "size"] || 1);
          var l = (s[r + "x"] + i2[r + "x"]) / 2 + (i2[r + "y"] - s[r + "y"]) / 4, o2 = (s[r + "y"] + i2[r + "y"]) / 2 + (s[r + "x"] - i2[r + "x"]) / 4, a = "M" + s[r + "x"] + "," + s[r + "y"] + " Q" + l + "," + o2 + " " + i2[r + "x"] + "," + i2[r + "y"];
          return t2.setAttributeNS(null, "d", a), t2.setAttributeNS(null, "fill", "none"), t2.style.display = "", this;
        } };
      }();
    }).call(window);
  }, 156: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.svg.labels"), sigma.svg.labels.def = { create: function(e3, t2) {
          var s = e3[(t2("prefix") || "") + "size"], i2 = document.createElementNS(t2("xmlns"), "text"), n = "fixed" === t2("labelSize") ? t2("defaultLabelSize") : t2("labelSizeRatio") * s, r = "node" === t2("labelColor") ? e3.color || t2("defaultNodeColor") : t2("defaultLabelColor");
          return i2.setAttributeNS(null, "data-label-target", e3.id), i2.setAttributeNS(null, "class", t2("classPrefix") + "-label"), i2.setAttributeNS(null, "font-size", n), i2.setAttributeNS(null, "font-family", t2("font")), i2.setAttributeNS(null, "fill", r), i2.innerHTML = e3.label, i2.textContent = e3.label, i2;
        }, update: function(e3, t2, s) {
          var i2 = s("prefix") || "", n = e3[i2 + "size"], r = "fixed" === s("labelSize") ? s("defaultLabelSize") : s("labelSizeRatio") * n;
          if ((s("forceLabels") || !(n < s("labelThreshold"))) && "string" == typeof e3.label)
            return t2.setAttributeNS(null, "x", Math.round(e3[i2 + "x"] + n + 3)), t2.setAttributeNS(null, "y", Math.round(e3[i2 + "y"] + r / 3)), t2.style.display = "", this;
        } };
      }).call(this);
    }).call(window);
  }, 157: function(e, t) {
    (function() {
      (function(e2) {
        "use strict";
        if ("undefined" == typeof sigma)
          throw "sigma is not declared";
        sigma.utils.pkg("sigma.svg.hovers"), sigma.svg.hovers.def = { create: function(e3, t2, s, i2) {
          i2("hoverFontStyle") || i2("fontStyle");
          var n, r, l, o2 = i2("prefix") || "", a = e3[o2 + "size"], d = "fixed" === i2("labelSize") ? i2("defaultLabelSize") : i2("labelSizeRatio") * a, u = "node" === i2("labelHoverColor") ? e3.color || i2("defaultNodeColor") : i2("defaultLabelHoverColor"), h = document.createElementNS(i2("xmlns"), "g"), c = document.createElementNS(i2("xmlns"), "rect"), g = document.createElementNS(i2("xmlns"), "circle"), m = document.createElementNS(i2("xmlns"), "text");
          return h.setAttributeNS(null, "class", i2("classPrefix") + "-hover"), h.setAttributeNS(null, "data-node-id", e3.id), "string" == typeof e3.label && (m.innerHTML = e3.label, m.textContent = e3.label, m.setAttributeNS(null, "class", i2("classPrefix") + "-hover-label"), m.setAttributeNS(null, "font-size", d), m.setAttributeNS(null, "font-family", i2("font")), m.setAttributeNS(null, "fill", u), m.setAttributeNS(null, "x", Math.round(e3[o2 + "x"] + a + 3)), m.setAttributeNS(null, "y", Math.round(e3[o2 + "y"] + d / 3)), Math.round(e3[o2 + "x"] - d / 2 - 2), Math.round(e3[o2 + "y"] - d / 2 - 2), n = Math.round(s.measureText(e3.label).width + d / 2 + a + 9), r = Math.round(d + 4), l = Math.round(d / 2 + 2), g.setAttributeNS(null, "class", i2("classPrefix") + "-hover-area"), g.setAttributeNS(null, "fill", "#fff"), g.setAttributeNS(null, "cx", e3[o2 + "x"]), g.setAttributeNS(null, "cy", e3[o2 + "y"]), g.setAttributeNS(null, "r", l), c.setAttributeNS(null, "class", i2("classPrefix") + "-hover-area"), c.setAttributeNS(null, "fill", "#fff"), c.setAttributeNS(null, "x", e3[o2 + "x"] + l / 4), c.setAttributeNS(null, "y", e3[o2 + "y"] - l), c.setAttributeNS(null, "width", n), c.setAttributeNS(null, "height", r)), h.appendChild(g), h.appendChild(c), h.appendChild(m), h.appendChild(t2), h;
        } };
      }).call(this);
    }).call(window);
  } });

  // src/Features.ts
  var import_graphology_umd = __toESM(require_graphology_umd(), 1);
  var { DirectedGraph, UndirectedGraph } = import_graphology_umd.default;
  var TesterantoFeatures = class {
    constructor(features, graphs) {
      this.features = features;
      this.graphs = graphs;
    }
    networks() {
      return [
        ...this.graphs.undirected.values(),
        ...this.graphs.directed.values(),
        ...this.graphs.dags.values()
      ];
    }
    toObj() {
      return {
        features: Object.entries(this.features).map(([name, feature]) => {
          return {
            ...feature,
            inNetworks: this.networks().filter((network) => {
              return network.graph.hasNode(feature.name);
            }).map((network) => {
              return {
                network: network.name,
                neighbors: network.graph.neighbors(feature.name)
              };
            })
          };
        }),
        networks: this.networks().map((network) => {
          return {
            ...network
          };
        })
      };
    }
  };

  // src/Report.tsx
  var graphToIGraphData = (g) => {
    return {
      nodes: g.nodes().map((n) => {
        return {
          id: n,
          label: n
        };
      }),
      edges: g.mapEdges((id, attributes, source, target) => {
        return {
          id,
          label: id,
          source,
          target
        };
      })
    };
  };
  document.addEventListener("DOMContentLoaded", function() {
    const elem = document.getElementById("root");
    if (elem) {
      import_client.default.createRoot(elem).render(import_react46.default.createElement(Report, {}));
    }
  });
  var Report = () => {
    const [state, setState] = (0, import_react46.useState)({
      tests: [],
      buildDir: "",
      features: new TesterantoFeatures({}, {
        undirected: [],
        directed: [],
        dags: []
      }),
      results: {}
    });
    const [tests, setTests] = (0, import_react46.useState)({
      tests: [],
      buildDir: ""
    });
    const [features, setFeatures] = (0, import_react46.useState)(
      new TesterantoFeatures({}, {
        undirected: [],
        directed: [],
        dags: []
      })
    );
    const [results, setResults] = (0, import_react46.useState)(
      {}
    );
    const importState = async () => {
      const features2 = await import("features.test.js");
      const config = await (await fetch("./testeranto.json")).json();
      const results2 = await Promise.all(config.tests.map((test) => {
        return new Promise(async (res, rej) => {
          const src = test[0];
          const runtime = test[1];
          const s = [tests.buildDir, runtime].concat(src.split(".").slice(0, -1).join(".")).join("/");
          const exitcode = await (await fetch(config.buildDir + "/" + s + "/exitcode")).text();
          const log = await (await fetch(config.buildDir + "/" + s + "/log.txt")).text();
          const testresults = await (await fetch(config.buildDir + "/" + s + "/tests.json")).json();
          const manifest = await (await fetch(config.buildDir + "/" + s + "/manifest.json")).json();
          res({ src, exitcode, log, testresults, manifest });
        });
      }));
      console.log("results", results2);
      setState({ tests: config.tests, results: results2, features: features2, buildDir: config.buildDir });
    };
    const importFeatures = async () => {
      const module2 = await import("features.test.js");
      setFeatures(module2.default);
    };
    const importTests = async () => {
      const x = await fetch("./testeranto.json");
      const y = await x.json();
      setTests(y);
    };
    (0, import_react46.useEffect)(() => {
      importState();
    }, []);
    (0, import_react46.useEffect)(() => {
      importFeatures();
    }, []);
    (0, import_react46.useEffect)(() => {
      importTests();
    }, []);
    (0, import_react46.useEffect)(() => {
      const collateResults = async () => {
        console.log("collating", tests, features);
        const r = tests.tests.reduce(async (p, test) => {
          const src = test[0];
          const runtime = test[1];
          console.log(runtime);
          const s = [tests.buildDir, runtime].concat(src.split(".").slice(0, -1).join(".")).join("/");
          const exitcode = await (await fetch(s + "/exitcode")).text();
          const log = await (await fetch(s + "/log.txt")).text();
          const testresults = await (await fetch(s + "/tests.json")).text();
          p[src] = { exitcode, log, testresults };
        }, {});
        setResults(r);
      };
      collateResults();
    }, []);
    console.log("state.results", state.results);
    return /* @__PURE__ */ import_react46.default.createElement("div", null, /* @__PURE__ */ import_react46.default.createElement("style", null, `
pre, code, p {
  max-width: 30rem;
  text-wrap: auto;
}
footer {
  background-color: lightgray;
  margin: 0.5rem;
  padding: 0.5rem;
  position: fixed;
  bottom: 0;
  right: 0;
}
          `), features && tests && /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "config" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "config", title: "config" }, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(state, null, 2))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "results", title: "results" }, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(state.results, null, 2))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "features", title: "features" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Container, { id: "left-tabs-example5", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, Object.keys(features.features).map((featureKey, ndx) => /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Item, { key: ndx }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Link, { eventKey: `feature-${ndx}` }, featureKey))))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 6 }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, Object.keys(features.features).map(
      (featureKey, ndx) => {
        const feature = features[featureKey];
        return /* @__PURE__ */ import_react46.default.createElement(Tab_default.Pane, { eventKey: `feature-${ndx}`, key: ndx }, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(feature, null, 2)));
      }
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "feature.networks" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.networks", title: "networks" }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "dag" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "dag", title: "DAG" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.dags, null, 2)))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "directed", title: "Directed" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.directed, null, 2)))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "undirected", title: "Undirected" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.undirected, null, 2)))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.tests", title: "tests" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(tests.tests, null, 2)))))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "networks", title: "networks" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Container, { id: "left-tabs-example88", defaultActiveKey: `dag` }, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "dag" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "dag", title: "DAG" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, features.graphs.dags.map(
      (g, ndx2) => /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Item, { key: ndx2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Link, { eventKey: `networks-dags-${ndx2}` }, g.name))
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 6 }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, features.graphs.dags[0] && /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null, /* @__PURE__ */ import_react46.default.createElement(Sigma_default, { graph: graphToIGraphData(features.graphs.dags[0].graph), settings: { drawEdges: true, clone: false } }, /* @__PURE__ */ import_react46.default.createElement(RelativeSize_default, { initialSize: 25 }), /* @__PURE__ */ import_react46.default.createElement(RandomizeNodePositions_default, null)), /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.dags[0].graph, null, 2))))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "networks.features" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "networks.features", title: "features" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(features, null, 2))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.tests", title: "tests" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(tests.tests, null, 2)))))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "directed", title: "Directed" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, features.graphs.directed.map(
      (g, ndx2) => /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Item, { key: ndx2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Link, { eventKey: `networks-directed-${ndx2}` }, g.name))
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 6 }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, features.graphs.directed[0] && /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null, /* @__PURE__ */ import_react46.default.createElement(Sigma_default, { graph: graphToIGraphData(features.graphs.directed[0].graph), settings: { drawEdges: true, clone: false } }, /* @__PURE__ */ import_react46.default.createElement(RelativeSize_default, { initialSize: 25 }), /* @__PURE__ */ import_react46.default.createElement(RandomizeNodePositions_default, null)), /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.directed[0].graph, null, 2))))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "networks.features" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "networks.features", title: "features" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(features, null, 2))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.tests", title: "tests" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(tests.tests, null, 2)))))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "undirected", title: "Undirected" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, features.graphs.undirected.map(
      (g, ndx2) => /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Item, { key: ndx2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Link, { eventKey: `networks-undirected-${ndx2}` }, g.name))
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 6 }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, features.graphs.undirected[0] && /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null, /* @__PURE__ */ import_react46.default.createElement(Sigma_default, { graph: graphToIGraphData(features.graphs.undirected[0].graph), settings: { drawEdges: true, clone: false } }, /* @__PURE__ */ import_react46.default.createElement(RelativeSize_default, { initialSize: 25 }), /* @__PURE__ */ import_react46.default.createElement(RandomizeNodePositions_default, null)), /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.undirected[0].graph, null, 2))))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "networks.features" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "networks.features", title: "features" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(features, null, 2))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.tests", title: "tests" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(tests.tests, null, 2)))))))))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "tests", title: "tests" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Container, { id: "left-tabs-example5", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react46.default.createElement(Row_default, null, /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 2 }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, tests.tests.map(
      (t, ndx) => /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Item, { key: ndx }, /* @__PURE__ */ import_react46.default.createElement(Nav_default2.Link, { eventKey: `test-${ndx}` }, t[0], " - ", t[1]))
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 6 }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, tests.tests.map(
      (t, ndx) => /* @__PURE__ */ import_react46.default.createElement(Tab_default.Pane, { eventKey: `test-${ndx}` }, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(Object.entries(state.results).filter(([k, v]) => {
        console.log(v.src, tests.tests[ndx][0]);
        return v.src === tests.tests[ndx][0];
      }), null, 2)))
    ))), /* @__PURE__ */ import_react46.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "feature.networks" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "feature.networks", title: "networks" }, /* @__PURE__ */ import_react46.default.createElement(Tabs_default2, { defaultActiveKey: "dag" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "dag", title: "DAG" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.dags, null, 2)))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "directed", title: "Directed" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.directed, null, 2)))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "undirected", title: "Undirected" }, /* @__PURE__ */ import_react46.default.createElement(Tab_default.Content, null, /* @__PURE__ */ import_react46.default.createElement("pre", null, JSON.stringify(features.graphs.undirected, null, 2)))))), /* @__PURE__ */ import_react46.default.createElement(Tab_default, { eventKey: "tests.features", title: "features" }, /* @__PURE__ */ import_react46.default.createElement("pre", { id: "theProps" }, JSON.stringify(features, null, 2))))))))), /* @__PURE__ */ import_react46.default.createElement("footer", null, "made with \u2764\uFE0F and ", /* @__PURE__ */ import_react46.default.createElement("a", { href: "https://adamwong246.github.io/testeranto/" }, "testeranto ")));
  };
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
