"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context4, updater) {
            this.props = props;
            this.context = context4;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context4, updater) {
            this.props = props;
            this.context = context4;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE2:
                return "Fragment";
              case REACT_PORTAL_TYPE2:
                return "Portal";
              case REACT_PROFILER_TYPE2:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE2:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE2:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE2:
                  var context4 = type;
                  return getContextName(context4) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE2:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE2:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref2, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE2,
              // Built-in properties that belong on the element
              type,
              key,
              ref: ref2,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement4(type, config, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref2 = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref2 = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref2) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref2) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref2, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement7(element, config, children2) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref2 = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref2 = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref2, self2, source, owner, props);
          }
          function isValidElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE2:
                    case REACT_PORTAL_TYPE2:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement3(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children2)) {
              for (var i = 0; i < children2.length; i++) {
                child = children2[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children2);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func, context4) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children2, result, "", "", function(child) {
              return func.call(context4, child, count++);
            });
            return result;
          }
          function countChildren(children2) {
            var n = 0;
            mapChildren(children2, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children2) {
            return mapChildren(children2, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement3(children2)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children2;
          }
          function createContext17(defaultValue) {
            var context4 = {
              $$typeof: REACT_CONTEXT_TYPE2,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context4.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context4
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer2 = {
                $$typeof: REACT_CONTEXT_TYPE2,
                _context: context4
              };
              Object.defineProperties(Consumer2, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context4.Provider;
                  },
                  set: function(_Provider) {
                    context4.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context4._currentValue;
                  },
                  set: function(_currentValue) {
                    context4._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context4._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context4._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context4._threadCount;
                  },
                  set: function(_threadCount) {
                    context4._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context4.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context4.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context4.Consumer = Consumer2;
            }
            {
              context4._currentRenderer = null;
              context4._currentRenderer2 = null;
            }
            return context4;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE2,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes5;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes5;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes5 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef64(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE2) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE2,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE2 || type === REACT_PROFILER_TYPE2 || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE2 || type === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE2 || type.$$typeof === REACT_FORWARD_REF_TYPE2 || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo4(type, compare) {
            {
              if (!isValidElementType2(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE2,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext30(Context2) {
            var dispatcher = resolveDispatcher();
            {
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2);
          }
          function useState23(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer2, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer2, initialArg, init2);
          }
          function useRef26(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect27(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create3, deps);
          }
          function useInsertionEffect(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create3, deps);
          }
          function useLayoutEffect8(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create3, deps);
          }
          function useCallback24(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo20(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create3, deps);
          }
          function useImperativeHandle2(ref2, create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref2, create3, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match && match[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn2);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE2:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE2:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE2:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE2:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement3(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement3(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement3(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes5;
              if (typeof type === "function") {
                propTypes5 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE2)) {
                propTypes5 = type.propTypes;
              } else {
                return;
              }
              if (propTypes5) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes5, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement4.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE2) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children2) {
            var newElement = cloneElement7.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children3 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children3;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE2;
          exports.Profiler = REACT_PROFILER_TYPE2;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE2;
          exports.Suspense = REACT_SUSPENSE_TYPE2;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext17;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef2;
          exports.forwardRef = forwardRef64;
          exports.isValidElement = isValidElement3;
          exports.lazy = lazy;
          exports.memo = memo4;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback24;
          exports.useContext = useContext30;
          exports.useDebugValue = useDebugValue3;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect27;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect8;
          exports.useMemo = useMemo20;
          exports.useReducer = useReducer2;
          exports.useRef = useRef26;
          exports.useState = useState23;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition2;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React89 = require_react();
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React89.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE2 || type === REACT_PROFILER_TYPE2 || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE2 || type === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE2 || type.$$typeof === REACT_FORWARD_REF_TYPE2 || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE2:
                return "Fragment";
              case REACT_PORTAL_TYPE2:
                return "Portal";
              case REACT_PROFILER_TYPE2:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE2:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE2:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE2:
                  var context4 = type;
                  return getContextName(context4) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE2:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE2:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match && match[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn2);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE2:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE2:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE2:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE2:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref2, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE2,
              // Built-in properties that belong on the element
              type,
              key,
              ref: ref2,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref2 = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref2 = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref2) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref2) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref2, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement3(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement3(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement3(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement3(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes5;
              if (typeof type === "function") {
                propTypes5 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE2)) {
                propTypes5 = type.propTypes;
              } else {
                return;
              }
              if (propTypes5) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes5, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType2(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children2 = props.children;
                if (children2 !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children2)) {
                      for (var i = 0; i < children2.length; i++) {
                        validateChildKeys(children2[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children2);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children2, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE2) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx2 = jsxWithValidationDynamic;
          var jsxs2 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE2;
          exports.jsx = jsx2;
          exports.jsxs = jsxs2;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
      "use strict";
      (function() {
        function is2(x, y) {
          return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
        }
        function useSyncExternalStore$2(subscribe, getSnapshot) {
          didWarnOld18Alpha || void 0 === React89.startTransition || (didWarnOld18Alpha = true, console.error(
            "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
          ));
          var value = getSnapshot();
          if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();
            objectIs(value, cachedValue) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          cachedValue = useState23({
            inst: { value, getSnapshot }
          });
          var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
          useLayoutEffect8(
            function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            },
            [subscribe, value, getSnapshot]
          );
          useEffect27(
            function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              return subscribe(function() {
                checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              });
            },
            [subscribe]
          );
          useDebugValue3(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot) {
          return getSnapshot();
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React89 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useState23 = React89.useState, useEffect27 = React89.useEffect, useLayoutEffect8 = React89.useLayoutEffect, useDebugValue3 = React89.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
        exports.useSyncExternalStore = void 0 !== React89.useSyncExternalStore ? React89.useSyncExternalStore : shim;
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
  var require_with_selector_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
      "use strict";
      (function() {
        function is2(x, y) {
          return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React89 = require_react(), shim = require_shim(), objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore2 = shim.useSyncExternalStore, useRef26 = React89.useRef, useEffect27 = React89.useEffect, useMemo20 = React89.useMemo, useDebugValue3 = React89.useDebugValue;
        exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
          var instRef = useRef26(null);
          if (null === instRef.current) {
            var inst = { hasValue: false, value: null };
            instRef.current = inst;
          } else
            inst = instRef.current;
          instRef = useMemo20(
            function() {
              function memoizedSelector(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  nextSnapshot = selector(nextSnapshot);
                  if (void 0 !== isEqual2 && inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual2(currentSelection, nextSnapshot))
                      return memoizedSelection = currentSelection;
                  }
                  return memoizedSelection = nextSnapshot;
                }
                currentSelection = memoizedSelection;
                if (objectIs(memoizedSnapshot, nextSnapshot))
                  return currentSelection;
                var nextSelection = selector(nextSnapshot);
                if (void 0 !== isEqual2 && isEqual2(currentSelection, nextSelection))
                  return memoizedSnapshot = nextSnapshot, currentSelection;
                memoizedSnapshot = nextSnapshot;
                return memoizedSelection = nextSelection;
              }
              var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
              return [
                function() {
                  return memoizedSelector(getSnapshot());
                },
                null === maybeGetServerSnapshot ? void 0 : function() {
                  return memoizedSelector(maybeGetServerSnapshot());
                }
              ];
            },
            [getSnapshot, getServerSnapshot, selector, isEqual2]
          );
          var value = useSyncExternalStore2(subscribe, instRef[0], instRef[1]);
          useEffect27(
            function() {
              inst.hasValue = true;
              inst.value = value;
            },
            [value]
          );
          useDebugValue3(value);
          return value;
        };
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_with_selector_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index2 = i;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index2 = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare(left2, node) < 0) {
                if (rightIndex < length && compare(right2, left2) < 0) {
                  heap[index2] = right2;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left2;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right2, node) < 0) {
                heap[index2] = right2;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer2 = peek(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop(timerQueue);
              } else if (timer2.startTime <= currentTime) {
                pop(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push(taskQueue, timer2);
              } else {
                return;
              }
              timer2 = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout3;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout3 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout3 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout3 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout3 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout3 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout3;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React89 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React89.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix4 = name.toLowerCase().slice(0, 5);
                  return prefix4 !== "data-" && prefix4 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
          var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
          var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match && match[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn2);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE2:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE2:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE2:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE2:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE2:
                return "Fragment";
              case REACT_PORTAL_TYPE2:
                return "Portal";
              case REACT_PROFILER_TYPE2:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE2:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE2:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE2:
                  var context4 = type;
                  return getContextName(context4) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE2:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE2:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE2: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context4 = type;
                return getContextName$1(context4) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef2:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE2) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set4.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString2(value);
                }
              } else if (node.value !== toString2(value)) {
                node.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value)) {
                node.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React89.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected2 = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected2) {
                  options2[_i].selected = selected2;
                }
                if (selected2 && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue = props.defaultValue;
              if (children2 != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children2)) {
                    if (children2.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children2 = children2[0];
                  }
                  defaultValue = children2;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode2 = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode2.firstChild) {
                  node.appendChild(svgNode2.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix4, key) {
            return prefix4 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix4) {
              isUnitlessNumber[prefixKey(prefix4, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue2 = styles2[styleName];
                if (styleValue2 != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue2, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style6 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue2 = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style6.setProperty(styleName, styleValue2);
              } else {
                style6[styleName] = styleValue2;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl2 = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl2();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a, b) {
            if (isInsideEventHandler) {
              return fn2(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl2 = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context4, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context4, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context4, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context4, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func, context4, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context4, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children2);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log2(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start4;
            var startValue = startText;
            var startLength = startValue.length;
            var end3;
            var endValue = getText();
            var endLength = endValue.length;
            for (start4 = 0; start4 < startLength; start4++) {
              if (startValue[start4] !== endValue[start4]) {
                break;
              }
            }
            var minEnd = startLength - start4;
            for (end3 = 1; end3 <= minEnd; end3++) {
              if (startValue[startLength - end3] !== endValue[endLength - end3]) {
                break;
              }
            }
            var sliceTail = end3 > 1 ? 1 - end3 : void 0;
            fallbackText = endValue.slice(start4, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement2 = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement2 = target;
            activeElementInst = targetInst;
            activeElement2.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement2) {
              return;
            }
            activeElement2.detachEvent("onpropertychange", handlePropertyChange);
            activeElement2 = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win2 : getNodeFromInstance(from);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter2 = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter2 = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter2, from, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset4) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset4 && nodeEnd >= offset4) {
                  return {
                    node,
                    offset: offset4 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win2 = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection2 = win2.getSelection && win2.getSelection();
            if (!selection2 || selection2.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start4 = -1;
            var end3 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start4 = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end3 = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start4 = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end3 = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start4 === -1 || end3 === -1) {
              return null;
            }
            return {
              start: start4,
              end: end3
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection2 = win2.getSelection();
            var length = node.textContent.length;
            var start4 = Math.min(offsets.start, length);
            var end3 = offsets.end === void 0 ? start4 : Math.min(offsets.end, length);
            if (!selection2.extend && start4 > end3) {
              var temp = end3;
              end3 = start4;
              start4 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start4);
            var endMarker = getNodeForCharacterOffset(node, end3);
            if (startMarker && endMarker) {
              if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection2.removeAllRanges();
              if (start4 > end3) {
                selection2.addRange(range);
                selection2.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection2.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection2;
            if ("selectionStart" in input) {
              selection2 = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection2 = getOffsets(input);
            }
            return selection2 || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start4 = offsets.start;
            var end3 = offsets.end;
            if (end3 === void 0) {
              end3 = start4;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start4;
              input.selectionEnd = Math.min(end3, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection2 = win2.getSelection();
              return {
                anchorNode: selection2.anchorNode,
                anchorOffset: selection2.anchorOffset,
                focusNode: selection2.focusNode,
                focusOffset: selection2.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style5 = {};
          if (canUseDOM2) {
            style5 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style5) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop9() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop9;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement4(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement4(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style6 = instance.style;
            if (typeof style6.setProperty === "function") {
              style6.setProperty("display", "none", "important");
            } else {
              style6.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context4 = {};
              for (var key in contextTypes) {
                context4[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context4, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context4);
              }
              return context4;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context4, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context4, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id2.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id2 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id2;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id2) {
            return 1 << getBitLength(id2) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array2 = [];
              set4.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref2 = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref2._stringRef = stringRef;
                return ref2;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE2) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE2: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE2: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE2: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE2: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE2: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE2:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE2:
                  case REACT_PORTAL_TYPE2:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE2:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE2) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE2) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE2 && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE2:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE2:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE2:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context4, nextValue) {
            {
              push(valueCursor, context4._currentValue, providerFiber);
              context4._currentValue = nextValue;
              {
                if (context4._currentRenderer !== void 0 && context4._currentRenderer !== null && context4._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context4._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context4, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context4._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context4, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context4, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context4, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context4) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update2 = createUpdate(NoTimestamp, lane);
                      update2.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update2.next = update2;
                        } else {
                          update2.next = pending.next;
                          pending.next = update2;
                        }
                        sharedQueue.pending = update2;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context4) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context4._currentValue;
            if (lastFullyObservedContext === context4)
              ;
            else {
              var contextItem = {
                context: context4,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update2.next = update2;
              } else {
                update2.next = pending.next;
                pending.next = update2;
              }
              sharedQueue.pending = update2;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update2, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update2.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context4) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context4);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect3 = effects[i];
                var callback = effect3.callback;
                if (callback !== null) {
                  effect3.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context4 = requiredContext(contextStackCursor$1.current);
            return context4;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context4 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context4, fiber.type);
            if (context4 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion2 = mutableSource._getVersion;
            var version3 = getVersion2(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version3];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version3);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer2, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init2 !== void 0) {
              initialState = init2(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer2,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer2, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update2.action,
                    hasEagerState: update2.hasEagerState,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update2.action,
                      hasEagerState: update2.hasEagerState,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.hasEagerState) {
                    newState = update2.eagerState;
                  } else {
                    var action = update2.action;
                    newState = reducer2(newState, action);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer2, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action = update2.action;
                newState = reducer2(newState, action);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create3, destroy, deps) {
            var effect3 = {
              tag,
              create: create3,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect3.next = effect3;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect3.next = effect3;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect3;
                effect3.next = firstEffect;
                componentUpdateQueue.lastEffect = effect3;
              }
            }
            return effect3;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
          }
          function mountEffect(create3, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
            }
          }
          function updateEffect(create3, deps) {
            return updateEffectImpl(Passive, Passive$1, create3, deps);
          }
          function mountInsertionEffect(create3, deps) {
            return mountEffectImpl(Update, Insertion, create3, deps);
          }
          function updateInsertionEffect(create3, deps) {
            return updateEffectImpl(Update, Insertion, create3, deps);
          }
          function mountLayoutEffect(create3, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create3, deps);
          }
          function updateLayoutEffect(create3, deps) {
            return updateEffectImpl(Update, Layout, create3, deps);
          }
          function imperativeHandleEffect(create3, ref2) {
            if (typeof ref2 === "function") {
              var refCallback = ref2;
              var _inst = create3();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref2 !== null && ref2 !== void 0) {
              var refObject = ref2;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create3();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref2, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref2), effectDeps);
          }
          function updateImperativeHandle(ref2, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref2), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start4 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start4;
            return [isPending, start4];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start4 = hook.memoizedState;
            return [isPending, start4];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start4 = hook.memoizedState;
            return [isPending, start4];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id2;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id2 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id2 += "H" + localId.toString(32);
              }
              id2 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id2;
            return id2;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id2 = hook.memoizedState;
            return id2;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update2.hasEagerState = true;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update2) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context4) {
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context4) {
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context4) {
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context4) {
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context4) {
                warnInvalidContextAccess();
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context4) {
                warnInvalidContextAccess();
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context4) {
                warnInvalidContextAccess();
                return readContext(context4);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context4) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context4);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref2, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref2, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context4 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE2 && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context4 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context4 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context4);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context4);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context4);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update2.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update2;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref2 = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref2, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref2, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component2.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error2("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual2;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE2) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref2 = workInProgress2.ref;
            if (current2 === null && ref2 !== null || current2 !== null && current2.ref !== ref2) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context4;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context4 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context4, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context4, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component2 = init2(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE2) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context4;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context4 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context4, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context4, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component2.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error2("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message) {
                  error3 = new Error(message);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (isArray(children2)) {
                  for (var i = 0; i < children2.length; i++) {
                    if (!validateSuspenseListNestedChild(children2[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context4 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context4, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context4, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context4 = workInProgress2.type;
            {
              if (context4._context === void 0) {
                if (context4 !== context4.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context4 = context4._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context4);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context4 = workInProgress2.type._context;
                pushProvider(workInProgress2, context4, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context4 = workInProgress2.type._context;
                popProvider(context4, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now2();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context4 = workInProgress2.type._context;
                popProvider(context4, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context4 = interruptedWork.type._context;
                popProvider(context4, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref2 = current2.ref;
            if (ref2 !== null) {
              if (typeof ref2 === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref2(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref2(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref2.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect3 = firstEffect;
              do {
                if ((effect3.tag & flags) === flags) {
                  var destroy = effect3.destroy;
                  effect3.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect3 = effect3.next;
              } while (effect3 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect3 = firstEffect;
              do {
                if ((effect3.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create3 = effect3.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect3.destroy = create3();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect3.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect3.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect3.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect3 = effect3.next;
              } while (effect3 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref2 = finishedWork.ref;
            if (ref2 !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref2 === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref2(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref2(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref2.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref2.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect3 = firstEffect;
                      do {
                        var _effect = effect3, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect3 = effect3.next;
                      } while (effect3 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition2 = ReactCurrentBatchConfig$3.transition;
                if (!transition2._updatedFibers) {
                  transition2._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition2._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now2());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now2());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now2());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now2());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions2) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions2, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions2;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions2 = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions2);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update2, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update2, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE2,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE2) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE2) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE2) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE2) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE2:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE2:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE2:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE2:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE2:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE2:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE2:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE2:
                          fiberTag = ForwardRef2;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE2:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE2:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE2;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE2;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE2;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE2;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.3.1";
          function createPortal2(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE2,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update2 = createUpdate(eventTime, lane);
            update2.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update2, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context4 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context4;
            } else {
              container.pendingContext = context4;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update2, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE2) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children2, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children2, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error2("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error2("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children2, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children2, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports, module) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames46() {
          var classes = "";
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (arg) {
              classes = appendClass(classes, parseValue(arg));
            }
          }
          return classes;
        }
        function parseValue(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames46.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes = appendClass(classes, key);
            }
          }
          return classes;
        }
        function appendClass(value, newClass) {
          if (!newClass) {
            return value;
          }
          if (value) {
            return value + " " + newClass;
          }
          return value + newClass;
        }
        if (typeof module !== "undefined" && module.exports) {
          classNames46.default = classNames46;
          module.exports = classNames46;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames46;
          });
        } else {
          window.classNames = classNames46;
        }
      })();
    }
  });

  // node_modules/invariant/browser.js
  var require_browser = __commonJS({
    "node_modules/invariant/browser.js"(exports, module) {
      "use strict";
      var invariant7 = function(condition, format, a, b, c, d, e, f) {
        if (true) {
          if (format === void 0) {
            throw new Error("invariant requires an error message argument");
          }
        }
        if (!condition) {
          var error2;
          if (format === void 0) {
            error2 = new Error(
              "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
            );
          } else {
            var args = [a, b, c, d, e, f];
            var argIndex = 0;
            error2 = new Error(
              format.replace(/%s/g, function() {
                return args[argIndex++];
              })
            );
            error2.name = "Invariant Violation";
          }
          error2.framesToPop = 1;
          throw error2;
        }
      };
      module.exports = invariant7;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE2 = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE2 = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE2 = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE2 = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE2 = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE2 = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE2 = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE2 = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE2 = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE2 = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE2 = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE2 || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE2 || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE2 || type === REACT_SUSPENSE_LIST_TYPE2 || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE2 || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf2(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE2:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE2:
                    case REACT_PROFILER_TYPE2:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE2:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE2:
                        case REACT_FORWARD_REF_TYPE2:
                        case REACT_LAZY_TYPE2:
                        case REACT_MEMO_TYPE2:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE2:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE2;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE2;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE2;
          var Fragment4 = REACT_FRAGMENT_TYPE2;
          var Lazy = REACT_LAZY_TYPE2;
          var Memo2 = REACT_MEMO_TYPE2;
          var Portal = REACT_PORTAL_TYPE2;
          var Profiler = REACT_PROFILER_TYPE2;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE2;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf2(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf2(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object) {
            return typeOf2(object) === REACT_CONTEXT_TYPE2;
          }
          function isContextProvider(object) {
            return typeOf2(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
          }
          function isForwardRef(object) {
            return typeOf2(object) === REACT_FORWARD_REF_TYPE2;
          }
          function isFragment(object) {
            return typeOf2(object) === REACT_FRAGMENT_TYPE2;
          }
          function isLazy(object) {
            return typeOf2(object) === REACT_LAZY_TYPE2;
          }
          function isMemo2(object) {
            return typeOf2(object) === REACT_MEMO_TYPE2;
          }
          function isPortal(object) {
            return typeOf2(object) === REACT_PORTAL_TYPE2;
          }
          function isProfiler(object) {
            return typeOf2(object) === REACT_PROFILER_TYPE2;
          }
          function isStrictMode(object) {
            return typeOf2(object) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object) {
            return typeOf2(object) === REACT_SUSPENSE_TYPE2;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo2;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf2;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols2 = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols2) {
            symbols = getOwnPropertySymbols2(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has2 = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has2;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error2.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has2 = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement3, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error2 = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement3(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is2(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has2(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has2(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement3(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/warning/warning.js
  var require_warning = __commonJS({
    "node_modules/warning/warning.js"(exports, module) {
      "use strict";
      var __DEV__ = true;
      var warning8 = function() {
      };
      if (__DEV__) {
        printWarning = function printWarning2(format, args) {
          var len = arguments.length;
          args = new Array(len > 1 ? len - 1 : 0);
          for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
          }
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
        warning8 = function(condition, format, args) {
          var len = arguments.length;
          args = new Array(len > 2 ? len - 2 : 0);
          for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
          }
          if (format === void 0) {
            throw new Error(
              "`warning(condition, format, ...args)` requires a warning message argument"
            );
          }
          if (!condition) {
            printWarning.apply(null, [format].concat(args));
          }
        };
      }
      var printWarning;
      module.exports = warning8;
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js
  var require_use_sync_external_store_with_selector_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js"(exports) {
      "use strict";
      (function() {
        function is2(x, y) {
          return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React89 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore2 = React89.useSyncExternalStore, useRef26 = React89.useRef, useEffect27 = React89.useEffect, useMemo20 = React89.useMemo, useDebugValue3 = React89.useDebugValue;
        exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
          var instRef = useRef26(null);
          if (null === instRef.current) {
            var inst = { hasValue: false, value: null };
            instRef.current = inst;
          } else
            inst = instRef.current;
          instRef = useMemo20(
            function() {
              function memoizedSelector(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  nextSnapshot = selector(nextSnapshot);
                  if (void 0 !== isEqual2 && inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual2(currentSelection, nextSnapshot))
                      return memoizedSelection = currentSelection;
                  }
                  return memoizedSelection = nextSnapshot;
                }
                currentSelection = memoizedSelection;
                if (objectIs(memoizedSnapshot, nextSnapshot))
                  return currentSelection;
                var nextSelection = selector(nextSnapshot);
                if (void 0 !== isEqual2 && isEqual2(currentSelection, nextSelection))
                  return memoizedSnapshot = nextSnapshot, currentSelection;
                memoizedSnapshot = nextSnapshot;
                return memoizedSelection = nextSelection;
              }
              var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
              return [
                function() {
                  return memoizedSelector(getSnapshot());
                },
                null === maybeGetServerSnapshot ? void 0 : function() {
                  return memoizedSelector(maybeGetServerSnapshot());
                }
              ];
            },
            [getSnapshot, getServerSnapshot, selector, isEqual2]
          );
          var value = useSyncExternalStore2(subscribe, instRef[0], instRef[1]);
          useEffect27(
            function() {
              inst.hasValue = true;
              inst.value = value;
            },
            [value]
          );
          useDebugValue3(value);
          return value;
        };
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/use-sync-external-store/with-selector.js
  var require_with_selector2 = __commonJS({
    "node_modules/use-sync-external-store/with-selector.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_with_selector_development();
      }
    }
  });

  // node_modules/mongoose/dist/browser.umd.js
  var require_browser_umd = __commonJS({
    "node_modules/mongoose/dist/browser.umd.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.mongoose = e() : t.mongoose = e();
      }("undefined" != typeof self ? self : exports, () => (() => {
        var t = { 1419: (t2, e2, r2) => {
          var n = e2;
          n.bignum = r2(7799), n.define = r2(2392).define, n.base = r2(1620), n.constants = r2(8050), n.decoders = r2(2240), n.encoders = r2(9176);
        }, 2392: (t2, e2, r2) => {
          var n = r2(1419), i = r2(1679);
          function o(t3, e3) {
            this.name = t3, this.body = e3, this.decoders = {}, this.encoders = {};
          }
          e2.define = function(t3, e3) {
            return new o(t3, e3);
          }, o.prototype._createNamed = function(t3) {
            var e3;
            try {
              e3 = Object(function() {
                var t4 = new Error("Cannot find module 'vm'");
                throw t4.code = "MODULE_NOT_FOUND", t4;
              }())("(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})");
            } catch (t4) {
              e3 = function(t5) {
                this._initNamed(t5);
              };
            }
            return i(e3, t3), e3.prototype._initNamed = function(e4) {
              t3.call(this, e4);
            }, new e3(this);
          }, o.prototype._getDecoder = function(t3) {
            return t3 = t3 || "der", this.decoders.hasOwnProperty(t3) || (this.decoders[t3] = this._createNamed(n.decoders[t3])), this.decoders[t3];
          }, o.prototype.decode = function(t3, e3, r3) {
            return this._getDecoder(e3).decode(t3, r3);
          }, o.prototype._getEncoder = function(t3) {
            return t3 = t3 || "der", this.encoders.hasOwnProperty(t3) || (this.encoders[t3] = this._createNamed(n.encoders[t3])), this.encoders[t3];
          }, o.prototype.encode = function(t3, e3, r3) {
            return this._getEncoder(e3).encode(t3, r3);
          };
        }, 8260: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(1679), o = r2(1620).Reporter, a = r2(5832).Buffer;
          function s(t3, e3) {
            o.call(this, e3), a.isBuffer(t3) ? (this.base = t3, this.offset = 0, this.length = t3.length) : this.error("Input not Buffer");
          }
          function u(t3, e3) {
            if (Array.isArray(t3))
              this.length = 0, this.value = t3.map(function(t4) {
                return t4 instanceof u || (t4 = new u(t4, e3)), this.length += t4.length, t4;
              }, this);
            else if ("number" == typeof t3) {
              if (!(0 <= t3 && t3 <= 255))
                return e3.error("non-byte EncoderBuffer value");
              this.value = t3, this.length = 1;
            } else if ("string" == typeof t3)
              this.value = t3, this.length = a.byteLength(t3);
            else {
              if (!a.isBuffer(t3))
                return e3.error("Unsupported type: " + n(t3));
              this.value = t3, this.length = t3.length;
            }
          }
          i(s, o), e2.t = s, s.prototype.save = function() {
            return { offset: this.offset, reporter: o.prototype.save.call(this) };
          }, s.prototype.restore = function(t3) {
            var e3 = new s(this.base);
            return e3.offset = t3.offset, e3.length = this.offset, this.offset = t3.offset, o.prototype.restore.call(this, t3.reporter), e3;
          }, s.prototype.isEmpty = function() {
            return this.offset === this.length;
          }, s.prototype.readUInt8 = function(t3) {
            return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(t3 || "DecoderBuffer overrun");
          }, s.prototype.skip = function(t3, e3) {
            if (!(this.offset + t3 <= this.length))
              return this.error(e3 || "DecoderBuffer overrun");
            var r3 = new s(this.base);
            return r3._reporterState = this._reporterState, r3.offset = this.offset, r3.length = this.offset + t3, this.offset += t3, r3;
          }, s.prototype.raw = function(t3) {
            return this.base.slice(t3 ? t3.offset : this.offset, this.length);
          }, e2.d = u, u.prototype.join = function(t3, e3) {
            return t3 || (t3 = new a(this.length)), e3 || (e3 = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach(function(r3) {
              r3.join(t3, e3), e3 += r3.length;
            }) : ("number" == typeof this.value ? t3[e3] = this.value : "string" == typeof this.value ? t3.write(this.value, e3) : a.isBuffer(this.value) && this.value.copy(t3, e3), e3 += this.length)), t3;
          };
        }, 1620: (t2, e2, r2) => {
          var n = e2;
          n.Reporter = r2(6555).a, n.DecoderBuffer = r2(8260).t, n.EncoderBuffer = r2(8260).d, n.Node = r2(4258);
        }, 4258: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(1620).Reporter, o = r2(1620).EncoderBuffer, a = r2(1620).DecoderBuffer, s = r2(3528), u = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], c = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(u);
          function f(t3, e3) {
            var r3 = {};
            this._baseState = r3, r3.enc = t3, r3.parent = e3 || null, r3.children = null, r3.tag = null, r3.args = null, r3.reverseArgs = null, r3.choice = null, r3.optional = false, r3.any = false, r3.obj = false, r3.use = null, r3.useDecoder = null, r3.key = null, r3.default = null, r3.explicit = null, r3.implicit = null, r3.contains = null, r3.parent || (r3.children = [], this._wrap());
          }
          t2.exports = f;
          var l = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
          f.prototype.clone = function() {
            var t3 = this._baseState, e3 = {};
            l.forEach(function(r4) {
              e3[r4] = t3[r4];
            });
            var r3 = new this.constructor(e3.parent);
            return r3._baseState = e3, r3;
          }, f.prototype._wrap = function() {
            var t3 = this._baseState;
            c.forEach(function(e3) {
              this[e3] = function() {
                var r3 = new this.constructor(this);
                return t3.children.push(r3), r3[e3].apply(r3, arguments);
              };
            }, this);
          }, f.prototype._init = function(t3) {
            var e3 = this._baseState;
            s(null === e3.parent), t3.call(this), e3.children = e3.children.filter(function(t4) {
              return t4._baseState.parent === this;
            }, this), s.equal(e3.children.length, 1, "Root node can have only one child");
          }, f.prototype._useArgs = function(t3) {
            var e3 = this._baseState, r3 = t3.filter(function(t4) {
              return t4 instanceof this.constructor;
            }, this);
            t3 = t3.filter(function(t4) {
              return !(t4 instanceof this.constructor);
            }, this), 0 !== r3.length && (s(null === e3.children), e3.children = r3, r3.forEach(function(t4) {
              t4._baseState.parent = this;
            }, this)), 0 !== t3.length && (s(null === e3.args), e3.args = t3, e3.reverseArgs = t3.map(function(t4) {
              if ("object" !== n(t4) || t4.constructor !== Object)
                return t4;
              var e4 = {};
              return Object.keys(t4).forEach(function(r4) {
                r4 == (0 | r4) && (r4 |= 0);
                var n2 = t4[r4];
                e4[n2] = r4;
              }), e4;
            }));
          }, ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach(function(t3) {
            f.prototype[t3] = function() {
              var e3 = this._baseState;
              throw new Error(t3 + " not implemented for encoding: " + e3.enc);
            };
          }), u.forEach(function(t3) {
            f.prototype[t3] = function() {
              var e3 = this._baseState, r3 = Array.prototype.slice.call(arguments);
              return s(null === e3.tag), e3.tag = t3, this._useArgs(r3), this;
            };
          }), f.prototype.use = function(t3) {
            s(t3);
            var e3 = this._baseState;
            return s(null === e3.use), e3.use = t3, this;
          }, f.prototype.optional = function() {
            return this._baseState.optional = true, this;
          }, f.prototype.def = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.default), e3.default = t3, e3.optional = true, this;
          }, f.prototype.explicit = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.explicit && null === e3.implicit), e3.explicit = t3, this;
          }, f.prototype.implicit = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.explicit && null === e3.implicit), e3.implicit = t3, this;
          }, f.prototype.obj = function() {
            var t3 = this._baseState, e3 = Array.prototype.slice.call(arguments);
            return t3.obj = true, 0 !== e3.length && this._useArgs(e3), this;
          }, f.prototype.key = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.key), e3.key = t3, this;
          }, f.prototype.any = function() {
            return this._baseState.any = true, this;
          }, f.prototype.choice = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.choice), e3.choice = t3, this._useArgs(Object.keys(t3).map(function(e4) {
              return t3[e4];
            })), this;
          }, f.prototype.contains = function(t3) {
            var e3 = this._baseState;
            return s(null === e3.use), e3.contains = t3, this;
          }, f.prototype._decode = function(t3, e3) {
            var r3 = this._baseState;
            if (null === r3.parent)
              return t3.wrapResult(r3.children[0]._decode(t3, e3));
            var n2, i2 = r3.default, o2 = true, s2 = null;
            if (null !== r3.key && (s2 = t3.enterKey(r3.key)), r3.optional) {
              var u2 = null;
              if (null !== r3.explicit ? u2 = r3.explicit : null !== r3.implicit ? u2 = r3.implicit : null !== r3.tag && (u2 = r3.tag), null !== u2 || r3.any) {
                if (o2 = this._peekTag(t3, u2, r3.any), t3.isError(o2))
                  return o2;
              } else {
                var c2 = t3.save();
                try {
                  null === r3.choice ? this._decodeGeneric(r3.tag, t3, e3) : this._decodeChoice(t3, e3), o2 = true;
                } catch (t4) {
                  o2 = false;
                }
                t3.restore(c2);
              }
            }
            if (r3.obj && o2 && (n2 = t3.enterObject()), o2) {
              if (null !== r3.explicit) {
                var f2 = this._decodeTag(t3, r3.explicit);
                if (t3.isError(f2))
                  return f2;
                t3 = f2;
              }
              var l2 = t3.offset;
              if (null === r3.use && null === r3.choice) {
                r3.any && (c2 = t3.save());
                var h = this._decodeTag(t3, null !== r3.implicit ? r3.implicit : r3.tag, r3.any);
                if (t3.isError(h))
                  return h;
                r3.any ? i2 = t3.raw(c2) : t3 = h;
              }
              if (e3 && e3.track && null !== r3.tag && e3.track(t3.path(), l2, t3.length, "tagged"), e3 && e3.track && null !== r3.tag && e3.track(t3.path(), t3.offset, t3.length, "content"), r3.any || (i2 = null === r3.choice ? this._decodeGeneric(r3.tag, t3, e3) : this._decodeChoice(t3, e3)), t3.isError(i2))
                return i2;
              if (r3.any || null !== r3.choice || null === r3.children || r3.children.forEach(function(r4) {
                r4._decode(t3, e3);
              }), r3.contains && ("octstr" === r3.tag || "bitstr" === r3.tag)) {
                var p = new a(i2);
                i2 = this._getUse(r3.contains, t3._reporterState.obj)._decode(p, e3);
              }
            }
            return r3.obj && o2 && (i2 = t3.leaveObject(n2)), null === r3.key || null === i2 && true !== o2 ? null !== s2 && t3.exitKey(s2) : t3.leaveKey(s2, r3.key, i2), i2;
          }, f.prototype._decodeGeneric = function(t3, e3, r3) {
            var n2 = this._baseState;
            return "seq" === t3 || "set" === t3 ? null : "seqof" === t3 || "setof" === t3 ? this._decodeList(e3, t3, n2.args[0], r3) : /str$/.test(t3) ? this._decodeStr(e3, t3, r3) : "objid" === t3 && n2.args ? this._decodeObjid(e3, n2.args[0], n2.args[1], r3) : "objid" === t3 ? this._decodeObjid(e3, null, null, r3) : "gentime" === t3 || "utctime" === t3 ? this._decodeTime(e3, t3, r3) : "null_" === t3 ? this._decodeNull(e3, r3) : "bool" === t3 ? this._decodeBool(e3, r3) : "objDesc" === t3 ? this._decodeStr(e3, t3, r3) : "int" === t3 || "enum" === t3 ? this._decodeInt(e3, n2.args && n2.args[0], r3) : null !== n2.use ? this._getUse(n2.use, e3._reporterState.obj)._decode(e3, r3) : e3.error("unknown tag: " + t3);
          }, f.prototype._getUse = function(t3, e3) {
            var r3 = this._baseState;
            return r3.useDecoder = this._use(t3, e3), s(null === r3.useDecoder._baseState.parent), r3.useDecoder = r3.useDecoder._baseState.children[0], r3.implicit !== r3.useDecoder._baseState.implicit && (r3.useDecoder = r3.useDecoder.clone(), r3.useDecoder._baseState.implicit = r3.implicit), r3.useDecoder;
          }, f.prototype._decodeChoice = function(t3, e3) {
            var r3 = this._baseState, n2 = null, i2 = false;
            return Object.keys(r3.choice).some(function(o2) {
              var a2 = t3.save(), s2 = r3.choice[o2];
              try {
                var u2 = s2._decode(t3, e3);
                if (t3.isError(u2))
                  return false;
                n2 = { type: o2, value: u2 }, i2 = true;
              } catch (e4) {
                return t3.restore(a2), false;
              }
              return true;
            }, this), i2 ? n2 : t3.error("Choice not matched");
          }, f.prototype._createEncoderBuffer = function(t3) {
            return new o(t3, this.reporter);
          }, f.prototype._encode = function(t3, e3, r3) {
            var n2 = this._baseState;
            if (null === n2.default || n2.default !== t3) {
              var i2 = this._encodeValue(t3, e3, r3);
              if (void 0 !== i2 && !this._skipDefault(i2, e3, r3))
                return i2;
            }
          }, f.prototype._encodeValue = function(t3, e3, r3) {
            var o2 = this._baseState;
            if (null === o2.parent)
              return o2.children[0]._encode(t3, e3 || new i());
            var a2 = null;
            if (this.reporter = e3, o2.optional && void 0 === t3) {
              if (null === o2.default)
                return;
              t3 = o2.default;
            }
            var s2 = null, u2 = false;
            if (o2.any)
              a2 = this._createEncoderBuffer(t3);
            else if (o2.choice)
              a2 = this._encodeChoice(t3, e3);
            else if (o2.contains)
              s2 = this._getUse(o2.contains, r3)._encode(t3, e3), u2 = true;
            else if (o2.children)
              s2 = o2.children.map(function(r4) {
                if ("null_" === r4._baseState.tag)
                  return r4._encode(null, e3, t3);
                if (null === r4._baseState.key)
                  return e3.error("Child should have a key");
                var i2 = e3.enterKey(r4._baseState.key);
                if ("object" !== n(t3))
                  return e3.error("Child expected, but input is not object");
                var o3 = r4._encode(t3[r4._baseState.key], e3, t3);
                return e3.leaveKey(i2), o3;
              }, this).filter(function(t4) {
                return t4;
              }), s2 = this._createEncoderBuffer(s2);
            else if ("seqof" === o2.tag || "setof" === o2.tag) {
              if (!o2.args || 1 !== o2.args.length)
                return e3.error("Too many args for : " + o2.tag);
              if (!Array.isArray(t3))
                return e3.error("seqof/setof, but data is not Array");
              var c2 = this.clone();
              c2._baseState.implicit = null, s2 = this._createEncoderBuffer(t3.map(function(r4) {
                var n2 = this._baseState;
                return this._getUse(n2.args[0], t3)._encode(r4, e3);
              }, c2));
            } else
              null !== o2.use ? a2 = this._getUse(o2.use, r3)._encode(t3, e3) : (s2 = this._encodePrimitive(o2.tag, t3), u2 = true);
            if (!o2.any && null === o2.choice) {
              var f2 = null !== o2.implicit ? o2.implicit : o2.tag, l2 = null === o2.implicit ? "universal" : "context";
              null === f2 ? null === o2.use && e3.error("Tag could be omitted only for .use()") : null === o2.use && (a2 = this._encodeComposite(f2, u2, l2, s2));
            }
            return null !== o2.explicit && (a2 = this._encodeComposite(o2.explicit, false, "context", a2)), a2;
          }, f.prototype._encodeChoice = function(t3, e3) {
            var r3 = this._baseState, n2 = r3.choice[t3.type];
            return n2 || s(false, t3.type + " not found in " + JSON.stringify(Object.keys(r3.choice))), n2._encode(t3.value, e3);
          }, f.prototype._encodePrimitive = function(t3, e3) {
            var r3 = this._baseState;
            if (/str$/.test(t3))
              return this._encodeStr(e3, t3);
            if ("objid" === t3 && r3.args)
              return this._encodeObjid(e3, r3.reverseArgs[0], r3.args[1]);
            if ("objid" === t3)
              return this._encodeObjid(e3, null, null);
            if ("gentime" === t3 || "utctime" === t3)
              return this._encodeTime(e3, t3);
            if ("null_" === t3)
              return this._encodeNull();
            if ("int" === t3 || "enum" === t3)
              return this._encodeInt(e3, r3.args && r3.reverseArgs[0]);
            if ("bool" === t3)
              return this._encodeBool(e3);
            if ("objDesc" === t3)
              return this._encodeStr(e3, t3);
            throw new Error("Unsupported tag: " + t3);
          }, f.prototype._isNumstr = function(t3) {
            return /^[0-9 ]*$/.test(t3);
          }, f.prototype._isPrintstr = function(t3) {
            return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(t3);
          };
        }, 6555: (t2, e2, r2) => {
          var n = r2(1679);
          function i(t3) {
            this._reporterState = { obj: null, path: [], options: t3 || {}, errors: [] };
          }
          function o(t3, e3) {
            this.path = t3, this.rethrow(e3);
          }
          e2.a = i, i.prototype.isError = function(t3) {
            return t3 instanceof o;
          }, i.prototype.save = function() {
            var t3 = this._reporterState;
            return { obj: t3.obj, pathLen: t3.path.length };
          }, i.prototype.restore = function(t3) {
            var e3 = this._reporterState;
            e3.obj = t3.obj, e3.path = e3.path.slice(0, t3.pathLen);
          }, i.prototype.enterKey = function(t3) {
            return this._reporterState.path.push(t3);
          }, i.prototype.exitKey = function(t3) {
            var e3 = this._reporterState;
            e3.path = e3.path.slice(0, t3 - 1);
          }, i.prototype.leaveKey = function(t3, e3, r3) {
            var n2 = this._reporterState;
            this.exitKey(t3), null !== n2.obj && (n2.obj[e3] = r3);
          }, i.prototype.path = function() {
            return this._reporterState.path.join("/");
          }, i.prototype.enterObject = function() {
            var t3 = this._reporterState, e3 = t3.obj;
            return t3.obj = {}, e3;
          }, i.prototype.leaveObject = function(t3) {
            var e3 = this._reporterState, r3 = e3.obj;
            return e3.obj = t3, r3;
          }, i.prototype.error = function(t3) {
            var e3, r3 = this._reporterState, n2 = t3 instanceof o;
            if (e3 = n2 ? t3 : new o(r3.path.map(function(t4) {
              return "[" + JSON.stringify(t4) + "]";
            }).join(""), t3.message || t3, t3.stack), !r3.options.partial)
              throw e3;
            return n2 || r3.errors.push(e3), e3;
          }, i.prototype.wrapResult = function(t3) {
            var e3 = this._reporterState;
            return e3.options.partial ? { result: this.isError(t3) ? null : t3, errors: e3.errors } : t3;
          }, n(o, Error), o.prototype.rethrow = function(t3) {
            if (this.message = t3 + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), !this.stack)
              try {
                throw new Error(this.message);
              } catch (t4) {
                this.stack = t4.stack;
              }
            return this;
          };
        }, 425: (t2, e2, r2) => {
          var n = r2(8050);
          e2.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" }, e2.tagClassByName = n._reverse(e2.tagClass), e2.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" }, e2.tagByName = n._reverse(e2.tag);
        }, 8050: (t2, e2, r2) => {
          var n = e2;
          n._reverse = function(t3) {
            var e3 = {};
            return Object.keys(t3).forEach(function(r3) {
              (0 | r3) == r3 && (r3 |= 0);
              var n2 = t3[r3];
              e3[n2] = r3;
            }), e3;
          }, n.der = r2(425);
        }, 3879: (t2, e2, r2) => {
          var n = r2(1679), i = r2(1419), o = i.base, a = i.bignum, s = i.constants.der;
          function u(t3) {
            this.enc = "der", this.name = t3.name, this.entity = t3, this.tree = new c(), this.tree._init(t3.body);
          }
          function c(t3) {
            o.Node.call(this, "der", t3);
          }
          function f(t3, e3) {
            var r3 = t3.readUInt8(e3);
            if (t3.isError(r3))
              return r3;
            var n2 = s.tagClass[r3 >> 6], i2 = !(32 & r3);
            if (31 & ~r3)
              r3 &= 31;
            else {
              var o2 = r3;
              for (r3 = 0; !(128 & ~o2); ) {
                if (o2 = t3.readUInt8(e3), t3.isError(o2))
                  return o2;
                r3 <<= 7, r3 |= 127 & o2;
              }
            }
            return { cls: n2, primitive: i2, tag: r3, tagStr: s.tag[r3] };
          }
          function l(t3, e3, r3) {
            var n2 = t3.readUInt8(r3);
            if (t3.isError(n2))
              return n2;
            if (!e3 && 128 === n2)
              return null;
            if (!(128 & n2))
              return n2;
            var i2 = 127 & n2;
            if (i2 > 4)
              return t3.error("length octect is too long");
            n2 = 0;
            for (var o2 = 0; o2 < i2; o2++) {
              n2 <<= 8;
              var a2 = t3.readUInt8(r3);
              if (t3.isError(a2))
                return a2;
              n2 |= a2;
            }
            return n2;
          }
          t2.exports = u, u.prototype.decode = function(t3, e3) {
            return t3 instanceof o.DecoderBuffer || (t3 = new o.DecoderBuffer(t3, e3)), this.tree._decode(t3, e3);
          }, n(c, o.Node), c.prototype._peekTag = function(t3, e3, r3) {
            if (t3.isEmpty())
              return false;
            var n2 = t3.save(), i2 = f(t3, 'Failed to peek tag: "' + e3 + '"');
            return t3.isError(i2) ? i2 : (t3.restore(n2), i2.tag === e3 || i2.tagStr === e3 || i2.tagStr + "of" === e3 || r3);
          }, c.prototype._decodeTag = function(t3, e3, r3) {
            var n2 = f(t3, 'Failed to decode tag of "' + e3 + '"');
            if (t3.isError(n2))
              return n2;
            var i2 = l(t3, n2.primitive, 'Failed to get length of "' + e3 + '"');
            if (t3.isError(i2))
              return i2;
            if (!r3 && n2.tag !== e3 && n2.tagStr !== e3 && n2.tagStr + "of" !== e3)
              return t3.error('Failed to match tag: "' + e3 + '"');
            if (n2.primitive || null !== i2)
              return t3.skip(i2, 'Failed to match body of: "' + e3 + '"');
            var o2 = t3.save(), a2 = this._skipUntilEnd(t3, 'Failed to skip indefinite length body: "' + this.tag + '"');
            return t3.isError(a2) ? a2 : (i2 = t3.offset - o2.offset, t3.restore(o2), t3.skip(i2, 'Failed to match body of: "' + e3 + '"'));
          }, c.prototype._skipUntilEnd = function(t3, e3) {
            for (; ; ) {
              var r3 = f(t3, e3);
              if (t3.isError(r3))
                return r3;
              var n2, i2 = l(t3, r3.primitive, e3);
              if (t3.isError(i2))
                return i2;
              if (n2 = r3.primitive || null !== i2 ? t3.skip(i2) : this._skipUntilEnd(t3, e3), t3.isError(n2))
                return n2;
              if ("end" === r3.tagStr)
                break;
            }
          }, c.prototype._decodeList = function(t3, e3, r3, n2) {
            for (var i2 = []; !t3.isEmpty(); ) {
              var o2 = this._peekTag(t3, "end");
              if (t3.isError(o2))
                return o2;
              var a2 = r3.decode(t3, "der", n2);
              if (t3.isError(a2) && o2)
                break;
              i2.push(a2);
            }
            return i2;
          }, c.prototype._decodeStr = function(t3, e3) {
            if ("bitstr" === e3) {
              var r3 = t3.readUInt8();
              return t3.isError(r3) ? r3 : { unused: r3, data: t3.raw() };
            }
            if ("bmpstr" === e3) {
              var n2 = t3.raw();
              if (n2.length % 2 == 1)
                return t3.error("Decoding of string type: bmpstr length mismatch");
              for (var i2 = "", o2 = 0; o2 < n2.length / 2; o2++)
                i2 += String.fromCharCode(n2.readUInt16BE(2 * o2));
              return i2;
            }
            if ("numstr" === e3) {
              var a2 = t3.raw().toString("ascii");
              return this._isNumstr(a2) ? a2 : t3.error("Decoding of string type: numstr unsupported characters");
            }
            if ("octstr" === e3)
              return t3.raw();
            if ("objDesc" === e3)
              return t3.raw();
            if ("printstr" === e3) {
              var s2 = t3.raw().toString("ascii");
              return this._isPrintstr(s2) ? s2 : t3.error("Decoding of string type: printstr unsupported characters");
            }
            return /str$/.test(e3) ? t3.raw().toString() : t3.error("Decoding of string type: " + e3 + " unsupported");
          }, c.prototype._decodeObjid = function(t3, e3, r3) {
            for (var n2, i2 = [], o2 = 0; !t3.isEmpty(); ) {
              var a2 = t3.readUInt8();
              o2 <<= 7, o2 |= 127 & a2, 128 & a2 || (i2.push(o2), o2 = 0);
            }
            128 & a2 && i2.push(o2);
            var s2 = i2[0] / 40 | 0, u2 = i2[0] % 40;
            if (n2 = r3 ? i2 : [s2, u2].concat(i2.slice(1)), e3) {
              var c2 = e3[n2.join(" ")];
              void 0 === c2 && (c2 = e3[n2.join(".")]), void 0 !== c2 && (n2 = c2);
            }
            return n2;
          }, c.prototype._decodeTime = function(t3, e3) {
            var r3 = t3.raw().toString();
            if ("gentime" === e3)
              var n2 = 0 | r3.slice(0, 4), i2 = 0 | r3.slice(4, 6), o2 = 0 | r3.slice(6, 8), a2 = 0 | r3.slice(8, 10), s2 = 0 | r3.slice(10, 12), u2 = 0 | r3.slice(12, 14);
            else {
              if ("utctime" !== e3)
                return t3.error("Decoding " + e3 + " time is not supported yet");
              n2 = 0 | r3.slice(0, 2), i2 = 0 | r3.slice(2, 4), o2 = 0 | r3.slice(4, 6), a2 = 0 | r3.slice(6, 8), s2 = 0 | r3.slice(8, 10), u2 = 0 | r3.slice(10, 12), n2 = n2 < 70 ? 2e3 + n2 : 1900 + n2;
            }
            return Date.UTC(n2, i2 - 1, o2, a2, s2, u2, 0);
          }, c.prototype._decodeNull = function(t3) {
            return null;
          }, c.prototype._decodeBool = function(t3) {
            var e3 = t3.readUInt8();
            return t3.isError(e3) ? e3 : 0 !== e3;
          }, c.prototype._decodeInt = function(t3, e3) {
            var r3 = t3.raw(), n2 = new a(r3);
            return e3 && (n2 = e3[n2.toString(10)] || n2), n2;
          }, c.prototype._use = function(t3, e3) {
            return "function" == typeof t3 && (t3 = t3(e3)), t3._getDecoder("der").tree;
          };
        }, 2240: (t2, e2, r2) => {
          var n = e2;
          n.der = r2(3879), n.pem = r2(8330);
        }, 8330: (t2, e2, r2) => {
          var n = r2(1679), i = r2(5832).Buffer, o = r2(3879);
          function a(t3) {
            o.call(this, t3), this.enc = "pem";
          }
          n(a, o), t2.exports = a, a.prototype.decode = function(t3, e3) {
            for (var r3 = t3.toString().split(/[\r\n]+/g), n2 = e3.label.toUpperCase(), a2 = /^-----(BEGIN|END) ([^-]+)-----$/, s = -1, u = -1, c = 0; c < r3.length; c++) {
              var f = r3[c].match(a2);
              if (null !== f && f[2] === n2) {
                if (-1 !== s) {
                  if ("END" !== f[1])
                    break;
                  u = c;
                  break;
                }
                if ("BEGIN" !== f[1])
                  break;
                s = c;
              }
            }
            if (-1 === s || -1 === u)
              throw new Error("PEM section not found for: " + n2);
            var l = r3.slice(s + 1, u).join("");
            l.replace(/[^a-z0-9\+\/=]+/gi, "");
            var h = new i(l, "base64");
            return o.prototype.decode.call(this, h, e3);
          };
        }, 2655: (t2, e2, r2) => {
          var n = r2(1679), i = r2(5832).Buffer, o = r2(1419), a = o.base, s = o.constants.der;
          function u(t3) {
            this.enc = "der", this.name = t3.name, this.entity = t3, this.tree = new c(), this.tree._init(t3.body);
          }
          function c(t3) {
            a.Node.call(this, "der", t3);
          }
          function f(t3) {
            return t3 < 10 ? "0" + t3 : t3;
          }
          t2.exports = u, u.prototype.encode = function(t3, e3) {
            return this.tree._encode(t3, e3).join();
          }, n(c, a.Node), c.prototype._encodeComposite = function(t3, e3, r3, n2) {
            var o2, a2 = function(t4, e4, r4, n3) {
              var i2;
              if ("seqof" === t4 ? t4 = "seq" : "setof" === t4 && (t4 = "set"), s.tagByName.hasOwnProperty(t4))
                i2 = s.tagByName[t4];
              else {
                if ("number" != typeof t4 || (0 | t4) !== t4)
                  return n3.error("Unknown tag: " + t4);
                i2 = t4;
              }
              return i2 >= 31 ? n3.error("Multi-octet tag encoding unsupported") : (e4 || (i2 |= 32), i2 |= s.tagClassByName[r4 || "universal"] << 6);
            }(t3, e3, r3, this.reporter);
            if (n2.length < 128)
              return (o2 = new i(2))[0] = a2, o2[1] = n2.length, this._createEncoderBuffer([o2, n2]);
            for (var u2 = 1, c2 = n2.length; c2 >= 256; c2 >>= 8)
              u2++;
            (o2 = new i(2 + u2))[0] = a2, o2[1] = 128 | u2, c2 = 1 + u2;
            for (var f2 = n2.length; f2 > 0; c2--, f2 >>= 8)
              o2[c2] = 255 & f2;
            return this._createEncoderBuffer([o2, n2]);
          }, c.prototype._encodeStr = function(t3, e3) {
            if ("bitstr" === e3)
              return this._createEncoderBuffer([0 | t3.unused, t3.data]);
            if ("bmpstr" === e3) {
              for (var r3 = new i(2 * t3.length), n2 = 0; n2 < t3.length; n2++)
                r3.writeUInt16BE(t3.charCodeAt(n2), 2 * n2);
              return this._createEncoderBuffer(r3);
            }
            return "numstr" === e3 ? this._isNumstr(t3) ? this._createEncoderBuffer(t3) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === e3 ? this._isPrintstr(t3) ? this._createEncoderBuffer(t3) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(e3) || "objDesc" === e3 ? this._createEncoderBuffer(t3) : this.reporter.error("Encoding of string type: " + e3 + " unsupported");
          }, c.prototype._encodeObjid = function(t3, e3, r3) {
            if ("string" == typeof t3) {
              if (!e3)
                return this.reporter.error("string objid given, but no values map found");
              if (!e3.hasOwnProperty(t3))
                return this.reporter.error("objid not found in values map");
              t3 = e3[t3].split(/[\s\.]+/g);
              for (var n2 = 0; n2 < t3.length; n2++)
                t3[n2] |= 0;
            } else if (Array.isArray(t3))
              for (t3 = t3.slice(), n2 = 0; n2 < t3.length; n2++)
                t3[n2] |= 0;
            if (!Array.isArray(t3))
              return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(t3));
            if (!r3) {
              if (t3[1] >= 40)
                return this.reporter.error("Second objid identifier OOB");
              t3.splice(0, 2, 40 * t3[0] + t3[1]);
            }
            var o2 = 0;
            for (n2 = 0; n2 < t3.length; n2++) {
              var a2 = t3[n2];
              for (o2++; a2 >= 128; a2 >>= 7)
                o2++;
            }
            var s2 = new i(o2), u2 = s2.length - 1;
            for (n2 = t3.length - 1; n2 >= 0; n2--)
              for (a2 = t3[n2], s2[u2--] = 127 & a2; (a2 >>= 7) > 0; )
                s2[u2--] = 128 | 127 & a2;
            return this._createEncoderBuffer(s2);
          }, c.prototype._encodeTime = function(t3, e3) {
            var r3, n2 = new Date(t3);
            return "gentime" === e3 ? r3 = [f(n2.getFullYear()), f(n2.getUTCMonth() + 1), f(n2.getUTCDate()), f(n2.getUTCHours()), f(n2.getUTCMinutes()), f(n2.getUTCSeconds()), "Z"].join("") : "utctime" === e3 ? r3 = [f(n2.getFullYear() % 100), f(n2.getUTCMonth() + 1), f(n2.getUTCDate()), f(n2.getUTCHours()), f(n2.getUTCMinutes()), f(n2.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + e3 + " time is not supported yet"), this._encodeStr(r3, "octstr");
          }, c.prototype._encodeNull = function() {
            return this._createEncoderBuffer("");
          }, c.prototype._encodeInt = function(t3, e3) {
            if ("string" == typeof t3) {
              if (!e3)
                return this.reporter.error("String int or enum given, but no values map");
              if (!e3.hasOwnProperty(t3))
                return this.reporter.error("Values map doesn't contain: " + JSON.stringify(t3));
              t3 = e3[t3];
            }
            if ("number" != typeof t3 && !i.isBuffer(t3)) {
              var r3 = t3.toArray();
              !t3.sign && 128 & r3[0] && r3.unshift(0), t3 = new i(r3);
            }
            if (i.isBuffer(t3)) {
              var n2 = t3.length;
              0 === t3.length && n2++;
              var o2 = new i(n2);
              return t3.copy(o2), 0 === t3.length && (o2[0] = 0), this._createEncoderBuffer(o2);
            }
            if (t3 < 128)
              return this._createEncoderBuffer(t3);
            if (t3 < 256)
              return this._createEncoderBuffer([0, t3]);
            n2 = 1;
            for (var a2 = t3; a2 >= 256; a2 >>= 8)
              n2++;
            for (a2 = (o2 = new Array(n2)).length - 1; a2 >= 0; a2--)
              o2[a2] = 255 & t3, t3 >>= 8;
            return 128 & o2[0] && o2.unshift(0), this._createEncoderBuffer(new i(o2));
          }, c.prototype._encodeBool = function(t3) {
            return this._createEncoderBuffer(t3 ? 255 : 0);
          }, c.prototype._use = function(t3, e3) {
            return "function" == typeof t3 && (t3 = t3(e3)), t3._getEncoder("der").tree;
          }, c.prototype._skipDefault = function(t3, e3, r3) {
            var n2, i2 = this._baseState;
            if (null === i2.default)
              return false;
            var o2 = t3.join();
            if (void 0 === i2.defaultBuffer && (i2.defaultBuffer = this._encodeValue(i2.default, e3, r3).join()), o2.length !== i2.defaultBuffer.length)
              return false;
            for (n2 = 0; n2 < o2.length; n2++)
              if (o2[n2] !== i2.defaultBuffer[n2])
                return false;
            return true;
          };
        }, 9176: (t2, e2, r2) => {
          var n = e2;
          n.der = r2(2655), n.pem = r2(8418);
        }, 8418: (t2, e2, r2) => {
          var n = r2(1679), i = r2(2655);
          function o(t3) {
            i.call(this, t3), this.enc = "pem";
          }
          n(o, i), t2.exports = o, o.prototype.encode = function(t3, e3) {
            for (var r3 = i.prototype.encode.call(this, t3).toString("base64"), n2 = ["-----BEGIN " + e3.label + "-----"], o2 = 0; o2 < r3.length; o2 += 64)
              n2.push(r3.slice(o2, o2 + 64));
            return n2.push("-----END " + e3.label + "-----"), n2.join("\n");
          };
        }, 2402: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t4) {
              return n(t4);
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : n(t4);
            }, i(t3);
          }
          var o, a, s = r2(3743).codes, u = s.ERR_AMBIGUOUS_ARGUMENT, c = s.ERR_INVALID_ARG_TYPE, f = s.ERR_INVALID_ARG_VALUE, l = s.ERR_INVALID_RETURN_VALUE, h = s.ERR_MISSING_ARGS, p = r2(9068), d = r2(7352).inspect, y = r2(7352).types, b = y.isPromise, m = y.isRegExp, v = Object.assign ? Object.assign : r2(6182).assign, g = Object.is ? Object.is : r2(2064);
          function _() {
            var t3 = r2(6193);
            o = t3.isDeepEqual, a = t3.isDeepStrictEqual;
          }
          /* @__PURE__ */ new Map();
          var w = false, S = t2.exports = E, O = {};
          function j(t3) {
            if (t3.message instanceof Error)
              throw t3.message;
            throw new p(t3);
          }
          function $(t3, e3, r3, n2) {
            if (!r3) {
              var i2 = false;
              if (0 === e3)
                i2 = true, n2 = "No value argument passed to `assert.ok()`";
              else if (n2 instanceof Error)
                throw n2;
              var o2 = new p({ actual: r3, expected: true, message: n2, operator: "==", stackStartFn: t3 });
              throw o2.generatedMessage = i2, o2;
            }
          }
          function E() {
            for (var t3 = arguments.length, e3 = new Array(t3), r3 = 0; r3 < t3; r3++)
              e3[r3] = arguments[r3];
            $.apply(void 0, [E, e3.length].concat(e3));
          }
          S.fail = function t3(e3, r3, n2, i2, o2) {
            var a2, s2 = arguments.length;
            if (0 === s2 ? a2 = "Failed" : 1 === s2 ? (n2 = e3, e3 = void 0) : (false === w && (w = true, ({ env: {} }.emitWarning ? { env: {} }.emitWarning : console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094")), 2 === s2 && (i2 = "!=")), n2 instanceof Error)
              throw n2;
            var u2 = { actual: e3, expected: r3, operator: void 0 === i2 ? "fail" : i2, stackStartFn: o2 || t3 };
            void 0 !== n2 && (u2.message = n2);
            var c2 = new p(u2);
            throw a2 && (c2.message = a2, c2.generatedMessage = true), c2;
          }, S.AssertionError = p, S.ok = E, S.equal = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            e3 != r3 && j({ actual: e3, expected: r3, message: n2, operator: "==", stackStartFn: t3 });
          }, S.notEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            e3 == r3 && j({ actual: e3, expected: r3, message: n2, operator: "!=", stackStartFn: t3 });
          }, S.deepEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            void 0 === o && _(), o(e3, r3) || j({ actual: e3, expected: r3, message: n2, operator: "deepEqual", stackStartFn: t3 });
          }, S.notDeepEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            void 0 === o && _(), o(e3, r3) && j({ actual: e3, expected: r3, message: n2, operator: "notDeepEqual", stackStartFn: t3 });
          }, S.deepStrictEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            void 0 === o && _(), a(e3, r3) || j({ actual: e3, expected: r3, message: n2, operator: "deepStrictEqual", stackStartFn: t3 });
          }, S.notDeepStrictEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            void 0 === o && _(), a(e3, r3) && j({ actual: e3, expected: r3, message: n2, operator: "notDeepStrictEqual", stackStartFn: t3 });
          }, S.strictEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            g(e3, r3) || j({ actual: e3, expected: r3, message: n2, operator: "strictEqual", stackStartFn: t3 });
          }, S.notStrictEqual = function t3(e3, r3, n2) {
            if (arguments.length < 2)
              throw new h("actual", "expected");
            g(e3, r3) && j({ actual: e3, expected: r3, message: n2, operator: "notStrictEqual", stackStartFn: t3 });
          };
          var A = function t3(e3, r3, n2) {
            var i2 = this;
            !function(t4, e4) {
              if (!(t4 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3), r3.forEach(function(t4) {
              t4 in e3 && (void 0 !== n2 && "string" == typeof n2[t4] && m(e3[t4]) && e3[t4].test(n2[t4]) ? i2[t4] = n2[t4] : i2[t4] = e3[t4]);
            });
          };
          function P(t3, e3, r3, n2) {
            if ("function" != typeof e3) {
              if (m(e3))
                return e3.test(t3);
              if (2 === arguments.length)
                throw new c("expected", ["Function", "RegExp"], e3);
              if ("object" !== i(t3) || null === t3) {
                var s2 = new p({ actual: t3, expected: e3, message: r3, operator: "deepStrictEqual", stackStartFn: n2 });
                throw s2.operator = n2.name, s2;
              }
              var u2 = Object.keys(e3);
              if (e3 instanceof Error)
                u2.push("name", "message");
              else if (0 === u2.length)
                throw new f("error", e3, "may not be an empty object");
              return void 0 === o && _(), u2.forEach(function(i2) {
                "string" == typeof t3[i2] && m(e3[i2]) && e3[i2].test(t3[i2]) || function(t4, e4, r4, n3, i3, o2) {
                  if (!(r4 in t4) || !a(t4[r4], e4[r4])) {
                    if (!n3) {
                      var s3 = new A(t4, i3), u3 = new A(e4, i3, t4), c2 = new p({ actual: s3, expected: u3, operator: "deepStrictEqual", stackStartFn: o2 });
                      throw c2.actual = t4, c2.expected = e4, c2.operator = o2.name, c2;
                    }
                    j({ actual: t4, expected: e4, message: n3, operator: o2.name, stackStartFn: o2 });
                  }
                }(t3, e3, i2, r3, u2, n2);
              }), true;
            }
            return void 0 !== e3.prototype && t3 instanceof e3 || !Error.isPrototypeOf(e3) && true === e3.call({}, t3);
          }
          function x(t3) {
            if ("function" != typeof t3)
              throw new c("fn", "Function", t3);
            try {
              t3();
            } catch (t4) {
              return t4;
            }
            return O;
          }
          function k(t3) {
            return b(t3) || null !== t3 && "object" === i(t3) && "function" == typeof t3.then && "function" == typeof t3.catch;
          }
          function M(t3) {
            return Promise.resolve().then(function() {
              var e3;
              if ("function" == typeof t3) {
                if (!k(e3 = t3()))
                  throw new l("instance of Promise", "promiseFn", e3);
              } else {
                if (!k(t3))
                  throw new c("promiseFn", ["Function", "Promise"], t3);
                e3 = t3;
              }
              return Promise.resolve().then(function() {
                return e3;
              }).then(function() {
                return O;
              }).catch(function(t4) {
                return t4;
              });
            });
          }
          function T(t3, e3, r3, n2) {
            if ("string" == typeof r3) {
              if (4 === arguments.length)
                throw new c("error", ["Object", "Error", "Function", "RegExp"], r3);
              if ("object" === i(e3) && null !== e3) {
                if (e3.message === r3)
                  throw new u("error/message", 'The error message "'.concat(e3.message, '" is identical to the message.'));
              } else if (e3 === r3)
                throw new u("error/message", 'The error "'.concat(e3, '" is identical to the message.'));
              n2 = r3, r3 = void 0;
            } else if (null != r3 && "object" !== i(r3) && "function" != typeof r3)
              throw new c("error", ["Object", "Error", "Function", "RegExp"], r3);
            if (e3 === O) {
              var o2 = "";
              r3 && r3.name && (o2 += " (".concat(r3.name, ")")), o2 += n2 ? ": ".concat(n2) : ".";
              var a2 = "rejects" === t3.name ? "rejection" : "exception";
              j({ actual: void 0, expected: r3, operator: t3.name, message: "Missing expected ".concat(a2).concat(o2), stackStartFn: t3 });
            }
            if (r3 && !P(e3, r3, n2, t3))
              throw e3;
          }
          function B(t3, e3, r3, n2) {
            if (e3 !== O) {
              if ("string" == typeof r3 && (n2 = r3, r3 = void 0), !r3 || P(e3, r3)) {
                var i2 = n2 ? ": ".concat(n2) : ".", o2 = "doesNotReject" === t3.name ? "rejection" : "exception";
                j({ actual: e3, expected: r3, operator: t3.name, message: "Got unwanted ".concat(o2).concat(i2, "\n") + 'Actual message: "'.concat(e3 && e3.message, '"'), stackStartFn: t3 });
              }
              throw e3;
            }
          }
          function I() {
            for (var t3 = arguments.length, e3 = new Array(t3), r3 = 0; r3 < t3; r3++)
              e3[r3] = arguments[r3];
            $.apply(void 0, [I, e3.length].concat(e3));
          }
          S.throws = function t3(e3) {
            for (var r3 = arguments.length, n2 = new Array(r3 > 1 ? r3 - 1 : 0), i2 = 1; i2 < r3; i2++)
              n2[i2 - 1] = arguments[i2];
            T.apply(void 0, [t3, x(e3)].concat(n2));
          }, S.rejects = function t3(e3) {
            for (var r3 = arguments.length, n2 = new Array(r3 > 1 ? r3 - 1 : 0), i2 = 1; i2 < r3; i2++)
              n2[i2 - 1] = arguments[i2];
            return M(e3).then(function(e4) {
              return T.apply(void 0, [t3, e4].concat(n2));
            });
          }, S.doesNotThrow = function t3(e3) {
            for (var r3 = arguments.length, n2 = new Array(r3 > 1 ? r3 - 1 : 0), i2 = 1; i2 < r3; i2++)
              n2[i2 - 1] = arguments[i2];
            B.apply(void 0, [t3, x(e3)].concat(n2));
          }, S.doesNotReject = function t3(e3) {
            for (var r3 = arguments.length, n2 = new Array(r3 > 1 ? r3 - 1 : 0), i2 = 1; i2 < r3; i2++)
              n2[i2 - 1] = arguments[i2];
            return M(e3).then(function(e4) {
              return B.apply(void 0, [t3, e4].concat(n2));
            });
          }, S.ifError = function t3(e3) {
            if (null != e3) {
              var r3 = "ifError got unwanted exception: ";
              "object" === i(e3) && "string" == typeof e3.message ? 0 === e3.message.length && e3.constructor ? r3 += e3.constructor.name : r3 += e3.message : r3 += d(e3);
              var n2 = new p({ actual: e3, expected: null, operator: "ifError", message: r3, stackStartFn: t3 }), o2 = e3.stack;
              if ("string" == typeof o2) {
                var a2 = o2.split("\n");
                a2.shift();
                for (var s2 = n2.stack.split("\n"), u2 = 0; u2 < a2.length; u2++) {
                  var c2 = s2.indexOf(a2[u2]);
                  if (-1 !== c2) {
                    s2 = s2.slice(0, c2);
                    break;
                  }
                }
                n2.stack = "".concat(s2.join("\n"), "\n").concat(a2.join("\n"));
              }
              throw n2;
            }
          }, S.strict = v(I, S, { equal: S.strictEqual, deepEqual: S.deepStrictEqual, notEqual: S.notStrictEqual, notDeepEqual: S.notDeepStrictEqual }), S.strict.strict = S.strict;
        }, 9068: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3, r3) {
            return e3 in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function o(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, n2.key, n2);
            }
          }
          function a(t3, e3) {
            return !e3 || "object" !== h(e3) && "function" != typeof e3 ? s(t3) : e3;
          }
          function s(t3) {
            if (void 0 === t3)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t3;
          }
          function u(t3) {
            var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return u = function(t4) {
              if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
                return t4;
              var r3;
              if ("function" != typeof t4)
                throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== e3) {
                if (e3.has(t4))
                  return e3.get(t4);
                e3.set(t4, n2);
              }
              function n2() {
                return c(t4, arguments, l(this).constructor);
              }
              return n2.prototype = Object.create(t4.prototype, { constructor: { value: n2, enumerable: false, writable: true, configurable: true } }), f(n2, t4);
            }, u(t3);
          }
          function c(t3, e3, r3) {
            return c = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (t4) {
                return false;
              }
            }() ? Reflect.construct : function(t4, e4, r4) {
              var n2 = [null];
              n2.push.apply(n2, e4);
              var i2 = new (Function.bind.apply(t4, n2))();
              return r4 && f(i2, r4.prototype), i2;
            }, c.apply(null, arguments);
          }
          function f(t3, e3) {
            return f = Object.setPrototypeOf || function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, f(t3, e3);
          }
          function l(t3) {
            return l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, l(t3);
          }
          function h(t3) {
            return h = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t4) {
              return n(t4);
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : n(t4);
            }, h(t3);
          }
          var p = r2(7352).inspect, d = r2(3743).codes.ERR_INVALID_ARG_TYPE;
          function y(t3, e3, r3) {
            return (void 0 === r3 || r3 > t3.length) && (r3 = t3.length), t3.substring(r3 - e3.length, r3) === e3;
          }
          var b = "", m = "", v = "", g = "", _ = { deepStrictEqual: "Expected values to be strictly deep-equal:", strictEqual: "Expected values to be strictly equal:", strictEqualObject: 'Expected "actual" to be reference-equal to "expected":', deepEqual: "Expected values to be loosely deep-equal:", equal: "Expected values to be loosely equal:", notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:', notStrictEqual: 'Expected "actual" to be strictly unequal to:', notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":', notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:', notEqual: 'Expected "actual" to be loosely unequal to:', notIdentical: "Values identical but not reference-equal:" };
          function w(t3) {
            var e3 = Object.keys(t3), r3 = Object.create(Object.getPrototypeOf(t3));
            return e3.forEach(function(e4) {
              r3[e4] = t3[e4];
            }), Object.defineProperty(r3, "message", { value: t3.message }), r3;
          }
          function S(t3) {
            return p(t3, { compact: false, customInspect: false, depth: 1e3, maxArrayLength: 1 / 0, showHidden: false, breakLength: 1 / 0, showProxy: false, sorted: true, getters: true });
          }
          var O = function(t3) {
            function e3(t4) {
              var r4;
              if (function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), "object" !== h(t4) || null === t4)
                throw new d("options", "Object", t4);
              var n3 = t4.message, i2 = t4.operator, o2 = t4.stackStartFn, u2 = t4.actual, c2 = t4.expected, f2 = Error.stackTraceLimit;
              if (Error.stackTraceLimit = 0, null != n3)
                r4 = a(this, l(e3).call(this, String(n3)));
              else if ({ env: {} }.stderr && { env: {} }.stderr.isTTY && ({ env: {} }.stderr && { env: {} }.stderr.getColorDepth && 1 !== { env: {} }.stderr.getColorDepth() ? (b = "\x1B[34m", m = "\x1B[32m", g = "\x1B[39m", v = "\x1B[31m") : (b = "", m = "", g = "", v = "")), "object" === h(u2) && null !== u2 && "object" === h(c2) && null !== c2 && "stack" in u2 && u2 instanceof Error && "stack" in c2 && c2 instanceof Error && (u2 = w(u2), c2 = w(c2)), "deepStrictEqual" === i2 || "strictEqual" === i2)
                r4 = a(this, l(e3).call(this, function(t5, e4, r5) {
                  var n4 = "", i3 = "", o3 = 0, a2 = "", s2 = false, u3 = S(t5), c3 = u3.split("\n"), f3 = S(e4).split("\n"), l2 = 0, p3 = "";
                  if ("strictEqual" === r5 && "object" === h(t5) && "object" === h(e4) && null !== t5 && null !== e4 && (r5 = "strictEqualObject"), 1 === c3.length && 1 === f3.length && c3[0] !== f3[0]) {
                    var d2 = c3[0].length + f3[0].length;
                    if (d2 <= 10) {
                      if (!("object" === h(t5) && null !== t5 || "object" === h(e4) && null !== e4 || 0 === t5 && 0 === e4))
                        return "".concat(_[r5], "\n\n") + "".concat(c3[0], " !== ").concat(f3[0], "\n");
                    } else if ("strictEqualObject" !== r5 && d2 < ({ env: {} }.stderr && { env: {} }.stderr.isTTY ? { env: {} }.stderr.columns : 80)) {
                      for (; c3[0][l2] === f3[0][l2]; )
                        l2++;
                      l2 > 2 && (p3 = "\n  ".concat(function(t6, e5) {
                        if (e5 = Math.floor(e5), 0 == t6.length || 0 == e5)
                          return "";
                        var r6 = t6.length * e5;
                        for (e5 = Math.floor(Math.log(e5) / Math.log(2)); e5; )
                          t6 += t6, e5--;
                        return t6 + t6.substring(0, r6 - t6.length);
                      }(" ", l2), "^"), l2 = 0);
                    }
                  }
                  for (var w2 = c3[c3.length - 1], O3 = f3[f3.length - 1]; w2 === O3 && (l2++ < 2 ? a2 = "\n  ".concat(w2).concat(a2) : n4 = w2, c3.pop(), f3.pop(), 0 !== c3.length && 0 !== f3.length); )
                    w2 = c3[c3.length - 1], O3 = f3[f3.length - 1];
                  var j2 = Math.max(c3.length, f3.length);
                  if (0 === j2) {
                    var $2 = u3.split("\n");
                    if ($2.length > 30)
                      for ($2[26] = "".concat(b, "...").concat(g); $2.length > 27; )
                        $2.pop();
                    return "".concat(_.notIdentical, "\n\n").concat($2.join("\n"), "\n");
                  }
                  l2 > 3 && (a2 = "\n".concat(b, "...").concat(g).concat(a2), s2 = true), "" !== n4 && (a2 = "\n  ".concat(n4).concat(a2), n4 = "");
                  var E2 = 0, A = _[r5] + "\n".concat(m, "+ actual").concat(g, " ").concat(v, "- expected").concat(g), P = " ".concat(b, "...").concat(g, " Lines skipped");
                  for (l2 = 0; l2 < j2; l2++) {
                    var x = l2 - o3;
                    if (c3.length < l2 + 1)
                      x > 1 && l2 > 2 && (x > 4 ? (i3 += "\n".concat(b, "...").concat(g), s2 = true) : x > 3 && (i3 += "\n  ".concat(f3[l2 - 2]), E2++), i3 += "\n  ".concat(f3[l2 - 1]), E2++), o3 = l2, n4 += "\n".concat(v, "-").concat(g, " ").concat(f3[l2]), E2++;
                    else if (f3.length < l2 + 1)
                      x > 1 && l2 > 2 && (x > 4 ? (i3 += "\n".concat(b, "...").concat(g), s2 = true) : x > 3 && (i3 += "\n  ".concat(c3[l2 - 2]), E2++), i3 += "\n  ".concat(c3[l2 - 1]), E2++), o3 = l2, i3 += "\n".concat(m, "+").concat(g, " ").concat(c3[l2]), E2++;
                    else {
                      var k = f3[l2], M = c3[l2], T = M !== k && (!y(M, ",") || M.slice(0, -1) !== k);
                      T && y(k, ",") && k.slice(0, -1) === M && (T = false, M += ","), T ? (x > 1 && l2 > 2 && (x > 4 ? (i3 += "\n".concat(b, "...").concat(g), s2 = true) : x > 3 && (i3 += "\n  ".concat(c3[l2 - 2]), E2++), i3 += "\n  ".concat(c3[l2 - 1]), E2++), o3 = l2, i3 += "\n".concat(m, "+").concat(g, " ").concat(M), n4 += "\n".concat(v, "-").concat(g, " ").concat(k), E2 += 2) : (i3 += n4, n4 = "", 1 !== x && 0 !== l2 || (i3 += "\n  ".concat(M), E2++));
                    }
                    if (E2 > 20 && l2 < j2 - 2)
                      return "".concat(A).concat(P, "\n").concat(i3, "\n").concat(b, "...").concat(g).concat(n4, "\n") + "".concat(b, "...").concat(g);
                  }
                  return "".concat(A).concat(s2 ? P : "", "\n").concat(i3).concat(n4).concat(a2).concat(p3);
                }(u2, c2, i2)));
              else if ("notDeepStrictEqual" === i2 || "notStrictEqual" === i2) {
                var p2 = _[i2], O2 = S(u2).split("\n");
                if ("notStrictEqual" === i2 && "object" === h(u2) && null !== u2 && (p2 = _.notStrictEqualObject), O2.length > 30)
                  for (O2[26] = "".concat(b, "...").concat(g); O2.length > 27; )
                    O2.pop();
                r4 = 1 === O2.length ? a(this, l(e3).call(this, "".concat(p2, " ").concat(O2[0]))) : a(this, l(e3).call(this, "".concat(p2, "\n\n").concat(O2.join("\n"), "\n")));
              } else {
                var j = S(u2), $ = "", E = _[i2];
                "notDeepEqual" === i2 || "notEqual" === i2 ? (j = "".concat(_[i2], "\n\n").concat(j)).length > 1024 && (j = "".concat(j.slice(0, 1021), "...")) : ($ = "".concat(S(c2)), j.length > 512 && (j = "".concat(j.slice(0, 509), "...")), $.length > 512 && ($ = "".concat($.slice(0, 509), "...")), "deepEqual" === i2 || "equal" === i2 ? j = "".concat(E, "\n\n").concat(j, "\n\nshould equal\n\n") : $ = " ".concat(i2, " ").concat($)), r4 = a(this, l(e3).call(this, "".concat(j).concat($)));
              }
              return Error.stackTraceLimit = f2, r4.generatedMessage = !n3, Object.defineProperty(s(r4), "name", { value: "AssertionError [ERR_ASSERTION]", enumerable: false, writable: true, configurable: true }), r4.code = "ERR_ASSERTION", r4.actual = u2, r4.expected = c2, r4.operator = i2, Error.captureStackTrace && Error.captureStackTrace(s(r4), o2), r4.stack, r4.name = "AssertionError", a(r4);
            }
            var r3, n2;
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), e4 && f(t4, e4);
            }(e3, t3), r3 = e3, n2 = [{ key: "toString", value: function() {
              return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
            } }, { key: p.custom, value: function(t4, e4) {
              return p(this, function(t5) {
                for (var e5 = 1; e5 < arguments.length; e5++) {
                  var r4 = null != arguments[e5] ? arguments[e5] : {}, n3 = Object.keys(r4);
                  "function" == typeof Object.getOwnPropertySymbols && (n3 = n3.concat(Object.getOwnPropertySymbols(r4).filter(function(t6) {
                    return Object.getOwnPropertyDescriptor(r4, t6).enumerable;
                  }))), n3.forEach(function(e6) {
                    i(t5, e6, r4[e6]);
                  });
                }
                return t5;
              }({}, e4, { customInspect: false, depth: 0 }));
            } }], n2 && o(r3.prototype, n2), e3;
          }(u(Error));
          t2.exports = O;
        }, 3743: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t4) {
              return n(t4);
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : n(t4);
            }, i(t3);
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf || function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s, u, c = {};
          function f(t3, e3, r3) {
            r3 || (r3 = Error);
            var n2 = function(r4) {
              function n3(r5, a2, s2) {
                var u2;
                return function(t4, e4) {
                  if (!(t4 instanceof e4))
                    throw new TypeError("Cannot call a class as a function");
                }(this, n3), u2 = function(t4, e4) {
                  return !e4 || "object" !== i(e4) && "function" != typeof e4 ? function(t5) {
                    if (void 0 === t5)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t5;
                  }(t4) : e4;
                }(this, o(n3).call(this, function(t4, r6, n4) {
                  return "string" == typeof e3 ? e3 : e3(t4, r6, n4);
                }(r5, a2, s2))), u2.code = t3, u2;
              }
              return function(t4, e4) {
                if ("function" != typeof e4 && null !== e4)
                  throw new TypeError("Super expression must either be null or a function");
                t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), e4 && a(t4, e4);
              }(n3, r4), n3;
            }(r3);
            c[t3] = n2;
          }
          function l(t3, e3) {
            if (Array.isArray(t3)) {
              var r3 = t3.length;
              return t3 = t3.map(function(t4) {
                return String(t4);
              }), r3 > 2 ? "one of ".concat(e3, " ").concat(t3.slice(0, r3 - 1).join(", "), ", or ") + t3[r3 - 1] : 2 === r3 ? "one of ".concat(e3, " ").concat(t3[0], " or ").concat(t3[1]) : "of ".concat(e3, " ").concat(t3[0]);
            }
            return "of ".concat(e3, " ").concat(String(t3));
          }
          f("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), f("ERR_INVALID_ARG_TYPE", function(t3, e3, n2) {
            var o2, a2, u2, c2, f2;
            if (void 0 === s && (s = r2(2402)), s("string" == typeof t3, "'name' must be a string"), "string" == typeof e3 && (a2 = "not ", e3.substr(0, 4) === a2) ? (o2 = "must not be", e3 = e3.replace(/^not /, "")) : o2 = "must be", function(t4, e4, r3) {
              return (void 0 === r3 || r3 > t4.length) && (r3 = t4.length), t4.substring(r3 - 9, r3) === e4;
            }(t3, " argument"))
              u2 = "The ".concat(t3, " ").concat(o2, " ").concat(l(e3, "type"));
            else {
              var h = ("number" != typeof f2 && (f2 = 0), f2 + 1 > (c2 = t3).length || -1 === c2.indexOf(".", f2) ? "argument" : "property");
              u2 = 'The "'.concat(t3, '" ').concat(h, " ").concat(o2, " ").concat(l(e3, "type"));
            }
            return u2 + ". Received type ".concat(i(n2));
          }, TypeError), f("ERR_INVALID_ARG_VALUE", function(t3, e3) {
            var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
            void 0 === u && (u = r2(7352));
            var i2 = u.inspect(e3);
            return i2.length > 128 && (i2 = "".concat(i2.slice(0, 128), "...")), "The argument '".concat(t3, "' ").concat(n2, ". Received ").concat(i2);
          }, TypeError, RangeError), f("ERR_INVALID_RETURN_VALUE", function(t3, e3, r3) {
            var n2;
            return n2 = r3 && r3.constructor && r3.constructor.name ? "instance of ".concat(r3.constructor.name) : "type ".concat(i(r3)), "Expected ".concat(t3, ' to be returned from the "').concat(e3, '"') + " function but got ".concat(n2, ".");
          }, TypeError), f("ERR_MISSING_ARGS", function() {
            for (var t3 = arguments.length, e3 = new Array(t3), n2 = 0; n2 < t3; n2++)
              e3[n2] = arguments[n2];
            void 0 === s && (s = r2(2402)), s(e3.length > 0, "At least one arg needs to be specified");
            var i2 = "The ", o2 = e3.length;
            switch (e3 = e3.map(function(t4) {
              return '"'.concat(t4, '"');
            }), o2) {
              case 1:
                i2 += "".concat(e3[0], " argument");
                break;
              case 2:
                i2 += "".concat(e3[0], " and ").concat(e3[1], " arguments");
                break;
              default:
                i2 += e3.slice(0, o2 - 1).join(", "), i2 += ", and ".concat(e3[o2 - 1], " arguments");
            }
            return "".concat(i2, " must be specified");
          }, TypeError), t2.exports.codes = c;
        }, 6193: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            return function(t4) {
              if (Array.isArray(t4))
                return t4;
            }(t3) || function(t4, e4) {
              var r3 = [], n2 = true, i2 = false, o2 = void 0;
              try {
                for (var a2, s2 = t4[Symbol.iterator](); !(n2 = (a2 = s2.next()).done) && (r3.push(a2.value), !e4 || r3.length !== e4); n2 = true)
                  ;
              } catch (t5) {
                i2 = true, o2 = t5;
              } finally {
                try {
                  n2 || null == s2.return || s2.return();
                } finally {
                  if (i2)
                    throw o2;
                }
              }
              return r3;
            }(t3, e3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          function o(t3) {
            return o = "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? function(t4) {
              return n(t4);
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : n(t4);
            }, o(t3);
          }
          var a = void 0 !== /a/g.flags, s = function(t3) {
            var e3 = [];
            return t3.forEach(function(t4) {
              return e3.push(t4);
            }), e3;
          }, u = function(t3) {
            var e3 = [];
            return t3.forEach(function(t4, r3) {
              return e3.push([r3, t4]);
            }), e3;
          }, c = Object.is ? Object.is : r2(2064), f = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
            return [];
          }, l = Number.isNaN ? Number.isNaN : r2(6062);
          function h(t3) {
            return t3.call.bind(t3);
          }
          var p = h(Object.prototype.hasOwnProperty), d = h(Object.prototype.propertyIsEnumerable), y = h(Object.prototype.toString), b = r2(7352).types, m = b.isAnyArrayBuffer, v = b.isArrayBufferView, g = b.isDate, _ = b.isMap, w = b.isRegExp, S = b.isSet, O = b.isNativeError, j = b.isBoxedPrimitive, $ = b.isNumberObject, E = b.isStringObject, A = b.isBooleanObject, P = b.isBigIntObject, x = b.isSymbolObject, k = b.isFloat32Array, M = b.isFloat64Array;
          function T(t3) {
            if (0 === t3.length || t3.length > 10)
              return true;
            for (var e3 = 0; e3 < t3.length; e3++) {
              var r3 = t3.charCodeAt(e3);
              if (r3 < 48 || r3 > 57)
                return true;
            }
            return 10 === t3.length && t3 >= Math.pow(2, 32);
          }
          function B(t3) {
            return Object.keys(t3).filter(T).concat(f(t3).filter(Object.prototype.propertyIsEnumerable.bind(t3)));
          }
          function I(t3, e3) {
            if (t3 === e3)
              return 0;
            for (var r3 = t3.length, n2 = e3.length, i2 = 0, o2 = Math.min(r3, n2); i2 < o2; ++i2)
              if (t3[i2] !== e3[i2]) {
                r3 = t3[i2], n2 = e3[i2];
                break;
              }
            return r3 < n2 ? -1 : n2 < r3 ? 1 : 0;
          }
          function R(t3, e3, r3, n2) {
            if (t3 === e3)
              return 0 !== t3 || !r3 || c(t3, e3);
            if (r3) {
              if ("object" !== o(t3))
                return "number" == typeof t3 && l(t3) && l(e3);
              if ("object" !== o(e3) || null === t3 || null === e3)
                return false;
              if (Object.getPrototypeOf(t3) !== Object.getPrototypeOf(e3))
                return false;
            } else {
              if (null === t3 || "object" !== o(t3))
                return (null === e3 || "object" !== o(e3)) && t3 == e3;
              if (null === e3 || "object" !== o(e3))
                return false;
            }
            var i2, s2, u2, f2, h2 = y(t3);
            if (h2 !== y(e3))
              return false;
            if (Array.isArray(t3)) {
              if (t3.length !== e3.length)
                return false;
              var p2 = B(t3), d2 = B(e3);
              return p2.length === d2.length && D(t3, e3, r3, n2, 1, p2);
            }
            if ("[object Object]" === h2 && (!_(t3) && _(e3) || !S(t3) && S(e3)))
              return false;
            if (g(t3)) {
              if (!g(e3) || Date.prototype.getTime.call(t3) !== Date.prototype.getTime.call(e3))
                return false;
            } else if (w(t3)) {
              if (!w(e3) || (u2 = t3, f2 = e3, !(a ? u2.source === f2.source && u2.flags === f2.flags : RegExp.prototype.toString.call(u2) === RegExp.prototype.toString.call(f2))))
                return false;
            } else if (O(t3) || t3 instanceof Error) {
              if (t3.message !== e3.message || t3.name !== e3.name)
                return false;
            } else {
              if (v(t3)) {
                if (r3 || !k(t3) && !M(t3)) {
                  if (!function(t4, e4) {
                    return t4.byteLength === e4.byteLength && 0 === I(new Uint8Array(t4.buffer, t4.byteOffset, t4.byteLength), new Uint8Array(e4.buffer, e4.byteOffset, e4.byteLength));
                  }(t3, e3))
                    return false;
                } else if (!function(t4, e4) {
                  if (t4.byteLength !== e4.byteLength)
                    return false;
                  for (var r4 = 0; r4 < t4.byteLength; r4++)
                    if (t4[r4] !== e4[r4])
                      return false;
                  return true;
                }(t3, e3))
                  return false;
                var b2 = B(t3), T2 = B(e3);
                return b2.length === T2.length && D(t3, e3, r3, n2, 0, b2);
              }
              if (S(t3))
                return !(!S(e3) || t3.size !== e3.size) && D(t3, e3, r3, n2, 2);
              if (_(t3))
                return !(!_(e3) || t3.size !== e3.size) && D(t3, e3, r3, n2, 3);
              if (m(t3)) {
                if (s2 = e3, (i2 = t3).byteLength !== s2.byteLength || 0 !== I(new Uint8Array(i2), new Uint8Array(s2)))
                  return false;
              } else if (j(t3) && !function(t4, e4) {
                return $(t4) ? $(e4) && c(Number.prototype.valueOf.call(t4), Number.prototype.valueOf.call(e4)) : E(t4) ? E(e4) && String.prototype.valueOf.call(t4) === String.prototype.valueOf.call(e4) : A(t4) ? A(e4) && Boolean.prototype.valueOf.call(t4) === Boolean.prototype.valueOf.call(e4) : P(t4) ? P(e4) && BigInt.prototype.valueOf.call(t4) === BigInt.prototype.valueOf.call(e4) : x(e4) && Symbol.prototype.valueOf.call(t4) === Symbol.prototype.valueOf.call(e4);
              }(t3, e3))
                return false;
            }
            return D(t3, e3, r3, n2, 0);
          }
          function N(t3, e3) {
            return e3.filter(function(e4) {
              return d(t3, e4);
            });
          }
          function D(t3, e3, r3, n2, a2, c2) {
            if (5 === arguments.length) {
              c2 = Object.keys(t3);
              var l2 = Object.keys(e3);
              if (c2.length !== l2.length)
                return false;
            }
            for (var h2 = 0; h2 < c2.length; h2++)
              if (!p(e3, c2[h2]))
                return false;
            if (r3 && 5 === arguments.length) {
              var y2 = f(t3);
              if (0 !== y2.length) {
                var b2 = 0;
                for (h2 = 0; h2 < y2.length; h2++) {
                  var m2 = y2[h2];
                  if (d(t3, m2)) {
                    if (!d(e3, m2))
                      return false;
                    c2.push(m2), b2++;
                  } else if (d(e3, m2))
                    return false;
                }
                var v2 = f(e3);
                if (y2.length !== v2.length && N(e3, v2).length !== b2)
                  return false;
              } else {
                var g2 = f(e3);
                if (0 !== g2.length && 0 !== N(e3, g2).length)
                  return false;
              }
            }
            if (0 === c2.length && (0 === a2 || 1 === a2 && 0 === t3.length || 0 === t3.size))
              return true;
            if (void 0 === n2)
              n2 = { val1: /* @__PURE__ */ new Map(), val2: /* @__PURE__ */ new Map(), position: 0 };
            else {
              var _2 = n2.val1.get(t3);
              if (void 0 !== _2) {
                var w2 = n2.val2.get(e3);
                if (void 0 !== w2)
                  return _2 === w2;
              }
              n2.position++;
            }
            n2.val1.set(t3, n2.position), n2.val2.set(e3, n2.position);
            var S2 = function(t4, e4, r4, n3, a3, c3) {
              var f2 = 0;
              if (2 === c3) {
                if (!function(t5, e5, r5, n4) {
                  for (var i2 = null, a4 = s(t5), u2 = 0; u2 < a4.length; u2++) {
                    var c4 = a4[u2];
                    if ("object" === o(c4) && null !== c4)
                      null === i2 && (i2 = /* @__PURE__ */ new Set()), i2.add(c4);
                    else if (!e5.has(c4)) {
                      if (r5)
                        return false;
                      if (!U(t5, e5, c4))
                        return false;
                      null === i2 && (i2 = /* @__PURE__ */ new Set()), i2.add(c4);
                    }
                  }
                  if (null !== i2) {
                    for (var f3 = s(e5), l4 = 0; l4 < f3.length; l4++) {
                      var h4 = f3[l4];
                      if ("object" === o(h4) && null !== h4) {
                        if (!L(i2, h4, r5, n4))
                          return false;
                      } else if (!r5 && !t5.has(h4) && !L(i2, h4, r5, n4))
                        return false;
                    }
                    return 0 === i2.size;
                  }
                  return true;
                }(t4, e4, r4, a3))
                  return false;
              } else if (3 === c3) {
                if (!function(t5, e5, r5, n4) {
                  for (var a4 = null, s2 = u(t5), c4 = 0; c4 < s2.length; c4++) {
                    var f3 = i(s2[c4], 2), l4 = f3[0], h4 = f3[1];
                    if ("object" === o(l4) && null !== l4)
                      null === a4 && (a4 = /* @__PURE__ */ new Set()), a4.add(l4);
                    else {
                      var p2 = e5.get(l4);
                      if (void 0 === p2 && !e5.has(l4) || !R(h4, p2, r5, n4)) {
                        if (r5)
                          return false;
                        if (!q(t5, e5, l4, h4, n4))
                          return false;
                        null === a4 && (a4 = /* @__PURE__ */ new Set()), a4.add(l4);
                      }
                    }
                  }
                  if (null !== a4) {
                    for (var d3 = u(e5), y3 = 0; y3 < d3.length; y3++) {
                      var b3 = i(d3[y3], 2), m3 = (l4 = b3[0], b3[1]);
                      if ("object" === o(l4) && null !== l4) {
                        if (!F(a4, t5, l4, m3, r5, n4))
                          return false;
                      } else if (!(r5 || t5.has(l4) && R(t5.get(l4), m3, false, n4) || F(a4, t5, l4, m3, false, n4)))
                        return false;
                    }
                    return 0 === a4.size;
                  }
                  return true;
                }(t4, e4, r4, a3))
                  return false;
              } else if (1 === c3)
                for (; f2 < t4.length; f2++) {
                  if (!p(t4, f2)) {
                    if (p(e4, f2))
                      return false;
                    for (var l3 = Object.keys(t4); f2 < l3.length; f2++) {
                      var h3 = l3[f2];
                      if (!p(e4, h3) || !R(t4[h3], e4[h3], r4, a3))
                        return false;
                    }
                    return l3.length === Object.keys(e4).length;
                  }
                  if (!p(e4, f2) || !R(t4[f2], e4[f2], r4, a3))
                    return false;
                }
              for (f2 = 0; f2 < n3.length; f2++) {
                var d2 = n3[f2];
                if (!R(t4[d2], e4[d2], r4, a3))
                  return false;
              }
              return true;
            }(t3, e3, r3, c2, n2, a2);
            return n2.val1.delete(t3), n2.val2.delete(e3), S2;
          }
          function L(t3, e3, r3, n2) {
            for (var i2 = s(t3), o2 = 0; o2 < i2.length; o2++) {
              var a2 = i2[o2];
              if (R(e3, a2, r3, n2))
                return t3.delete(a2), true;
            }
            return false;
          }
          function C(t3) {
            switch (o(t3)) {
              case "undefined":
                return null;
              case "object":
                return;
              case "symbol":
                return false;
              case "string":
                t3 = +t3;
              case "number":
                if (l(t3))
                  return false;
            }
            return true;
          }
          function U(t3, e3, r3) {
            var n2 = C(r3);
            return null != n2 ? n2 : e3.has(n2) && !t3.has(n2);
          }
          function q(t3, e3, r3, n2, i2) {
            var o2 = C(r3);
            if (null != o2)
              return o2;
            var a2 = e3.get(o2);
            return !(void 0 === a2 && !e3.has(o2) || !R(n2, a2, false, i2)) && !t3.has(o2) && R(n2, a2, false, i2);
          }
          function F(t3, e3, r3, n2, i2, o2) {
            for (var a2 = s(t3), u2 = 0; u2 < a2.length; u2++) {
              var c2 = a2[u2];
              if (R(r3, c2, i2, o2) && R(n2, e3.get(c2), i2, o2))
                return t3.delete(c2), true;
            }
            return false;
          }
          t2.exports = { isDeepEqual: function(t3, e3) {
            return R(t3, e3, false);
          }, isDeepStrictEqual: function(t3, e3) {
            return R(t3, e3, true);
          } };
        }, 6775: (t2, e2) => {
          "use strict";
          e2.byteLength = function(t3) {
            var e3 = s(t3), r3 = e3[0], n2 = e3[1];
            return 3 * (r3 + n2) / 4 - n2;
          }, e2.toByteArray = function(t3) {
            var e3, r3, o2 = s(t3), a2 = o2[0], u2 = o2[1], c = new i(function(t4, e4, r4) {
              return 3 * (e4 + r4) / 4 - r4;
            }(0, a2, u2)), f = 0, l = u2 > 0 ? a2 - 4 : a2;
            for (r3 = 0; r3 < l; r3 += 4)
              e3 = n[t3.charCodeAt(r3)] << 18 | n[t3.charCodeAt(r3 + 1)] << 12 | n[t3.charCodeAt(r3 + 2)] << 6 | n[t3.charCodeAt(r3 + 3)], c[f++] = e3 >> 16 & 255, c[f++] = e3 >> 8 & 255, c[f++] = 255 & e3;
            return 2 === u2 && (e3 = n[t3.charCodeAt(r3)] << 2 | n[t3.charCodeAt(r3 + 1)] >> 4, c[f++] = 255 & e3), 1 === u2 && (e3 = n[t3.charCodeAt(r3)] << 10 | n[t3.charCodeAt(r3 + 1)] << 4 | n[t3.charCodeAt(r3 + 2)] >> 2, c[f++] = e3 >> 8 & 255, c[f++] = 255 & e3), c;
          }, e2.fromByteArray = function(t3) {
            for (var e3, n2 = t3.length, i2 = n2 % 3, o2 = [], a2 = 16383, s2 = 0, c = n2 - i2; s2 < c; s2 += a2)
              o2.push(u(t3, s2, s2 + a2 > c ? c : s2 + a2));
            return 1 === i2 ? (e3 = t3[n2 - 1], o2.push(r2[e3 >> 2] + r2[e3 << 4 & 63] + "==")) : 2 === i2 && (e3 = (t3[n2 - 2] << 8) + t3[n2 - 1], o2.push(r2[e3 >> 10] + r2[e3 >> 4 & 63] + r2[e3 << 2 & 63] + "=")), o2.join("");
          };
          for (var r2 = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0; a < 64; ++a)
            r2[a] = o[a], n[o.charCodeAt(a)] = a;
          function s(t3) {
            var e3 = t3.length;
            if (e3 % 4 > 0)
              throw new Error("Invalid string. Length must be a multiple of 4");
            var r3 = t3.indexOf("=");
            return -1 === r3 && (r3 = e3), [r3, r3 === e3 ? 0 : 4 - r3 % 4];
          }
          function u(t3, e3, n2) {
            for (var i2, o2, a2 = [], s2 = e3; s2 < n2; s2 += 3)
              i2 = (t3[s2] << 16 & 16711680) + (t3[s2 + 1] << 8 & 65280) + (255 & t3[s2 + 2]), a2.push(r2[(o2 = i2) >> 18 & 63] + r2[o2 >> 12 & 63] + r2[o2 >> 6 & 63] + r2[63 & o2]);
            return a2.join("");
          }
          n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
        }, 7799: function(t2, e2, r2) {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          !function(t3, e3) {
            "use strict";
            function i(t4, e4) {
              if (!t4)
                throw new Error(e4 || "Assertion failed");
            }
            function o(t4, e4) {
              t4.super_ = e4;
              var r3 = function() {
              };
              r3.prototype = e4.prototype, t4.prototype = new r3(), t4.prototype.constructor = t4;
            }
            function a(t4, e4, r3) {
              if (a.isBN(t4))
                return t4;
              this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t4 && ("le" !== e4 && "be" !== e4 || (r3 = e4, e4 = 10), this._init(t4 || 0, e4 || 10, r3 || "be"));
            }
            var s;
            "object" === n(t3) ? t3.exports = a : e3.BN = a, a.BN = a, a.wordSize = 26;
            try {
              s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r2(7790).Buffer;
            } catch (t4) {
            }
            function u(t4, e4) {
              var r3 = t4.charCodeAt(e4);
              return r3 >= 48 && r3 <= 57 ? r3 - 48 : r3 >= 65 && r3 <= 70 ? r3 - 55 : r3 >= 97 && r3 <= 102 ? r3 - 87 : void i(false, "Invalid character in " + t4);
            }
            function c(t4, e4, r3) {
              var n2 = u(t4, r3);
              return r3 - 1 >= e4 && (n2 |= u(t4, r3 - 1) << 4), n2;
            }
            function f(t4, e4, r3, n2) {
              for (var o2 = 0, a2 = 0, s2 = Math.min(t4.length, r3), u2 = e4; u2 < s2; u2++) {
                var c2 = t4.charCodeAt(u2) - 48;
                o2 *= n2, a2 = c2 >= 49 ? c2 - 49 + 10 : c2 >= 17 ? c2 - 17 + 10 : c2, i(c2 >= 0 && a2 < n2, "Invalid character"), o2 += a2;
              }
              return o2;
            }
            function l(t4, e4) {
              t4.words = e4.words, t4.length = e4.length, t4.negative = e4.negative, t4.red = e4.red;
            }
            if (a.isBN = function(t4) {
              return t4 instanceof a || null !== t4 && "object" === n(t4) && t4.constructor.wordSize === a.wordSize && Array.isArray(t4.words);
            }, a.max = function(t4, e4) {
              return t4.cmp(e4) > 0 ? t4 : e4;
            }, a.min = function(t4, e4) {
              return t4.cmp(e4) < 0 ? t4 : e4;
            }, a.prototype._init = function(t4, e4, r3) {
              if ("number" == typeof t4)
                return this._initNumber(t4, e4, r3);
              if ("object" === n(t4))
                return this._initArray(t4, e4, r3);
              "hex" === e4 && (e4 = 16), i(e4 === (0 | e4) && e4 >= 2 && e4 <= 36);
              var o2 = 0;
              "-" === (t4 = t4.toString().replace(/\s+/g, ""))[0] && (o2++, this.negative = 1), o2 < t4.length && (16 === e4 ? this._parseHex(t4, o2, r3) : (this._parseBase(t4, e4, o2), "le" === r3 && this._initArray(this.toArray(), e4, r3)));
            }, a.prototype._initNumber = function(t4, e4, r3) {
              t4 < 0 && (this.negative = 1, t4 = -t4), t4 < 67108864 ? (this.words = [67108863 & t4], this.length = 1) : t4 < 4503599627370496 ? (this.words = [67108863 & t4, t4 / 67108864 & 67108863], this.length = 2) : (i(t4 < 9007199254740992), this.words = [67108863 & t4, t4 / 67108864 & 67108863, 1], this.length = 3), "le" === r3 && this._initArray(this.toArray(), e4, r3);
            }, a.prototype._initArray = function(t4, e4, r3) {
              if (i("number" == typeof t4.length), t4.length <= 0)
                return this.words = [0], this.length = 1, this;
              this.length = Math.ceil(t4.length / 3), this.words = new Array(this.length);
              for (var n2 = 0; n2 < this.length; n2++)
                this.words[n2] = 0;
              var o2, a2, s2 = 0;
              if ("be" === r3)
                for (n2 = t4.length - 1, o2 = 0; n2 >= 0; n2 -= 3)
                  a2 = t4[n2] | t4[n2 - 1] << 8 | t4[n2 - 2] << 16, this.words[o2] |= a2 << s2 & 67108863, this.words[o2 + 1] = a2 >>> 26 - s2 & 67108863, (s2 += 24) >= 26 && (s2 -= 26, o2++);
              else if ("le" === r3)
                for (n2 = 0, o2 = 0; n2 < t4.length; n2 += 3)
                  a2 = t4[n2] | t4[n2 + 1] << 8 | t4[n2 + 2] << 16, this.words[o2] |= a2 << s2 & 67108863, this.words[o2 + 1] = a2 >>> 26 - s2 & 67108863, (s2 += 24) >= 26 && (s2 -= 26, o2++);
              return this._strip();
            }, a.prototype._parseHex = function(t4, e4, r3) {
              this.length = Math.ceil((t4.length - e4) / 6), this.words = new Array(this.length);
              for (var n2 = 0; n2 < this.length; n2++)
                this.words[n2] = 0;
              var i2, o2 = 0, a2 = 0;
              if ("be" === r3)
                for (n2 = t4.length - 1; n2 >= e4; n2 -= 2)
                  i2 = c(t4, e4, n2) << o2, this.words[a2] |= 67108863 & i2, o2 >= 18 ? (o2 -= 18, a2 += 1, this.words[a2] |= i2 >>> 26) : o2 += 8;
              else
                for (n2 = (t4.length - e4) % 2 == 0 ? e4 + 1 : e4; n2 < t4.length; n2 += 2)
                  i2 = c(t4, e4, n2) << o2, this.words[a2] |= 67108863 & i2, o2 >= 18 ? (o2 -= 18, a2 += 1, this.words[a2] |= i2 >>> 26) : o2 += 8;
              this._strip();
            }, a.prototype._parseBase = function(t4, e4, r3) {
              this.words = [0], this.length = 1;
              for (var n2 = 0, i2 = 1; i2 <= 67108863; i2 *= e4)
                n2++;
              n2--, i2 = i2 / e4 | 0;
              for (var o2 = t4.length - r3, a2 = o2 % n2, s2 = Math.min(o2, o2 - a2) + r3, u2 = 0, c2 = r3; c2 < s2; c2 += n2)
                u2 = f(t4, c2, c2 + n2, e4), this.imuln(i2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
              if (0 !== a2) {
                var l2 = 1;
                for (u2 = f(t4, c2, t4.length, e4), c2 = 0; c2 < a2; c2++)
                  l2 *= e4;
                this.imuln(l2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
              }
              this._strip();
            }, a.prototype.copy = function(t4) {
              t4.words = new Array(this.length);
              for (var e4 = 0; e4 < this.length; e4++)
                t4.words[e4] = this.words[e4];
              t4.length = this.length, t4.negative = this.negative, t4.red = this.red;
            }, a.prototype._move = function(t4) {
              l(t4, this);
            }, a.prototype.clone = function() {
              var t4 = new a(null);
              return this.copy(t4), t4;
            }, a.prototype._expand = function(t4) {
              for (; this.length < t4; )
                this.words[this.length++] = 0;
              return this;
            }, a.prototype._strip = function() {
              for (; this.length > 1 && 0 === this.words[this.length - 1]; )
                this.length--;
              return this._normSign();
            }, a.prototype._normSign = function() {
              return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
            }, "undefined" != typeof Symbol && "function" == typeof Symbol.for)
              try {
                a.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
              } catch (t4) {
                a.prototype.inspect = h;
              }
            else
              a.prototype.inspect = h;
            function h() {
              return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            }
            var p = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], d = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], y = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
            function b(t4, e4, r3) {
              r3.negative = e4.negative ^ t4.negative;
              var n2 = t4.length + e4.length | 0;
              r3.length = n2, n2 = n2 - 1 | 0;
              var i2 = 0 | t4.words[0], o2 = 0 | e4.words[0], a2 = i2 * o2, s2 = 67108863 & a2, u2 = a2 / 67108864 | 0;
              r3.words[0] = s2;
              for (var c2 = 1; c2 < n2; c2++) {
                for (var f2 = u2 >>> 26, l2 = 67108863 & u2, h2 = Math.min(c2, e4.length - 1), p2 = Math.max(0, c2 - t4.length + 1); p2 <= h2; p2++) {
                  var d2 = c2 - p2 | 0;
                  f2 += (a2 = (i2 = 0 | t4.words[d2]) * (o2 = 0 | e4.words[p2]) + l2) / 67108864 | 0, l2 = 67108863 & a2;
                }
                r3.words[c2] = 0 | l2, u2 = 0 | f2;
              }
              return 0 !== u2 ? r3.words[c2] = 0 | u2 : r3.length--, r3._strip();
            }
            a.prototype.toString = function(t4, e4) {
              var r3;
              if (e4 = 0 | e4 || 1, 16 === (t4 = t4 || 10) || "hex" === t4) {
                r3 = "";
                for (var n2 = 0, o2 = 0, a2 = 0; a2 < this.length; a2++) {
                  var s2 = this.words[a2], u2 = (16777215 & (s2 << n2 | o2)).toString(16);
                  o2 = s2 >>> 24 - n2 & 16777215, (n2 += 2) >= 26 && (n2 -= 26, a2--), r3 = 0 !== o2 || a2 !== this.length - 1 ? p[6 - u2.length] + u2 + r3 : u2 + r3;
                }
                for (0 !== o2 && (r3 = o2.toString(16) + r3); r3.length % e4 != 0; )
                  r3 = "0" + r3;
                return 0 !== this.negative && (r3 = "-" + r3), r3;
              }
              if (t4 === (0 | t4) && t4 >= 2 && t4 <= 36) {
                var c2 = d[t4], f2 = y[t4];
                r3 = "";
                var l2 = this.clone();
                for (l2.negative = 0; !l2.isZero(); ) {
                  var h2 = l2.modrn(f2).toString(t4);
                  r3 = (l2 = l2.idivn(f2)).isZero() ? h2 + r3 : p[c2 - h2.length] + h2 + r3;
                }
                for (this.isZero() && (r3 = "0" + r3); r3.length % e4 != 0; )
                  r3 = "0" + r3;
                return 0 !== this.negative && (r3 = "-" + r3), r3;
              }
              i(false, "Base should be between 2 and 36");
            }, a.prototype.toNumber = function() {
              var t4 = this.words[0];
              return 2 === this.length ? t4 += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t4 += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(false, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -t4 : t4;
            }, a.prototype.toJSON = function() {
              return this.toString(16, 2);
            }, s && (a.prototype.toBuffer = function(t4, e4) {
              return this.toArrayLike(s, t4, e4);
            }), a.prototype.toArray = function(t4, e4) {
              return this.toArrayLike(Array, t4, e4);
            }, a.prototype.toArrayLike = function(t4, e4, r3) {
              this._strip();
              var n2 = this.byteLength(), o2 = r3 || Math.max(1, n2);
              i(n2 <= o2, "byte array longer than desired length"), i(o2 > 0, "Requested array length <= 0");
              var a2 = function(t5, e5) {
                return t5.allocUnsafe ? t5.allocUnsafe(e5) : new t5(e5);
              }(t4, o2);
              return this["_toArrayLike" + ("le" === e4 ? "LE" : "BE")](a2, n2), a2;
            }, a.prototype._toArrayLikeLE = function(t4, e4) {
              for (var r3 = 0, n2 = 0, i2 = 0, o2 = 0; i2 < this.length; i2++) {
                var a2 = this.words[i2] << o2 | n2;
                t4[r3++] = 255 & a2, r3 < t4.length && (t4[r3++] = a2 >> 8 & 255), r3 < t4.length && (t4[r3++] = a2 >> 16 & 255), 6 === o2 ? (r3 < t4.length && (t4[r3++] = a2 >> 24 & 255), n2 = 0, o2 = 0) : (n2 = a2 >>> 24, o2 += 2);
              }
              if (r3 < t4.length)
                for (t4[r3++] = n2; r3 < t4.length; )
                  t4[r3++] = 0;
            }, a.prototype._toArrayLikeBE = function(t4, e4) {
              for (var r3 = t4.length - 1, n2 = 0, i2 = 0, o2 = 0; i2 < this.length; i2++) {
                var a2 = this.words[i2] << o2 | n2;
                t4[r3--] = 255 & a2, r3 >= 0 && (t4[r3--] = a2 >> 8 & 255), r3 >= 0 && (t4[r3--] = a2 >> 16 & 255), 6 === o2 ? (r3 >= 0 && (t4[r3--] = a2 >> 24 & 255), n2 = 0, o2 = 0) : (n2 = a2 >>> 24, o2 += 2);
              }
              if (r3 >= 0)
                for (t4[r3--] = n2; r3 >= 0; )
                  t4[r3--] = 0;
            }, Math.clz32 ? a.prototype._countBits = function(t4) {
              return 32 - Math.clz32(t4);
            } : a.prototype._countBits = function(t4) {
              var e4 = t4, r3 = 0;
              return e4 >= 4096 && (r3 += 13, e4 >>>= 13), e4 >= 64 && (r3 += 7, e4 >>>= 7), e4 >= 8 && (r3 += 4, e4 >>>= 4), e4 >= 2 && (r3 += 2, e4 >>>= 2), r3 + e4;
            }, a.prototype._zeroBits = function(t4) {
              if (0 === t4)
                return 26;
              var e4 = t4, r3 = 0;
              return 8191 & e4 || (r3 += 13, e4 >>>= 13), 127 & e4 || (r3 += 7, e4 >>>= 7), 15 & e4 || (r3 += 4, e4 >>>= 4), 3 & e4 || (r3 += 2, e4 >>>= 2), 1 & e4 || r3++, r3;
            }, a.prototype.bitLength = function() {
              var t4 = this.words[this.length - 1], e4 = this._countBits(t4);
              return 26 * (this.length - 1) + e4;
            }, a.prototype.zeroBits = function() {
              if (this.isZero())
                return 0;
              for (var t4 = 0, e4 = 0; e4 < this.length; e4++) {
                var r3 = this._zeroBits(this.words[e4]);
                if (t4 += r3, 26 !== r3)
                  break;
              }
              return t4;
            }, a.prototype.byteLength = function() {
              return Math.ceil(this.bitLength() / 8);
            }, a.prototype.toTwos = function(t4) {
              return 0 !== this.negative ? this.abs().inotn(t4).iaddn(1) : this.clone();
            }, a.prototype.fromTwos = function(t4) {
              return this.testn(t4 - 1) ? this.notn(t4).iaddn(1).ineg() : this.clone();
            }, a.prototype.isNeg = function() {
              return 0 !== this.negative;
            }, a.prototype.neg = function() {
              return this.clone().ineg();
            }, a.prototype.ineg = function() {
              return this.isZero() || (this.negative ^= 1), this;
            }, a.prototype.iuor = function(t4) {
              for (; this.length < t4.length; )
                this.words[this.length++] = 0;
              for (var e4 = 0; e4 < t4.length; e4++)
                this.words[e4] = this.words[e4] | t4.words[e4];
              return this._strip();
            }, a.prototype.ior = function(t4) {
              return i(!(this.negative | t4.negative)), this.iuor(t4);
            }, a.prototype.or = function(t4) {
              return this.length > t4.length ? this.clone().ior(t4) : t4.clone().ior(this);
            }, a.prototype.uor = function(t4) {
              return this.length > t4.length ? this.clone().iuor(t4) : t4.clone().iuor(this);
            }, a.prototype.iuand = function(t4) {
              var e4;
              e4 = this.length > t4.length ? t4 : this;
              for (var r3 = 0; r3 < e4.length; r3++)
                this.words[r3] = this.words[r3] & t4.words[r3];
              return this.length = e4.length, this._strip();
            }, a.prototype.iand = function(t4) {
              return i(!(this.negative | t4.negative)), this.iuand(t4);
            }, a.prototype.and = function(t4) {
              return this.length > t4.length ? this.clone().iand(t4) : t4.clone().iand(this);
            }, a.prototype.uand = function(t4) {
              return this.length > t4.length ? this.clone().iuand(t4) : t4.clone().iuand(this);
            }, a.prototype.iuxor = function(t4) {
              var e4, r3;
              this.length > t4.length ? (e4 = this, r3 = t4) : (e4 = t4, r3 = this);
              for (var n2 = 0; n2 < r3.length; n2++)
                this.words[n2] = e4.words[n2] ^ r3.words[n2];
              if (this !== e4)
                for (; n2 < e4.length; n2++)
                  this.words[n2] = e4.words[n2];
              return this.length = e4.length, this._strip();
            }, a.prototype.ixor = function(t4) {
              return i(!(this.negative | t4.negative)), this.iuxor(t4);
            }, a.prototype.xor = function(t4) {
              return this.length > t4.length ? this.clone().ixor(t4) : t4.clone().ixor(this);
            }, a.prototype.uxor = function(t4) {
              return this.length > t4.length ? this.clone().iuxor(t4) : t4.clone().iuxor(this);
            }, a.prototype.inotn = function(t4) {
              i("number" == typeof t4 && t4 >= 0);
              var e4 = 0 | Math.ceil(t4 / 26), r3 = t4 % 26;
              this._expand(e4), r3 > 0 && e4--;
              for (var n2 = 0; n2 < e4; n2++)
                this.words[n2] = 67108863 & ~this.words[n2];
              return r3 > 0 && (this.words[n2] = ~this.words[n2] & 67108863 >> 26 - r3), this._strip();
            }, a.prototype.notn = function(t4) {
              return this.clone().inotn(t4);
            }, a.prototype.setn = function(t4, e4) {
              i("number" == typeof t4 && t4 >= 0);
              var r3 = t4 / 26 | 0, n2 = t4 % 26;
              return this._expand(r3 + 1), this.words[r3] = e4 ? this.words[r3] | 1 << n2 : this.words[r3] & ~(1 << n2), this._strip();
            }, a.prototype.iadd = function(t4) {
              var e4, r3, n2;
              if (0 !== this.negative && 0 === t4.negative)
                return this.negative = 0, e4 = this.isub(t4), this.negative ^= 1, this._normSign();
              if (0 === this.negative && 0 !== t4.negative)
                return t4.negative = 0, e4 = this.isub(t4), t4.negative = 1, e4._normSign();
              this.length > t4.length ? (r3 = this, n2 = t4) : (r3 = t4, n2 = this);
              for (var i2 = 0, o2 = 0; o2 < n2.length; o2++)
                e4 = (0 | r3.words[o2]) + (0 | n2.words[o2]) + i2, this.words[o2] = 67108863 & e4, i2 = e4 >>> 26;
              for (; 0 !== i2 && o2 < r3.length; o2++)
                e4 = (0 | r3.words[o2]) + i2, this.words[o2] = 67108863 & e4, i2 = e4 >>> 26;
              if (this.length = r3.length, 0 !== i2)
                this.words[this.length] = i2, this.length++;
              else if (r3 !== this)
                for (; o2 < r3.length; o2++)
                  this.words[o2] = r3.words[o2];
              return this;
            }, a.prototype.add = function(t4) {
              var e4;
              return 0 !== t4.negative && 0 === this.negative ? (t4.negative = 0, e4 = this.sub(t4), t4.negative ^= 1, e4) : 0 === t4.negative && 0 !== this.negative ? (this.negative = 0, e4 = t4.sub(this), this.negative = 1, e4) : this.length > t4.length ? this.clone().iadd(t4) : t4.clone().iadd(this);
            }, a.prototype.isub = function(t4) {
              if (0 !== t4.negative) {
                t4.negative = 0;
                var e4 = this.iadd(t4);
                return t4.negative = 1, e4._normSign();
              }
              if (0 !== this.negative)
                return this.negative = 0, this.iadd(t4), this.negative = 1, this._normSign();
              var r3, n2, i2 = this.cmp(t4);
              if (0 === i2)
                return this.negative = 0, this.length = 1, this.words[0] = 0, this;
              i2 > 0 ? (r3 = this, n2 = t4) : (r3 = t4, n2 = this);
              for (var o2 = 0, a2 = 0; a2 < n2.length; a2++)
                o2 = (e4 = (0 | r3.words[a2]) - (0 | n2.words[a2]) + o2) >> 26, this.words[a2] = 67108863 & e4;
              for (; 0 !== o2 && a2 < r3.length; a2++)
                o2 = (e4 = (0 | r3.words[a2]) + o2) >> 26, this.words[a2] = 67108863 & e4;
              if (0 === o2 && a2 < r3.length && r3 !== this)
                for (; a2 < r3.length; a2++)
                  this.words[a2] = r3.words[a2];
              return this.length = Math.max(this.length, a2), r3 !== this && (this.negative = 1), this._strip();
            }, a.prototype.sub = function(t4) {
              return this.clone().isub(t4);
            };
            var m = function(t4, e4, r3) {
              var n2, i2, o2, a2 = t4.words, s2 = e4.words, u2 = r3.words, c2 = 0, f2 = 0 | a2[0], l2 = 8191 & f2, h2 = f2 >>> 13, p2 = 0 | a2[1], d2 = 8191 & p2, y2 = p2 >>> 13, b2 = 0 | a2[2], m2 = 8191 & b2, v2 = b2 >>> 13, g2 = 0 | a2[3], _2 = 8191 & g2, w2 = g2 >>> 13, S2 = 0 | a2[4], O2 = 8191 & S2, j2 = S2 >>> 13, $2 = 0 | a2[5], E2 = 8191 & $2, A2 = $2 >>> 13, P2 = 0 | a2[6], x = 8191 & P2, k = P2 >>> 13, M = 0 | a2[7], T = 8191 & M, B = M >>> 13, I = 0 | a2[8], R = 8191 & I, N = I >>> 13, D = 0 | a2[9], L = 8191 & D, C = D >>> 13, U = 0 | s2[0], q = 8191 & U, F = U >>> 13, V = 0 | s2[1], z = 8191 & V, K = V >>> 13, H = 0 | s2[2], W = 8191 & H, J = H >>> 13, G = 0 | s2[3], Y = 8191 & G, Q = G >>> 13, X = 0 | s2[4], Z = 8191 & X, tt = X >>> 13, et = 0 | s2[5], rt = 8191 & et, nt = et >>> 13, it = 0 | s2[6], ot = 8191 & it, at = it >>> 13, st = 0 | s2[7], ut = 8191 & st, ct = st >>> 13, ft = 0 | s2[8], lt = 8191 & ft, ht = ft >>> 13, pt = 0 | s2[9], dt = 8191 & pt, yt = pt >>> 13;
              r3.negative = t4.negative ^ e4.negative, r3.length = 19;
              var bt = (c2 + (n2 = Math.imul(l2, q)) | 0) + ((8191 & (i2 = (i2 = Math.imul(l2, F)) + Math.imul(h2, q) | 0)) << 13) | 0;
              c2 = ((o2 = Math.imul(h2, F)) + (i2 >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, n2 = Math.imul(d2, q), i2 = (i2 = Math.imul(d2, F)) + Math.imul(y2, q) | 0, o2 = Math.imul(y2, F);
              var mt = (c2 + (n2 = n2 + Math.imul(l2, z) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, K) | 0) + Math.imul(h2, z) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, K) | 0) + (i2 >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, n2 = Math.imul(m2, q), i2 = (i2 = Math.imul(m2, F)) + Math.imul(v2, q) | 0, o2 = Math.imul(v2, F), n2 = n2 + Math.imul(d2, z) | 0, i2 = (i2 = i2 + Math.imul(d2, K) | 0) + Math.imul(y2, z) | 0, o2 = o2 + Math.imul(y2, K) | 0;
              var vt = (c2 + (n2 = n2 + Math.imul(l2, W) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, J) | 0) + Math.imul(h2, W) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, J) | 0) + (i2 >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, n2 = Math.imul(_2, q), i2 = (i2 = Math.imul(_2, F)) + Math.imul(w2, q) | 0, o2 = Math.imul(w2, F), n2 = n2 + Math.imul(m2, z) | 0, i2 = (i2 = i2 + Math.imul(m2, K) | 0) + Math.imul(v2, z) | 0, o2 = o2 + Math.imul(v2, K) | 0, n2 = n2 + Math.imul(d2, W) | 0, i2 = (i2 = i2 + Math.imul(d2, J) | 0) + Math.imul(y2, W) | 0, o2 = o2 + Math.imul(y2, J) | 0;
              var gt = (c2 + (n2 = n2 + Math.imul(l2, Y) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, Q) | 0) + Math.imul(h2, Y) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, Q) | 0) + (i2 >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, n2 = Math.imul(O2, q), i2 = (i2 = Math.imul(O2, F)) + Math.imul(j2, q) | 0, o2 = Math.imul(j2, F), n2 = n2 + Math.imul(_2, z) | 0, i2 = (i2 = i2 + Math.imul(_2, K) | 0) + Math.imul(w2, z) | 0, o2 = o2 + Math.imul(w2, K) | 0, n2 = n2 + Math.imul(m2, W) | 0, i2 = (i2 = i2 + Math.imul(m2, J) | 0) + Math.imul(v2, W) | 0, o2 = o2 + Math.imul(v2, J) | 0, n2 = n2 + Math.imul(d2, Y) | 0, i2 = (i2 = i2 + Math.imul(d2, Q) | 0) + Math.imul(y2, Y) | 0, o2 = o2 + Math.imul(y2, Q) | 0;
              var _t = (c2 + (n2 = n2 + Math.imul(l2, Z) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, tt) | 0) + Math.imul(h2, Z) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, tt) | 0) + (i2 >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, n2 = Math.imul(E2, q), i2 = (i2 = Math.imul(E2, F)) + Math.imul(A2, q) | 0, o2 = Math.imul(A2, F), n2 = n2 + Math.imul(O2, z) | 0, i2 = (i2 = i2 + Math.imul(O2, K) | 0) + Math.imul(j2, z) | 0, o2 = o2 + Math.imul(j2, K) | 0, n2 = n2 + Math.imul(_2, W) | 0, i2 = (i2 = i2 + Math.imul(_2, J) | 0) + Math.imul(w2, W) | 0, o2 = o2 + Math.imul(w2, J) | 0, n2 = n2 + Math.imul(m2, Y) | 0, i2 = (i2 = i2 + Math.imul(m2, Q) | 0) + Math.imul(v2, Y) | 0, o2 = o2 + Math.imul(v2, Q) | 0, n2 = n2 + Math.imul(d2, Z) | 0, i2 = (i2 = i2 + Math.imul(d2, tt) | 0) + Math.imul(y2, Z) | 0, o2 = o2 + Math.imul(y2, tt) | 0;
              var wt = (c2 + (n2 = n2 + Math.imul(l2, rt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, nt) | 0) + Math.imul(h2, rt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, nt) | 0) + (i2 >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, n2 = Math.imul(x, q), i2 = (i2 = Math.imul(x, F)) + Math.imul(k, q) | 0, o2 = Math.imul(k, F), n2 = n2 + Math.imul(E2, z) | 0, i2 = (i2 = i2 + Math.imul(E2, K) | 0) + Math.imul(A2, z) | 0, o2 = o2 + Math.imul(A2, K) | 0, n2 = n2 + Math.imul(O2, W) | 0, i2 = (i2 = i2 + Math.imul(O2, J) | 0) + Math.imul(j2, W) | 0, o2 = o2 + Math.imul(j2, J) | 0, n2 = n2 + Math.imul(_2, Y) | 0, i2 = (i2 = i2 + Math.imul(_2, Q) | 0) + Math.imul(w2, Y) | 0, o2 = o2 + Math.imul(w2, Q) | 0, n2 = n2 + Math.imul(m2, Z) | 0, i2 = (i2 = i2 + Math.imul(m2, tt) | 0) + Math.imul(v2, Z) | 0, o2 = o2 + Math.imul(v2, tt) | 0, n2 = n2 + Math.imul(d2, rt) | 0, i2 = (i2 = i2 + Math.imul(d2, nt) | 0) + Math.imul(y2, rt) | 0, o2 = o2 + Math.imul(y2, nt) | 0;
              var St = (c2 + (n2 = n2 + Math.imul(l2, ot) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, at) | 0) + Math.imul(h2, ot) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, at) | 0) + (i2 >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, n2 = Math.imul(T, q), i2 = (i2 = Math.imul(T, F)) + Math.imul(B, q) | 0, o2 = Math.imul(B, F), n2 = n2 + Math.imul(x, z) | 0, i2 = (i2 = i2 + Math.imul(x, K) | 0) + Math.imul(k, z) | 0, o2 = o2 + Math.imul(k, K) | 0, n2 = n2 + Math.imul(E2, W) | 0, i2 = (i2 = i2 + Math.imul(E2, J) | 0) + Math.imul(A2, W) | 0, o2 = o2 + Math.imul(A2, J) | 0, n2 = n2 + Math.imul(O2, Y) | 0, i2 = (i2 = i2 + Math.imul(O2, Q) | 0) + Math.imul(j2, Y) | 0, o2 = o2 + Math.imul(j2, Q) | 0, n2 = n2 + Math.imul(_2, Z) | 0, i2 = (i2 = i2 + Math.imul(_2, tt) | 0) + Math.imul(w2, Z) | 0, o2 = o2 + Math.imul(w2, tt) | 0, n2 = n2 + Math.imul(m2, rt) | 0, i2 = (i2 = i2 + Math.imul(m2, nt) | 0) + Math.imul(v2, rt) | 0, o2 = o2 + Math.imul(v2, nt) | 0, n2 = n2 + Math.imul(d2, ot) | 0, i2 = (i2 = i2 + Math.imul(d2, at) | 0) + Math.imul(y2, ot) | 0, o2 = o2 + Math.imul(y2, at) | 0;
              var Ot = (c2 + (n2 = n2 + Math.imul(l2, ut) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, ct) | 0) + Math.imul(h2, ut) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, ct) | 0) + (i2 >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, n2 = Math.imul(R, q), i2 = (i2 = Math.imul(R, F)) + Math.imul(N, q) | 0, o2 = Math.imul(N, F), n2 = n2 + Math.imul(T, z) | 0, i2 = (i2 = i2 + Math.imul(T, K) | 0) + Math.imul(B, z) | 0, o2 = o2 + Math.imul(B, K) | 0, n2 = n2 + Math.imul(x, W) | 0, i2 = (i2 = i2 + Math.imul(x, J) | 0) + Math.imul(k, W) | 0, o2 = o2 + Math.imul(k, J) | 0, n2 = n2 + Math.imul(E2, Y) | 0, i2 = (i2 = i2 + Math.imul(E2, Q) | 0) + Math.imul(A2, Y) | 0, o2 = o2 + Math.imul(A2, Q) | 0, n2 = n2 + Math.imul(O2, Z) | 0, i2 = (i2 = i2 + Math.imul(O2, tt) | 0) + Math.imul(j2, Z) | 0, o2 = o2 + Math.imul(j2, tt) | 0, n2 = n2 + Math.imul(_2, rt) | 0, i2 = (i2 = i2 + Math.imul(_2, nt) | 0) + Math.imul(w2, rt) | 0, o2 = o2 + Math.imul(w2, nt) | 0, n2 = n2 + Math.imul(m2, ot) | 0, i2 = (i2 = i2 + Math.imul(m2, at) | 0) + Math.imul(v2, ot) | 0, o2 = o2 + Math.imul(v2, at) | 0, n2 = n2 + Math.imul(d2, ut) | 0, i2 = (i2 = i2 + Math.imul(d2, ct) | 0) + Math.imul(y2, ut) | 0, o2 = o2 + Math.imul(y2, ct) | 0;
              var jt = (c2 + (n2 = n2 + Math.imul(l2, lt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, ht) | 0) + Math.imul(h2, lt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, ht) | 0) + (i2 >>> 13) | 0) + (jt >>> 26) | 0, jt &= 67108863, n2 = Math.imul(L, q), i2 = (i2 = Math.imul(L, F)) + Math.imul(C, q) | 0, o2 = Math.imul(C, F), n2 = n2 + Math.imul(R, z) | 0, i2 = (i2 = i2 + Math.imul(R, K) | 0) + Math.imul(N, z) | 0, o2 = o2 + Math.imul(N, K) | 0, n2 = n2 + Math.imul(T, W) | 0, i2 = (i2 = i2 + Math.imul(T, J) | 0) + Math.imul(B, W) | 0, o2 = o2 + Math.imul(B, J) | 0, n2 = n2 + Math.imul(x, Y) | 0, i2 = (i2 = i2 + Math.imul(x, Q) | 0) + Math.imul(k, Y) | 0, o2 = o2 + Math.imul(k, Q) | 0, n2 = n2 + Math.imul(E2, Z) | 0, i2 = (i2 = i2 + Math.imul(E2, tt) | 0) + Math.imul(A2, Z) | 0, o2 = o2 + Math.imul(A2, tt) | 0, n2 = n2 + Math.imul(O2, rt) | 0, i2 = (i2 = i2 + Math.imul(O2, nt) | 0) + Math.imul(j2, rt) | 0, o2 = o2 + Math.imul(j2, nt) | 0, n2 = n2 + Math.imul(_2, ot) | 0, i2 = (i2 = i2 + Math.imul(_2, at) | 0) + Math.imul(w2, ot) | 0, o2 = o2 + Math.imul(w2, at) | 0, n2 = n2 + Math.imul(m2, ut) | 0, i2 = (i2 = i2 + Math.imul(m2, ct) | 0) + Math.imul(v2, ut) | 0, o2 = o2 + Math.imul(v2, ct) | 0, n2 = n2 + Math.imul(d2, lt) | 0, i2 = (i2 = i2 + Math.imul(d2, ht) | 0) + Math.imul(y2, lt) | 0, o2 = o2 + Math.imul(y2, ht) | 0;
              var $t = (c2 + (n2 = n2 + Math.imul(l2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(l2, yt) | 0) + Math.imul(h2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(h2, yt) | 0) + (i2 >>> 13) | 0) + ($t >>> 26) | 0, $t &= 67108863, n2 = Math.imul(L, z), i2 = (i2 = Math.imul(L, K)) + Math.imul(C, z) | 0, o2 = Math.imul(C, K), n2 = n2 + Math.imul(R, W) | 0, i2 = (i2 = i2 + Math.imul(R, J) | 0) + Math.imul(N, W) | 0, o2 = o2 + Math.imul(N, J) | 0, n2 = n2 + Math.imul(T, Y) | 0, i2 = (i2 = i2 + Math.imul(T, Q) | 0) + Math.imul(B, Y) | 0, o2 = o2 + Math.imul(B, Q) | 0, n2 = n2 + Math.imul(x, Z) | 0, i2 = (i2 = i2 + Math.imul(x, tt) | 0) + Math.imul(k, Z) | 0, o2 = o2 + Math.imul(k, tt) | 0, n2 = n2 + Math.imul(E2, rt) | 0, i2 = (i2 = i2 + Math.imul(E2, nt) | 0) + Math.imul(A2, rt) | 0, o2 = o2 + Math.imul(A2, nt) | 0, n2 = n2 + Math.imul(O2, ot) | 0, i2 = (i2 = i2 + Math.imul(O2, at) | 0) + Math.imul(j2, ot) | 0, o2 = o2 + Math.imul(j2, at) | 0, n2 = n2 + Math.imul(_2, ut) | 0, i2 = (i2 = i2 + Math.imul(_2, ct) | 0) + Math.imul(w2, ut) | 0, o2 = o2 + Math.imul(w2, ct) | 0, n2 = n2 + Math.imul(m2, lt) | 0, i2 = (i2 = i2 + Math.imul(m2, ht) | 0) + Math.imul(v2, lt) | 0, o2 = o2 + Math.imul(v2, ht) | 0;
              var Et = (c2 + (n2 = n2 + Math.imul(d2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, yt) | 0) + Math.imul(y2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(y2, yt) | 0) + (i2 >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, n2 = Math.imul(L, W), i2 = (i2 = Math.imul(L, J)) + Math.imul(C, W) | 0, o2 = Math.imul(C, J), n2 = n2 + Math.imul(R, Y) | 0, i2 = (i2 = i2 + Math.imul(R, Q) | 0) + Math.imul(N, Y) | 0, o2 = o2 + Math.imul(N, Q) | 0, n2 = n2 + Math.imul(T, Z) | 0, i2 = (i2 = i2 + Math.imul(T, tt) | 0) + Math.imul(B, Z) | 0, o2 = o2 + Math.imul(B, tt) | 0, n2 = n2 + Math.imul(x, rt) | 0, i2 = (i2 = i2 + Math.imul(x, nt) | 0) + Math.imul(k, rt) | 0, o2 = o2 + Math.imul(k, nt) | 0, n2 = n2 + Math.imul(E2, ot) | 0, i2 = (i2 = i2 + Math.imul(E2, at) | 0) + Math.imul(A2, ot) | 0, o2 = o2 + Math.imul(A2, at) | 0, n2 = n2 + Math.imul(O2, ut) | 0, i2 = (i2 = i2 + Math.imul(O2, ct) | 0) + Math.imul(j2, ut) | 0, o2 = o2 + Math.imul(j2, ct) | 0, n2 = n2 + Math.imul(_2, lt) | 0, i2 = (i2 = i2 + Math.imul(_2, ht) | 0) + Math.imul(w2, lt) | 0, o2 = o2 + Math.imul(w2, ht) | 0;
              var At = (c2 + (n2 = n2 + Math.imul(m2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(m2, yt) | 0) + Math.imul(v2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(v2, yt) | 0) + (i2 >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, n2 = Math.imul(L, Y), i2 = (i2 = Math.imul(L, Q)) + Math.imul(C, Y) | 0, o2 = Math.imul(C, Q), n2 = n2 + Math.imul(R, Z) | 0, i2 = (i2 = i2 + Math.imul(R, tt) | 0) + Math.imul(N, Z) | 0, o2 = o2 + Math.imul(N, tt) | 0, n2 = n2 + Math.imul(T, rt) | 0, i2 = (i2 = i2 + Math.imul(T, nt) | 0) + Math.imul(B, rt) | 0, o2 = o2 + Math.imul(B, nt) | 0, n2 = n2 + Math.imul(x, ot) | 0, i2 = (i2 = i2 + Math.imul(x, at) | 0) + Math.imul(k, ot) | 0, o2 = o2 + Math.imul(k, at) | 0, n2 = n2 + Math.imul(E2, ut) | 0, i2 = (i2 = i2 + Math.imul(E2, ct) | 0) + Math.imul(A2, ut) | 0, o2 = o2 + Math.imul(A2, ct) | 0, n2 = n2 + Math.imul(O2, lt) | 0, i2 = (i2 = i2 + Math.imul(O2, ht) | 0) + Math.imul(j2, lt) | 0, o2 = o2 + Math.imul(j2, ht) | 0;
              var Pt = (c2 + (n2 = n2 + Math.imul(_2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(_2, yt) | 0) + Math.imul(w2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(w2, yt) | 0) + (i2 >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, n2 = Math.imul(L, Z), i2 = (i2 = Math.imul(L, tt)) + Math.imul(C, Z) | 0, o2 = Math.imul(C, tt), n2 = n2 + Math.imul(R, rt) | 0, i2 = (i2 = i2 + Math.imul(R, nt) | 0) + Math.imul(N, rt) | 0, o2 = o2 + Math.imul(N, nt) | 0, n2 = n2 + Math.imul(T, ot) | 0, i2 = (i2 = i2 + Math.imul(T, at) | 0) + Math.imul(B, ot) | 0, o2 = o2 + Math.imul(B, at) | 0, n2 = n2 + Math.imul(x, ut) | 0, i2 = (i2 = i2 + Math.imul(x, ct) | 0) + Math.imul(k, ut) | 0, o2 = o2 + Math.imul(k, ct) | 0, n2 = n2 + Math.imul(E2, lt) | 0, i2 = (i2 = i2 + Math.imul(E2, ht) | 0) + Math.imul(A2, lt) | 0, o2 = o2 + Math.imul(A2, ht) | 0;
              var xt = (c2 + (n2 = n2 + Math.imul(O2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(O2, yt) | 0) + Math.imul(j2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(j2, yt) | 0) + (i2 >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, n2 = Math.imul(L, rt), i2 = (i2 = Math.imul(L, nt)) + Math.imul(C, rt) | 0, o2 = Math.imul(C, nt), n2 = n2 + Math.imul(R, ot) | 0, i2 = (i2 = i2 + Math.imul(R, at) | 0) + Math.imul(N, ot) | 0, o2 = o2 + Math.imul(N, at) | 0, n2 = n2 + Math.imul(T, ut) | 0, i2 = (i2 = i2 + Math.imul(T, ct) | 0) + Math.imul(B, ut) | 0, o2 = o2 + Math.imul(B, ct) | 0, n2 = n2 + Math.imul(x, lt) | 0, i2 = (i2 = i2 + Math.imul(x, ht) | 0) + Math.imul(k, lt) | 0, o2 = o2 + Math.imul(k, ht) | 0;
              var kt = (c2 + (n2 = n2 + Math.imul(E2, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(E2, yt) | 0) + Math.imul(A2, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(A2, yt) | 0) + (i2 >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, n2 = Math.imul(L, ot), i2 = (i2 = Math.imul(L, at)) + Math.imul(C, ot) | 0, o2 = Math.imul(C, at), n2 = n2 + Math.imul(R, ut) | 0, i2 = (i2 = i2 + Math.imul(R, ct) | 0) + Math.imul(N, ut) | 0, o2 = o2 + Math.imul(N, ct) | 0, n2 = n2 + Math.imul(T, lt) | 0, i2 = (i2 = i2 + Math.imul(T, ht) | 0) + Math.imul(B, lt) | 0, o2 = o2 + Math.imul(B, ht) | 0;
              var Mt = (c2 + (n2 = n2 + Math.imul(x, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(x, yt) | 0) + Math.imul(k, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(k, yt) | 0) + (i2 >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, n2 = Math.imul(L, ut), i2 = (i2 = Math.imul(L, ct)) + Math.imul(C, ut) | 0, o2 = Math.imul(C, ct), n2 = n2 + Math.imul(R, lt) | 0, i2 = (i2 = i2 + Math.imul(R, ht) | 0) + Math.imul(N, lt) | 0, o2 = o2 + Math.imul(N, ht) | 0;
              var Tt = (c2 + (n2 = n2 + Math.imul(T, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(T, yt) | 0) + Math.imul(B, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(B, yt) | 0) + (i2 >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, n2 = Math.imul(L, lt), i2 = (i2 = Math.imul(L, ht)) + Math.imul(C, lt) | 0, o2 = Math.imul(C, ht);
              var Bt = (c2 + (n2 = n2 + Math.imul(R, dt) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(R, yt) | 0) + Math.imul(N, dt) | 0)) << 13) | 0;
              c2 = ((o2 = o2 + Math.imul(N, yt) | 0) + (i2 >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863;
              var It = (c2 + (n2 = Math.imul(L, dt)) | 0) + ((8191 & (i2 = (i2 = Math.imul(L, yt)) + Math.imul(C, dt) | 0)) << 13) | 0;
              return c2 = ((o2 = Math.imul(C, yt)) + (i2 >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, u2[0] = bt, u2[1] = mt, u2[2] = vt, u2[3] = gt, u2[4] = _t, u2[5] = wt, u2[6] = St, u2[7] = Ot, u2[8] = jt, u2[9] = $t, u2[10] = Et, u2[11] = At, u2[12] = Pt, u2[13] = xt, u2[14] = kt, u2[15] = Mt, u2[16] = Tt, u2[17] = Bt, u2[18] = It, 0 !== c2 && (u2[19] = c2, r3.length++), r3;
            };
            function v(t4, e4, r3) {
              r3.negative = e4.negative ^ t4.negative, r3.length = t4.length + e4.length;
              for (var n2 = 0, i2 = 0, o2 = 0; o2 < r3.length - 1; o2++) {
                var a2 = i2;
                i2 = 0;
                for (var s2 = 67108863 & n2, u2 = Math.min(o2, e4.length - 1), c2 = Math.max(0, o2 - t4.length + 1); c2 <= u2; c2++) {
                  var f2 = o2 - c2, l2 = (0 | t4.words[f2]) * (0 | e4.words[c2]), h2 = 67108863 & l2;
                  s2 = 67108863 & (h2 = h2 + s2 | 0), i2 += (a2 = (a2 = a2 + (l2 / 67108864 | 0) | 0) + (h2 >>> 26) | 0) >>> 26, a2 &= 67108863;
                }
                r3.words[o2] = s2, n2 = a2, a2 = i2;
              }
              return 0 !== n2 ? r3.words[o2] = n2 : r3.length--, r3._strip();
            }
            function g(t4, e4, r3) {
              return v(t4, e4, r3);
            }
            function _(t4, e4) {
              this.x = t4, this.y = e4;
            }
            Math.imul || (m = b), a.prototype.mulTo = function(t4, e4) {
              var r3 = this.length + t4.length;
              return 10 === this.length && 10 === t4.length ? m(this, t4, e4) : r3 < 63 ? b(this, t4, e4) : r3 < 1024 ? v(this, t4, e4) : g(this, t4, e4);
            }, _.prototype.makeRBT = function(t4) {
              for (var e4 = new Array(t4), r3 = a.prototype._countBits(t4) - 1, n2 = 0; n2 < t4; n2++)
                e4[n2] = this.revBin(n2, r3, t4);
              return e4;
            }, _.prototype.revBin = function(t4, e4, r3) {
              if (0 === t4 || t4 === r3 - 1)
                return t4;
              for (var n2 = 0, i2 = 0; i2 < e4; i2++)
                n2 |= (1 & t4) << e4 - i2 - 1, t4 >>= 1;
              return n2;
            }, _.prototype.permute = function(t4, e4, r3, n2, i2, o2) {
              for (var a2 = 0; a2 < o2; a2++)
                n2[a2] = e4[t4[a2]], i2[a2] = r3[t4[a2]];
            }, _.prototype.transform = function(t4, e4, r3, n2, i2, o2) {
              this.permute(o2, t4, e4, r3, n2, i2);
              for (var a2 = 1; a2 < i2; a2 <<= 1)
                for (var s2 = a2 << 1, u2 = Math.cos(2 * Math.PI / s2), c2 = Math.sin(2 * Math.PI / s2), f2 = 0; f2 < i2; f2 += s2)
                  for (var l2 = u2, h2 = c2, p2 = 0; p2 < a2; p2++) {
                    var d2 = r3[f2 + p2], y2 = n2[f2 + p2], b2 = r3[f2 + p2 + a2], m2 = n2[f2 + p2 + a2], v2 = l2 * b2 - h2 * m2;
                    m2 = l2 * m2 + h2 * b2, b2 = v2, r3[f2 + p2] = d2 + b2, n2[f2 + p2] = y2 + m2, r3[f2 + p2 + a2] = d2 - b2, n2[f2 + p2 + a2] = y2 - m2, p2 !== s2 && (v2 = u2 * l2 - c2 * h2, h2 = u2 * h2 + c2 * l2, l2 = v2);
                  }
            }, _.prototype.guessLen13b = function(t4, e4) {
              var r3 = 1 | Math.max(e4, t4), n2 = 1 & r3, i2 = 0;
              for (r3 = r3 / 2 | 0; r3; r3 >>>= 1)
                i2++;
              return 1 << i2 + 1 + n2;
            }, _.prototype.conjugate = function(t4, e4, r3) {
              if (!(r3 <= 1))
                for (var n2 = 0; n2 < r3 / 2; n2++) {
                  var i2 = t4[n2];
                  t4[n2] = t4[r3 - n2 - 1], t4[r3 - n2 - 1] = i2, i2 = e4[n2], e4[n2] = -e4[r3 - n2 - 1], e4[r3 - n2 - 1] = -i2;
                }
            }, _.prototype.normalize13b = function(t4, e4) {
              for (var r3 = 0, n2 = 0; n2 < e4 / 2; n2++) {
                var i2 = 8192 * Math.round(t4[2 * n2 + 1] / e4) + Math.round(t4[2 * n2] / e4) + r3;
                t4[n2] = 67108863 & i2, r3 = i2 < 67108864 ? 0 : i2 / 67108864 | 0;
              }
              return t4;
            }, _.prototype.convert13b = function(t4, e4, r3, n2) {
              for (var o2 = 0, a2 = 0; a2 < e4; a2++)
                o2 += 0 | t4[a2], r3[2 * a2] = 8191 & o2, o2 >>>= 13, r3[2 * a2 + 1] = 8191 & o2, o2 >>>= 13;
              for (a2 = 2 * e4; a2 < n2; ++a2)
                r3[a2] = 0;
              i(0 === o2), i(!(-8192 & o2));
            }, _.prototype.stub = function(t4) {
              for (var e4 = new Array(t4), r3 = 0; r3 < t4; r3++)
                e4[r3] = 0;
              return e4;
            }, _.prototype.mulp = function(t4, e4, r3) {
              var n2 = 2 * this.guessLen13b(t4.length, e4.length), i2 = this.makeRBT(n2), o2 = this.stub(n2), a2 = new Array(n2), s2 = new Array(n2), u2 = new Array(n2), c2 = new Array(n2), f2 = new Array(n2), l2 = new Array(n2), h2 = r3.words;
              h2.length = n2, this.convert13b(t4.words, t4.length, a2, n2), this.convert13b(e4.words, e4.length, c2, n2), this.transform(a2, o2, s2, u2, n2, i2), this.transform(c2, o2, f2, l2, n2, i2);
              for (var p2 = 0; p2 < n2; p2++) {
                var d2 = s2[p2] * f2[p2] - u2[p2] * l2[p2];
                u2[p2] = s2[p2] * l2[p2] + u2[p2] * f2[p2], s2[p2] = d2;
              }
              return this.conjugate(s2, u2, n2), this.transform(s2, u2, h2, o2, n2, i2), this.conjugate(h2, o2, n2), this.normalize13b(h2, n2), r3.negative = t4.negative ^ e4.negative, r3.length = t4.length + e4.length, r3._strip();
            }, a.prototype.mul = function(t4) {
              var e4 = new a(null);
              return e4.words = new Array(this.length + t4.length), this.mulTo(t4, e4);
            }, a.prototype.mulf = function(t4) {
              var e4 = new a(null);
              return e4.words = new Array(this.length + t4.length), g(this, t4, e4);
            }, a.prototype.imul = function(t4) {
              return this.clone().mulTo(t4, this);
            }, a.prototype.imuln = function(t4) {
              var e4 = t4 < 0;
              e4 && (t4 = -t4), i("number" == typeof t4), i(t4 < 67108864);
              for (var r3 = 0, n2 = 0; n2 < this.length; n2++) {
                var o2 = (0 | this.words[n2]) * t4, a2 = (67108863 & o2) + (67108863 & r3);
                r3 >>= 26, r3 += o2 / 67108864 | 0, r3 += a2 >>> 26, this.words[n2] = 67108863 & a2;
              }
              return 0 !== r3 && (this.words[n2] = r3, this.length++), e4 ? this.ineg() : this;
            }, a.prototype.muln = function(t4) {
              return this.clone().imuln(t4);
            }, a.prototype.sqr = function() {
              return this.mul(this);
            }, a.prototype.isqr = function() {
              return this.imul(this.clone());
            }, a.prototype.pow = function(t4) {
              var e4 = function(t5) {
                for (var e5 = new Array(t5.bitLength()), r4 = 0; r4 < e5.length; r4++) {
                  var n3 = r4 / 26 | 0, i3 = r4 % 26;
                  e5[r4] = t5.words[n3] >>> i3 & 1;
                }
                return e5;
              }(t4);
              if (0 === e4.length)
                return new a(1);
              for (var r3 = this, n2 = 0; n2 < e4.length && 0 === e4[n2]; n2++, r3 = r3.sqr())
                ;
              if (++n2 < e4.length)
                for (var i2 = r3.sqr(); n2 < e4.length; n2++, i2 = i2.sqr())
                  0 !== e4[n2] && (r3 = r3.mul(i2));
              return r3;
            }, a.prototype.iushln = function(t4) {
              i("number" == typeof t4 && t4 >= 0);
              var e4, r3 = t4 % 26, n2 = (t4 - r3) / 26, o2 = 67108863 >>> 26 - r3 << 26 - r3;
              if (0 !== r3) {
                var a2 = 0;
                for (e4 = 0; e4 < this.length; e4++) {
                  var s2 = this.words[e4] & o2, u2 = (0 | this.words[e4]) - s2 << r3;
                  this.words[e4] = u2 | a2, a2 = s2 >>> 26 - r3;
                }
                a2 && (this.words[e4] = a2, this.length++);
              }
              if (0 !== n2) {
                for (e4 = this.length - 1; e4 >= 0; e4--)
                  this.words[e4 + n2] = this.words[e4];
                for (e4 = 0; e4 < n2; e4++)
                  this.words[e4] = 0;
                this.length += n2;
              }
              return this._strip();
            }, a.prototype.ishln = function(t4) {
              return i(0 === this.negative), this.iushln(t4);
            }, a.prototype.iushrn = function(t4, e4, r3) {
              var n2;
              i("number" == typeof t4 && t4 >= 0), n2 = e4 ? (e4 - e4 % 26) / 26 : 0;
              var o2 = t4 % 26, a2 = Math.min((t4 - o2) / 26, this.length), s2 = 67108863 ^ 67108863 >>> o2 << o2, u2 = r3;
              if (n2 -= a2, n2 = Math.max(0, n2), u2) {
                for (var c2 = 0; c2 < a2; c2++)
                  u2.words[c2] = this.words[c2];
                u2.length = a2;
              }
              if (0 === a2)
                ;
              else if (this.length > a2)
                for (this.length -= a2, c2 = 0; c2 < this.length; c2++)
                  this.words[c2] = this.words[c2 + a2];
              else
                this.words[0] = 0, this.length = 1;
              var f2 = 0;
              for (c2 = this.length - 1; c2 >= 0 && (0 !== f2 || c2 >= n2); c2--) {
                var l2 = 0 | this.words[c2];
                this.words[c2] = f2 << 26 - o2 | l2 >>> o2, f2 = l2 & s2;
              }
              return u2 && 0 !== f2 && (u2.words[u2.length++] = f2), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
            }, a.prototype.ishrn = function(t4, e4, r3) {
              return i(0 === this.negative), this.iushrn(t4, e4, r3);
            }, a.prototype.shln = function(t4) {
              return this.clone().ishln(t4);
            }, a.prototype.ushln = function(t4) {
              return this.clone().iushln(t4);
            }, a.prototype.shrn = function(t4) {
              return this.clone().ishrn(t4);
            }, a.prototype.ushrn = function(t4) {
              return this.clone().iushrn(t4);
            }, a.prototype.testn = function(t4) {
              i("number" == typeof t4 && t4 >= 0);
              var e4 = t4 % 26, r3 = (t4 - e4) / 26, n2 = 1 << e4;
              return !(this.length <= r3 || !(this.words[r3] & n2));
            }, a.prototype.imaskn = function(t4) {
              i("number" == typeof t4 && t4 >= 0);
              var e4 = t4 % 26, r3 = (t4 - e4) / 26;
              if (i(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r3)
                return this;
              if (0 !== e4 && r3++, this.length = Math.min(r3, this.length), 0 !== e4) {
                var n2 = 67108863 ^ 67108863 >>> e4 << e4;
                this.words[this.length - 1] &= n2;
              }
              return this._strip();
            }, a.prototype.maskn = function(t4) {
              return this.clone().imaskn(t4);
            }, a.prototype.iaddn = function(t4) {
              return i("number" == typeof t4), i(t4 < 67108864), t4 < 0 ? this.isubn(-t4) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t4 ? (this.words[0] = t4 - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(t4), this.negative = 1, this) : this._iaddn(t4);
            }, a.prototype._iaddn = function(t4) {
              this.words[0] += t4;
              for (var e4 = 0; e4 < this.length && this.words[e4] >= 67108864; e4++)
                this.words[e4] -= 67108864, e4 === this.length - 1 ? this.words[e4 + 1] = 1 : this.words[e4 + 1]++;
              return this.length = Math.max(this.length, e4 + 1), this;
            }, a.prototype.isubn = function(t4) {
              if (i("number" == typeof t4), i(t4 < 67108864), t4 < 0)
                return this.iaddn(-t4);
              if (0 !== this.negative)
                return this.negative = 0, this.iaddn(t4), this.negative = 1, this;
              if (this.words[0] -= t4, 1 === this.length && this.words[0] < 0)
                this.words[0] = -this.words[0], this.negative = 1;
              else
                for (var e4 = 0; e4 < this.length && this.words[e4] < 0; e4++)
                  this.words[e4] += 67108864, this.words[e4 + 1] -= 1;
              return this._strip();
            }, a.prototype.addn = function(t4) {
              return this.clone().iaddn(t4);
            }, a.prototype.subn = function(t4) {
              return this.clone().isubn(t4);
            }, a.prototype.iabs = function() {
              return this.negative = 0, this;
            }, a.prototype.abs = function() {
              return this.clone().iabs();
            }, a.prototype._ishlnsubmul = function(t4, e4, r3) {
              var n2, o2, a2 = t4.length + r3;
              this._expand(a2);
              var s2 = 0;
              for (n2 = 0; n2 < t4.length; n2++) {
                o2 = (0 | this.words[n2 + r3]) + s2;
                var u2 = (0 | t4.words[n2]) * e4;
                s2 = ((o2 -= 67108863 & u2) >> 26) - (u2 / 67108864 | 0), this.words[n2 + r3] = 67108863 & o2;
              }
              for (; n2 < this.length - r3; n2++)
                s2 = (o2 = (0 | this.words[n2 + r3]) + s2) >> 26, this.words[n2 + r3] = 67108863 & o2;
              if (0 === s2)
                return this._strip();
              for (i(-1 === s2), s2 = 0, n2 = 0; n2 < this.length; n2++)
                s2 = (o2 = -(0 | this.words[n2]) + s2) >> 26, this.words[n2] = 67108863 & o2;
              return this.negative = 1, this._strip();
            }, a.prototype._wordDiv = function(t4, e4) {
              var r3 = (this.length, t4.length), n2 = this.clone(), i2 = t4, o2 = 0 | i2.words[i2.length - 1];
              0 != (r3 = 26 - this._countBits(o2)) && (i2 = i2.ushln(r3), n2.iushln(r3), o2 = 0 | i2.words[i2.length - 1]);
              var s2, u2 = n2.length - i2.length;
              if ("mod" !== e4) {
                (s2 = new a(null)).length = u2 + 1, s2.words = new Array(s2.length);
                for (var c2 = 0; c2 < s2.length; c2++)
                  s2.words[c2] = 0;
              }
              var f2 = n2.clone()._ishlnsubmul(i2, 1, u2);
              0 === f2.negative && (n2 = f2, s2 && (s2.words[u2] = 1));
              for (var l2 = u2 - 1; l2 >= 0; l2--) {
                var h2 = 67108864 * (0 | n2.words[i2.length + l2]) + (0 | n2.words[i2.length + l2 - 1]);
                for (h2 = Math.min(h2 / o2 | 0, 67108863), n2._ishlnsubmul(i2, h2, l2); 0 !== n2.negative; )
                  h2--, n2.negative = 0, n2._ishlnsubmul(i2, 1, l2), n2.isZero() || (n2.negative ^= 1);
                s2 && (s2.words[l2] = h2);
              }
              return s2 && s2._strip(), n2._strip(), "div" !== e4 && 0 !== r3 && n2.iushrn(r3), { div: s2 || null, mod: n2 };
            }, a.prototype.divmod = function(t4, e4, r3) {
              return i(!t4.isZero()), this.isZero() ? { div: new a(0), mod: new a(0) } : 0 !== this.negative && 0 === t4.negative ? (s2 = this.neg().divmod(t4, e4), "mod" !== e4 && (n2 = s2.div.neg()), "div" !== e4 && (o2 = s2.mod.neg(), r3 && 0 !== o2.negative && o2.iadd(t4)), { div: n2, mod: o2 }) : 0 === this.negative && 0 !== t4.negative ? (s2 = this.divmod(t4.neg(), e4), "mod" !== e4 && (n2 = s2.div.neg()), { div: n2, mod: s2.mod }) : this.negative & t4.negative ? (s2 = this.neg().divmod(t4.neg(), e4), "div" !== e4 && (o2 = s2.mod.neg(), r3 && 0 !== o2.negative && o2.isub(t4)), { div: s2.div, mod: o2 }) : t4.length > this.length || this.cmp(t4) < 0 ? { div: new a(0), mod: this } : 1 === t4.length ? "div" === e4 ? { div: this.divn(t4.words[0]), mod: null } : "mod" === e4 ? { div: null, mod: new a(this.modrn(t4.words[0])) } : { div: this.divn(t4.words[0]), mod: new a(this.modrn(t4.words[0])) } : this._wordDiv(t4, e4);
              var n2, o2, s2;
            }, a.prototype.div = function(t4) {
              return this.divmod(t4, "div", false).div;
            }, a.prototype.mod = function(t4) {
              return this.divmod(t4, "mod", false).mod;
            }, a.prototype.umod = function(t4) {
              return this.divmod(t4, "mod", true).mod;
            }, a.prototype.divRound = function(t4) {
              var e4 = this.divmod(t4);
              if (e4.mod.isZero())
                return e4.div;
              var r3 = 0 !== e4.div.negative ? e4.mod.isub(t4) : e4.mod, n2 = t4.ushrn(1), i2 = t4.andln(1), o2 = r3.cmp(n2);
              return o2 < 0 || 1 === i2 && 0 === o2 ? e4.div : 0 !== e4.div.negative ? e4.div.isubn(1) : e4.div.iaddn(1);
            }, a.prototype.modrn = function(t4) {
              var e4 = t4 < 0;
              e4 && (t4 = -t4), i(t4 <= 67108863);
              for (var r3 = (1 << 26) % t4, n2 = 0, o2 = this.length - 1; o2 >= 0; o2--)
                n2 = (r3 * n2 + (0 | this.words[o2])) % t4;
              return e4 ? -n2 : n2;
            }, a.prototype.modn = function(t4) {
              return this.modrn(t4);
            }, a.prototype.idivn = function(t4) {
              var e4 = t4 < 0;
              e4 && (t4 = -t4), i(t4 <= 67108863);
              for (var r3 = 0, n2 = this.length - 1; n2 >= 0; n2--) {
                var o2 = (0 | this.words[n2]) + 67108864 * r3;
                this.words[n2] = o2 / t4 | 0, r3 = o2 % t4;
              }
              return this._strip(), e4 ? this.ineg() : this;
            }, a.prototype.divn = function(t4) {
              return this.clone().idivn(t4);
            }, a.prototype.egcd = function(t4) {
              i(0 === t4.negative), i(!t4.isZero());
              var e4 = this, r3 = t4.clone();
              e4 = 0 !== e4.negative ? e4.umod(t4) : e4.clone();
              for (var n2 = new a(1), o2 = new a(0), s2 = new a(0), u2 = new a(1), c2 = 0; e4.isEven() && r3.isEven(); )
                e4.iushrn(1), r3.iushrn(1), ++c2;
              for (var f2 = r3.clone(), l2 = e4.clone(); !e4.isZero(); ) {
                for (var h2 = 0, p2 = 1; !(e4.words[0] & p2) && h2 < 26; ++h2, p2 <<= 1)
                  ;
                if (h2 > 0)
                  for (e4.iushrn(h2); h2-- > 0; )
                    (n2.isOdd() || o2.isOdd()) && (n2.iadd(f2), o2.isub(l2)), n2.iushrn(1), o2.iushrn(1);
                for (var d2 = 0, y2 = 1; !(r3.words[0] & y2) && d2 < 26; ++d2, y2 <<= 1)
                  ;
                if (d2 > 0)
                  for (r3.iushrn(d2); d2-- > 0; )
                    (s2.isOdd() || u2.isOdd()) && (s2.iadd(f2), u2.isub(l2)), s2.iushrn(1), u2.iushrn(1);
                e4.cmp(r3) >= 0 ? (e4.isub(r3), n2.isub(s2), o2.isub(u2)) : (r3.isub(e4), s2.isub(n2), u2.isub(o2));
              }
              return { a: s2, b: u2, gcd: r3.iushln(c2) };
            }, a.prototype._invmp = function(t4) {
              i(0 === t4.negative), i(!t4.isZero());
              var e4 = this, r3 = t4.clone();
              e4 = 0 !== e4.negative ? e4.umod(t4) : e4.clone();
              for (var n2, o2 = new a(1), s2 = new a(0), u2 = r3.clone(); e4.cmpn(1) > 0 && r3.cmpn(1) > 0; ) {
                for (var c2 = 0, f2 = 1; !(e4.words[0] & f2) && c2 < 26; ++c2, f2 <<= 1)
                  ;
                if (c2 > 0)
                  for (e4.iushrn(c2); c2-- > 0; )
                    o2.isOdd() && o2.iadd(u2), o2.iushrn(1);
                for (var l2 = 0, h2 = 1; !(r3.words[0] & h2) && l2 < 26; ++l2, h2 <<= 1)
                  ;
                if (l2 > 0)
                  for (r3.iushrn(l2); l2-- > 0; )
                    s2.isOdd() && s2.iadd(u2), s2.iushrn(1);
                e4.cmp(r3) >= 0 ? (e4.isub(r3), o2.isub(s2)) : (r3.isub(e4), s2.isub(o2));
              }
              return (n2 = 0 === e4.cmpn(1) ? o2 : s2).cmpn(0) < 0 && n2.iadd(t4), n2;
            }, a.prototype.gcd = function(t4) {
              if (this.isZero())
                return t4.abs();
              if (t4.isZero())
                return this.abs();
              var e4 = this.clone(), r3 = t4.clone();
              e4.negative = 0, r3.negative = 0;
              for (var n2 = 0; e4.isEven() && r3.isEven(); n2++)
                e4.iushrn(1), r3.iushrn(1);
              for (; ; ) {
                for (; e4.isEven(); )
                  e4.iushrn(1);
                for (; r3.isEven(); )
                  r3.iushrn(1);
                var i2 = e4.cmp(r3);
                if (i2 < 0) {
                  var o2 = e4;
                  e4 = r3, r3 = o2;
                } else if (0 === i2 || 0 === r3.cmpn(1))
                  break;
                e4.isub(r3);
              }
              return r3.iushln(n2);
            }, a.prototype.invm = function(t4) {
              return this.egcd(t4).a.umod(t4);
            }, a.prototype.isEven = function() {
              return !(1 & this.words[0]);
            }, a.prototype.isOdd = function() {
              return !(1 & ~this.words[0]);
            }, a.prototype.andln = function(t4) {
              return this.words[0] & t4;
            }, a.prototype.bincn = function(t4) {
              i("number" == typeof t4);
              var e4 = t4 % 26, r3 = (t4 - e4) / 26, n2 = 1 << e4;
              if (this.length <= r3)
                return this._expand(r3 + 1), this.words[r3] |= n2, this;
              for (var o2 = n2, a2 = r3; 0 !== o2 && a2 < this.length; a2++) {
                var s2 = 0 | this.words[a2];
                o2 = (s2 += o2) >>> 26, s2 &= 67108863, this.words[a2] = s2;
              }
              return 0 !== o2 && (this.words[a2] = o2, this.length++), this;
            }, a.prototype.isZero = function() {
              return 1 === this.length && 0 === this.words[0];
            }, a.prototype.cmpn = function(t4) {
              var e4, r3 = t4 < 0;
              if (0 !== this.negative && !r3)
                return -1;
              if (0 === this.negative && r3)
                return 1;
              if (this._strip(), this.length > 1)
                e4 = 1;
              else {
                r3 && (t4 = -t4), i(t4 <= 67108863, "Number is too big");
                var n2 = 0 | this.words[0];
                e4 = n2 === t4 ? 0 : n2 < t4 ? -1 : 1;
              }
              return 0 !== this.negative ? 0 | -e4 : e4;
            }, a.prototype.cmp = function(t4) {
              if (0 !== this.negative && 0 === t4.negative)
                return -1;
              if (0 === this.negative && 0 !== t4.negative)
                return 1;
              var e4 = this.ucmp(t4);
              return 0 !== this.negative ? 0 | -e4 : e4;
            }, a.prototype.ucmp = function(t4) {
              if (this.length > t4.length)
                return 1;
              if (this.length < t4.length)
                return -1;
              for (var e4 = 0, r3 = this.length - 1; r3 >= 0; r3--) {
                var n2 = 0 | this.words[r3], i2 = 0 | t4.words[r3];
                if (n2 !== i2) {
                  n2 < i2 ? e4 = -1 : n2 > i2 && (e4 = 1);
                  break;
                }
              }
              return e4;
            }, a.prototype.gtn = function(t4) {
              return 1 === this.cmpn(t4);
            }, a.prototype.gt = function(t4) {
              return 1 === this.cmp(t4);
            }, a.prototype.gten = function(t4) {
              return this.cmpn(t4) >= 0;
            }, a.prototype.gte = function(t4) {
              return this.cmp(t4) >= 0;
            }, a.prototype.ltn = function(t4) {
              return -1 === this.cmpn(t4);
            }, a.prototype.lt = function(t4) {
              return -1 === this.cmp(t4);
            }, a.prototype.lten = function(t4) {
              return this.cmpn(t4) <= 0;
            }, a.prototype.lte = function(t4) {
              return this.cmp(t4) <= 0;
            }, a.prototype.eqn = function(t4) {
              return 0 === this.cmpn(t4);
            }, a.prototype.eq = function(t4) {
              return 0 === this.cmp(t4);
            }, a.red = function(t4) {
              return new A(t4);
            }, a.prototype.toRed = function(t4) {
              return i(!this.red, "Already a number in reduction context"), i(0 === this.negative, "red works only with positives"), t4.convertTo(this)._forceRed(t4);
            }, a.prototype.fromRed = function() {
              return i(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
            }, a.prototype._forceRed = function(t4) {
              return this.red = t4, this;
            }, a.prototype.forceRed = function(t4) {
              return i(!this.red, "Already a number in reduction context"), this._forceRed(t4);
            }, a.prototype.redAdd = function(t4) {
              return i(this.red, "redAdd works only with red numbers"), this.red.add(this, t4);
            }, a.prototype.redIAdd = function(t4) {
              return i(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t4);
            }, a.prototype.redSub = function(t4) {
              return i(this.red, "redSub works only with red numbers"), this.red.sub(this, t4);
            }, a.prototype.redISub = function(t4) {
              return i(this.red, "redISub works only with red numbers"), this.red.isub(this, t4);
            }, a.prototype.redShl = function(t4) {
              return i(this.red, "redShl works only with red numbers"), this.red.shl(this, t4);
            }, a.prototype.redMul = function(t4) {
              return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, t4), this.red.mul(this, t4);
            }, a.prototype.redIMul = function(t4) {
              return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, t4), this.red.imul(this, t4);
            }, a.prototype.redSqr = function() {
              return i(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
            }, a.prototype.redISqr = function() {
              return i(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
            }, a.prototype.redSqrt = function() {
              return i(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
            }, a.prototype.redInvm = function() {
              return i(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
            }, a.prototype.redNeg = function() {
              return i(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
            }, a.prototype.redPow = function(t4) {
              return i(this.red && !t4.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t4);
            };
            var w = { k256: null, p224: null, p192: null, p25519: null };
            function S(t4, e4) {
              this.name = t4, this.p = new a(e4, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
            }
            function O() {
              S.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
            }
            function j() {
              S.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
            }
            function $() {
              S.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
            }
            function E() {
              S.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
            }
            function A(t4) {
              if ("string" == typeof t4) {
                var e4 = a._prime(t4);
                this.m = e4.p, this.prime = e4;
              } else
                i(t4.gtn(1), "modulus must be greater than 1"), this.m = t4, this.prime = null;
            }
            function P(t4) {
              A.call(this, t4), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
            }
            S.prototype._tmp = function() {
              var t4 = new a(null);
              return t4.words = new Array(Math.ceil(this.n / 13)), t4;
            }, S.prototype.ireduce = function(t4) {
              var e4, r3 = t4;
              do {
                this.split(r3, this.tmp), e4 = (r3 = (r3 = this.imulK(r3)).iadd(this.tmp)).bitLength();
              } while (e4 > this.n);
              var n2 = e4 < this.n ? -1 : r3.ucmp(this.p);
              return 0 === n2 ? (r3.words[0] = 0, r3.length = 1) : n2 > 0 ? r3.isub(this.p) : void 0 !== r3.strip ? r3.strip() : r3._strip(), r3;
            }, S.prototype.split = function(t4, e4) {
              t4.iushrn(this.n, 0, e4);
            }, S.prototype.imulK = function(t4) {
              return t4.imul(this.k);
            }, o(O, S), O.prototype.split = function(t4, e4) {
              for (var r3 = 4194303, n2 = Math.min(t4.length, 9), i2 = 0; i2 < n2; i2++)
                e4.words[i2] = t4.words[i2];
              if (e4.length = n2, t4.length <= 9)
                return t4.words[0] = 0, void (t4.length = 1);
              var o2 = t4.words[9];
              for (e4.words[e4.length++] = o2 & r3, i2 = 10; i2 < t4.length; i2++) {
                var a2 = 0 | t4.words[i2];
                t4.words[i2 - 10] = (a2 & r3) << 4 | o2 >>> 22, o2 = a2;
              }
              o2 >>>= 22, t4.words[i2 - 10] = o2, 0 === o2 && t4.length > 10 ? t4.length -= 10 : t4.length -= 9;
            }, O.prototype.imulK = function(t4) {
              t4.words[t4.length] = 0, t4.words[t4.length + 1] = 0, t4.length += 2;
              for (var e4 = 0, r3 = 0; r3 < t4.length; r3++) {
                var n2 = 0 | t4.words[r3];
                e4 += 977 * n2, t4.words[r3] = 67108863 & e4, e4 = 64 * n2 + (e4 / 67108864 | 0);
              }
              return 0 === t4.words[t4.length - 1] && (t4.length--, 0 === t4.words[t4.length - 1] && t4.length--), t4;
            }, o(j, S), o($, S), o(E, S), E.prototype.imulK = function(t4) {
              for (var e4 = 0, r3 = 0; r3 < t4.length; r3++) {
                var n2 = 19 * (0 | t4.words[r3]) + e4, i2 = 67108863 & n2;
                n2 >>>= 26, t4.words[r3] = i2, e4 = n2;
              }
              return 0 !== e4 && (t4.words[t4.length++] = e4), t4;
            }, a._prime = function(t4) {
              if (w[t4])
                return w[t4];
              var e4;
              if ("k256" === t4)
                e4 = new O();
              else if ("p224" === t4)
                e4 = new j();
              else if ("p192" === t4)
                e4 = new $();
              else {
                if ("p25519" !== t4)
                  throw new Error("Unknown prime " + t4);
                e4 = new E();
              }
              return w[t4] = e4, e4;
            }, A.prototype._verify1 = function(t4) {
              i(0 === t4.negative, "red works only with positives"), i(t4.red, "red works only with red numbers");
            }, A.prototype._verify2 = function(t4, e4) {
              i(!(t4.negative | e4.negative), "red works only with positives"), i(t4.red && t4.red === e4.red, "red works only with red numbers");
            }, A.prototype.imod = function(t4) {
              return this.prime ? this.prime.ireduce(t4)._forceRed(this) : (l(t4, t4.umod(this.m)._forceRed(this)), t4);
            }, A.prototype.neg = function(t4) {
              return t4.isZero() ? t4.clone() : this.m.sub(t4)._forceRed(this);
            }, A.prototype.add = function(t4, e4) {
              this._verify2(t4, e4);
              var r3 = t4.add(e4);
              return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3._forceRed(this);
            }, A.prototype.iadd = function(t4, e4) {
              this._verify2(t4, e4);
              var r3 = t4.iadd(e4);
              return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3;
            }, A.prototype.sub = function(t4, e4) {
              this._verify2(t4, e4);
              var r3 = t4.sub(e4);
              return r3.cmpn(0) < 0 && r3.iadd(this.m), r3._forceRed(this);
            }, A.prototype.isub = function(t4, e4) {
              this._verify2(t4, e4);
              var r3 = t4.isub(e4);
              return r3.cmpn(0) < 0 && r3.iadd(this.m), r3;
            }, A.prototype.shl = function(t4, e4) {
              return this._verify1(t4), this.imod(t4.ushln(e4));
            }, A.prototype.imul = function(t4, e4) {
              return this._verify2(t4, e4), this.imod(t4.imul(e4));
            }, A.prototype.mul = function(t4, e4) {
              return this._verify2(t4, e4), this.imod(t4.mul(e4));
            }, A.prototype.isqr = function(t4) {
              return this.imul(t4, t4.clone());
            }, A.prototype.sqr = function(t4) {
              return this.mul(t4, t4);
            }, A.prototype.sqrt = function(t4) {
              if (t4.isZero())
                return t4.clone();
              var e4 = this.m.andln(3);
              if (i(e4 % 2 == 1), 3 === e4) {
                var r3 = this.m.add(new a(1)).iushrn(2);
                return this.pow(t4, r3);
              }
              for (var n2 = this.m.subn(1), o2 = 0; !n2.isZero() && 0 === n2.andln(1); )
                o2++, n2.iushrn(1);
              i(!n2.isZero());
              var s2 = new a(1).toRed(this), u2 = s2.redNeg(), c2 = this.m.subn(1).iushrn(1), f2 = this.m.bitLength();
              for (f2 = new a(2 * f2 * f2).toRed(this); 0 !== this.pow(f2, c2).cmp(u2); )
                f2.redIAdd(u2);
              for (var l2 = this.pow(f2, n2), h2 = this.pow(t4, n2.addn(1).iushrn(1)), p2 = this.pow(t4, n2), d2 = o2; 0 !== p2.cmp(s2); ) {
                for (var y2 = p2, b2 = 0; 0 !== y2.cmp(s2); b2++)
                  y2 = y2.redSqr();
                i(b2 < d2);
                var m2 = this.pow(l2, new a(1).iushln(d2 - b2 - 1));
                h2 = h2.redMul(m2), l2 = m2.redSqr(), p2 = p2.redMul(l2), d2 = b2;
              }
              return h2;
            }, A.prototype.invm = function(t4) {
              var e4 = t4._invmp(this.m);
              return 0 !== e4.negative ? (e4.negative = 0, this.imod(e4).redNeg()) : this.imod(e4);
            }, A.prototype.pow = function(t4, e4) {
              if (e4.isZero())
                return new a(1).toRed(this);
              if (0 === e4.cmpn(1))
                return t4.clone();
              var r3 = new Array(16);
              r3[0] = new a(1).toRed(this), r3[1] = t4;
              for (var n2 = 2; n2 < r3.length; n2++)
                r3[n2] = this.mul(r3[n2 - 1], t4);
              var i2 = r3[0], o2 = 0, s2 = 0, u2 = e4.bitLength() % 26;
              for (0 === u2 && (u2 = 26), n2 = e4.length - 1; n2 >= 0; n2--) {
                for (var c2 = e4.words[n2], f2 = u2 - 1; f2 >= 0; f2--) {
                  var l2 = c2 >> f2 & 1;
                  i2 !== r3[0] && (i2 = this.sqr(i2)), 0 !== l2 || 0 !== o2 ? (o2 <<= 1, o2 |= l2, (4 == ++s2 || 0 === n2 && 0 === f2) && (i2 = this.mul(i2, r3[o2]), s2 = 0, o2 = 0)) : s2 = 0;
                }
                u2 = 26;
              }
              return i2;
            }, A.prototype.convertTo = function(t4) {
              var e4 = t4.umod(this.m);
              return e4 === t4 ? e4.clone() : e4;
            }, A.prototype.convertFrom = function(t4) {
              var e4 = t4.clone();
              return e4.red = null, e4;
            }, a.mont = function(t4) {
              return new P(t4);
            }, o(P, A), P.prototype.convertTo = function(t4) {
              return this.imod(t4.ushln(this.shift));
            }, P.prototype.convertFrom = function(t4) {
              var e4 = this.imod(t4.mul(this.rinv));
              return e4.red = null, e4;
            }, P.prototype.imul = function(t4, e4) {
              if (t4.isZero() || e4.isZero())
                return t4.words[0] = 0, t4.length = 1, t4;
              var r3 = t4.imul(e4), n2 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r3.isub(n2).iushrn(this.shift), o2 = i2;
              return i2.cmp(this.m) >= 0 ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
            }, P.prototype.mul = function(t4, e4) {
              if (t4.isZero() || e4.isZero())
                return new a(0)._forceRed(this);
              var r3 = t4.mul(e4), n2 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r3.isub(n2).iushrn(this.shift), o2 = i2;
              return i2.cmp(this.m) >= 0 ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
            }, P.prototype.invm = function(t4) {
              return this.imod(t4._invmp(this.m).mul(this.r2))._forceRed(this);
            };
          }(t2 = r2.nmd(t2), this);
        }, 8904: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i;
          function o(t3) {
            this.rand = t3;
          }
          if (t2.exports = function(t3) {
            return i || (i = new o(null)), i.generate(t3);
          }, t2.exports.Rand = o, o.prototype.generate = function(t3) {
            return this._rand(t3);
          }, o.prototype._rand = function(t3) {
            if (this.rand.getBytes)
              return this.rand.getBytes(t3);
            for (var e3 = new Uint8Array(t3), r3 = 0; r3 < e3.length; r3++)
              e3[r3] = this.rand.getByte();
            return e3;
          }, "object" === ("undefined" == typeof self ? "undefined" : n(self)))
            self.crypto && self.crypto.getRandomValues ? o.prototype._rand = function(t3) {
              var e3 = new Uint8Array(t3);
              return self.crypto.getRandomValues(e3), e3;
            } : self.msCrypto && self.msCrypto.getRandomValues ? o.prototype._rand = function(t3) {
              var e3 = new Uint8Array(t3);
              return self.msCrypto.getRandomValues(e3), e3;
            } : "object" === ("undefined" == typeof window ? "undefined" : n(window)) && (o.prototype._rand = function() {
              throw new Error("Not implemented yet");
            });
          else
            try {
              var a = r2(3776);
              if ("function" != typeof a.randomBytes)
                throw new Error("Not supported");
              o.prototype._rand = function(t3) {
                return a.randomBytes(t3);
              };
            } catch (t3) {
            }
        }, 5401: (t2, e2, r2) => {
          var n = r2(9732).Buffer;
          function i(t3) {
            n.isBuffer(t3) || (t3 = n.from(t3));
            for (var e3 = t3.length / 4 | 0, r3 = new Array(e3), i2 = 0; i2 < e3; i2++)
              r3[i2] = t3.readUInt32BE(4 * i2);
            return r3;
          }
          function o(t3) {
            for (; 0 < t3.length; t3++)
              t3[0] = 0;
          }
          function a(t3, e3, r3, n2, i2) {
            for (var o2, a2, s2, u2, c2 = r3[0], f = r3[1], l = r3[2], h = r3[3], p = t3[0] ^ e3[0], d = t3[1] ^ e3[1], y = t3[2] ^ e3[2], b = t3[3] ^ e3[3], m = 4, v = 1; v < i2; v++)
              o2 = c2[p >>> 24] ^ f[d >>> 16 & 255] ^ l[y >>> 8 & 255] ^ h[255 & b] ^ e3[m++], a2 = c2[d >>> 24] ^ f[y >>> 16 & 255] ^ l[b >>> 8 & 255] ^ h[255 & p] ^ e3[m++], s2 = c2[y >>> 24] ^ f[b >>> 16 & 255] ^ l[p >>> 8 & 255] ^ h[255 & d] ^ e3[m++], u2 = c2[b >>> 24] ^ f[p >>> 16 & 255] ^ l[d >>> 8 & 255] ^ h[255 & y] ^ e3[m++], p = o2, d = a2, y = s2, b = u2;
            return o2 = (n2[p >>> 24] << 24 | n2[d >>> 16 & 255] << 16 | n2[y >>> 8 & 255] << 8 | n2[255 & b]) ^ e3[m++], a2 = (n2[d >>> 24] << 24 | n2[y >>> 16 & 255] << 16 | n2[b >>> 8 & 255] << 8 | n2[255 & p]) ^ e3[m++], s2 = (n2[y >>> 24] << 24 | n2[b >>> 16 & 255] << 16 | n2[p >>> 8 & 255] << 8 | n2[255 & d]) ^ e3[m++], u2 = (n2[b >>> 24] << 24 | n2[p >>> 16 & 255] << 16 | n2[d >>> 8 & 255] << 8 | n2[255 & y]) ^ e3[m++], [o2 >>>= 0, a2 >>>= 0, s2 >>>= 0, u2 >>>= 0];
          }
          var s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], u = function() {
            for (var t3 = new Array(256), e3 = 0; e3 < 256; e3++)
              t3[e3] = e3 < 128 ? e3 << 1 : e3 << 1 ^ 283;
            for (var r3 = [], n2 = [], i2 = [[], [], [], []], o2 = [[], [], [], []], a2 = 0, s2 = 0, u2 = 0; u2 < 256; ++u2) {
              var c2 = s2 ^ s2 << 1 ^ s2 << 2 ^ s2 << 3 ^ s2 << 4;
              c2 = c2 >>> 8 ^ 255 & c2 ^ 99, r3[a2] = c2, n2[c2] = a2;
              var f = t3[a2], l = t3[f], h = t3[l], p = 257 * t3[c2] ^ 16843008 * c2;
              i2[0][a2] = p << 24 | p >>> 8, i2[1][a2] = p << 16 | p >>> 16, i2[2][a2] = p << 8 | p >>> 24, i2[3][a2] = p, p = 16843009 * h ^ 65537 * l ^ 257 * f ^ 16843008 * a2, o2[0][c2] = p << 24 | p >>> 8, o2[1][c2] = p << 16 | p >>> 16, o2[2][c2] = p << 8 | p >>> 24, o2[3][c2] = p, 0 === a2 ? a2 = s2 = 1 : (a2 = f ^ t3[t3[t3[h ^ f]]], s2 ^= t3[t3[s2]]);
            }
            return { SBOX: r3, INV_SBOX: n2, SUB_MIX: i2, INV_SUB_MIX: o2 };
          }();
          function c(t3) {
            this._key = i(t3), this._reset();
          }
          c.blockSize = 16, c.keySize = 32, c.prototype.blockSize = c.blockSize, c.prototype.keySize = c.keySize, c.prototype._reset = function() {
            for (var t3 = this._key, e3 = t3.length, r3 = e3 + 6, n2 = 4 * (r3 + 1), i2 = [], o2 = 0; o2 < e3; o2++)
              i2[o2] = t3[o2];
            for (o2 = e3; o2 < n2; o2++) {
              var a2 = i2[o2 - 1];
              o2 % e3 == 0 ? (a2 = a2 << 8 | a2 >>> 24, a2 = u.SBOX[a2 >>> 24] << 24 | u.SBOX[a2 >>> 16 & 255] << 16 | u.SBOX[a2 >>> 8 & 255] << 8 | u.SBOX[255 & a2], a2 ^= s[o2 / e3 | 0] << 24) : e3 > 6 && o2 % e3 == 4 && (a2 = u.SBOX[a2 >>> 24] << 24 | u.SBOX[a2 >>> 16 & 255] << 16 | u.SBOX[a2 >>> 8 & 255] << 8 | u.SBOX[255 & a2]), i2[o2] = i2[o2 - e3] ^ a2;
            }
            for (var c2 = [], f = 0; f < n2; f++) {
              var l = n2 - f, h = i2[l - (f % 4 ? 0 : 4)];
              c2[f] = f < 4 || l <= 4 ? h : u.INV_SUB_MIX[0][u.SBOX[h >>> 24]] ^ u.INV_SUB_MIX[1][u.SBOX[h >>> 16 & 255]] ^ u.INV_SUB_MIX[2][u.SBOX[h >>> 8 & 255]] ^ u.INV_SUB_MIX[3][u.SBOX[255 & h]];
            }
            this._nRounds = r3, this._keySchedule = i2, this._invKeySchedule = c2;
          }, c.prototype.encryptBlockRaw = function(t3) {
            return a(t3 = i(t3), this._keySchedule, u.SUB_MIX, u.SBOX, this._nRounds);
          }, c.prototype.encryptBlock = function(t3) {
            var e3 = this.encryptBlockRaw(t3), r3 = n.allocUnsafe(16);
            return r3.writeUInt32BE(e3[0], 0), r3.writeUInt32BE(e3[1], 4), r3.writeUInt32BE(e3[2], 8), r3.writeUInt32BE(e3[3], 12), r3;
          }, c.prototype.decryptBlock = function(t3) {
            var e3 = (t3 = i(t3))[1];
            t3[1] = t3[3], t3[3] = e3;
            var r3 = a(t3, this._invKeySchedule, u.INV_SUB_MIX, u.INV_SBOX, this._nRounds), o2 = n.allocUnsafe(16);
            return o2.writeUInt32BE(r3[0], 0), o2.writeUInt32BE(r3[3], 4), o2.writeUInt32BE(r3[2], 8), o2.writeUInt32BE(r3[1], 12), o2;
          }, c.prototype.scrub = function() {
            o(this._keySchedule), o(this._invKeySchedule), o(this._key);
          }, t2.exports.AES = c;
        }, 1085: (t2, e2, r2) => {
          var n = r2(5401), i = r2(9732).Buffer, o = r2(2533), a = r2(1679), s = r2(9363), u = r2(6876), c = r2(9003);
          function f(t3, e3, r3, a2) {
            o.call(this);
            var u2 = i.alloc(4, 0);
            this._cipher = new n.AES(e3);
            var f2 = this._cipher.encryptBlock(u2);
            this._ghash = new s(f2), r3 = function(t4, e4, r4) {
              if (12 === e4.length)
                return t4._finID = i.concat([e4, i.from([0, 0, 0, 1])]), i.concat([e4, i.from([0, 0, 0, 2])]);
              var n2 = new s(r4), o2 = e4.length, a3 = o2 % 16;
              n2.update(e4), a3 && (a3 = 16 - a3, n2.update(i.alloc(a3, 0))), n2.update(i.alloc(8, 0));
              var u3 = 8 * o2, f3 = i.alloc(8);
              f3.writeUIntBE(u3, 0, 8), n2.update(f3), t4._finID = n2.state;
              var l = i.from(t4._finID);
              return c(l), l;
            }(this, r3, f2), this._prev = i.from(r3), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a2, this._alen = 0, this._len = 0, this._mode = t3, this._authTag = null, this._called = false;
          }
          a(f, o), f.prototype._update = function(t3) {
            if (!this._called && this._alen) {
              var e3 = 16 - this._alen % 16;
              e3 < 16 && (e3 = i.alloc(e3, 0), this._ghash.update(e3));
            }
            this._called = true;
            var r3 = this._mode.encrypt(this, t3);
            return this._decrypt ? this._ghash.update(t3) : this._ghash.update(r3), this._len += t3.length, r3;
          }, f.prototype._final = function() {
            if (this._decrypt && !this._authTag)
              throw new Error("Unsupported state or unable to authenticate data");
            var t3 = u(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
            if (this._decrypt && function(t4, e3) {
              var r3 = 0;
              t4.length !== e3.length && r3++;
              for (var n2 = Math.min(t4.length, e3.length), i2 = 0; i2 < n2; ++i2)
                r3 += t4[i2] ^ e3[i2];
              return r3;
            }(t3, this._authTag))
              throw new Error("Unsupported state or unable to authenticate data");
            this._authTag = t3, this._cipher.scrub();
          }, f.prototype.getAuthTag = function() {
            if (this._decrypt || !i.isBuffer(this._authTag))
              throw new Error("Attempting to get auth tag in unsupported state");
            return this._authTag;
          }, f.prototype.setAuthTag = function(t3) {
            if (!this._decrypt)
              throw new Error("Attempting to set auth tag in unsupported state");
            this._authTag = t3;
          }, f.prototype.setAAD = function(t3) {
            if (this._called)
              throw new Error("Attempting to set AAD in unsupported state");
            this._ghash.update(t3), this._alen += t3.length;
          }, t2.exports = f;
        }, 2098: (t2, e2, r2) => {
          var n = r2(3604), i = r2(1808), o = r2(3219);
          e2.createCipher = e2.Cipher = n.createCipher, e2.createCipheriv = e2.Cipheriv = n.createCipheriv, e2.createDecipher = e2.Decipher = i.createDecipher, e2.createDecipheriv = e2.Decipheriv = i.createDecipheriv, e2.listCiphers = e2.getCiphers = function() {
            return Object.keys(o);
          };
        }, 1808: (t2, e2, r2) => {
          var n = r2(1085), i = r2(9732).Buffer, o = r2(8629), a = r2(5407), s = r2(2533), u = r2(5401), c = r2(1685);
          function f(t3, e3, r3) {
            s.call(this), this._cache = new l(), this._last = void 0, this._cipher = new u.AES(e3), this._prev = i.from(r3), this._mode = t3, this._autopadding = true;
          }
          function l() {
            this.cache = i.allocUnsafe(0);
          }
          function h(t3, e3, r3) {
            var s2 = o[t3.toLowerCase()];
            if (!s2)
              throw new TypeError("invalid suite type");
            if ("string" == typeof r3 && (r3 = i.from(r3)), "GCM" !== s2.mode && r3.length !== s2.iv)
              throw new TypeError("invalid iv length " + r3.length);
            if ("string" == typeof e3 && (e3 = i.from(e3)), e3.length !== s2.key / 8)
              throw new TypeError("invalid key length " + e3.length);
            return "stream" === s2.type ? new a(s2.module, e3, r3, true) : "auth" === s2.type ? new n(s2.module, e3, r3, true) : new f(s2.module, e3, r3);
          }
          r2(1679)(f, s), f.prototype._update = function(t3) {
            var e3, r3;
            this._cache.add(t3);
            for (var n2 = []; e3 = this._cache.get(this._autopadding); )
              r3 = this._mode.decrypt(this, e3), n2.push(r3);
            return i.concat(n2);
          }, f.prototype._final = function() {
            var t3 = this._cache.flush();
            if (this._autopadding)
              return function(t4) {
                var e3 = t4[15];
                if (e3 < 1 || e3 > 16)
                  throw new Error("unable to decrypt data");
                for (var r3 = -1; ++r3 < e3; )
                  if (t4[r3 + (16 - e3)] !== e3)
                    throw new Error("unable to decrypt data");
                if (16 !== e3)
                  return t4.slice(0, 16 - e3);
              }(this._mode.decrypt(this, t3));
            if (t3)
              throw new Error("data not multiple of block length");
          }, f.prototype.setAutoPadding = function(t3) {
            return this._autopadding = !!t3, this;
          }, l.prototype.add = function(t3) {
            this.cache = i.concat([this.cache, t3]);
          }, l.prototype.get = function(t3) {
            var e3;
            if (t3) {
              if (this.cache.length > 16)
                return e3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e3;
            } else if (this.cache.length >= 16)
              return e3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e3;
            return null;
          }, l.prototype.flush = function() {
            if (this.cache.length)
              return this.cache;
          }, e2.createDecipher = function(t3, e3) {
            var r3 = o[t3.toLowerCase()];
            if (!r3)
              throw new TypeError("invalid suite type");
            var n2 = c(e3, false, r3.key, r3.iv);
            return h(t3, n2.key, n2.iv);
          }, e2.createDecipheriv = h;
        }, 3604: (t2, e2, r2) => {
          var n = r2(8629), i = r2(1085), o = r2(9732).Buffer, a = r2(5407), s = r2(2533), u = r2(5401), c = r2(1685);
          function f(t3, e3, r3) {
            s.call(this), this._cache = new h(), this._cipher = new u.AES(e3), this._prev = o.from(r3), this._mode = t3, this._autopadding = true;
          }
          r2(1679)(f, s), f.prototype._update = function(t3) {
            var e3, r3;
            this._cache.add(t3);
            for (var n2 = []; e3 = this._cache.get(); )
              r3 = this._mode.encrypt(this, e3), n2.push(r3);
            return o.concat(n2);
          };
          var l = o.alloc(16, 16);
          function h() {
            this.cache = o.allocUnsafe(0);
          }
          function p(t3, e3, r3) {
            var s2 = n[t3.toLowerCase()];
            if (!s2)
              throw new TypeError("invalid suite type");
            if ("string" == typeof e3 && (e3 = o.from(e3)), e3.length !== s2.key / 8)
              throw new TypeError("invalid key length " + e3.length);
            if ("string" == typeof r3 && (r3 = o.from(r3)), "GCM" !== s2.mode && r3.length !== s2.iv)
              throw new TypeError("invalid iv length " + r3.length);
            return "stream" === s2.type ? new a(s2.module, e3, r3) : "auth" === s2.type ? new i(s2.module, e3, r3) : new f(s2.module, e3, r3);
          }
          f.prototype._final = function() {
            var t3 = this._cache.flush();
            if (this._autopadding)
              return t3 = this._mode.encrypt(this, t3), this._cipher.scrub(), t3;
            if (!t3.equals(l))
              throw this._cipher.scrub(), new Error("data not multiple of block length");
          }, f.prototype.setAutoPadding = function(t3) {
            return this._autopadding = !!t3, this;
          }, h.prototype.add = function(t3) {
            this.cache = o.concat([this.cache, t3]);
          }, h.prototype.get = function() {
            if (this.cache.length > 15) {
              var t3 = this.cache.slice(0, 16);
              return this.cache = this.cache.slice(16), t3;
            }
            return null;
          }, h.prototype.flush = function() {
            for (var t3 = 16 - this.cache.length, e3 = o.allocUnsafe(t3), r3 = -1; ++r3 < t3; )
              e3.writeUInt8(t3, r3);
            return o.concat([this.cache, e3]);
          }, e2.createCipheriv = p, e2.createCipher = function(t3, e3) {
            var r3 = n[t3.toLowerCase()];
            if (!r3)
              throw new TypeError("invalid suite type");
            var i2 = c(e3, false, r3.key, r3.iv);
            return p(t3, i2.key, i2.iv);
          };
        }, 9363: (t2, e2, r2) => {
          var n = r2(9732).Buffer, i = n.alloc(16, 0);
          function o(t3) {
            var e3 = n.allocUnsafe(16);
            return e3.writeUInt32BE(t3[0] >>> 0, 0), e3.writeUInt32BE(t3[1] >>> 0, 4), e3.writeUInt32BE(t3[2] >>> 0, 8), e3.writeUInt32BE(t3[3] >>> 0, 12), e3;
          }
          function a(t3) {
            this.h = t3, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
          }
          a.prototype.ghash = function(t3) {
            for (var e3 = -1; ++e3 < t3.length; )
              this.state[e3] ^= t3[e3];
            this._multiply();
          }, a.prototype._multiply = function() {
            for (var t3, e3, r3, n2 = [(t3 = this.h).readUInt32BE(0), t3.readUInt32BE(4), t3.readUInt32BE(8), t3.readUInt32BE(12)], i2 = [0, 0, 0, 0], a2 = -1; ++a2 < 128; ) {
              for (!!(this.state[~~(a2 / 8)] & 1 << 7 - a2 % 8) && (i2[0] ^= n2[0], i2[1] ^= n2[1], i2[2] ^= n2[2], i2[3] ^= n2[3]), r3 = !!(1 & n2[3]), e3 = 3; e3 > 0; e3--)
                n2[e3] = n2[e3] >>> 1 | (1 & n2[e3 - 1]) << 31;
              n2[0] = n2[0] >>> 1, r3 && (n2[0] = n2[0] ^ 225 << 24);
            }
            this.state = o(i2);
          }, a.prototype.update = function(t3) {
            var e3;
            for (this.cache = n.concat([this.cache, t3]); this.cache.length >= 16; )
              e3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e3);
          }, a.prototype.final = function(t3, e3) {
            return this.cache.length && this.ghash(n.concat([this.cache, i], 16)), this.ghash(o([0, t3, 0, e3])), this.state;
          }, t2.exports = a;
        }, 9003: (t2) => {
          t2.exports = function(t3) {
            for (var e2, r2 = t3.length; r2--; ) {
              if (255 !== (e2 = t3.readUInt8(r2))) {
                e2++, t3.writeUInt8(e2, r2);
                break;
              }
              t3.writeUInt8(0, r2);
            }
          };
        }, 5459: (t2, e2, r2) => {
          var n = r2(6876);
          e2.encrypt = function(t3, e3) {
            var r3 = n(e3, t3._prev);
            return t3._prev = t3._cipher.encryptBlock(r3), t3._prev;
          }, e2.decrypt = function(t3, e3) {
            var r3 = t3._prev;
            t3._prev = e3;
            var i = t3._cipher.decryptBlock(e3);
            return n(i, r3);
          };
        }, 4488: (t2, e2, r2) => {
          var n = r2(9732).Buffer, i = r2(6876);
          function o(t3, e3, r3) {
            var o2 = e3.length, a = i(e3, t3._cache);
            return t3._cache = t3._cache.slice(o2), t3._prev = n.concat([t3._prev, r3 ? e3 : a]), a;
          }
          e2.encrypt = function(t3, e3, r3) {
            for (var i2, a = n.allocUnsafe(0); e3.length; ) {
              if (0 === t3._cache.length && (t3._cache = t3._cipher.encryptBlock(t3._prev), t3._prev = n.allocUnsafe(0)), !(t3._cache.length <= e3.length)) {
                a = n.concat([a, o(t3, e3, r3)]);
                break;
              }
              i2 = t3._cache.length, a = n.concat([a, o(t3, e3.slice(0, i2), r3)]), e3 = e3.slice(i2);
            }
            return a;
          };
        }, 4937: (t2, e2, r2) => {
          var n = r2(9732).Buffer;
          function i(t3, e3, r3) {
            for (var n2, i2, a = -1, s = 0; ++a < 8; )
              n2 = e3 & 1 << 7 - a ? 128 : 0, s += (128 & (i2 = t3._cipher.encryptBlock(t3._prev)[0] ^ n2)) >> a % 8, t3._prev = o(t3._prev, r3 ? n2 : i2);
            return s;
          }
          function o(t3, e3) {
            var r3 = t3.length, i2 = -1, o2 = n.allocUnsafe(t3.length);
            for (t3 = n.concat([t3, n.from([e3])]); ++i2 < r3; )
              o2[i2] = t3[i2] << 1 | t3[i2 + 1] >> 7;
            return o2;
          }
          e2.encrypt = function(t3, e3, r3) {
            for (var o2 = e3.length, a = n.allocUnsafe(o2), s = -1; ++s < o2; )
              a[s] = i(t3, e3[s], r3);
            return a;
          };
        }, 6322: (t2, e2, r2) => {
          var n = r2(9732).Buffer;
          function i(t3, e3, r3) {
            var i2 = t3._cipher.encryptBlock(t3._prev)[0] ^ e3;
            return t3._prev = n.concat([t3._prev.slice(1), n.from([r3 ? e3 : i2])]), i2;
          }
          e2.encrypt = function(t3, e3, r3) {
            for (var o = e3.length, a = n.allocUnsafe(o), s = -1; ++s < o; )
              a[s] = i(t3, e3[s], r3);
            return a;
          };
        }, 2538: (t2, e2, r2) => {
          var n = r2(6876), i = r2(9732).Buffer, o = r2(9003);
          function a(t3) {
            var e3 = t3._cipher.encryptBlockRaw(t3._prev);
            return o(t3._prev), e3;
          }
          e2.encrypt = function(t3, e3) {
            var r3 = Math.ceil(e3.length / 16), o2 = t3._cache.length;
            t3._cache = i.concat([t3._cache, i.allocUnsafe(16 * r3)]);
            for (var s = 0; s < r3; s++) {
              var u = a(t3), c = o2 + 16 * s;
              t3._cache.writeUInt32BE(u[0], c + 0), t3._cache.writeUInt32BE(u[1], c + 4), t3._cache.writeUInt32BE(u[2], c + 8), t3._cache.writeUInt32BE(u[3], c + 12);
            }
            var f = t3._cache.slice(0, e3.length);
            return t3._cache = t3._cache.slice(e3.length), n(e3, f);
          };
        }, 9907: (t2, e2) => {
          e2.encrypt = function(t3, e3) {
            return t3._cipher.encryptBlock(e3);
          }, e2.decrypt = function(t3, e3) {
            return t3._cipher.decryptBlock(e3);
          };
        }, 8629: (t2, e2, r2) => {
          var n = { ECB: r2(9907), CBC: r2(5459), CFB: r2(4488), CFB8: r2(6322), CFB1: r2(4937), OFB: r2(4252), CTR: r2(2538), GCM: r2(2538) }, i = r2(3219);
          for (var o in i)
            i[o].module = n[i[o].mode];
          t2.exports = i;
        }, 4252: (t2, e2, r2) => {
          var n = r2(5832).Buffer, i = r2(6876);
          function o(t3) {
            return t3._prev = t3._cipher.encryptBlock(t3._prev), t3._prev;
          }
          e2.encrypt = function(t3, e3) {
            for (; t3._cache.length < e3.length; )
              t3._cache = n.concat([t3._cache, o(t3)]);
            var r3 = t3._cache.slice(0, e3.length);
            return t3._cache = t3._cache.slice(e3.length), i(e3, r3);
          };
        }, 5407: (t2, e2, r2) => {
          var n = r2(5401), i = r2(9732).Buffer, o = r2(2533);
          function a(t3, e3, r3, a2) {
            o.call(this), this._cipher = new n.AES(e3), this._prev = i.from(r3), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a2, this._mode = t3;
          }
          r2(1679)(a, o), a.prototype._update = function(t3) {
            return this._mode.encrypt(this, t3, this._decrypt);
          }, a.prototype._final = function() {
            this._cipher.scrub();
          }, t2.exports = a;
        }, 9652: (t2, e2, r2) => {
          var n = r2(8201), i = r2(2098), o = r2(8629), a = r2(3849), s = r2(1685);
          function u(t3, e3, r3) {
            if (t3 = t3.toLowerCase(), o[t3])
              return i.createCipheriv(t3, e3, r3);
            if (a[t3])
              return new n({ key: e3, iv: r3, mode: t3 });
            throw new TypeError("invalid suite type");
          }
          function c(t3, e3, r3) {
            if (t3 = t3.toLowerCase(), o[t3])
              return i.createDecipheriv(t3, e3, r3);
            if (a[t3])
              return new n({ key: e3, iv: r3, mode: t3, decrypt: true });
            throw new TypeError("invalid suite type");
          }
          e2.createCipher = e2.Cipher = function(t3, e3) {
            var r3, n2;
            if (t3 = t3.toLowerCase(), o[t3])
              r3 = o[t3].key, n2 = o[t3].iv;
            else {
              if (!a[t3])
                throw new TypeError("invalid suite type");
              r3 = 8 * a[t3].key, n2 = a[t3].iv;
            }
            var i2 = s(e3, false, r3, n2);
            return u(t3, i2.key, i2.iv);
          }, e2.createCipheriv = e2.Cipheriv = u, e2.createDecipher = e2.Decipher = function(t3, e3) {
            var r3, n2;
            if (t3 = t3.toLowerCase(), o[t3])
              r3 = o[t3].key, n2 = o[t3].iv;
            else {
              if (!a[t3])
                throw new TypeError("invalid suite type");
              r3 = 8 * a[t3].key, n2 = a[t3].iv;
            }
            var i2 = s(e3, false, r3, n2);
            return c(t3, i2.key, i2.iv);
          }, e2.createDecipheriv = e2.Decipheriv = c, e2.listCiphers = e2.getCiphers = function() {
            return Object.keys(a).concat(i.getCiphers());
          };
        }, 8201: (t2, e2, r2) => {
          var n = r2(2533), i = r2(1471), o = r2(1679), a = r2(9732).Buffer, s = { "des-ede3-cbc": i.CBC.instantiate(i.EDE), "des-ede3": i.EDE, "des-ede-cbc": i.CBC.instantiate(i.EDE), "des-ede": i.EDE, "des-cbc": i.CBC.instantiate(i.DES), "des-ecb": i.DES };
          function u(t3) {
            n.call(this);
            var e3, r3 = t3.mode.toLowerCase(), i2 = s[r3];
            e3 = t3.decrypt ? "decrypt" : "encrypt";
            var o2 = t3.key;
            a.isBuffer(o2) || (o2 = a.from(o2)), "des-ede" !== r3 && "des-ede-cbc" !== r3 || (o2 = a.concat([o2, o2.slice(0, 8)]));
            var u2 = t3.iv;
            a.isBuffer(u2) || (u2 = a.from(u2)), this._des = i2.create({ key: o2, iv: u2, type: e3 });
          }
          s.des = s["des-cbc"], s.des3 = s["des-ede3-cbc"], t2.exports = u, o(u, n), u.prototype._update = function(t3) {
            return a.from(this._des.update(t3));
          }, u.prototype._final = function() {
            return a.from(this._des.final());
          };
        }, 3849: (t2, e2) => {
          e2["des-ecb"] = { key: 8, iv: 0 }, e2["des-cbc"] = e2.des = { key: 8, iv: 8 }, e2["des-ede3-cbc"] = e2.des3 = { key: 24, iv: 8 }, e2["des-ede3"] = { key: 24, iv: 0 }, e2["des-ede-cbc"] = { key: 16, iv: 8 }, e2["des-ede"] = { key: 16, iv: 0 };
        }, 1095: (t2, e2, r2) => {
          "use strict";
          var n = r2(7799), i = r2(4276), o = r2(9732).Buffer;
          function a(t3) {
            var e3, r3 = t3.modulus.byteLength();
            do {
              e3 = new n(i(r3));
            } while (e3.cmp(t3.modulus) >= 0 || !e3.umod(t3.prime1) || !e3.umod(t3.prime2));
            return e3;
          }
          function s(t3, e3) {
            var r3 = function(t4) {
              var e4 = a(t4);
              return { blinder: e4.toRed(n.mont(t4.modulus)).redPow(new n(t4.publicExponent)).fromRed(), unblinder: e4.invm(t4.modulus) };
            }(e3), i2 = e3.modulus.byteLength(), s2 = new n(t3).mul(r3.blinder).umod(e3.modulus), u = s2.toRed(n.mont(e3.prime1)), c = s2.toRed(n.mont(e3.prime2)), f = e3.coefficient, l = e3.prime1, h = e3.prime2, p = u.redPow(e3.exponent1).fromRed(), d = c.redPow(e3.exponent2).fromRed(), y = p.isub(d).imul(f).umod(l).imul(h);
            return d.iadd(y).imul(r3.unblinder).umod(e3.modulus).toArrayLike(o, "be", i2);
          }
          s.getr = a, t2.exports = s;
        }, 4606: (t2, e2, r2) => {
          "use strict";
          t2.exports = r2(2951);
        }, 7937: (t2, e2, r2) => {
          "use strict";
          var n = r2(9732).Buffer, i = r2(5833), o = r2(3292), a = r2(1679), s = r2(6620), u = r2(7032), c = r2(2951);
          function f(t3) {
            o.Writable.call(this);
            var e3 = c[t3];
            if (!e3)
              throw new Error("Unknown message digest");
            this._hashType = e3.hash, this._hash = i(e3.hash), this._tag = e3.id, this._signType = e3.sign;
          }
          function l(t3) {
            o.Writable.call(this);
            var e3 = c[t3];
            if (!e3)
              throw new Error("Unknown message digest");
            this._hash = i(e3.hash), this._tag = e3.id, this._signType = e3.sign;
          }
          function h(t3) {
            return new f(t3);
          }
          function p(t3) {
            return new l(t3);
          }
          Object.keys(c).forEach(function(t3) {
            c[t3].id = n.from(c[t3].id, "hex"), c[t3.toLowerCase()] = c[t3];
          }), a(f, o.Writable), f.prototype._write = function(t3, e3, r3) {
            this._hash.update(t3), r3();
          }, f.prototype.update = function(t3, e3) {
            return this._hash.update("string" == typeof t3 ? n.from(t3, e3) : t3), this;
          }, f.prototype.sign = function(t3, e3) {
            this.end();
            var r3 = this._hash.digest(), n2 = s(r3, t3, this._hashType, this._signType, this._tag);
            return e3 ? n2.toString(e3) : n2;
          }, a(l, o.Writable), l.prototype._write = function(t3, e3, r3) {
            this._hash.update(t3), r3();
          }, l.prototype.update = function(t3, e3) {
            return this._hash.update("string" == typeof t3 ? n.from(t3, e3) : t3), this;
          }, l.prototype.verify = function(t3, e3, r3) {
            var i2 = "string" == typeof e3 ? n.from(e3, r3) : e3;
            this.end();
            var o2 = this._hash.digest();
            return u(i2, o2, t3, this._signType, this._tag);
          }, t2.exports = { Sign: h, Verify: p, createSign: h, createVerify: p };
        }, 6620: (t2, e2, r2) => {
          "use strict";
          var n = r2(9732).Buffer, i = r2(2046), o = r2(1095), a = r2(7312).ec, s = r2(7799), u = r2(5053), c = r2(4589);
          function f(t3, e3, r3, o2) {
            if ((t3 = n.from(t3.toArray())).length < e3.byteLength()) {
              var a2 = n.alloc(e3.byteLength() - t3.length);
              t3 = n.concat([a2, t3]);
            }
            var s2 = r3.length, u2 = function(t4, e4) {
              t4 = (t4 = l(t4, e4)).mod(e4);
              var r4 = n.from(t4.toArray());
              if (r4.length < e4.byteLength()) {
                var i2 = n.alloc(e4.byteLength() - r4.length);
                r4 = n.concat([i2, r4]);
              }
              return r4;
            }(r3, e3), c2 = n.alloc(s2);
            c2.fill(1);
            var f2 = n.alloc(s2);
            return f2 = i(o2, f2).update(c2).update(n.from([0])).update(t3).update(u2).digest(), c2 = i(o2, f2).update(c2).digest(), { k: f2 = i(o2, f2).update(c2).update(n.from([1])).update(t3).update(u2).digest(), v: c2 = i(o2, f2).update(c2).digest() };
          }
          function l(t3, e3) {
            var r3 = new s(t3), n2 = (t3.length << 3) - e3.bitLength();
            return n2 > 0 && r3.ishrn(n2), r3;
          }
          function h(t3, e3, r3) {
            var o2, a2;
            do {
              for (o2 = n.alloc(0); 8 * o2.length < t3.bitLength(); )
                e3.v = i(r3, e3.k).update(e3.v).digest(), o2 = n.concat([o2, e3.v]);
              a2 = l(o2, t3), e3.k = i(r3, e3.k).update(e3.v).update(n.from([0])).digest(), e3.v = i(r3, e3.k).update(e3.v).digest();
            } while (-1 !== a2.cmp(t3));
            return a2;
          }
          function p(t3, e3, r3, n2) {
            return t3.toRed(s.mont(r3)).redPow(e3).fromRed().mod(n2);
          }
          t2.exports = function(t3, e3, r3, i2, d) {
            var y = u(e3);
            if (y.curve) {
              if ("ecdsa" !== i2 && "ecdsa/rsa" !== i2)
                throw new Error("wrong private key type");
              return function(t4, e4) {
                var r4 = c[e4.curve.join(".")];
                if (!r4)
                  throw new Error("unknown curve " + e4.curve.join("."));
                var i3 = new a(r4).keyFromPrivate(e4.privateKey).sign(t4);
                return n.from(i3.toDER());
              }(t3, y);
            }
            if ("dsa" === y.type) {
              if ("dsa" !== i2)
                throw new Error("wrong private key type");
              return function(t4, e4, r4) {
                for (var i3, o2 = e4.params.priv_key, a2 = e4.params.p, u2 = e4.params.q, c2 = e4.params.g, d2 = new s(0), y2 = l(t4, u2).mod(u2), b2 = false, m2 = f(o2, u2, t4, r4); false === b2; )
                  d2 = p(c2, i3 = h(u2, m2, r4), a2, u2), 0 === (b2 = i3.invm(u2).imul(y2.add(o2.mul(d2))).mod(u2)).cmpn(0) && (b2 = false, d2 = new s(0));
                return function(t5, e5) {
                  t5 = t5.toArray(), e5 = e5.toArray(), 128 & t5[0] && (t5 = [0].concat(t5)), 128 & e5[0] && (e5 = [0].concat(e5));
                  var r5 = [48, t5.length + e5.length + 4, 2, t5.length];
                  return r5 = r5.concat(t5, [2, e5.length], e5), n.from(r5);
                }(d2, b2);
              }(t3, y, r3);
            }
            if ("rsa" !== i2 && "ecdsa/rsa" !== i2)
              throw new Error("wrong private key type");
            if (void 0 !== e3.padding && 1 !== e3.padding)
              throw new Error("illegal or unsupported padding mode");
            t3 = n.concat([d, t3]);
            for (var b = y.modulus.byteLength(), m = [0, 1]; t3.length + m.length + 1 < b; )
              m.push(255);
            m.push(0);
            for (var v = -1; ++v < t3.length; )
              m.push(t3[v]);
            return o(m, y);
          }, t2.exports.getKey = f, t2.exports.makeKey = h;
        }, 7032: (t2, e2, r2) => {
          "use strict";
          var n = r2(9732).Buffer, i = r2(7799), o = r2(7312).ec, a = r2(5053), s = r2(4589);
          function u(t3, e3) {
            if (t3.cmpn(0) <= 0)
              throw new Error("invalid sig");
            if (t3.cmp(e3) >= 0)
              throw new Error("invalid sig");
          }
          t2.exports = function(t3, e3, r3, c, f) {
            var l = a(r3);
            if ("ec" === l.type) {
              if ("ecdsa" !== c && "ecdsa/rsa" !== c)
                throw new Error("wrong public key type");
              return function(t4, e4, r4) {
                var n2 = s[r4.data.algorithm.curve.join(".")];
                if (!n2)
                  throw new Error("unknown curve " + r4.data.algorithm.curve.join("."));
                var i2 = new o(n2), a2 = r4.data.subjectPrivateKey.data;
                return i2.verify(e4, t4, a2);
              }(t3, e3, l);
            }
            if ("dsa" === l.type) {
              if ("dsa" !== c)
                throw new Error("wrong public key type");
              return function(t4, e4, r4) {
                var n2 = r4.data.p, o2 = r4.data.q, s2 = r4.data.g, c2 = r4.data.pub_key, f2 = a.signature.decode(t4, "der"), l2 = f2.s, h2 = f2.r;
                u(l2, o2), u(h2, o2);
                var p2 = i.mont(n2), d2 = l2.invm(o2);
                return 0 === s2.toRed(p2).redPow(new i(e4).mul(d2).mod(o2)).fromRed().mul(c2.toRed(p2).redPow(h2.mul(d2).mod(o2)).fromRed()).mod(n2).mod(o2).cmp(h2);
              }(t3, e3, l);
            }
            if ("rsa" !== c && "ecdsa/rsa" !== c)
              throw new Error("wrong public key type");
            e3 = n.concat([f, e3]);
            for (var h = l.modulus.byteLength(), p = [1], d = 0; e3.length + p.length + 2 < h; )
              p.push(255), d += 1;
            p.push(0);
            for (var y = -1; ++y < e3.length; )
              p.push(e3[y]);
            p = n.from(p);
            var b = i.mont(l.modulus);
            t3 = (t3 = new i(t3).toRed(b)).redPow(new i(l.publicExponent)), t3 = n.from(t3.fromRed().toArray());
            var m = d < 8 ? 1 : 0;
            for (h = Math.min(t3.length, p.length), t3.length !== p.length && (m = 1), y = -1; ++y < h; )
              m |= t3[y] ^ p[y];
            return 0 === m;
          };
        }, 6876: (t2, e2, r2) => {
          var n = r2(5832).Buffer;
          t2.exports = function(t3, e3) {
            for (var r3 = Math.min(t3.length, e3.length), i = new n(r3), o = 0; o < r3; ++o)
              i[o] = t3[o] ^ e3[o];
            return i;
          };
        }, 5832: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(6775), o = r2(2486), a = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
          e2.Buffer = c, e2.SlowBuffer = function(t3) {
            return +t3 != t3 && (t3 = 0), c.alloc(+t3);
          }, e2.INSPECT_MAX_BYTES = 50;
          var s = 2147483647;
          function u(t3) {
            if (t3 > s)
              throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
            var e3 = new Uint8Array(t3);
            return Object.setPrototypeOf(e3, c.prototype), e3;
          }
          function c(t3, e3, r3) {
            if ("number" == typeof t3) {
              if ("string" == typeof e3)
                throw new TypeError('The "string" argument must be of type string. Received type number');
              return h(t3);
            }
            return f(t3, e3, r3);
          }
          function f(t3, e3, r3) {
            if ("string" == typeof t3)
              return function(t4, e4) {
                if ("string" == typeof e4 && "" !== e4 || (e4 = "utf8"), !c.isEncoding(e4))
                  throw new TypeError("Unknown encoding: " + e4);
                var r4 = 0 | b(t4, e4), n2 = u(r4), i3 = n2.write(t4, e4);
                return i3 !== r4 && (n2 = n2.slice(0, i3)), n2;
              }(t3, e3);
            if (ArrayBuffer.isView(t3))
              return function(t4) {
                if (F(t4, Uint8Array)) {
                  var e4 = new Uint8Array(t4);
                  return d(e4.buffer, e4.byteOffset, e4.byteLength);
                }
                return p(t4);
              }(t3);
            if (null == t3)
              throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + n(t3));
            if (F(t3, ArrayBuffer) || t3 && F(t3.buffer, ArrayBuffer))
              return d(t3, e3, r3);
            if ("undefined" != typeof SharedArrayBuffer && (F(t3, SharedArrayBuffer) || t3 && F(t3.buffer, SharedArrayBuffer)))
              return d(t3, e3, r3);
            if ("number" == typeof t3)
              throw new TypeError('The "value" argument must not be of type number. Received type number');
            var i2 = t3.valueOf && t3.valueOf();
            if (null != i2 && i2 !== t3)
              return c.from(i2, e3, r3);
            var o2 = function(t4) {
              if (c.isBuffer(t4)) {
                var e4 = 0 | y(t4.length), r4 = u(e4);
                return 0 === r4.length || t4.copy(r4, 0, 0, e4), r4;
              }
              return void 0 !== t4.length ? "number" != typeof t4.length || V(t4.length) ? u(0) : p(t4) : "Buffer" === t4.type && Array.isArray(t4.data) ? p(t4.data) : void 0;
            }(t3);
            if (o2)
              return o2;
            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof t3[Symbol.toPrimitive])
              return c.from(t3[Symbol.toPrimitive]("string"), e3, r3);
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + n(t3));
          }
          function l(t3) {
            if ("number" != typeof t3)
              throw new TypeError('"size" argument must be of type number');
            if (t3 < 0)
              throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
          }
          function h(t3) {
            return l(t3), u(t3 < 0 ? 0 : 0 | y(t3));
          }
          function p(t3) {
            for (var e3 = t3.length < 0 ? 0 : 0 | y(t3.length), r3 = u(e3), n2 = 0; n2 < e3; n2 += 1)
              r3[n2] = 255 & t3[n2];
            return r3;
          }
          function d(t3, e3, r3) {
            if (e3 < 0 || t3.byteLength < e3)
              throw new RangeError('"offset" is outside of buffer bounds');
            if (t3.byteLength < e3 + (r3 || 0))
              throw new RangeError('"length" is outside of buffer bounds');
            var n2;
            return n2 = void 0 === e3 && void 0 === r3 ? new Uint8Array(t3) : void 0 === r3 ? new Uint8Array(t3, e3) : new Uint8Array(t3, e3, r3), Object.setPrototypeOf(n2, c.prototype), n2;
          }
          function y(t3) {
            if (t3 >= s)
              throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + " bytes");
            return 0 | t3;
          }
          function b(t3, e3) {
            if (c.isBuffer(t3))
              return t3.length;
            if (ArrayBuffer.isView(t3) || F(t3, ArrayBuffer))
              return t3.byteLength;
            if ("string" != typeof t3)
              throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + n(t3));
            var r3 = t3.length, i2 = arguments.length > 2 && true === arguments[2];
            if (!i2 && 0 === r3)
              return 0;
            for (var o2 = false; ; )
              switch (e3) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r3;
                case "utf8":
                case "utf-8":
                  return C(t3).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r3;
                case "hex":
                  return r3 >>> 1;
                case "base64":
                  return U(t3).length;
                default:
                  if (o2)
                    return i2 ? -1 : C(t3).length;
                  e3 = ("" + e3).toLowerCase(), o2 = true;
              }
          }
          function m(t3, e3, r3) {
            var n2 = false;
            if ((void 0 === e3 || e3 < 0) && (e3 = 0), e3 > this.length)
              return "";
            if ((void 0 === r3 || r3 > this.length) && (r3 = this.length), r3 <= 0)
              return "";
            if ((r3 >>>= 0) <= (e3 >>>= 0))
              return "";
            for (t3 || (t3 = "utf8"); ; )
              switch (t3) {
                case "hex":
                  return M(this, e3, r3);
                case "utf8":
                case "utf-8":
                  return A(this, e3, r3);
                case "ascii":
                  return x(this, e3, r3);
                case "latin1":
                case "binary":
                  return k(this, e3, r3);
                case "base64":
                  return E(this, e3, r3);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return T(this, e3, r3);
                default:
                  if (n2)
                    throw new TypeError("Unknown encoding: " + t3);
                  t3 = (t3 + "").toLowerCase(), n2 = true;
              }
          }
          function v(t3, e3, r3) {
            var n2 = t3[e3];
            t3[e3] = t3[r3], t3[r3] = n2;
          }
          function g(t3, e3, r3, n2, i2) {
            if (0 === t3.length)
              return -1;
            if ("string" == typeof r3 ? (n2 = r3, r3 = 0) : r3 > 2147483647 ? r3 = 2147483647 : r3 < -2147483648 && (r3 = -2147483648), V(r3 = +r3) && (r3 = i2 ? 0 : t3.length - 1), r3 < 0 && (r3 = t3.length + r3), r3 >= t3.length) {
              if (i2)
                return -1;
              r3 = t3.length - 1;
            } else if (r3 < 0) {
              if (!i2)
                return -1;
              r3 = 0;
            }
            if ("string" == typeof e3 && (e3 = c.from(e3, n2)), c.isBuffer(e3))
              return 0 === e3.length ? -1 : _(t3, e3, r3, n2, i2);
            if ("number" == typeof e3)
              return e3 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i2 ? Uint8Array.prototype.indexOf.call(t3, e3, r3) : Uint8Array.prototype.lastIndexOf.call(t3, e3, r3) : _(t3, [e3], r3, n2, i2);
            throw new TypeError("val must be string, number or Buffer");
          }
          function _(t3, e3, r3, n2, i2) {
            var o2, a2 = 1, s2 = t3.length, u2 = e3.length;
            if (void 0 !== n2 && ("ucs2" === (n2 = String(n2).toLowerCase()) || "ucs-2" === n2 || "utf16le" === n2 || "utf-16le" === n2)) {
              if (t3.length < 2 || e3.length < 2)
                return -1;
              a2 = 2, s2 /= 2, u2 /= 2, r3 /= 2;
            }
            function c2(t4, e4) {
              return 1 === a2 ? t4[e4] : t4.readUInt16BE(e4 * a2);
            }
            if (i2) {
              var f2 = -1;
              for (o2 = r3; o2 < s2; o2++)
                if (c2(t3, o2) === c2(e3, -1 === f2 ? 0 : o2 - f2)) {
                  if (-1 === f2 && (f2 = o2), o2 - f2 + 1 === u2)
                    return f2 * a2;
                } else
                  -1 !== f2 && (o2 -= o2 - f2), f2 = -1;
            } else
              for (r3 + u2 > s2 && (r3 = s2 - u2), o2 = r3; o2 >= 0; o2--) {
                for (var l2 = true, h2 = 0; h2 < u2; h2++)
                  if (c2(t3, o2 + h2) !== c2(e3, h2)) {
                    l2 = false;
                    break;
                  }
                if (l2)
                  return o2;
              }
            return -1;
          }
          function w(t3, e3, r3, n2) {
            r3 = Number(r3) || 0;
            var i2 = t3.length - r3;
            n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
            var o2 = e3.length;
            n2 > o2 / 2 && (n2 = o2 / 2);
            for (var a2 = 0; a2 < n2; ++a2) {
              var s2 = parseInt(e3.substr(2 * a2, 2), 16);
              if (V(s2))
                return a2;
              t3[r3 + a2] = s2;
            }
            return a2;
          }
          function S(t3, e3, r3, n2) {
            return q(C(e3, t3.length - r3), t3, r3, n2);
          }
          function O(t3, e3, r3, n2) {
            return q(function(t4) {
              for (var e4 = [], r4 = 0; r4 < t4.length; ++r4)
                e4.push(255 & t4.charCodeAt(r4));
              return e4;
            }(e3), t3, r3, n2);
          }
          function j(t3, e3, r3, n2) {
            return q(U(e3), t3, r3, n2);
          }
          function $(t3, e3, r3, n2) {
            return q(function(t4, e4) {
              for (var r4, n3, i2, o2 = [], a2 = 0; a2 < t4.length && !((e4 -= 2) < 0); ++a2)
                n3 = (r4 = t4.charCodeAt(a2)) >> 8, i2 = r4 % 256, o2.push(i2), o2.push(n3);
              return o2;
            }(e3, t3.length - r3), t3, r3, n2);
          }
          function E(t3, e3, r3) {
            return 0 === e3 && r3 === t3.length ? i.fromByteArray(t3) : i.fromByteArray(t3.slice(e3, r3));
          }
          function A(t3, e3, r3) {
            r3 = Math.min(t3.length, r3);
            for (var n2 = [], i2 = e3; i2 < r3; ) {
              var o2, a2, s2, u2, c2 = t3[i2], f2 = null, l2 = c2 > 239 ? 4 : c2 > 223 ? 3 : c2 > 191 ? 2 : 1;
              if (i2 + l2 <= r3)
                switch (l2) {
                  case 1:
                    c2 < 128 && (f2 = c2);
                    break;
                  case 2:
                    128 == (192 & (o2 = t3[i2 + 1])) && (u2 = (31 & c2) << 6 | 63 & o2) > 127 && (f2 = u2);
                    break;
                  case 3:
                    o2 = t3[i2 + 1], a2 = t3[i2 + 2], 128 == (192 & o2) && 128 == (192 & a2) && (u2 = (15 & c2) << 12 | (63 & o2) << 6 | 63 & a2) > 2047 && (u2 < 55296 || u2 > 57343) && (f2 = u2);
                    break;
                  case 4:
                    o2 = t3[i2 + 1], a2 = t3[i2 + 2], s2 = t3[i2 + 3], 128 == (192 & o2) && 128 == (192 & a2) && 128 == (192 & s2) && (u2 = (15 & c2) << 18 | (63 & o2) << 12 | (63 & a2) << 6 | 63 & s2) > 65535 && u2 < 1114112 && (f2 = u2);
                }
              null === f2 ? (f2 = 65533, l2 = 1) : f2 > 65535 && (f2 -= 65536, n2.push(f2 >>> 10 & 1023 | 55296), f2 = 56320 | 1023 & f2), n2.push(f2), i2 += l2;
            }
            return function(t4) {
              var e4 = t4.length;
              if (e4 <= P)
                return String.fromCharCode.apply(String, t4);
              for (var r4 = "", n3 = 0; n3 < e4; )
                r4 += String.fromCharCode.apply(String, t4.slice(n3, n3 += P));
              return r4;
            }(n2);
          }
          e2.kMaxLength = s, c.TYPED_ARRAY_SUPPORT = function() {
            try {
              var t3 = new Uint8Array(1), e3 = { foo: function() {
                return 42;
              } };
              return Object.setPrototypeOf(e3, Uint8Array.prototype), Object.setPrototypeOf(t3, e3), 42 === t3.foo();
            } catch (t4) {
              return false;
            }
          }(), c.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(c.prototype, "parent", { enumerable: true, get: function() {
            if (c.isBuffer(this))
              return this.buffer;
          } }), Object.defineProperty(c.prototype, "offset", { enumerable: true, get: function() {
            if (c.isBuffer(this))
              return this.byteOffset;
          } }), c.poolSize = 8192, c.from = function(t3, e3, r3) {
            return f(t3, e3, r3);
          }, Object.setPrototypeOf(c.prototype, Uint8Array.prototype), Object.setPrototypeOf(c, Uint8Array), c.alloc = function(t3, e3, r3) {
            return function(t4, e4, r4) {
              return l(t4), t4 <= 0 ? u(t4) : void 0 !== e4 ? "string" == typeof r4 ? u(t4).fill(e4, r4) : u(t4).fill(e4) : u(t4);
            }(t3, e3, r3);
          }, c.allocUnsafe = function(t3) {
            return h(t3);
          }, c.allocUnsafeSlow = function(t3) {
            return h(t3);
          }, c.isBuffer = function(t3) {
            return null != t3 && true === t3._isBuffer && t3 !== c.prototype;
          }, c.compare = function(t3, e3) {
            if (F(t3, Uint8Array) && (t3 = c.from(t3, t3.offset, t3.byteLength)), F(e3, Uint8Array) && (e3 = c.from(e3, e3.offset, e3.byteLength)), !c.isBuffer(t3) || !c.isBuffer(e3))
              throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            if (t3 === e3)
              return 0;
            for (var r3 = t3.length, n2 = e3.length, i2 = 0, o2 = Math.min(r3, n2); i2 < o2; ++i2)
              if (t3[i2] !== e3[i2]) {
                r3 = t3[i2], n2 = e3[i2];
                break;
              }
            return r3 < n2 ? -1 : n2 < r3 ? 1 : 0;
          }, c.isEncoding = function(t3) {
            switch (String(t3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, c.concat = function(t3, e3) {
            if (!Array.isArray(t3))
              throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === t3.length)
              return c.alloc(0);
            var r3;
            if (void 0 === e3)
              for (e3 = 0, r3 = 0; r3 < t3.length; ++r3)
                e3 += t3[r3].length;
            var n2 = c.allocUnsafe(e3), i2 = 0;
            for (r3 = 0; r3 < t3.length; ++r3) {
              var o2 = t3[r3];
              if (F(o2, Uint8Array))
                i2 + o2.length > n2.length ? c.from(o2).copy(n2, i2) : Uint8Array.prototype.set.call(n2, o2, i2);
              else {
                if (!c.isBuffer(o2))
                  throw new TypeError('"list" argument must be an Array of Buffers');
                o2.copy(n2, i2);
              }
              i2 += o2.length;
            }
            return n2;
          }, c.byteLength = b, c.prototype._isBuffer = true, c.prototype.swap16 = function() {
            var t3 = this.length;
            if (t3 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var e3 = 0; e3 < t3; e3 += 2)
              v(this, e3, e3 + 1);
            return this;
          }, c.prototype.swap32 = function() {
            var t3 = this.length;
            if (t3 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var e3 = 0; e3 < t3; e3 += 4)
              v(this, e3, e3 + 3), v(this, e3 + 1, e3 + 2);
            return this;
          }, c.prototype.swap64 = function() {
            var t3 = this.length;
            if (t3 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var e3 = 0; e3 < t3; e3 += 8)
              v(this, e3, e3 + 7), v(this, e3 + 1, e3 + 6), v(this, e3 + 2, e3 + 5), v(this, e3 + 3, e3 + 4);
            return this;
          }, c.prototype.toString = function() {
            var t3 = this.length;
            return 0 === t3 ? "" : 0 === arguments.length ? A(this, 0, t3) : m.apply(this, arguments);
          }, c.prototype.toLocaleString = c.prototype.toString, c.prototype.equals = function(t3) {
            if (!c.isBuffer(t3))
              throw new TypeError("Argument must be a Buffer");
            return this === t3 || 0 === c.compare(this, t3);
          }, c.prototype.inspect = function() {
            var t3 = "", r3 = e2.INSPECT_MAX_BYTES;
            return t3 = this.toString("hex", 0, r3).replace(/(.{2})/g, "$1 ").trim(), this.length > r3 && (t3 += " ... "), "<Buffer " + t3 + ">";
          }, a && (c.prototype[a] = c.prototype.inspect), c.prototype.compare = function(t3, e3, r3, i2, o2) {
            if (F(t3, Uint8Array) && (t3 = c.from(t3, t3.offset, t3.byteLength)), !c.isBuffer(t3))
              throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + n(t3));
            if (void 0 === e3 && (e3 = 0), void 0 === r3 && (r3 = t3 ? t3.length : 0), void 0 === i2 && (i2 = 0), void 0 === o2 && (o2 = this.length), e3 < 0 || r3 > t3.length || i2 < 0 || o2 > this.length)
              throw new RangeError("out of range index");
            if (i2 >= o2 && e3 >= r3)
              return 0;
            if (i2 >= o2)
              return -1;
            if (e3 >= r3)
              return 1;
            if (this === t3)
              return 0;
            for (var a2 = (o2 >>>= 0) - (i2 >>>= 0), s2 = (r3 >>>= 0) - (e3 >>>= 0), u2 = Math.min(a2, s2), f2 = this.slice(i2, o2), l2 = t3.slice(e3, r3), h2 = 0; h2 < u2; ++h2)
              if (f2[h2] !== l2[h2]) {
                a2 = f2[h2], s2 = l2[h2];
                break;
              }
            return a2 < s2 ? -1 : s2 < a2 ? 1 : 0;
          }, c.prototype.includes = function(t3, e3, r3) {
            return -1 !== this.indexOf(t3, e3, r3);
          }, c.prototype.indexOf = function(t3, e3, r3) {
            return g(this, t3, e3, r3, true);
          }, c.prototype.lastIndexOf = function(t3, e3, r3) {
            return g(this, t3, e3, r3, false);
          }, c.prototype.write = function(t3, e3, r3, n2) {
            if (void 0 === e3)
              n2 = "utf8", r3 = this.length, e3 = 0;
            else if (void 0 === r3 && "string" == typeof e3)
              n2 = e3, r3 = this.length, e3 = 0;
            else {
              if (!isFinite(e3))
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              e3 >>>= 0, isFinite(r3) ? (r3 >>>= 0, void 0 === n2 && (n2 = "utf8")) : (n2 = r3, r3 = void 0);
            }
            var i2 = this.length - e3;
            if ((void 0 === r3 || r3 > i2) && (r3 = i2), t3.length > 0 && (r3 < 0 || e3 < 0) || e3 > this.length)
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o2 = false; ; )
              switch (n2) {
                case "hex":
                  return w(this, t3, e3, r3);
                case "utf8":
                case "utf-8":
                  return S(this, t3, e3, r3);
                case "ascii":
                case "latin1":
                case "binary":
                  return O(this, t3, e3, r3);
                case "base64":
                  return j(this, t3, e3, r3);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return $(this, t3, e3, r3);
                default:
                  if (o2)
                    throw new TypeError("Unknown encoding: " + n2);
                  n2 = ("" + n2).toLowerCase(), o2 = true;
              }
          }, c.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          var P = 4096;
          function x(t3, e3, r3) {
            var n2 = "";
            r3 = Math.min(t3.length, r3);
            for (var i2 = e3; i2 < r3; ++i2)
              n2 += String.fromCharCode(127 & t3[i2]);
            return n2;
          }
          function k(t3, e3, r3) {
            var n2 = "";
            r3 = Math.min(t3.length, r3);
            for (var i2 = e3; i2 < r3; ++i2)
              n2 += String.fromCharCode(t3[i2]);
            return n2;
          }
          function M(t3, e3, r3) {
            var n2 = t3.length;
            (!e3 || e3 < 0) && (e3 = 0), (!r3 || r3 < 0 || r3 > n2) && (r3 = n2);
            for (var i2 = "", o2 = e3; o2 < r3; ++o2)
              i2 += z[t3[o2]];
            return i2;
          }
          function T(t3, e3, r3) {
            for (var n2 = t3.slice(e3, r3), i2 = "", o2 = 0; o2 < n2.length - 1; o2 += 2)
              i2 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
            return i2;
          }
          function B(t3, e3, r3) {
            if (t3 % 1 != 0 || t3 < 0)
              throw new RangeError("offset is not uint");
            if (t3 + e3 > r3)
              throw new RangeError("Trying to access beyond buffer length");
          }
          function I(t3, e3, r3, n2, i2, o2) {
            if (!c.isBuffer(t3))
              throw new TypeError('"buffer" argument must be a Buffer instance');
            if (e3 > i2 || e3 < o2)
              throw new RangeError('"value" argument is out of bounds');
            if (r3 + n2 > t3.length)
              throw new RangeError("Index out of range");
          }
          function R(t3, e3, r3, n2, i2, o2) {
            if (r3 + n2 > t3.length)
              throw new RangeError("Index out of range");
            if (r3 < 0)
              throw new RangeError("Index out of range");
          }
          function N(t3, e3, r3, n2, i2) {
            return e3 = +e3, r3 >>>= 0, i2 || R(t3, 0, r3, 4), o.write(t3, e3, r3, n2, 23, 4), r3 + 4;
          }
          function D(t3, e3, r3, n2, i2) {
            return e3 = +e3, r3 >>>= 0, i2 || R(t3, 0, r3, 8), o.write(t3, e3, r3, n2, 52, 8), r3 + 8;
          }
          c.prototype.slice = function(t3, e3) {
            var r3 = this.length;
            (t3 = ~~t3) < 0 ? (t3 += r3) < 0 && (t3 = 0) : t3 > r3 && (t3 = r3), (e3 = void 0 === e3 ? r3 : ~~e3) < 0 ? (e3 += r3) < 0 && (e3 = 0) : e3 > r3 && (e3 = r3), e3 < t3 && (e3 = t3);
            var n2 = this.subarray(t3, e3);
            return Object.setPrototypeOf(n2, c.prototype), n2;
          }, c.prototype.readUintLE = c.prototype.readUIntLE = function(t3, e3, r3) {
            t3 >>>= 0, e3 >>>= 0, r3 || B(t3, e3, this.length);
            for (var n2 = this[t3], i2 = 1, o2 = 0; ++o2 < e3 && (i2 *= 256); )
              n2 += this[t3 + o2] * i2;
            return n2;
          }, c.prototype.readUintBE = c.prototype.readUIntBE = function(t3, e3, r3) {
            t3 >>>= 0, e3 >>>= 0, r3 || B(t3, e3, this.length);
            for (var n2 = this[t3 + --e3], i2 = 1; e3 > 0 && (i2 *= 256); )
              n2 += this[t3 + --e3] * i2;
            return n2;
          }, c.prototype.readUint8 = c.prototype.readUInt8 = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 1, this.length), this[t3];
          }, c.prototype.readUint16LE = c.prototype.readUInt16LE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 2, this.length), this[t3] | this[t3 + 1] << 8;
          }, c.prototype.readUint16BE = c.prototype.readUInt16BE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 2, this.length), this[t3] << 8 | this[t3 + 1];
          }, c.prototype.readUint32LE = c.prototype.readUInt32LE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), (this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16) + 16777216 * this[t3 + 3];
          }, c.prototype.readUint32BE = c.prototype.readUInt32BE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), 16777216 * this[t3] + (this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3]);
          }, c.prototype.readIntLE = function(t3, e3, r3) {
            t3 >>>= 0, e3 >>>= 0, r3 || B(t3, e3, this.length);
            for (var n2 = this[t3], i2 = 1, o2 = 0; ++o2 < e3 && (i2 *= 256); )
              n2 += this[t3 + o2] * i2;
            return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * e3)), n2;
          }, c.prototype.readIntBE = function(t3, e3, r3) {
            t3 >>>= 0, e3 >>>= 0, r3 || B(t3, e3, this.length);
            for (var n2 = e3, i2 = 1, o2 = this[t3 + --n2]; n2 > 0 && (i2 *= 256); )
              o2 += this[t3 + --n2] * i2;
            return o2 >= (i2 *= 128) && (o2 -= Math.pow(2, 8 * e3)), o2;
          }, c.prototype.readInt8 = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 1, this.length), 128 & this[t3] ? -1 * (255 - this[t3] + 1) : this[t3];
          }, c.prototype.readInt16LE = function(t3, e3) {
            t3 >>>= 0, e3 || B(t3, 2, this.length);
            var r3 = this[t3] | this[t3 + 1] << 8;
            return 32768 & r3 ? 4294901760 | r3 : r3;
          }, c.prototype.readInt16BE = function(t3, e3) {
            t3 >>>= 0, e3 || B(t3, 2, this.length);
            var r3 = this[t3 + 1] | this[t3] << 8;
            return 32768 & r3 ? 4294901760 | r3 : r3;
          }, c.prototype.readInt32LE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16 | this[t3 + 3] << 24;
          }, c.prototype.readInt32BE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), this[t3] << 24 | this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3];
          }, c.prototype.readFloatLE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), o.read(this, t3, true, 23, 4);
          }, c.prototype.readFloatBE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 4, this.length), o.read(this, t3, false, 23, 4);
          }, c.prototype.readDoubleLE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 8, this.length), o.read(this, t3, true, 52, 8);
          }, c.prototype.readDoubleBE = function(t3, e3) {
            return t3 >>>= 0, e3 || B(t3, 8, this.length), o.read(this, t3, false, 52, 8);
          }, c.prototype.writeUintLE = c.prototype.writeUIntLE = function(t3, e3, r3, n2) {
            t3 = +t3, e3 >>>= 0, r3 >>>= 0, n2 || I(this, t3, e3, r3, Math.pow(2, 8 * r3) - 1, 0);
            var i2 = 1, o2 = 0;
            for (this[e3] = 255 & t3; ++o2 < r3 && (i2 *= 256); )
              this[e3 + o2] = t3 / i2 & 255;
            return e3 + r3;
          }, c.prototype.writeUintBE = c.prototype.writeUIntBE = function(t3, e3, r3, n2) {
            t3 = +t3, e3 >>>= 0, r3 >>>= 0, n2 || I(this, t3, e3, r3, Math.pow(2, 8 * r3) - 1, 0);
            var i2 = r3 - 1, o2 = 1;
            for (this[e3 + i2] = 255 & t3; --i2 >= 0 && (o2 *= 256); )
              this[e3 + i2] = t3 / o2 & 255;
            return e3 + r3;
          }, c.prototype.writeUint8 = c.prototype.writeUInt8 = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 1, 255, 0), this[e3] = 255 & t3, e3 + 1;
          }, c.prototype.writeUint16LE = c.prototype.writeUInt16LE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 2, 65535, 0), this[e3] = 255 & t3, this[e3 + 1] = t3 >>> 8, e3 + 2;
          }, c.prototype.writeUint16BE = c.prototype.writeUInt16BE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 2, 65535, 0), this[e3] = t3 >>> 8, this[e3 + 1] = 255 & t3, e3 + 2;
          }, c.prototype.writeUint32LE = c.prototype.writeUInt32LE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 4, 4294967295, 0), this[e3 + 3] = t3 >>> 24, this[e3 + 2] = t3 >>> 16, this[e3 + 1] = t3 >>> 8, this[e3] = 255 & t3, e3 + 4;
          }, c.prototype.writeUint32BE = c.prototype.writeUInt32BE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 4, 4294967295, 0), this[e3] = t3 >>> 24, this[e3 + 1] = t3 >>> 16, this[e3 + 2] = t3 >>> 8, this[e3 + 3] = 255 & t3, e3 + 4;
          }, c.prototype.writeIntLE = function(t3, e3, r3, n2) {
            if (t3 = +t3, e3 >>>= 0, !n2) {
              var i2 = Math.pow(2, 8 * r3 - 1);
              I(this, t3, e3, r3, i2 - 1, -i2);
            }
            var o2 = 0, a2 = 1, s2 = 0;
            for (this[e3] = 255 & t3; ++o2 < r3 && (a2 *= 256); )
              t3 < 0 && 0 === s2 && 0 !== this[e3 + o2 - 1] && (s2 = 1), this[e3 + o2] = (t3 / a2 | 0) - s2 & 255;
            return e3 + r3;
          }, c.prototype.writeIntBE = function(t3, e3, r3, n2) {
            if (t3 = +t3, e3 >>>= 0, !n2) {
              var i2 = Math.pow(2, 8 * r3 - 1);
              I(this, t3, e3, r3, i2 - 1, -i2);
            }
            var o2 = r3 - 1, a2 = 1, s2 = 0;
            for (this[e3 + o2] = 255 & t3; --o2 >= 0 && (a2 *= 256); )
              t3 < 0 && 0 === s2 && 0 !== this[e3 + o2 + 1] && (s2 = 1), this[e3 + o2] = (t3 / a2 | 0) - s2 & 255;
            return e3 + r3;
          }, c.prototype.writeInt8 = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 1, 127, -128), t3 < 0 && (t3 = 255 + t3 + 1), this[e3] = 255 & t3, e3 + 1;
          }, c.prototype.writeInt16LE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 2, 32767, -32768), this[e3] = 255 & t3, this[e3 + 1] = t3 >>> 8, e3 + 2;
          }, c.prototype.writeInt16BE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 2, 32767, -32768), this[e3] = t3 >>> 8, this[e3 + 1] = 255 & t3, e3 + 2;
          }, c.prototype.writeInt32LE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 4, 2147483647, -2147483648), this[e3] = 255 & t3, this[e3 + 1] = t3 >>> 8, this[e3 + 2] = t3 >>> 16, this[e3 + 3] = t3 >>> 24, e3 + 4;
          }, c.prototype.writeInt32BE = function(t3, e3, r3) {
            return t3 = +t3, e3 >>>= 0, r3 || I(this, t3, e3, 4, 2147483647, -2147483648), t3 < 0 && (t3 = 4294967295 + t3 + 1), this[e3] = t3 >>> 24, this[e3 + 1] = t3 >>> 16, this[e3 + 2] = t3 >>> 8, this[e3 + 3] = 255 & t3, e3 + 4;
          }, c.prototype.writeFloatLE = function(t3, e3, r3) {
            return N(this, t3, e3, true, r3);
          }, c.prototype.writeFloatBE = function(t3, e3, r3) {
            return N(this, t3, e3, false, r3);
          }, c.prototype.writeDoubleLE = function(t3, e3, r3) {
            return D(this, t3, e3, true, r3);
          }, c.prototype.writeDoubleBE = function(t3, e3, r3) {
            return D(this, t3, e3, false, r3);
          }, c.prototype.copy = function(t3, e3, r3, n2) {
            if (!c.isBuffer(t3))
              throw new TypeError("argument should be a Buffer");
            if (r3 || (r3 = 0), n2 || 0 === n2 || (n2 = this.length), e3 >= t3.length && (e3 = t3.length), e3 || (e3 = 0), n2 > 0 && n2 < r3 && (n2 = r3), n2 === r3)
              return 0;
            if (0 === t3.length || 0 === this.length)
              return 0;
            if (e3 < 0)
              throw new RangeError("targetStart out of bounds");
            if (r3 < 0 || r3 >= this.length)
              throw new RangeError("Index out of range");
            if (n2 < 0)
              throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length), t3.length - e3 < n2 - r3 && (n2 = t3.length - e3 + r3);
            var i2 = n2 - r3;
            return this === t3 && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(e3, r3, n2) : Uint8Array.prototype.set.call(t3, this.subarray(r3, n2), e3), i2;
          }, c.prototype.fill = function(t3, e3, r3, n2) {
            if ("string" == typeof t3) {
              if ("string" == typeof e3 ? (n2 = e3, e3 = 0, r3 = this.length) : "string" == typeof r3 && (n2 = r3, r3 = this.length), void 0 !== n2 && "string" != typeof n2)
                throw new TypeError("encoding must be a string");
              if ("string" == typeof n2 && !c.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
              if (1 === t3.length) {
                var i2 = t3.charCodeAt(0);
                ("utf8" === n2 && i2 < 128 || "latin1" === n2) && (t3 = i2);
              }
            } else
              "number" == typeof t3 ? t3 &= 255 : "boolean" == typeof t3 && (t3 = Number(t3));
            if (e3 < 0 || this.length < e3 || this.length < r3)
              throw new RangeError("Out of range index");
            if (r3 <= e3)
              return this;
            var o2;
            if (e3 >>>= 0, r3 = void 0 === r3 ? this.length : r3 >>> 0, t3 || (t3 = 0), "number" == typeof t3)
              for (o2 = e3; o2 < r3; ++o2)
                this[o2] = t3;
            else {
              var a2 = c.isBuffer(t3) ? t3 : c.from(t3, n2), s2 = a2.length;
              if (0 === s2)
                throw new TypeError('The value "' + t3 + '" is invalid for argument "value"');
              for (o2 = 0; o2 < r3 - e3; ++o2)
                this[o2 + e3] = a2[o2 % s2];
            }
            return this;
          };
          var L = /[^+/0-9A-Za-z-_]/g;
          function C(t3, e3) {
            var r3;
            e3 = e3 || 1 / 0;
            for (var n2 = t3.length, i2 = null, o2 = [], a2 = 0; a2 < n2; ++a2) {
              if ((r3 = t3.charCodeAt(a2)) > 55295 && r3 < 57344) {
                if (!i2) {
                  if (r3 > 56319) {
                    (e3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  if (a2 + 1 === n2) {
                    (e3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  i2 = r3;
                  continue;
                }
                if (r3 < 56320) {
                  (e3 -= 3) > -1 && o2.push(239, 191, 189), i2 = r3;
                  continue;
                }
                r3 = 65536 + (i2 - 55296 << 10 | r3 - 56320);
              } else
                i2 && (e3 -= 3) > -1 && o2.push(239, 191, 189);
              if (i2 = null, r3 < 128) {
                if ((e3 -= 1) < 0)
                  break;
                o2.push(r3);
              } else if (r3 < 2048) {
                if ((e3 -= 2) < 0)
                  break;
                o2.push(r3 >> 6 | 192, 63 & r3 | 128);
              } else if (r3 < 65536) {
                if ((e3 -= 3) < 0)
                  break;
                o2.push(r3 >> 12 | 224, r3 >> 6 & 63 | 128, 63 & r3 | 128);
              } else {
                if (!(r3 < 1114112))
                  throw new Error("Invalid code point");
                if ((e3 -= 4) < 0)
                  break;
                o2.push(r3 >> 18 | 240, r3 >> 12 & 63 | 128, r3 >> 6 & 63 | 128, 63 & r3 | 128);
              }
            }
            return o2;
          }
          function U(t3) {
            return i.toByteArray(function(t4) {
              if ((t4 = (t4 = t4.split("=")[0]).trim().replace(L, "")).length < 2)
                return "";
              for (; t4.length % 4 != 0; )
                t4 += "=";
              return t4;
            }(t3));
          }
          function q(t3, e3, r3, n2) {
            for (var i2 = 0; i2 < n2 && !(i2 + r3 >= e3.length || i2 >= t3.length); ++i2)
              e3[i2 + r3] = t3[i2];
            return i2;
          }
          function F(t3, e3) {
            return t3 instanceof e3 || null != t3 && null != t3.constructor && null != t3.constructor.name && t3.constructor.name === e3.name;
          }
          function V(t3) {
            return t3 != t3;
          }
          var z = function() {
            for (var t3 = "0123456789abcdef", e3 = new Array(256), r3 = 0; r3 < 16; ++r3)
              for (var n2 = 16 * r3, i2 = 0; i2 < 16; ++i2)
                e3[n2 + i2] = t3[r3] + t3[i2];
            return e3;
          }();
        }, 5477: (t2, e2, r2) => {
          "use strict";
          var n = r2(2354), i = r2(3279), o = r2(3123), a = r2(3388);
          t2.exports = a || n.call(o, i);
        }, 5804: (t2, e2, r2) => {
          "use strict";
          var n = r2(2354), i = r2(3279), o = r2(5477);
          t2.exports = function() {
            return o(n, i, arguments);
          };
        }, 3279: (t2) => {
          "use strict";
          t2.exports = Function.prototype.apply;
        }, 3123: (t2) => {
          "use strict";
          t2.exports = Function.prototype.call;
        }, 8863: (t2, e2, r2) => {
          "use strict";
          var n = r2(2354), i = r2(2268), o = r2(3123), a = r2(5477);
          t2.exports = function(t3) {
            if (t3.length < 1 || "function" != typeof t3[0])
              throw new i("a function is required");
            return a(n, o, t3);
          };
        }, 3388: (t2) => {
          "use strict";
          t2.exports = "undefined" != typeof Reflect && Reflect && Reflect.apply;
        }, 9122: (t2, e2, r2) => {
          "use strict";
          var n = r2(3900), i = r2(988), o = r2(8863), a = r2(5804);
          t2.exports = function(t3) {
            var e3 = o(arguments), r3 = t3.length - (arguments.length - 1);
            return n(e3, 1 + (r3 > 0 ? r3 : 0), true);
          }, i ? i(t2.exports, "apply", { value: a }) : t2.exports.apply = a;
        }, 3071: (t2, e2, r2) => {
          "use strict";
          var n = r2(6400), i = r2(8863), o = i([n("%String.prototype.indexOf%")]);
          t2.exports = function(t3, e3) {
            var r3 = n(t3, !!e3);
            return "function" == typeof r3 && o(t3, ".prototype.") > -1 ? i([r3]) : r3;
          };
        }, 2533: (t2, e2, r2) => {
          "use strict";
          var n = r2(9732).Buffer, i = r2(7775).Transform, o = r2(136).I;
          function a(t3) {
            i.call(this), this.hashMode = "string" == typeof t3, this.hashMode ? this[t3] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
          }
          r2(1679)(a, i);
          var s = "undefined" != typeof Uint8Array, u = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array && ArrayBuffer.isView && (n.prototype instanceof Uint8Array || n.TYPED_ARRAY_SUPPORT);
          a.prototype.update = function(t3, e3, r3) {
            var i2 = function(t4, e4) {
              if (t4 instanceof n)
                return t4;
              if ("string" == typeof t4)
                return n.from(t4, e4);
              if (u && ArrayBuffer.isView(t4)) {
                if (0 === t4.byteLength)
                  return n.alloc(0);
                var r4 = n.from(t4.buffer, t4.byteOffset, t4.byteLength);
                if (r4.byteLength === t4.byteLength)
                  return r4;
              }
              if (s && t4 instanceof Uint8Array)
                return n.from(t4);
              if (n.isBuffer(t4) && t4.constructor && "function" == typeof t4.constructor.isBuffer && t4.constructor.isBuffer(t4))
                return n.from(t4);
              throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
            }(t3, e3), o2 = this._update(i2);
            return this.hashMode ? this : (r3 && (o2 = this._toString(o2, r3)), o2);
          }, a.prototype.setAutoPadding = function() {
          }, a.prototype.getAuthTag = function() {
            throw new Error("trying to get auth tag in unsupported state");
          }, a.prototype.setAuthTag = function() {
            throw new Error("trying to set auth tag in unsupported state");
          }, a.prototype.setAAD = function() {
            throw new Error("trying to set aad in unsupported state");
          }, a.prototype._transform = function(t3, e3, r3) {
            var n2;
            try {
              this.hashMode ? this._update(t3) : this.push(this._update(t3));
            } catch (t4) {
              n2 = t4;
            } finally {
              r3(n2);
            }
          }, a.prototype._flush = function(t3) {
            var e3;
            try {
              this.push(this.__final());
            } catch (t4) {
              e3 = t4;
            }
            t3(e3);
          }, a.prototype._finalOrDigest = function(t3) {
            var e3 = this.__final() || n.alloc(0);
            return t3 && (e3 = this._toString(e3, t3, true)), e3;
          }, a.prototype._toString = function(t3, e3, r3) {
            if (this._decoder || (this._decoder = new o(e3), this._encoding = e3), this._encoding !== e3)
              throw new Error("can\u2019t switch encodings");
            var n2 = this._decoder.write(t3);
            return r3 && (n2 += this._decoder.end()), n2;
          }, t2.exports = a;
        }, 7919: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3) {
            return Object.prototype.toString.call(t3);
          }
          e2.isArray = function(t3) {
            return Array.isArray ? Array.isArray(t3) : "[object Array]" === i(t3);
          }, e2.isBoolean = function(t3) {
            return "boolean" == typeof t3;
          }, e2.isNull = function(t3) {
            return null === t3;
          }, e2.isNullOrUndefined = function(t3) {
            return null == t3;
          }, e2.isNumber = function(t3) {
            return "number" == typeof t3;
          }, e2.isString = function(t3) {
            return "string" == typeof t3;
          }, e2.isSymbol = function(t3) {
            return "symbol" === n(t3);
          }, e2.isUndefined = function(t3) {
            return void 0 === t3;
          }, e2.isRegExp = function(t3) {
            return "[object RegExp]" === i(t3);
          }, e2.isObject = function(t3) {
            return "object" === n(t3) && null !== t3;
          }, e2.isDate = function(t3) {
            return "[object Date]" === i(t3);
          }, e2.isError = function(t3) {
            return "[object Error]" === i(t3) || t3 instanceof Error;
          }, e2.isFunction = function(t3) {
            return "function" == typeof t3;
          }, e2.isPrimitive = function(t3) {
            return null === t3 || "boolean" == typeof t3 || "number" == typeof t3 || "string" == typeof t3 || "symbol" === n(t3) || void 0 === t3;
          }, e2.isBuffer = r2(5832).Buffer.isBuffer;
        }, 1005: (t2, e2, r2) => {
          var n = r2(5832).Buffer, i = r2(7312), o = r2(7799);
          t2.exports = function(t3) {
            return new s(t3);
          };
          var a = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
          function s(t3) {
            this.curveType = a[t3], this.curveType || (this.curveType = { name: t3 }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
          }
          function u(t3, e3, r3) {
            Array.isArray(t3) || (t3 = t3.toArray());
            var i2 = new n(t3);
            if (r3 && i2.length < r3) {
              var o2 = new n(r3 - i2.length);
              o2.fill(0), i2 = n.concat([o2, i2]);
            }
            return e3 ? i2.toString(e3) : i2;
          }
          a.p224 = a.secp224r1, a.p256 = a.secp256r1 = a.prime256v1, a.p192 = a.secp192r1 = a.prime192v1, a.p384 = a.secp384r1, a.p521 = a.secp521r1, s.prototype.generateKeys = function(t3, e3) {
            return this.keys = this.curve.genKeyPair(), this.getPublicKey(t3, e3);
          }, s.prototype.computeSecret = function(t3, e3, r3) {
            return e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3)), u(this.curve.keyFromPublic(t3).getPublic().mul(this.keys.getPrivate()).getX(), r3, this.curveType.byteLength);
          }, s.prototype.getPublicKey = function(t3, e3) {
            var r3 = this.keys.getPublic("compressed" === e3, true);
            return "hybrid" === e3 && (r3[r3.length - 1] % 2 ? r3[0] = 7 : r3[0] = 6), u(r3, t3);
          }, s.prototype.getPrivateKey = function(t3) {
            return u(this.keys.getPrivate(), t3);
          }, s.prototype.setPublicKey = function(t3, e3) {
            return e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3)), this.keys._importPublic(t3), this;
          }, s.prototype.setPrivateKey = function(t3, e3) {
            e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3));
            var r3 = new o(t3);
            return r3 = r3.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r3), this;
          };
        }, 5833: (t2, e2, r2) => {
          "use strict";
          var n = r2(1679), i = r2(2635), o = r2(1058), a = r2(3261), s = r2(2533);
          function u(t3) {
            s.call(this, "digest"), this._hash = t3;
          }
          n(u, s), u.prototype._update = function(t3) {
            this._hash.update(t3);
          }, u.prototype._final = function() {
            return this._hash.digest();
          }, t2.exports = function(t3) {
            return "md5" === (t3 = t3.toLowerCase()) ? new i() : "rmd160" === t3 || "ripemd160" === t3 ? new o() : new u(a(t3));
          };
        }, 3989: (t2, e2, r2) => {
          var n = r2(2635);
          t2.exports = function(t3) {
            return new n().update(t3).digest();
          };
        }, 2046: (t2, e2, r2) => {
          "use strict";
          var n = r2(1679), i = r2(6583), o = r2(2533), a = r2(9732).Buffer, s = r2(3989), u = r2(1058), c = r2(3261), f = a.alloc(128);
          function l(t3, e3) {
            o.call(this, "digest"), "string" == typeof e3 && (e3 = a.from(e3));
            var r3 = "sha512" === t3 || "sha384" === t3 ? 128 : 64;
            this._alg = t3, this._key = e3, e3.length > r3 ? e3 = ("rmd160" === t3 ? new u() : c(t3)).update(e3).digest() : e3.length < r3 && (e3 = a.concat([e3, f], r3));
            for (var n2 = this._ipad = a.allocUnsafe(r3), i2 = this._opad = a.allocUnsafe(r3), s2 = 0; s2 < r3; s2++)
              n2[s2] = 54 ^ e3[s2], i2[s2] = 92 ^ e3[s2];
            this._hash = "rmd160" === t3 ? new u() : c(t3), this._hash.update(n2);
          }
          n(l, o), l.prototype._update = function(t3) {
            this._hash.update(t3);
          }, l.prototype._final = function() {
            var t3 = this._hash.digest();
            return ("rmd160" === this._alg ? new u() : c(this._alg)).update(this._opad).update(t3).digest();
          }, t2.exports = function(t3, e3) {
            return "rmd160" === (t3 = t3.toLowerCase()) || "ripemd160" === t3 ? new l("rmd160", e3) : "md5" === t3 ? new i(s, e3) : new l(t3, e3);
          };
        }, 6583: (t2, e2, r2) => {
          "use strict";
          var n = r2(1679), i = r2(9732).Buffer, o = r2(2533), a = i.alloc(128), s = 64;
          function u(t3, e3) {
            o.call(this, "digest"), "string" == typeof e3 && (e3 = i.from(e3)), this._alg = t3, this._key = e3, e3.length > s ? e3 = t3(e3) : e3.length < s && (e3 = i.concat([e3, a], s));
            for (var r3 = this._ipad = i.allocUnsafe(s), n2 = this._opad = i.allocUnsafe(s), u2 = 0; u2 < s; u2++)
              r3[u2] = 54 ^ e3[u2], n2[u2] = 92 ^ e3[u2];
            this._hash = [r3];
          }
          n(u, o), u.prototype._update = function(t3) {
            this._hash.push(t3);
          }, u.prototype._final = function() {
            var t3 = this._alg(i.concat(this._hash));
            return this._alg(i.concat([this._opad, t3]));
          }, t2.exports = u;
        }, 8872: (t2, e2, r2) => {
          "use strict";
          e2.po = r2(4276), r2(5833), r2(2046);
          var n = r2(4606), i = Object.keys(n), o = (["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(i), r2(8699));
          o.pbkdf2, o.pbkdf2Sync;
          var a = r2(9652);
          a.Cipher, a.createCipher, a.Cipheriv, a.createCipheriv, a.Decipher, a.createDecipher, a.Decipheriv, a.createDecipheriv, a.getCiphers, a.listCiphers;
          var s = r2(9803);
          s.DiffieHellmanGroup, s.createDiffieHellmanGroup, s.getDiffieHellman, s.createDiffieHellman, s.DiffieHellman;
          var u = r2(7937);
          u.createSign, u.Sign, u.createVerify, u.Verify, r2(1005);
          var c = r2(2327);
          c.publicEncrypt, c.privateEncrypt, c.publicDecrypt, c.privateDecrypt;
          var f = r2(7952);
          f.randomFill, f.randomFillSync;
        }, 6750: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(988), o = r2(2288), a = r2(2268), s = r2(1464);
          t2.exports = function(t3, e3, r3) {
            if (!t3 || "object" !== n(t3) && "function" != typeof t3)
              throw new a("`obj` must be an object or a function`");
            if ("string" != typeof e3 && "symbol" !== n(e3))
              throw new a("`property` must be a string or a symbol`");
            if (arguments.length > 3 && "boolean" != typeof arguments[3] && null !== arguments[3])
              throw new a("`nonEnumerable`, if provided, must be a boolean or null");
            if (arguments.length > 4 && "boolean" != typeof arguments[4] && null !== arguments[4])
              throw new a("`nonWritable`, if provided, must be a boolean or null");
            if (arguments.length > 5 && "boolean" != typeof arguments[5] && null !== arguments[5])
              throw new a("`nonConfigurable`, if provided, must be a boolean or null");
            if (arguments.length > 6 && "boolean" != typeof arguments[6])
              throw new a("`loose`, if provided, must be a boolean");
            var u = arguments.length > 3 ? arguments[3] : null, c = arguments.length > 4 ? arguments[4] : null, f = arguments.length > 5 ? arguments[5] : null, l = arguments.length > 6 && arguments[6], h = !!s && s(t3, e3);
            if (i)
              i(t3, e3, { configurable: null === f && h ? h.configurable : !f, enumerable: null === u && h ? h.enumerable : !u, value: r3, writable: null === c && h ? h.writable : !c });
            else {
              if (!l && (u || c || f))
                throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
              t3[e3] = r3;
            }
          };
        }, 2273: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(668), o = "function" == typeof Symbol && "symbol" === n(Symbol("foo")), a = Object.prototype.toString, s = Array.prototype.concat, u = r2(6750), c = r2(3191)(), f = function(t3, e3, r3, n2) {
            if (e3 in t3) {
              if (true === n2) {
                if (t3[e3] === r3)
                  return;
              } else if ("function" != typeof (i2 = n2) || "[object Function]" !== a.call(i2) || !n2())
                return;
            }
            var i2;
            c ? u(t3, e3, r3, true) : u(t3, e3, r3);
          }, l = function(t3, e3) {
            var r3 = arguments.length > 2 ? arguments[2] : {}, n2 = i(e3);
            o && (n2 = s.call(n2, Object.getOwnPropertySymbols(e3)));
            for (var a2 = 0; a2 < n2.length; a2 += 1)
              f(t3, n2[a2], e3[n2[a2]], r3[n2[a2]]);
          };
          l.supportsDescriptors = !!c, t2.exports = l;
        }, 1471: (t2, e2, r2) => {
          "use strict";
          e2.utils = r2(9473), e2.Cipher = r2(365), e2.DES = r2(1048), e2.CBC = r2(6754), e2.EDE = r2(1368);
        }, 6754: (t2, e2, r2) => {
          "use strict";
          var n = r2(3528), i = r2(1679), o = {};
          function a(t3) {
            n.equal(t3.length, 8, "Invalid IV length"), this.iv = new Array(8);
            for (var e3 = 0; e3 < this.iv.length; e3++)
              this.iv[e3] = t3[e3];
          }
          e2.instantiate = function(t3) {
            function e3(e4) {
              t3.call(this, e4), this._cbcInit();
            }
            i(e3, t3);
            for (var r3 = Object.keys(o), n2 = 0; n2 < r3.length; n2++) {
              var a2 = r3[n2];
              e3.prototype[a2] = o[a2];
            }
            return e3.create = function(t4) {
              return new e3(t4);
            }, e3;
          }, o._cbcInit = function() {
            var t3 = new a(this.options.iv);
            this._cbcState = t3;
          }, o._update = function(t3, e3, r3, n2) {
            var i2 = this._cbcState, o2 = this.constructor.super_.prototype, a2 = i2.iv;
            if ("encrypt" === this.type) {
              for (var s = 0; s < this.blockSize; s++)
                a2[s] ^= t3[e3 + s];
              for (o2._update.call(this, a2, 0, r3, n2), s = 0; s < this.blockSize; s++)
                a2[s] = r3[n2 + s];
            } else {
              for (o2._update.call(this, t3, e3, r3, n2), s = 0; s < this.blockSize; s++)
                r3[n2 + s] ^= a2[s];
              for (s = 0; s < this.blockSize; s++)
                a2[s] = t3[e3 + s];
            }
          };
        }, 365: (t2, e2, r2) => {
          "use strict";
          var n = r2(3528);
          function i(t3) {
            this.options = t3, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0, this.padding = false !== t3.padding;
          }
          t2.exports = i, i.prototype._init = function() {
          }, i.prototype.update = function(t3) {
            return 0 === t3.length ? [] : "decrypt" === this.type ? this._updateDecrypt(t3) : this._updateEncrypt(t3);
          }, i.prototype._buffer = function(t3, e3) {
            for (var r3 = Math.min(this.buffer.length - this.bufferOff, t3.length - e3), n2 = 0; n2 < r3; n2++)
              this.buffer[this.bufferOff + n2] = t3[e3 + n2];
            return this.bufferOff += r3, r3;
          }, i.prototype._flushBuffer = function(t3, e3) {
            return this._update(this.buffer, 0, t3, e3), this.bufferOff = 0, this.blockSize;
          }, i.prototype._updateEncrypt = function(t3) {
            var e3 = 0, r3 = 0, n2 = (this.bufferOff + t3.length) / this.blockSize | 0, i2 = new Array(n2 * this.blockSize);
            0 !== this.bufferOff && (e3 += this._buffer(t3, e3), this.bufferOff === this.buffer.length && (r3 += this._flushBuffer(i2, r3)));
            for (var o = t3.length - (t3.length - e3) % this.blockSize; e3 < o; e3 += this.blockSize)
              this._update(t3, e3, i2, r3), r3 += this.blockSize;
            for (; e3 < t3.length; e3++, this.bufferOff++)
              this.buffer[this.bufferOff] = t3[e3];
            return i2;
          }, i.prototype._updateDecrypt = function(t3) {
            for (var e3 = 0, r3 = 0, n2 = Math.ceil((this.bufferOff + t3.length) / this.blockSize) - 1, i2 = new Array(n2 * this.blockSize); n2 > 0; n2--)
              e3 += this._buffer(t3, e3), r3 += this._flushBuffer(i2, r3);
            return e3 += this._buffer(t3, e3), i2;
          }, i.prototype.final = function(t3) {
            var e3, r3;
            return t3 && (e3 = this.update(t3)), r3 = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), e3 ? e3.concat(r3) : r3;
          }, i.prototype._pad = function(t3, e3) {
            if (0 === e3)
              return false;
            for (; e3 < t3.length; )
              t3[e3++] = 0;
            return true;
          }, i.prototype._finalEncrypt = function() {
            if (!this._pad(this.buffer, this.bufferOff))
              return [];
            var t3 = new Array(this.blockSize);
            return this._update(this.buffer, 0, t3, 0), t3;
          }, i.prototype._unpad = function(t3) {
            return t3;
          }, i.prototype._finalDecrypt = function() {
            n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
            var t3 = new Array(this.blockSize);
            return this._flushBuffer(t3, 0), this._unpad(t3);
          };
        }, 1048: (t2, e2, r2) => {
          "use strict";
          var n = r2(3528), i = r2(1679), o = r2(9473), a = r2(365);
          function s() {
            this.tmp = new Array(2), this.keys = null;
          }
          function u(t3) {
            a.call(this, t3);
            var e3 = new s();
            this._desState = e3, this.deriveKeys(e3, t3.key);
          }
          i(u, a), t2.exports = u, u.create = function(t3) {
            return new u(t3);
          };
          var c = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
          u.prototype.deriveKeys = function(t3, e3) {
            t3.keys = new Array(32), n.equal(e3.length, this.blockSize, "Invalid key length");
            var r3 = o.readUInt32BE(e3, 0), i2 = o.readUInt32BE(e3, 4);
            o.pc1(r3, i2, t3.tmp, 0), r3 = t3.tmp[0], i2 = t3.tmp[1];
            for (var a2 = 0; a2 < t3.keys.length; a2 += 2) {
              var s2 = c[a2 >>> 1];
              r3 = o.r28shl(r3, s2), i2 = o.r28shl(i2, s2), o.pc2(r3, i2, t3.keys, a2);
            }
          }, u.prototype._update = function(t3, e3, r3, n2) {
            var i2 = this._desState, a2 = o.readUInt32BE(t3, e3), s2 = o.readUInt32BE(t3, e3 + 4);
            o.ip(a2, s2, i2.tmp, 0), a2 = i2.tmp[0], s2 = i2.tmp[1], "encrypt" === this.type ? this._encrypt(i2, a2, s2, i2.tmp, 0) : this._decrypt(i2, a2, s2, i2.tmp, 0), a2 = i2.tmp[0], s2 = i2.tmp[1], o.writeUInt32BE(r3, a2, n2), o.writeUInt32BE(r3, s2, n2 + 4);
          }, u.prototype._pad = function(t3, e3) {
            if (false === this.padding)
              return false;
            for (var r3 = t3.length - e3, n2 = e3; n2 < t3.length; n2++)
              t3[n2] = r3;
            return true;
          }, u.prototype._unpad = function(t3) {
            if (false === this.padding)
              return t3;
            for (var e3 = t3[t3.length - 1], r3 = t3.length - e3; r3 < t3.length; r3++)
              n.equal(t3[r3], e3);
            return t3.slice(0, t3.length - e3);
          }, u.prototype._encrypt = function(t3, e3, r3, n2, i2) {
            for (var a2 = e3, s2 = r3, u2 = 0; u2 < t3.keys.length; u2 += 2) {
              var c2 = t3.keys[u2], f = t3.keys[u2 + 1];
              o.expand(s2, t3.tmp, 0), c2 ^= t3.tmp[0], f ^= t3.tmp[1];
              var l = o.substitute(c2, f), h = s2;
              s2 = (a2 ^ o.permute(l)) >>> 0, a2 = h;
            }
            o.rip(s2, a2, n2, i2);
          }, u.prototype._decrypt = function(t3, e3, r3, n2, i2) {
            for (var a2 = r3, s2 = e3, u2 = t3.keys.length - 2; u2 >= 0; u2 -= 2) {
              var c2 = t3.keys[u2], f = t3.keys[u2 + 1];
              o.expand(a2, t3.tmp, 0), c2 ^= t3.tmp[0], f ^= t3.tmp[1];
              var l = o.substitute(c2, f), h = a2;
              a2 = (s2 ^ o.permute(l)) >>> 0, s2 = h;
            }
            o.rip(a2, s2, n2, i2);
          };
        }, 1368: (t2, e2, r2) => {
          "use strict";
          var n = r2(3528), i = r2(1679), o = r2(365), a = r2(1048);
          function s(t3, e3) {
            n.equal(e3.length, 24, "Invalid key length");
            var r3 = e3.slice(0, 8), i2 = e3.slice(8, 16), o2 = e3.slice(16, 24);
            this.ciphers = "encrypt" === t3 ? [a.create({ type: "encrypt", key: r3 }), a.create({ type: "decrypt", key: i2 }), a.create({ type: "encrypt", key: o2 })] : [a.create({ type: "decrypt", key: o2 }), a.create({ type: "encrypt", key: i2 }), a.create({ type: "decrypt", key: r3 })];
          }
          function u(t3) {
            o.call(this, t3);
            var e3 = new s(this.type, this.options.key);
            this._edeState = e3;
          }
          i(u, o), t2.exports = u, u.create = function(t3) {
            return new u(t3);
          }, u.prototype._update = function(t3, e3, r3, n2) {
            var i2 = this._edeState;
            i2.ciphers[0]._update(t3, e3, r3, n2), i2.ciphers[1]._update(r3, n2, r3, n2), i2.ciphers[2]._update(r3, n2, r3, n2);
          }, u.prototype._pad = a.prototype._pad, u.prototype._unpad = a.prototype._unpad;
        }, 9473: (t2, e2) => {
          "use strict";
          e2.readUInt32BE = function(t3, e3) {
            return (t3[0 + e3] << 24 | t3[1 + e3] << 16 | t3[2 + e3] << 8 | t3[3 + e3]) >>> 0;
          }, e2.writeUInt32BE = function(t3, e3, r3) {
            t3[0 + r3] = e3 >>> 24, t3[1 + r3] = e3 >>> 16 & 255, t3[2 + r3] = e3 >>> 8 & 255, t3[3 + r3] = 255 & e3;
          }, e2.ip = function(t3, e3, r3, n2) {
            for (var i2 = 0, o = 0, a = 6; a >= 0; a -= 2) {
              for (var s = 0; s <= 24; s += 8)
                i2 <<= 1, i2 |= e3 >>> s + a & 1;
              for (s = 0; s <= 24; s += 8)
                i2 <<= 1, i2 |= t3 >>> s + a & 1;
            }
            for (a = 6; a >= 0; a -= 2) {
              for (s = 1; s <= 25; s += 8)
                o <<= 1, o |= e3 >>> s + a & 1;
              for (s = 1; s <= 25; s += 8)
                o <<= 1, o |= t3 >>> s + a & 1;
            }
            r3[n2 + 0] = i2 >>> 0, r3[n2 + 1] = o >>> 0;
          }, e2.rip = function(t3, e3, r3, n2) {
            for (var i2 = 0, o = 0, a = 0; a < 4; a++)
              for (var s = 24; s >= 0; s -= 8)
                i2 <<= 1, i2 |= e3 >>> s + a & 1, i2 <<= 1, i2 |= t3 >>> s + a & 1;
            for (a = 4; a < 8; a++)
              for (s = 24; s >= 0; s -= 8)
                o <<= 1, o |= e3 >>> s + a & 1, o <<= 1, o |= t3 >>> s + a & 1;
            r3[n2 + 0] = i2 >>> 0, r3[n2 + 1] = o >>> 0;
          }, e2.pc1 = function(t3, e3, r3, n2) {
            for (var i2 = 0, o = 0, a = 7; a >= 5; a--) {
              for (var s = 0; s <= 24; s += 8)
                i2 <<= 1, i2 |= e3 >> s + a & 1;
              for (s = 0; s <= 24; s += 8)
                i2 <<= 1, i2 |= t3 >> s + a & 1;
            }
            for (s = 0; s <= 24; s += 8)
              i2 <<= 1, i2 |= e3 >> s + a & 1;
            for (a = 1; a <= 3; a++) {
              for (s = 0; s <= 24; s += 8)
                o <<= 1, o |= e3 >> s + a & 1;
              for (s = 0; s <= 24; s += 8)
                o <<= 1, o |= t3 >> s + a & 1;
            }
            for (s = 0; s <= 24; s += 8)
              o <<= 1, o |= t3 >> s + a & 1;
            r3[n2 + 0] = i2 >>> 0, r3[n2 + 1] = o >>> 0;
          }, e2.r28shl = function(t3, e3) {
            return t3 << e3 & 268435455 | t3 >>> 28 - e3;
          };
          var r2 = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
          e2.pc2 = function(t3, e3, n2, i2) {
            for (var o = 0, a = 0, s = r2.length >>> 1, u = 0; u < s; u++)
              o <<= 1, o |= t3 >>> r2[u] & 1;
            for (u = s; u < r2.length; u++)
              a <<= 1, a |= e3 >>> r2[u] & 1;
            n2[i2 + 0] = o >>> 0, n2[i2 + 1] = a >>> 0;
          }, e2.expand = function(t3, e3, r3) {
            var n2 = 0, i2 = 0;
            n2 = (1 & t3) << 5 | t3 >>> 27;
            for (var o = 23; o >= 15; o -= 4)
              n2 <<= 6, n2 |= t3 >>> o & 63;
            for (o = 11; o >= 3; o -= 4)
              i2 |= t3 >>> o & 63, i2 <<= 6;
            i2 |= (31 & t3) << 1 | t3 >>> 31, e3[r3 + 0] = n2 >>> 0, e3[r3 + 1] = i2 >>> 0;
          };
          var n = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
          e2.substitute = function(t3, e3) {
            for (var r3 = 0, i2 = 0; i2 < 4; i2++)
              r3 <<= 4, r3 |= n[64 * i2 + (t3 >>> 18 - 6 * i2 & 63)];
            for (i2 = 0; i2 < 4; i2++)
              r3 <<= 4, r3 |= n[256 + 64 * i2 + (e3 >>> 18 - 6 * i2 & 63)];
            return r3 >>> 0;
          };
          var i = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
          e2.permute = function(t3) {
            for (var e3 = 0, r3 = 0; r3 < i.length; r3++)
              e3 <<= 1, e3 |= t3 >>> i[r3] & 1;
            return e3 >>> 0;
          }, e2.padSplit = function(t3, e3, r3) {
            for (var n2 = t3.toString(2); n2.length < e3; )
              n2 = "0" + n2;
            for (var i2 = [], o = 0; o < e3; o += r3)
              i2.push(n2.slice(o, o + r3));
            return i2.join(" ");
          };
        }, 9803: (t2, e2, r2) => {
          var n = r2(5832).Buffer, i = r2(1673), o = r2(3241), a = r2(8151), s = { binary: true, hex: true, base64: true };
          e2.DiffieHellmanGroup = e2.createDiffieHellmanGroup = e2.getDiffieHellman = function(t3) {
            var e3 = new n(o[t3].prime, "hex"), r3 = new n(o[t3].gen, "hex");
            return new a(e3, r3);
          }, e2.createDiffieHellman = e2.DiffieHellman = function t3(e3, r3, o2, u) {
            return n.isBuffer(r3) || void 0 === s[r3] ? t3(e3, "binary", r3, o2) : (r3 = r3 || "binary", u = u || "binary", o2 = o2 || new n([2]), n.isBuffer(o2) || (o2 = new n(o2, u)), "number" == typeof e3 ? new a(i(e3, o2), o2, true) : (n.isBuffer(e3) || (e3 = new n(e3, r3)), new a(e3, o2, true)));
          };
        }, 8151: (t2, e2, r2) => {
          var n = r2(5832).Buffer, i = r2(7799), o = new (r2(1257))(), a = new i(24), s = new i(11), u = new i(10), c = new i(3), f = new i(7), l = r2(1673), h = r2(4276);
          function p(t3, e3) {
            return e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3)), this._pub = new i(t3), this;
          }
          function d(t3, e3) {
            return e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3)), this._priv = new i(t3), this;
          }
          t2.exports = b;
          var y = {};
          function b(t3, e3, r3) {
            this.setGenerator(e3), this.__prime = new i(t3), this._prime = i.mont(this.__prime), this._primeLen = t3.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r3 ? (this.setPublicKey = p, this.setPrivateKey = d) : this._primeCode = 8;
          }
          function m(t3, e3) {
            var r3 = new n(t3.toArray());
            return e3 ? r3.toString(e3) : r3;
          }
          Object.defineProperty(b.prototype, "verifyError", { enumerable: true, get: function() {
            return "number" != typeof this._primeCode && (this._primeCode = function(t3, e3) {
              var r3 = e3.toString("hex"), n2 = [r3, t3.toString(16)].join("_");
              if (n2 in y)
                return y[n2];
              var i2, h2 = 0;
              if (t3.isEven() || !l.simpleSieve || !l.fermatTest(t3) || !o.test(t3))
                return h2 += 1, h2 += "02" === r3 || "05" === r3 ? 8 : 4, y[n2] = h2, h2;
              switch (o.test(t3.shrn(1)) || (h2 += 2), r3) {
                case "02":
                  t3.mod(a).cmp(s) && (h2 += 8);
                  break;
                case "05":
                  (i2 = t3.mod(u)).cmp(c) && i2.cmp(f) && (h2 += 8);
                  break;
                default:
                  h2 += 4;
              }
              return y[n2] = h2, h2;
            }(this.__prime, this.__gen)), this._primeCode;
          } }), b.prototype.generateKeys = function() {
            return this._priv || (this._priv = new i(h(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
          }, b.prototype.computeSecret = function(t3) {
            var e3 = (t3 = (t3 = new i(t3)).toRed(this._prime)).redPow(this._priv).fromRed(), r3 = new n(e3.toArray()), o2 = this.getPrime();
            if (r3.length < o2.length) {
              var a2 = new n(o2.length - r3.length);
              a2.fill(0), r3 = n.concat([a2, r3]);
            }
            return r3;
          }, b.prototype.getPublicKey = function(t3) {
            return m(this._pub, t3);
          }, b.prototype.getPrivateKey = function(t3) {
            return m(this._priv, t3);
          }, b.prototype.getPrime = function(t3) {
            return m(this.__prime, t3);
          }, b.prototype.getGenerator = function(t3) {
            return m(this._gen, t3);
          }, b.prototype.setGenerator = function(t3, e3) {
            return e3 = e3 || "utf8", n.isBuffer(t3) || (t3 = new n(t3, e3)), this.__gen = t3, this._gen = new i(t3), this;
          };
        }, 1673: (t2, e2, r2) => {
          var n = r2(4276);
          t2.exports = v, v.simpleSieve = b, v.fermatTest = m;
          var i = r2(7799), o = new i(24), a = new (r2(1257))(), s = new i(1), u = new i(2), c = new i(5), f = (new i(16), new i(8), new i(10)), l = new i(3), h = (new i(7), new i(11)), p = new i(4), d = (new i(12), null);
          function y() {
            if (null !== d)
              return d;
            var t3 = [];
            t3[0] = 2;
            for (var e3 = 1, r3 = 3; r3 < 1048576; r3 += 2) {
              for (var n2 = Math.ceil(Math.sqrt(r3)), i2 = 0; i2 < e3 && t3[i2] <= n2 && r3 % t3[i2] != 0; i2++)
                ;
              e3 !== i2 && t3[i2] <= n2 || (t3[e3++] = r3);
            }
            return d = t3, t3;
          }
          function b(t3) {
            for (var e3 = y(), r3 = 0; r3 < e3.length; r3++)
              if (0 === t3.modn(e3[r3]))
                return 0 === t3.cmpn(e3[r3]);
            return true;
          }
          function m(t3) {
            var e3 = i.mont(t3);
            return 0 === u.toRed(e3).redPow(t3.subn(1)).fromRed().cmpn(1);
          }
          function v(t3, e3) {
            if (t3 < 16)
              return new i(2 === e3 || 5 === e3 ? [140, 123] : [140, 39]);
            var r3, d2;
            for (e3 = new i(e3); ; ) {
              for (r3 = new i(n(Math.ceil(t3 / 8))); r3.bitLength() > t3; )
                r3.ishrn(1);
              if (r3.isEven() && r3.iadd(s), r3.testn(1) || r3.iadd(u), e3.cmp(u)) {
                if (!e3.cmp(c))
                  for (; r3.mod(f).cmp(l); )
                    r3.iadd(p);
              } else
                for (; r3.mod(o).cmp(h); )
                  r3.iadd(p);
              if (b(d2 = r3.shrn(1)) && b(r3) && m(d2) && m(r3) && a.test(d2) && a.test(r3))
                return r3;
            }
          }
        }, 8964: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i, o = r2(8863), a = r2(1464);
          try {
            i = [].__proto__ === Array.prototype;
          } catch (t3) {
            if (!t3 || "object" !== n(t3) || !("code" in t3) || "ERR_PROTO_ACCESS" !== t3.code)
              throw t3;
          }
          var s = !!i && a && a(Object.prototype, "__proto__"), u = Object, c = u.getPrototypeOf;
          t2.exports = s && "function" == typeof s.get ? o([s.get]) : "function" == typeof c && function(t3) {
            return c(null == t3 ? t3 : u(t3));
          };
        }, 7312: (t2, e2, r2) => {
          "use strict";
          var n = e2;
          n.version = r2(1636).rE, n.utils = r2(1970), n.rand = r2(8904), n.curve = r2(5803), n.curves = r2(6379), n.ec = r2(7416), n.eddsa = r2(4919);
        }, 3334: (t2, e2, r2) => {
          "use strict";
          var n = r2(7799), i = r2(1970), o = i.getNAF, a = i.getJSF, s = i.assert;
          function u(t3, e3) {
            this.type = t3, this.p = new n(e3.p, 16), this.red = e3.prime ? n.red(e3.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = e3.n && new n(e3.n, 16), this.g = e3.g && this.pointFromJSON(e3.g, e3.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r3 = this.n && this.p.div(this.n);
            !r3 || r3.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
          }
          function c(t3, e3) {
            this.curve = t3, this.type = e3, this.precomputed = null;
          }
          t2.exports = u, u.prototype.point = function() {
            throw new Error("Not implemented");
          }, u.prototype.validate = function() {
            throw new Error("Not implemented");
          }, u.prototype._fixedNafMul = function(t3, e3) {
            s(t3.precomputed);
            var r3 = t3._getDoubles(), n2 = o(e3, 1, this._bitLength), i2 = (1 << r3.step + 1) - (r3.step % 2 == 0 ? 2 : 1);
            i2 /= 3;
            var a2, u2, c2 = [];
            for (a2 = 0; a2 < n2.length; a2 += r3.step) {
              u2 = 0;
              for (var f = a2 + r3.step - 1; f >= a2; f--)
                u2 = (u2 << 1) + n2[f];
              c2.push(u2);
            }
            for (var l = this.jpoint(null, null, null), h = this.jpoint(null, null, null), p = i2; p > 0; p--) {
              for (a2 = 0; a2 < c2.length; a2++)
                (u2 = c2[a2]) === p ? h = h.mixedAdd(r3.points[a2]) : u2 === -p && (h = h.mixedAdd(r3.points[a2].neg()));
              l = l.add(h);
            }
            return l.toP();
          }, u.prototype._wnafMul = function(t3, e3) {
            var r3 = 4, n2 = t3._getNAFPoints(r3);
            r3 = n2.wnd;
            for (var i2 = n2.points, a2 = o(e3, r3, this._bitLength), u2 = this.jpoint(null, null, null), c2 = a2.length - 1; c2 >= 0; c2--) {
              for (var f = 0; c2 >= 0 && 0 === a2[c2]; c2--)
                f++;
              if (c2 >= 0 && f++, u2 = u2.dblp(f), c2 < 0)
                break;
              var l = a2[c2];
              s(0 !== l), u2 = "affine" === t3.type ? l > 0 ? u2.mixedAdd(i2[l - 1 >> 1]) : u2.mixedAdd(i2[-l - 1 >> 1].neg()) : l > 0 ? u2.add(i2[l - 1 >> 1]) : u2.add(i2[-l - 1 >> 1].neg());
            }
            return "affine" === t3.type ? u2.toP() : u2;
          }, u.prototype._wnafMulAdd = function(t3, e3, r3, n2, i2) {
            var s2, u2, c2, f = this._wnafT1, l = this._wnafT2, h = this._wnafT3, p = 0;
            for (s2 = 0; s2 < n2; s2++) {
              var d = (c2 = e3[s2])._getNAFPoints(t3);
              f[s2] = d.wnd, l[s2] = d.points;
            }
            for (s2 = n2 - 1; s2 >= 1; s2 -= 2) {
              var y = s2 - 1, b = s2;
              if (1 === f[y] && 1 === f[b]) {
                var m = [e3[y], null, null, e3[b]];
                0 === e3[y].y.cmp(e3[b].y) ? (m[1] = e3[y].add(e3[b]), m[2] = e3[y].toJ().mixedAdd(e3[b].neg())) : 0 === e3[y].y.cmp(e3[b].y.redNeg()) ? (m[1] = e3[y].toJ().mixedAdd(e3[b]), m[2] = e3[y].add(e3[b].neg())) : (m[1] = e3[y].toJ().mixedAdd(e3[b]), m[2] = e3[y].toJ().mixedAdd(e3[b].neg()));
                var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3], g = a(r3[y], r3[b]);
                for (p = Math.max(g[0].length, p), h[y] = new Array(p), h[b] = new Array(p), u2 = 0; u2 < p; u2++) {
                  var _ = 0 | g[0][u2], w = 0 | g[1][u2];
                  h[y][u2] = v[3 * (_ + 1) + (w + 1)], h[b][u2] = 0, l[y] = m;
                }
              } else
                h[y] = o(r3[y], f[y], this._bitLength), h[b] = o(r3[b], f[b], this._bitLength), p = Math.max(h[y].length, p), p = Math.max(h[b].length, p);
            }
            var S = this.jpoint(null, null, null), O = this._wnafT4;
            for (s2 = p; s2 >= 0; s2--) {
              for (var j = 0; s2 >= 0; ) {
                var $ = true;
                for (u2 = 0; u2 < n2; u2++)
                  O[u2] = 0 | h[u2][s2], 0 !== O[u2] && ($ = false);
                if (!$)
                  break;
                j++, s2--;
              }
              if (s2 >= 0 && j++, S = S.dblp(j), s2 < 0)
                break;
              for (u2 = 0; u2 < n2; u2++) {
                var E = O[u2];
                0 !== E && (E > 0 ? c2 = l[u2][E - 1 >> 1] : E < 0 && (c2 = l[u2][-E - 1 >> 1].neg()), S = "affine" === c2.type ? S.mixedAdd(c2) : S.add(c2));
              }
            }
            for (s2 = 0; s2 < n2; s2++)
              l[s2] = null;
            return i2 ? S : S.toP();
          }, u.BasePoint = c, c.prototype.eq = function() {
            throw new Error("Not implemented");
          }, c.prototype.validate = function() {
            return this.curve.validate(this);
          }, u.prototype.decodePoint = function(t3, e3) {
            t3 = i.toArray(t3, e3);
            var r3 = this.p.byteLength();
            if ((4 === t3[0] || 6 === t3[0] || 7 === t3[0]) && t3.length - 1 == 2 * r3)
              return 6 === t3[0] ? s(t3[t3.length - 1] % 2 == 0) : 7 === t3[0] && s(t3[t3.length - 1] % 2 == 1), this.point(t3.slice(1, 1 + r3), t3.slice(1 + r3, 1 + 2 * r3));
            if ((2 === t3[0] || 3 === t3[0]) && t3.length - 1 === r3)
              return this.pointFromX(t3.slice(1, 1 + r3), 3 === t3[0]);
            throw new Error("Unknown point format");
          }, c.prototype.encodeCompressed = function(t3) {
            return this.encode(t3, true);
          }, c.prototype._encode = function(t3) {
            var e3 = this.curve.p.byteLength(), r3 = this.getX().toArray("be", e3);
            return t3 ? [this.getY().isEven() ? 2 : 3].concat(r3) : [4].concat(r3, this.getY().toArray("be", e3));
          }, c.prototype.encode = function(t3, e3) {
            return i.encode(this._encode(e3), t3);
          }, c.prototype.precompute = function(t3) {
            if (this.precomputed)
              return this;
            var e3 = { doubles: null, naf: null, beta: null };
            return e3.naf = this._getNAFPoints(8), e3.doubles = this._getDoubles(4, t3), e3.beta = this._getBeta(), this.precomputed = e3, this;
          }, c.prototype._hasDoubles = function(t3) {
            if (!this.precomputed)
              return false;
            var e3 = this.precomputed.doubles;
            return !!e3 && e3.points.length >= Math.ceil((t3.bitLength() + 1) / e3.step);
          }, c.prototype._getDoubles = function(t3, e3) {
            if (this.precomputed && this.precomputed.doubles)
              return this.precomputed.doubles;
            for (var r3 = [this], n2 = this, i2 = 0; i2 < e3; i2 += t3) {
              for (var o2 = 0; o2 < t3; o2++)
                n2 = n2.dbl();
              r3.push(n2);
            }
            return { step: t3, points: r3 };
          }, c.prototype._getNAFPoints = function(t3) {
            if (this.precomputed && this.precomputed.naf)
              return this.precomputed.naf;
            for (var e3 = [this], r3 = (1 << t3) - 1, n2 = 1 === r3 ? null : this.dbl(), i2 = 1; i2 < r3; i2++)
              e3[i2] = e3[i2 - 1].add(n2);
            return { wnd: t3, points: e3 };
          }, c.prototype._getBeta = function() {
            return null;
          }, c.prototype.dblp = function(t3) {
            for (var e3 = this, r3 = 0; r3 < t3; r3++)
              e3 = e3.dbl();
            return e3;
          };
        }, 9723: (t2, e2, r2) => {
          "use strict";
          var n = r2(1970), i = r2(7799), o = r2(1679), a = r2(3334), s = n.assert;
          function u(t3) {
            this.twisted = 1 != (0 | t3.a), this.mOneA = this.twisted && -1 == (0 | t3.a), this.extended = this.mOneA, a.call(this, "edwards", t3), this.a = new i(t3.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(t3.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new i(t3.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | t3.c);
          }
          function c(t3, e3, r3, n2, o2) {
            a.BasePoint.call(this, t3, "projective"), null === e3 && null === r3 && null === n2 ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new i(e3, 16), this.y = new i(r3, 16), this.z = n2 ? new i(n2, 16) : this.curve.one, this.t = o2 && new i(o2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
          }
          o(u, a), t2.exports = u, u.prototype._mulA = function(t3) {
            return this.mOneA ? t3.redNeg() : this.a.redMul(t3);
          }, u.prototype._mulC = function(t3) {
            return this.oneC ? t3 : this.c.redMul(t3);
          }, u.prototype.jpoint = function(t3, e3, r3, n2) {
            return this.point(t3, e3, r3, n2);
          }, u.prototype.pointFromX = function(t3, e3) {
            (t3 = new i(t3, 16)).red || (t3 = t3.toRed(this.red));
            var r3 = t3.redSqr(), n2 = this.c2.redSub(this.a.redMul(r3)), o2 = this.one.redSub(this.c2.redMul(this.d).redMul(r3)), a2 = n2.redMul(o2.redInvm()), s2 = a2.redSqrt();
            if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
              throw new Error("invalid point");
            var u2 = s2.fromRed().isOdd();
            return (e3 && !u2 || !e3 && u2) && (s2 = s2.redNeg()), this.point(t3, s2);
          }, u.prototype.pointFromY = function(t3, e3) {
            (t3 = new i(t3, 16)).red || (t3 = t3.toRed(this.red));
            var r3 = t3.redSqr(), n2 = r3.redSub(this.c2), o2 = r3.redMul(this.d).redMul(this.c2).redSub(this.a), a2 = n2.redMul(o2.redInvm());
            if (0 === a2.cmp(this.zero)) {
              if (e3)
                throw new Error("invalid point");
              return this.point(this.zero, t3);
            }
            var s2 = a2.redSqrt();
            if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
              throw new Error("invalid point");
            return s2.fromRed().isOdd() !== e3 && (s2 = s2.redNeg()), this.point(s2, t3);
          }, u.prototype.validate = function(t3) {
            if (t3.isInfinity())
              return true;
            t3.normalize();
            var e3 = t3.x.redSqr(), r3 = t3.y.redSqr(), n2 = e3.redMul(this.a).redAdd(r3), i2 = this.c2.redMul(this.one.redAdd(this.d.redMul(e3).redMul(r3)));
            return 0 === n2.cmp(i2);
          }, o(c, a.BasePoint), u.prototype.pointFromJSON = function(t3) {
            return c.fromJSON(this, t3);
          }, u.prototype.point = function(t3, e3, r3, n2) {
            return new c(this, t3, e3, r3, n2);
          }, c.fromJSON = function(t3, e3) {
            return new c(t3, e3[0], e3[1], e3[2]);
          }, c.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function() {
            return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
          }, c.prototype._extDbl = function() {
            var t3 = this.x.redSqr(), e3 = this.y.redSqr(), r3 = this.z.redSqr();
            r3 = r3.redIAdd(r3);
            var n2 = this.curve._mulA(t3), i2 = this.x.redAdd(this.y).redSqr().redISub(t3).redISub(e3), o2 = n2.redAdd(e3), a2 = o2.redSub(r3), s2 = n2.redSub(e3), u2 = i2.redMul(a2), c2 = o2.redMul(s2), f = i2.redMul(s2), l = a2.redMul(o2);
            return this.curve.point(u2, c2, l, f);
          }, c.prototype._projDbl = function() {
            var t3, e3, r3, n2, i2, o2, a2 = this.x.redAdd(this.y).redSqr(), s2 = this.x.redSqr(), u2 = this.y.redSqr();
            if (this.curve.twisted) {
              var c2 = (n2 = this.curve._mulA(s2)).redAdd(u2);
              this.zOne ? (t3 = a2.redSub(s2).redSub(u2).redMul(c2.redSub(this.curve.two)), e3 = c2.redMul(n2.redSub(u2)), r3 = c2.redSqr().redSub(c2).redSub(c2)) : (i2 = this.z.redSqr(), o2 = c2.redSub(i2).redISub(i2), t3 = a2.redSub(s2).redISub(u2).redMul(o2), e3 = c2.redMul(n2.redSub(u2)), r3 = c2.redMul(o2));
            } else
              n2 = s2.redAdd(u2), i2 = this.curve._mulC(this.z).redSqr(), o2 = n2.redSub(i2).redSub(i2), t3 = this.curve._mulC(a2.redISub(n2)).redMul(o2), e3 = this.curve._mulC(n2).redMul(s2.redISub(u2)), r3 = n2.redMul(o2);
            return this.curve.point(t3, e3, r3);
          }, c.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
          }, c.prototype._extAdd = function(t3) {
            var e3 = this.y.redSub(this.x).redMul(t3.y.redSub(t3.x)), r3 = this.y.redAdd(this.x).redMul(t3.y.redAdd(t3.x)), n2 = this.t.redMul(this.curve.dd).redMul(t3.t), i2 = this.z.redMul(t3.z.redAdd(t3.z)), o2 = r3.redSub(e3), a2 = i2.redSub(n2), s2 = i2.redAdd(n2), u2 = r3.redAdd(e3), c2 = o2.redMul(a2), f = s2.redMul(u2), l = o2.redMul(u2), h = a2.redMul(s2);
            return this.curve.point(c2, f, h, l);
          }, c.prototype._projAdd = function(t3) {
            var e3, r3, n2 = this.z.redMul(t3.z), i2 = n2.redSqr(), o2 = this.x.redMul(t3.x), a2 = this.y.redMul(t3.y), s2 = this.curve.d.redMul(o2).redMul(a2), u2 = i2.redSub(s2), c2 = i2.redAdd(s2), f = this.x.redAdd(this.y).redMul(t3.x.redAdd(t3.y)).redISub(o2).redISub(a2), l = n2.redMul(u2).redMul(f);
            return this.curve.twisted ? (e3 = n2.redMul(c2).redMul(a2.redSub(this.curve._mulA(o2))), r3 = u2.redMul(c2)) : (e3 = n2.redMul(c2).redMul(a2.redSub(o2)), r3 = this.curve._mulC(u2).redMul(c2)), this.curve.point(l, e3, r3);
          }, c.prototype.add = function(t3) {
            return this.isInfinity() ? t3 : t3.isInfinity() ? this : this.curve.extended ? this._extAdd(t3) : this._projAdd(t3);
          }, c.prototype.mul = function(t3) {
            return this._hasDoubles(t3) ? this.curve._fixedNafMul(this, t3) : this.curve._wnafMul(this, t3);
          }, c.prototype.mulAdd = function(t3, e3, r3) {
            return this.curve._wnafMulAdd(1, [this, e3], [t3, r3], 2, false);
          }, c.prototype.jmulAdd = function(t3, e3, r3) {
            return this.curve._wnafMulAdd(1, [this, e3], [t3, r3], 2, true);
          }, c.prototype.normalize = function() {
            if (this.zOne)
              return this;
            var t3 = this.z.redInvm();
            return this.x = this.x.redMul(t3), this.y = this.y.redMul(t3), this.t && (this.t = this.t.redMul(t3)), this.z = this.curve.one, this.zOne = true, this;
          }, c.prototype.neg = function() {
            return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
          }, c.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          }, c.prototype.getY = function() {
            return this.normalize(), this.y.fromRed();
          }, c.prototype.eq = function(t3) {
            return this === t3 || 0 === this.getX().cmp(t3.getX()) && 0 === this.getY().cmp(t3.getY());
          }, c.prototype.eqXToP = function(t3) {
            var e3 = t3.toRed(this.curve.red).redMul(this.z);
            if (0 === this.x.cmp(e3))
              return true;
            for (var r3 = t3.clone(), n2 = this.curve.redN.redMul(this.z); ; ) {
              if (r3.iadd(this.curve.n), r3.cmp(this.curve.p) >= 0)
                return false;
              if (e3.redIAdd(n2), 0 === this.x.cmp(e3))
                return true;
            }
          }, c.prototype.toP = c.prototype.normalize, c.prototype.mixedAdd = c.prototype.add;
        }, 5803: (t2, e2, r2) => {
          "use strict";
          var n = e2;
          n.base = r2(3334), n.short = r2(5045), n.mont = r2(3453), n.edwards = r2(9723);
        }, 3453: (t2, e2, r2) => {
          "use strict";
          var n = r2(7799), i = r2(1679), o = r2(3334), a = r2(1970);
          function s(t3) {
            o.call(this, "mont", t3), this.a = new n(t3.a, 16).toRed(this.red), this.b = new n(t3.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }
          function u(t3, e3, r3) {
            o.BasePoint.call(this, t3, "projective"), null === e3 && null === r3 ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(e3, 16), this.z = new n(r3, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
          }
          i(s, o), t2.exports = s, s.prototype.validate = function(t3) {
            var e3 = t3.normalize().x, r3 = e3.redSqr(), n2 = r3.redMul(e3).redAdd(r3.redMul(this.a)).redAdd(e3);
            return 0 === n2.redSqrt().redSqr().cmp(n2);
          }, i(u, o.BasePoint), s.prototype.decodePoint = function(t3, e3) {
            return this.point(a.toArray(t3, e3), 1);
          }, s.prototype.point = function(t3, e3) {
            return new u(this, t3, e3);
          }, s.prototype.pointFromJSON = function(t3) {
            return u.fromJSON(this, t3);
          }, u.prototype.precompute = function() {
          }, u.prototype._encode = function() {
            return this.getX().toArray("be", this.curve.p.byteLength());
          }, u.fromJSON = function(t3, e3) {
            return new u(t3, e3[0], e3[1] || t3.one);
          }, u.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, u.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          }, u.prototype.dbl = function() {
            var t3 = this.x.redAdd(this.z).redSqr(), e3 = this.x.redSub(this.z).redSqr(), r3 = t3.redSub(e3), n2 = t3.redMul(e3), i2 = r3.redMul(e3.redAdd(this.curve.a24.redMul(r3)));
            return this.curve.point(n2, i2);
          }, u.prototype.add = function() {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.diffAdd = function(t3, e3) {
            var r3 = this.x.redAdd(this.z), n2 = this.x.redSub(this.z), i2 = t3.x.redAdd(t3.z), o2 = t3.x.redSub(t3.z).redMul(r3), a2 = i2.redMul(n2), s2 = e3.z.redMul(o2.redAdd(a2).redSqr()), u2 = e3.x.redMul(o2.redISub(a2).redSqr());
            return this.curve.point(s2, u2);
          }, u.prototype.mul = function(t3) {
            for (var e3 = t3.clone(), r3 = this, n2 = this.curve.point(null, null), i2 = []; 0 !== e3.cmpn(0); e3.iushrn(1))
              i2.push(e3.andln(1));
            for (var o2 = i2.length - 1; o2 >= 0; o2--)
              0 === i2[o2] ? (r3 = r3.diffAdd(n2, this), n2 = n2.dbl()) : (n2 = r3.diffAdd(n2, this), r3 = r3.dbl());
            return n2;
          }, u.prototype.mulAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.jumlAdd = function() {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.eq = function(t3) {
            return 0 === this.getX().cmp(t3.getX());
          }, u.prototype.normalize = function() {
            return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
          }, u.prototype.getX = function() {
            return this.normalize(), this.x.fromRed();
          };
        }, 5045: (t2, e2, r2) => {
          "use strict";
          var n = r2(1970), i = r2(7799), o = r2(1679), a = r2(3334), s = n.assert;
          function u(t3) {
            a.call(this, "short", t3), this.a = new i(t3.a, 16).toRed(this.red), this.b = new i(t3.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(t3), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          function c(t3, e3, r3, n2) {
            a.BasePoint.call(this, t3, "affine"), null === e3 && null === r3 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new i(e3, 16), this.y = new i(r3, 16), n2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
          }
          function f(t3, e3, r3, n2) {
            a.BasePoint.call(this, t3, "jacobian"), null === e3 && null === r3 && null === n2 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new i(0)) : (this.x = new i(e3, 16), this.y = new i(r3, 16), this.z = new i(n2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          o(u, a), t2.exports = u, u.prototype._getEndomorphism = function(t3) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var e3, r3;
              if (t3.beta)
                e3 = new i(t3.beta, 16).toRed(this.red);
              else {
                var n2 = this._getEndoRoots(this.p);
                e3 = (e3 = n2[0].cmp(n2[1]) < 0 ? n2[0] : n2[1]).toRed(this.red);
              }
              if (t3.lambda)
                r3 = new i(t3.lambda, 16);
              else {
                var o2 = this._getEndoRoots(this.n);
                0 === this.g.mul(o2[0]).x.cmp(this.g.x.redMul(e3)) ? r3 = o2[0] : (r3 = o2[1], s(0 === this.g.mul(r3).x.cmp(this.g.x.redMul(e3))));
              }
              return { beta: e3, lambda: r3, basis: t3.basis ? t3.basis.map(function(t4) {
                return { a: new i(t4.a, 16), b: new i(t4.b, 16) };
              }) : this._getEndoBasis(r3) };
            }
          }, u.prototype._getEndoRoots = function(t3) {
            var e3 = t3 === this.p ? this.red : i.mont(t3), r3 = new i(2).toRed(e3).redInvm(), n2 = r3.redNeg(), o2 = new i(3).toRed(e3).redNeg().redSqrt().redMul(r3);
            return [n2.redAdd(o2).fromRed(), n2.redSub(o2).fromRed()];
          }, u.prototype._getEndoBasis = function(t3) {
            for (var e3, r3, n2, o2, a2, s2, u2, c2, f2, l = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = t3, p = this.n.clone(), d = new i(1), y = new i(0), b = new i(0), m = new i(1), v = 0; 0 !== h.cmpn(0); ) {
              var g = p.div(h);
              c2 = p.sub(g.mul(h)), f2 = b.sub(g.mul(d));
              var _ = m.sub(g.mul(y));
              if (!n2 && c2.cmp(l) < 0)
                e3 = u2.neg(), r3 = d, n2 = c2.neg(), o2 = f2;
              else if (n2 && 2 == ++v)
                break;
              u2 = c2, p = h, h = c2, b = d, d = f2, m = y, y = _;
            }
            a2 = c2.neg(), s2 = f2;
            var w = n2.sqr().add(o2.sqr());
            return a2.sqr().add(s2.sqr()).cmp(w) >= 0 && (a2 = e3, s2 = r3), n2.negative && (n2 = n2.neg(), o2 = o2.neg()), a2.negative && (a2 = a2.neg(), s2 = s2.neg()), [{ a: n2, b: o2 }, { a: a2, b: s2 }];
          }, u.prototype._endoSplit = function(t3) {
            var e3 = this.endo.basis, r3 = e3[0], n2 = e3[1], i2 = n2.b.mul(t3).divRound(this.n), o2 = r3.b.neg().mul(t3).divRound(this.n), a2 = i2.mul(r3.a), s2 = o2.mul(n2.a), u2 = i2.mul(r3.b), c2 = o2.mul(n2.b);
            return { k1: t3.sub(a2).sub(s2), k2: u2.add(c2).neg() };
          }, u.prototype.pointFromX = function(t3, e3) {
            (t3 = new i(t3, 16)).red || (t3 = t3.toRed(this.red));
            var r3 = t3.redSqr().redMul(t3).redIAdd(t3.redMul(this.a)).redIAdd(this.b), n2 = r3.redSqrt();
            if (0 !== n2.redSqr().redSub(r3).cmp(this.zero))
              throw new Error("invalid point");
            var o2 = n2.fromRed().isOdd();
            return (e3 && !o2 || !e3 && o2) && (n2 = n2.redNeg()), this.point(t3, n2);
          }, u.prototype.validate = function(t3) {
            if (t3.inf)
              return true;
            var e3 = t3.x, r3 = t3.y, n2 = this.a.redMul(e3), i2 = e3.redSqr().redMul(e3).redIAdd(n2).redIAdd(this.b);
            return 0 === r3.redSqr().redISub(i2).cmpn(0);
          }, u.prototype._endoWnafMulAdd = function(t3, e3, r3) {
            for (var n2 = this._endoWnafT1, i2 = this._endoWnafT2, o2 = 0; o2 < t3.length; o2++) {
              var a2 = this._endoSplit(e3[o2]), s2 = t3[o2], u2 = s2._getBeta();
              a2.k1.negative && (a2.k1.ineg(), s2 = s2.neg(true)), a2.k2.negative && (a2.k2.ineg(), u2 = u2.neg(true)), n2[2 * o2] = s2, n2[2 * o2 + 1] = u2, i2[2 * o2] = a2.k1, i2[2 * o2 + 1] = a2.k2;
            }
            for (var c2 = this._wnafMulAdd(1, n2, i2, 2 * o2, r3), f2 = 0; f2 < 2 * o2; f2++)
              n2[f2] = null, i2[f2] = null;
            return c2;
          }, o(c, a.BasePoint), u.prototype.point = function(t3, e3, r3) {
            return new c(this, t3, e3, r3);
          }, u.prototype.pointFromJSON = function(t3, e3) {
            return c.fromJSON(this, t3, e3);
          }, c.prototype._getBeta = function() {
            if (this.curve.endo) {
              var t3 = this.precomputed;
              if (t3 && t3.beta)
                return t3.beta;
              var e3 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (t3) {
                var r3 = this.curve, n2 = function(t4) {
                  return r3.point(t4.x.redMul(r3.endo.beta), t4.y);
                };
                t3.beta = e3, e3.precomputed = { beta: null, naf: t3.naf && { wnd: t3.naf.wnd, points: t3.naf.points.map(n2) }, doubles: t3.doubles && { step: t3.doubles.step, points: t3.doubles.points.map(n2) } };
              }
              return e3;
            }
          }, c.prototype.toJSON = function() {
            return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
          }, c.fromJSON = function(t3, e3, r3) {
            "string" == typeof e3 && (e3 = JSON.parse(e3));
            var n2 = t3.point(e3[0], e3[1], r3);
            if (!e3[2])
              return n2;
            function i2(e4) {
              return t3.point(e4[0], e4[1], r3);
            }
            var o2 = e3[2];
            return n2.precomputed = { beta: null, doubles: o2.doubles && { step: o2.doubles.step, points: [n2].concat(o2.doubles.points.map(i2)) }, naf: o2.naf && { wnd: o2.naf.wnd, points: [n2].concat(o2.naf.points.map(i2)) } }, n2;
          }, c.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function() {
            return this.inf;
          }, c.prototype.add = function(t3) {
            if (this.inf)
              return t3;
            if (t3.inf)
              return this;
            if (this.eq(t3))
              return this.dbl();
            if (this.neg().eq(t3))
              return this.curve.point(null, null);
            if (0 === this.x.cmp(t3.x))
              return this.curve.point(null, null);
            var e3 = this.y.redSub(t3.y);
            0 !== e3.cmpn(0) && (e3 = e3.redMul(this.x.redSub(t3.x).redInvm()));
            var r3 = e3.redSqr().redISub(this.x).redISub(t3.x), n2 = e3.redMul(this.x.redSub(r3)).redISub(this.y);
            return this.curve.point(r3, n2);
          }, c.prototype.dbl = function() {
            if (this.inf)
              return this;
            var t3 = this.y.redAdd(this.y);
            if (0 === t3.cmpn(0))
              return this.curve.point(null, null);
            var e3 = this.curve.a, r3 = this.x.redSqr(), n2 = t3.redInvm(), i2 = r3.redAdd(r3).redIAdd(r3).redIAdd(e3).redMul(n2), o2 = i2.redSqr().redISub(this.x.redAdd(this.x)), a2 = i2.redMul(this.x.redSub(o2)).redISub(this.y);
            return this.curve.point(o2, a2);
          }, c.prototype.getX = function() {
            return this.x.fromRed();
          }, c.prototype.getY = function() {
            return this.y.fromRed();
          }, c.prototype.mul = function(t3) {
            return t3 = new i(t3, 16), this.isInfinity() ? this : this._hasDoubles(t3) ? this.curve._fixedNafMul(this, t3) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [t3]) : this.curve._wnafMul(this, t3);
          }, c.prototype.mulAdd = function(t3, e3, r3) {
            var n2 = [this, e3], i2 = [t3, r3];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2) : this.curve._wnafMulAdd(1, n2, i2, 2);
          }, c.prototype.jmulAdd = function(t3, e3, r3) {
            var n2 = [this, e3], i2 = [t3, r3];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2, true) : this.curve._wnafMulAdd(1, n2, i2, 2, true);
          }, c.prototype.eq = function(t3) {
            return this === t3 || this.inf === t3.inf && (this.inf || 0 === this.x.cmp(t3.x) && 0 === this.y.cmp(t3.y));
          }, c.prototype.neg = function(t3) {
            if (this.inf)
              return this;
            var e3 = this.curve.point(this.x, this.y.redNeg());
            if (t3 && this.precomputed) {
              var r3 = this.precomputed, n2 = function(t4) {
                return t4.neg();
              };
              e3.precomputed = { naf: r3.naf && { wnd: r3.naf.wnd, points: r3.naf.points.map(n2) }, doubles: r3.doubles && { step: r3.doubles.step, points: r3.doubles.points.map(n2) } };
            }
            return e3;
          }, c.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, o(f, a.BasePoint), u.prototype.jpoint = function(t3, e3, r3) {
            return new f(this, t3, e3, r3);
          }, f.prototype.toP = function() {
            if (this.isInfinity())
              return this.curve.point(null, null);
            var t3 = this.z.redInvm(), e3 = t3.redSqr(), r3 = this.x.redMul(e3), n2 = this.y.redMul(e3).redMul(t3);
            return this.curve.point(r3, n2);
          }, f.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, f.prototype.add = function(t3) {
            if (this.isInfinity())
              return t3;
            if (t3.isInfinity())
              return this;
            var e3 = t3.z.redSqr(), r3 = this.z.redSqr(), n2 = this.x.redMul(e3), i2 = t3.x.redMul(r3), o2 = this.y.redMul(e3.redMul(t3.z)), a2 = t3.y.redMul(r3.redMul(this.z)), s2 = n2.redSub(i2), u2 = o2.redSub(a2);
            if (0 === s2.cmpn(0))
              return 0 !== u2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c2 = s2.redSqr(), f2 = c2.redMul(s2), l = n2.redMul(c2), h = u2.redSqr().redIAdd(f2).redISub(l).redISub(l), p = u2.redMul(l.redISub(h)).redISub(o2.redMul(f2)), d = this.z.redMul(t3.z).redMul(s2);
            return this.curve.jpoint(h, p, d);
          }, f.prototype.mixedAdd = function(t3) {
            if (this.isInfinity())
              return t3.toJ();
            if (t3.isInfinity())
              return this;
            var e3 = this.z.redSqr(), r3 = this.x, n2 = t3.x.redMul(e3), i2 = this.y, o2 = t3.y.redMul(e3).redMul(this.z), a2 = r3.redSub(n2), s2 = i2.redSub(o2);
            if (0 === a2.cmpn(0))
              return 0 !== s2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var u2 = a2.redSqr(), c2 = u2.redMul(a2), f2 = r3.redMul(u2), l = s2.redSqr().redIAdd(c2).redISub(f2).redISub(f2), h = s2.redMul(f2.redISub(l)).redISub(i2.redMul(c2)), p = this.z.redMul(a2);
            return this.curve.jpoint(l, h, p);
          }, f.prototype.dblp = function(t3) {
            if (0 === t3)
              return this;
            if (this.isInfinity())
              return this;
            if (!t3)
              return this.dbl();
            var e3;
            if (this.curve.zeroA || this.curve.threeA) {
              var r3 = this;
              for (e3 = 0; e3 < t3; e3++)
                r3 = r3.dbl();
              return r3;
            }
            var n2 = this.curve.a, i2 = this.curve.tinv, o2 = this.x, a2 = this.y, s2 = this.z, u2 = s2.redSqr().redSqr(), c2 = a2.redAdd(a2);
            for (e3 = 0; e3 < t3; e3++) {
              var f2 = o2.redSqr(), l = c2.redSqr(), h = l.redSqr(), p = f2.redAdd(f2).redIAdd(f2).redIAdd(n2.redMul(u2)), d = o2.redMul(l), y = p.redSqr().redISub(d.redAdd(d)), b = d.redISub(y), m = p.redMul(b);
              m = m.redIAdd(m).redISub(h);
              var v = c2.redMul(s2);
              e3 + 1 < t3 && (u2 = u2.redMul(h)), o2 = y, s2 = v, c2 = m;
            }
            return this.curve.jpoint(o2, c2.redMul(i2), s2);
          }, f.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, f.prototype._zeroDbl = function() {
            var t3, e3, r3;
            if (this.zOne) {
              var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
              a2 = a2.redIAdd(a2);
              var s2 = n2.redAdd(n2).redIAdd(n2), u2 = s2.redSqr().redISub(a2).redISub(a2), c2 = o2.redIAdd(o2);
              c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), t3 = u2, e3 = s2.redMul(a2.redISub(u2)).redISub(c2), r3 = this.y.redAdd(this.y);
            } else {
              var f2 = this.x.redSqr(), l = this.y.redSqr(), h = l.redSqr(), p = this.x.redAdd(l).redSqr().redISub(f2).redISub(h);
              p = p.redIAdd(p);
              var d = f2.redAdd(f2).redIAdd(f2), y = d.redSqr(), b = h.redIAdd(h);
              b = (b = b.redIAdd(b)).redIAdd(b), t3 = y.redISub(p).redISub(p), e3 = d.redMul(p.redISub(t3)).redISub(b), r3 = (r3 = this.y.redMul(this.z)).redIAdd(r3);
            }
            return this.curve.jpoint(t3, e3, r3);
          }, f.prototype._threeDbl = function() {
            var t3, e3, r3;
            if (this.zOne) {
              var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
              a2 = a2.redIAdd(a2);
              var s2 = n2.redAdd(n2).redIAdd(n2).redIAdd(this.curve.a), u2 = s2.redSqr().redISub(a2).redISub(a2);
              t3 = u2;
              var c2 = o2.redIAdd(o2);
              c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), e3 = s2.redMul(a2.redISub(u2)).redISub(c2), r3 = this.y.redAdd(this.y);
            } else {
              var f2 = this.z.redSqr(), l = this.y.redSqr(), h = this.x.redMul(l), p = this.x.redSub(f2).redMul(this.x.redAdd(f2));
              p = p.redAdd(p).redIAdd(p);
              var d = h.redIAdd(h), y = (d = d.redIAdd(d)).redAdd(d);
              t3 = p.redSqr().redISub(y), r3 = this.y.redAdd(this.z).redSqr().redISub(l).redISub(f2);
              var b = l.redSqr();
              b = (b = (b = b.redIAdd(b)).redIAdd(b)).redIAdd(b), e3 = p.redMul(d.redISub(t3)).redISub(b);
            }
            return this.curve.jpoint(t3, e3, r3);
          }, f.prototype._dbl = function() {
            var t3 = this.curve.a, e3 = this.x, r3 = this.y, n2 = this.z, i2 = n2.redSqr().redSqr(), o2 = e3.redSqr(), a2 = r3.redSqr(), s2 = o2.redAdd(o2).redIAdd(o2).redIAdd(t3.redMul(i2)), u2 = e3.redAdd(e3), c2 = (u2 = u2.redIAdd(u2)).redMul(a2), f2 = s2.redSqr().redISub(c2.redAdd(c2)), l = c2.redISub(f2), h = a2.redSqr();
            h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
            var p = s2.redMul(l).redISub(h), d = r3.redAdd(r3).redMul(n2);
            return this.curve.jpoint(f2, p, d);
          }, f.prototype.trpl = function() {
            if (!this.curve.zeroA)
              return this.dbl().add(this);
            var t3 = this.x.redSqr(), e3 = this.y.redSqr(), r3 = this.z.redSqr(), n2 = e3.redSqr(), i2 = t3.redAdd(t3).redIAdd(t3), o2 = i2.redSqr(), a2 = this.x.redAdd(e3).redSqr().redISub(t3).redISub(n2), s2 = (a2 = (a2 = (a2 = a2.redIAdd(a2)).redAdd(a2).redIAdd(a2)).redISub(o2)).redSqr(), u2 = n2.redIAdd(n2);
            u2 = (u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2)).redIAdd(u2);
            var c2 = i2.redIAdd(a2).redSqr().redISub(o2).redISub(s2).redISub(u2), f2 = e3.redMul(c2);
            f2 = (f2 = f2.redIAdd(f2)).redIAdd(f2);
            var l = this.x.redMul(s2).redISub(f2);
            l = (l = l.redIAdd(l)).redIAdd(l);
            var h = this.y.redMul(c2.redMul(u2.redISub(c2)).redISub(a2.redMul(s2)));
            h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
            var p = this.z.redAdd(a2).redSqr().redISub(r3).redISub(s2);
            return this.curve.jpoint(l, h, p);
          }, f.prototype.mul = function(t3, e3) {
            return t3 = new i(t3, e3), this.curve._wnafMul(this, t3);
          }, f.prototype.eq = function(t3) {
            if ("affine" === t3.type)
              return this.eq(t3.toJ());
            if (this === t3)
              return true;
            var e3 = this.z.redSqr(), r3 = t3.z.redSqr();
            if (0 !== this.x.redMul(r3).redISub(t3.x.redMul(e3)).cmpn(0))
              return false;
            var n2 = e3.redMul(this.z), i2 = r3.redMul(t3.z);
            return 0 === this.y.redMul(i2).redISub(t3.y.redMul(n2)).cmpn(0);
          }, f.prototype.eqXToP = function(t3) {
            var e3 = this.z.redSqr(), r3 = t3.toRed(this.curve.red).redMul(e3);
            if (0 === this.x.cmp(r3))
              return true;
            for (var n2 = t3.clone(), i2 = this.curve.redN.redMul(e3); ; ) {
              if (n2.iadd(this.curve.n), n2.cmp(this.curve.p) >= 0)
                return false;
              if (r3.redIAdd(i2), 0 === this.x.cmp(r3))
                return true;
            }
          }, f.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, f.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0);
          };
        }, 6379: (t2, e2, r2) => {
          "use strict";
          var n, i = e2, o = r2(2859), a = r2(5803), s = r2(1970).assert;
          function u(t3) {
            "short" === t3.type ? this.curve = new a.short(t3) : "edwards" === t3.type ? this.curve = new a.edwards(t3) : this.curve = new a.mont(t3), this.g = this.curve.g, this.n = this.curve.n, this.hash = t3.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
          }
          function c(t3, e3) {
            Object.defineProperty(i, t3, { configurable: true, enumerable: true, get: function() {
              var r3 = new u(e3);
              return Object.defineProperty(i, t3, { configurable: true, enumerable: true, value: r3 }), r3;
            } });
          }
          i.PresetCurve = u, c("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: o.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), c("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: o.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), c("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: o.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), c("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: o.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), c("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: o.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), c("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["9"] }), c("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
          try {
            n = r2(5586);
          } catch (t3) {
            n = void 0;
          }
          c("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: o.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n] });
        }, 7416: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(7799), o = r2(6934), a = r2(1970), s = r2(6379), u = r2(8904), c = a.assert, f = r2(3643), l = r2(3686);
          function h(t3) {
            if (!(this instanceof h))
              return new h(t3);
            "string" == typeof t3 && (c(Object.prototype.hasOwnProperty.call(s, t3), "Unknown curve " + t3), t3 = s[t3]), t3 instanceof s.PresetCurve && (t3 = { curve: t3 }), this.curve = t3.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t3.curve.g, this.g.precompute(t3.curve.n.bitLength() + 1), this.hash = t3.hash || t3.curve.hash;
          }
          t2.exports = h, h.prototype.keyPair = function(t3) {
            return new f(this, t3);
          }, h.prototype.keyFromPrivate = function(t3, e3) {
            return f.fromPrivate(this, t3, e3);
          }, h.prototype.keyFromPublic = function(t3, e3) {
            return f.fromPublic(this, t3, e3);
          }, h.prototype.genKeyPair = function(t3) {
            t3 || (t3 = {});
            for (var e3 = new o({ hash: this.hash, pers: t3.pers, persEnc: t3.persEnc || "utf8", entropy: t3.entropy || u(this.hash.hmacStrength), entropyEnc: t3.entropy && t3.entropyEnc || "utf8", nonce: this.n.toArray() }), r3 = this.n.byteLength(), n2 = this.n.sub(new i(2)); ; ) {
              var a2 = new i(e3.generate(r3));
              if (!(a2.cmp(n2) > 0))
                return a2.iaddn(1), this.keyFromPrivate(a2);
            }
          }, h.prototype._truncateToN = function(t3, e3, r3) {
            var o2;
            if (i.isBN(t3) || "number" == typeof t3)
              o2 = (t3 = new i(t3, 16)).byteLength();
            else if ("object" === n(t3))
              o2 = t3.length, t3 = new i(t3, 16);
            else {
              var a2 = t3.toString();
              o2 = a2.length + 1 >>> 1, t3 = new i(a2, 16);
            }
            "number" != typeof r3 && (r3 = 8 * o2);
            var s2 = r3 - this.n.bitLength();
            return s2 > 0 && (t3 = t3.ushrn(s2)), !e3 && t3.cmp(this.n) >= 0 ? t3.sub(this.n) : t3;
          }, h.prototype.sign = function(t3, e3, r3, a2) {
            if ("object" === n(r3) && (a2 = r3, r3 = null), a2 || (a2 = {}), "string" != typeof t3 && "number" != typeof t3 && !i.isBN(t3)) {
              c("object" === n(t3) && t3 && "number" == typeof t3.length, "Expected message to be an array-like, a hex string, or a BN instance"), c(t3.length >>> 0 === t3.length);
              for (var s2 = 0; s2 < t3.length; s2++)
                c((255 & t3[s2]) === t3[s2]);
            }
            e3 = this.keyFromPrivate(e3, r3), t3 = this._truncateToN(t3, false, a2.msgBitLength), c(!t3.isNeg(), "Can not sign a negative message");
            var u2 = this.n.byteLength(), f2 = e3.getPrivate().toArray("be", u2), h2 = t3.toArray("be", u2);
            c(new i(h2).eq(t3), "Can not sign message");
            for (var p = new o({ hash: this.hash, entropy: f2, nonce: h2, pers: a2.pers, persEnc: a2.persEnc || "utf8" }), d = this.n.sub(new i(1)), y = 0; ; y++) {
              var b = a2.k ? a2.k(y) : new i(p.generate(this.n.byteLength()));
              if (!((b = this._truncateToN(b, true)).cmpn(1) <= 0 || b.cmp(d) >= 0)) {
                var m = this.g.mul(b);
                if (!m.isInfinity()) {
                  var v = m.getX(), g = v.umod(this.n);
                  if (0 !== g.cmpn(0)) {
                    var _ = b.invm(this.n).mul(g.mul(e3.getPrivate()).iadd(t3));
                    if (0 !== (_ = _.umod(this.n)).cmpn(0)) {
                      var w = (m.getY().isOdd() ? 1 : 0) | (0 !== v.cmp(g) ? 2 : 0);
                      return a2.canonical && _.cmp(this.nh) > 0 && (_ = this.n.sub(_), w ^= 1), new l({ r: g, s: _, recoveryParam: w });
                    }
                  }
                }
              }
            }
          }, h.prototype.verify = function(t3, e3, r3, n2, i2) {
            i2 || (i2 = {}), t3 = this._truncateToN(t3, false, i2.msgBitLength), r3 = this.keyFromPublic(r3, n2);
            var o2 = (e3 = new l(e3, "hex")).r, a2 = e3.s;
            if (o2.cmpn(1) < 0 || o2.cmp(this.n) >= 0)
              return false;
            if (a2.cmpn(1) < 0 || a2.cmp(this.n) >= 0)
              return false;
            var s2, u2 = a2.invm(this.n), c2 = u2.mul(t3).umod(this.n), f2 = u2.mul(o2).umod(this.n);
            return this.curve._maxwellTrick ? !(s2 = this.g.jmulAdd(c2, r3.getPublic(), f2)).isInfinity() && s2.eqXToP(o2) : !(s2 = this.g.mulAdd(c2, r3.getPublic(), f2)).isInfinity() && 0 === s2.getX().umod(this.n).cmp(o2);
          }, h.prototype.recoverPubKey = function(t3, e3, r3, n2) {
            c((3 & r3) === r3, "The recovery param is more than two bits"), e3 = new l(e3, n2);
            var o2 = this.n, a2 = new i(t3), s2 = e3.r, u2 = e3.s, f2 = 1 & r3, h2 = r3 >> 1;
            if (s2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && h2)
              throw new Error("Unable to find sencond key candinate");
            s2 = h2 ? this.curve.pointFromX(s2.add(this.curve.n), f2) : this.curve.pointFromX(s2, f2);
            var p = e3.r.invm(o2), d = o2.sub(a2).mul(p).umod(o2), y = u2.mul(p).umod(o2);
            return this.g.mulAdd(d, s2, y);
          }, h.prototype.getKeyRecoveryParam = function(t3, e3, r3, n2) {
            if (null !== (e3 = new l(e3, n2)).recoveryParam)
              return e3.recoveryParam;
            for (var i2 = 0; i2 < 4; i2++) {
              var o2;
              try {
                o2 = this.recoverPubKey(t3, e3, i2);
              } catch (t4) {
                continue;
              }
              if (o2.eq(r3))
                return i2;
            }
            throw new Error("Unable to find valid recovery factor");
          };
        }, 3643: (t2, e2, r2) => {
          "use strict";
          var n = r2(7799), i = r2(1970).assert;
          function o(t3, e3) {
            this.ec = t3, this.priv = null, this.pub = null, e3.priv && this._importPrivate(e3.priv, e3.privEnc), e3.pub && this._importPublic(e3.pub, e3.pubEnc);
          }
          t2.exports = o, o.fromPublic = function(t3, e3, r3) {
            return e3 instanceof o ? e3 : new o(t3, { pub: e3, pubEnc: r3 });
          }, o.fromPrivate = function(t3, e3, r3) {
            return e3 instanceof o ? e3 : new o(t3, { priv: e3, privEnc: r3 });
          }, o.prototype.validate = function() {
            var t3 = this.getPublic();
            return t3.isInfinity() ? { result: false, reason: "Invalid public key" } : t3.validate() ? t3.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
          }, o.prototype.getPublic = function(t3, e3) {
            return "string" == typeof t3 && (e3 = t3, t3 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), e3 ? this.pub.encode(e3, t3) : this.pub;
          }, o.prototype.getPrivate = function(t3) {
            return "hex" === t3 ? this.priv.toString(16, 2) : this.priv;
          }, o.prototype._importPrivate = function(t3, e3) {
            this.priv = new n(t3, e3 || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, o.prototype._importPublic = function(t3, e3) {
            if (t3.x || t3.y)
              return "mont" === this.ec.curve.type ? i(t3.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(t3.x && t3.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(t3.x, t3.y));
            this.pub = this.ec.curve.decodePoint(t3, e3);
          }, o.prototype.derive = function(t3) {
            return t3.validate() || i(t3.validate(), "public point not validated"), t3.mul(this.priv).getX();
          }, o.prototype.sign = function(t3, e3, r3) {
            return this.ec.sign(t3, this, e3, r3);
          }, o.prototype.verify = function(t3, e3, r3) {
            return this.ec.verify(t3, e3, this, void 0, r3);
          }, o.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
        }, 3686: (t2, e2, r2) => {
          "use strict";
          var n = r2(7799), i = r2(1970), o = i.assert;
          function a(t3, e3) {
            if (t3 instanceof a)
              return t3;
            this._importDER(t3, e3) || (o(t3.r && t3.s, "Signature without r or s"), this.r = new n(t3.r, 16), this.s = new n(t3.s, 16), void 0 === t3.recoveryParam ? this.recoveryParam = null : this.recoveryParam = t3.recoveryParam);
          }
          function s() {
            this.place = 0;
          }
          function u(t3, e3) {
            var r3 = t3[e3.place++];
            if (!(128 & r3))
              return r3;
            var n2 = 15 & r3;
            if (0 === n2 || n2 > 4)
              return false;
            if (0 === t3[e3.place])
              return false;
            for (var i2 = 0, o2 = 0, a2 = e3.place; o2 < n2; o2++, a2++)
              i2 <<= 8, i2 |= t3[a2], i2 >>>= 0;
            return !(i2 <= 127) && (e3.place = a2, i2);
          }
          function c(t3) {
            for (var e3 = 0, r3 = t3.length - 1; !t3[e3] && !(128 & t3[e3 + 1]) && e3 < r3; )
              e3++;
            return 0 === e3 ? t3 : t3.slice(e3);
          }
          function f(t3, e3) {
            if (e3 < 128)
              t3.push(e3);
            else {
              var r3 = 1 + (Math.log(e3) / Math.LN2 >>> 3);
              for (t3.push(128 | r3); --r3; )
                t3.push(e3 >>> (r3 << 3) & 255);
              t3.push(e3);
            }
          }
          t2.exports = a, a.prototype._importDER = function(t3, e3) {
            t3 = i.toArray(t3, e3);
            var r3 = new s();
            if (48 !== t3[r3.place++])
              return false;
            var o2 = u(t3, r3);
            if (false === o2)
              return false;
            if (o2 + r3.place !== t3.length)
              return false;
            if (2 !== t3[r3.place++])
              return false;
            var a2 = u(t3, r3);
            if (false === a2)
              return false;
            if (128 & t3[r3.place])
              return false;
            var c2 = t3.slice(r3.place, a2 + r3.place);
            if (r3.place += a2, 2 !== t3[r3.place++])
              return false;
            var f2 = u(t3, r3);
            if (false === f2)
              return false;
            if (t3.length !== f2 + r3.place)
              return false;
            if (128 & t3[r3.place])
              return false;
            var l = t3.slice(r3.place, f2 + r3.place);
            if (0 === c2[0]) {
              if (!(128 & c2[1]))
                return false;
              c2 = c2.slice(1);
            }
            if (0 === l[0]) {
              if (!(128 & l[1]))
                return false;
              l = l.slice(1);
            }
            return this.r = new n(c2), this.s = new n(l), this.recoveryParam = null, true;
          }, a.prototype.toDER = function(t3) {
            var e3 = this.r.toArray(), r3 = this.s.toArray();
            for (128 & e3[0] && (e3 = [0].concat(e3)), 128 & r3[0] && (r3 = [0].concat(r3)), e3 = c(e3), r3 = c(r3); !(r3[0] || 128 & r3[1]); )
              r3 = r3.slice(1);
            var n2 = [2];
            f(n2, e3.length), (n2 = n2.concat(e3)).push(2), f(n2, r3.length);
            var o2 = n2.concat(r3), a2 = [48];
            return f(a2, o2.length), a2 = a2.concat(o2), i.encode(a2, t3);
          };
        }, 4919: (t2, e2, r2) => {
          "use strict";
          var n = r2(2859), i = r2(6379), o = r2(1970), a = o.assert, s = o.parseBytes, u = r2(208), c = r2(8433);
          function f(t3) {
            if (a("ed25519" === t3, "only tested with ed25519 so far"), !(this instanceof f))
              return new f(t3);
            t3 = i[t3].curve, this.curve = t3, this.g = t3.g, this.g.precompute(t3.n.bitLength() + 1), this.pointClass = t3.point().constructor, this.encodingLength = Math.ceil(t3.n.bitLength() / 8), this.hash = n.sha512;
          }
          t2.exports = f, f.prototype.sign = function(t3, e3) {
            t3 = s(t3);
            var r3 = this.keyFromSecret(e3), n2 = this.hashInt(r3.messagePrefix(), t3), i2 = this.g.mul(n2), o2 = this.encodePoint(i2), a2 = this.hashInt(o2, r3.pubBytes(), t3).mul(r3.priv()), u2 = n2.add(a2).umod(this.curve.n);
            return this.makeSignature({ R: i2, S: u2, Rencoded: o2 });
          }, f.prototype.verify = function(t3, e3, r3) {
            if (t3 = s(t3), (e3 = this.makeSignature(e3)).S().gte(e3.eddsa.curve.n) || e3.S().isNeg())
              return false;
            var n2 = this.keyFromPublic(r3), i2 = this.hashInt(e3.Rencoded(), n2.pubBytes(), t3), o2 = this.g.mul(e3.S());
            return e3.R().add(n2.pub().mul(i2)).eq(o2);
          }, f.prototype.hashInt = function() {
            for (var t3 = this.hash(), e3 = 0; e3 < arguments.length; e3++)
              t3.update(arguments[e3]);
            return o.intFromLE(t3.digest()).umod(this.curve.n);
          }, f.prototype.keyFromPublic = function(t3) {
            return u.fromPublic(this, t3);
          }, f.prototype.keyFromSecret = function(t3) {
            return u.fromSecret(this, t3);
          }, f.prototype.makeSignature = function(t3) {
            return t3 instanceof c ? t3 : new c(this, t3);
          }, f.prototype.encodePoint = function(t3) {
            var e3 = t3.getY().toArray("le", this.encodingLength);
            return e3[this.encodingLength - 1] |= t3.getX().isOdd() ? 128 : 0, e3;
          }, f.prototype.decodePoint = function(t3) {
            var e3 = (t3 = o.parseBytes(t3)).length - 1, r3 = t3.slice(0, e3).concat(-129 & t3[e3]), n2 = !!(128 & t3[e3]), i2 = o.intFromLE(r3);
            return this.curve.pointFromY(i2, n2);
          }, f.prototype.encodeInt = function(t3) {
            return t3.toArray("le", this.encodingLength);
          }, f.prototype.decodeInt = function(t3) {
            return o.intFromLE(t3);
          }, f.prototype.isPoint = function(t3) {
            return t3 instanceof this.pointClass;
          };
        }, 208: (t2, e2, r2) => {
          "use strict";
          var n = r2(1970), i = n.assert, o = n.parseBytes, a = n.cachedProperty;
          function s(t3, e3) {
            this.eddsa = t3, this._secret = o(e3.secret), t3.isPoint(e3.pub) ? this._pub = e3.pub : this._pubBytes = o(e3.pub);
          }
          s.fromPublic = function(t3, e3) {
            return e3 instanceof s ? e3 : new s(t3, { pub: e3 });
          }, s.fromSecret = function(t3, e3) {
            return e3 instanceof s ? e3 : new s(t3, { secret: e3 });
          }, s.prototype.secret = function() {
            return this._secret;
          }, a(s, "pubBytes", function() {
            return this.eddsa.encodePoint(this.pub());
          }), a(s, "pub", function() {
            return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
          }), a(s, "privBytes", function() {
            var t3 = this.eddsa, e3 = this.hash(), r3 = t3.encodingLength - 1, n2 = e3.slice(0, t3.encodingLength);
            return n2[0] &= 248, n2[r3] &= 127, n2[r3] |= 64, n2;
          }), a(s, "priv", function() {
            return this.eddsa.decodeInt(this.privBytes());
          }), a(s, "hash", function() {
            return this.eddsa.hash().update(this.secret()).digest();
          }), a(s, "messagePrefix", function() {
            return this.hash().slice(this.eddsa.encodingLength);
          }), s.prototype.sign = function(t3) {
            return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(t3, this);
          }, s.prototype.verify = function(t3, e3) {
            return this.eddsa.verify(t3, e3, this);
          }, s.prototype.getSecret = function(t3) {
            return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), t3);
          }, s.prototype.getPublic = function(t3) {
            return n.encode(this.pubBytes(), t3);
          }, t2.exports = s;
        }, 8433: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(7799), o = r2(1970), a = o.assert, s = o.cachedProperty, u = o.parseBytes;
          function c(t3, e3) {
            this.eddsa = t3, "object" !== n(e3) && (e3 = u(e3)), Array.isArray(e3) && (a(e3.length === 2 * t3.encodingLength, "Signature has invalid size"), e3 = { R: e3.slice(0, t3.encodingLength), S: e3.slice(t3.encodingLength) }), a(e3.R && e3.S, "Signature without R or S"), t3.isPoint(e3.R) && (this._R = e3.R), e3.S instanceof i && (this._S = e3.S), this._Rencoded = Array.isArray(e3.R) ? e3.R : e3.Rencoded, this._Sencoded = Array.isArray(e3.S) ? e3.S : e3.Sencoded;
          }
          s(c, "S", function() {
            return this.eddsa.decodeInt(this.Sencoded());
          }), s(c, "R", function() {
            return this.eddsa.decodePoint(this.Rencoded());
          }), s(c, "Rencoded", function() {
            return this.eddsa.encodePoint(this.R());
          }), s(c, "Sencoded", function() {
            return this.eddsa.encodeInt(this.S());
          }), c.prototype.toBytes = function() {
            return this.Rencoded().concat(this.Sencoded());
          }, c.prototype.toHex = function() {
            return o.encode(this.toBytes(), "hex").toUpperCase();
          }, t2.exports = c;
        }, 5586: (t2) => {
          t2.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
        }, 1970: (t2, e2, r2) => {
          "use strict";
          var n = e2, i = r2(7799), o = r2(3528), a = r2(6706);
          n.assert = o, n.toArray = a.toArray, n.zero2 = a.zero2, n.toHex = a.toHex, n.encode = a.encode, n.getNAF = function(t3, e3, r3) {
            var n2, i2 = new Array(Math.max(t3.bitLength(), r3) + 1);
            for (n2 = 0; n2 < i2.length; n2 += 1)
              i2[n2] = 0;
            var o2 = 1 << e3 + 1, a2 = t3.clone();
            for (n2 = 0; n2 < i2.length; n2++) {
              var s, u = a2.andln(o2 - 1);
              a2.isOdd() ? (s = u > (o2 >> 1) - 1 ? (o2 >> 1) - u : u, a2.isubn(s)) : s = 0, i2[n2] = s, a2.iushrn(1);
            }
            return i2;
          }, n.getJSF = function(t3, e3) {
            var r3 = [[], []];
            t3 = t3.clone(), e3 = e3.clone();
            for (var n2, i2 = 0, o2 = 0; t3.cmpn(-i2) > 0 || e3.cmpn(-o2) > 0; ) {
              var a2, s, u = t3.andln(3) + i2 & 3, c = e3.andln(3) + o2 & 3;
              3 === u && (u = -1), 3 === c && (c = -1), a2 = 1 & u ? 3 != (n2 = t3.andln(7) + i2 & 7) && 5 !== n2 || 2 !== c ? u : -u : 0, r3[0].push(a2), s = 1 & c ? 3 != (n2 = e3.andln(7) + o2 & 7) && 5 !== n2 || 2 !== u ? c : -c : 0, r3[1].push(s), 2 * i2 === a2 + 1 && (i2 = 1 - i2), 2 * o2 === s + 1 && (o2 = 1 - o2), t3.iushrn(1), e3.iushrn(1);
            }
            return r3;
          }, n.cachedProperty = function(t3, e3, r3) {
            var n2 = "_" + e3;
            t3.prototype[e3] = function() {
              return void 0 !== this[n2] ? this[n2] : this[n2] = r3.call(this);
            };
          }, n.parseBytes = function(t3) {
            return "string" == typeof t3 ? n.toArray(t3, "hex") : t3;
          }, n.intFromLE = function(t3) {
            return new i(t3, "hex", "le");
          };
        }, 988: (t2) => {
          "use strict";
          var e2 = Object.defineProperty || false;
          if (e2)
            try {
              e2({}, "a", { value: 1 });
            } catch (t3) {
              e2 = false;
            }
          t2.exports = e2;
        }, 9206: (t2) => {
          "use strict";
          t2.exports = EvalError;
        }, 9870: (t2) => {
          "use strict";
          t2.exports = Error;
        }, 9939: (t2) => {
          "use strict";
          t2.exports = RangeError;
        }, 783: (t2) => {
          "use strict";
          t2.exports = ReferenceError;
        }, 2288: (t2) => {
          "use strict";
          t2.exports = SyntaxError;
        }, 2268: (t2) => {
          "use strict";
          t2.exports = TypeError;
        }, 8188: (t2) => {
          "use strict";
          t2.exports = URIError;
        }, 8093: (t2) => {
          "use strict";
          t2.exports = Object;
        }, 6182: (t2) => {
          "use strict";
          function e2(t3, e3) {
            if (null == t3)
              throw new TypeError("Cannot convert first argument to object");
            for (var r2 = Object(t3), n = 1; n < arguments.length; n++) {
              var i = arguments[n];
              if (null != i)
                for (var o = Object.keys(Object(i)), a = 0, s = o.length; a < s; a++) {
                  var u = o[a], c = Object.getOwnPropertyDescriptor(i, u);
                  void 0 !== c && c.enumerable && (r2[u] = i[u]);
                }
            }
            return r2;
          }
          t2.exports = { assign: e2, polyfill: function() {
            Object.assign || Object.defineProperty(Object, "assign", { enumerable: false, configurable: true, writable: true, value: e2 });
          } };
        }, 3550: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          var r2, n = "object" === ("undefined" == typeof Reflect ? "undefined" : e2(Reflect)) ? Reflect : null, i = n && "function" == typeof n.apply ? n.apply : function(t3, e3, r3) {
            return Function.prototype.apply.call(t3, e3, r3);
          };
          r2 = n && "function" == typeof n.ownKeys ? n.ownKeys : Object.getOwnPropertySymbols ? function(t3) {
            return Object.getOwnPropertyNames(t3).concat(Object.getOwnPropertySymbols(t3));
          } : function(t3) {
            return Object.getOwnPropertyNames(t3);
          };
          var o = Number.isNaN || function(t3) {
            return t3 != t3;
          };
          function a() {
            a.init.call(this);
          }
          t2.exports = a, t2.exports.once = function(t3, e3) {
            return new Promise(function(r3, n2) {
              function i2(r4) {
                t3.removeListener(e3, o2), n2(r4);
              }
              function o2() {
                "function" == typeof t3.removeListener && t3.removeListener("error", i2), r3([].slice.call(arguments));
              }
              b(t3, e3, o2, { once: true }), "error" !== e3 && function(t4, e4) {
                "function" == typeof t4.on && b(t4, "error", e4, { once: true });
              }(t3, i2);
            });
          }, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
          var s = 10;
          function u(t3) {
            if ("function" != typeof t3)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + e2(t3));
          }
          function c(t3) {
            return void 0 === t3._maxListeners ? a.defaultMaxListeners : t3._maxListeners;
          }
          function f(t3, e3, r3, n2) {
            var i2, o2, a2, s2;
            if (u(r3), void 0 === (o2 = t3._events) ? (o2 = t3._events = /* @__PURE__ */ Object.create(null), t3._eventsCount = 0) : (void 0 !== o2.newListener && (t3.emit("newListener", e3, r3.listener ? r3.listener : r3), o2 = t3._events), a2 = o2[e3]), void 0 === a2)
              a2 = o2[e3] = r3, ++t3._eventsCount;
            else if ("function" == typeof a2 ? a2 = o2[e3] = n2 ? [r3, a2] : [a2, r3] : n2 ? a2.unshift(r3) : a2.push(r3), (i2 = c(t3)) > 0 && a2.length > i2 && !a2.warned) {
              a2.warned = true;
              var f2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(e3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              f2.name = "MaxListenersExceededWarning", f2.emitter = t3, f2.type = e3, f2.count = a2.length, s2 = f2, console && console.warn && console.warn(s2);
            }
            return t3;
          }
          function l() {
            if (!this.fired)
              return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function h(t3, e3, r3) {
            var n2 = { fired: false, wrapFn: void 0, target: t3, type: e3, listener: r3 }, i2 = l.bind(n2);
            return i2.listener = r3, n2.wrapFn = i2, i2;
          }
          function p(t3, e3, r3) {
            var n2 = t3._events;
            if (void 0 === n2)
              return [];
            var i2 = n2[e3];
            return void 0 === i2 ? [] : "function" == typeof i2 ? r3 ? [i2.listener || i2] : [i2] : r3 ? function(t4) {
              for (var e4 = new Array(t4.length), r4 = 0; r4 < e4.length; ++r4)
                e4[r4] = t4[r4].listener || t4[r4];
              return e4;
            }(i2) : y(i2, i2.length);
          }
          function d(t3) {
            var e3 = this._events;
            if (void 0 !== e3) {
              var r3 = e3[t3];
              if ("function" == typeof r3)
                return 1;
              if (void 0 !== r3)
                return r3.length;
            }
            return 0;
          }
          function y(t3, e3) {
            for (var r3 = new Array(e3), n2 = 0; n2 < e3; ++n2)
              r3[n2] = t3[n2];
            return r3;
          }
          function b(t3, r3, n2, i2) {
            if ("function" == typeof t3.on)
              i2.once ? t3.once(r3, n2) : t3.on(r3, n2);
            else {
              if ("function" != typeof t3.addEventListener)
                throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + e2(t3));
              t3.addEventListener(r3, function e3(o2) {
                i2.once && t3.removeEventListener(r3, e3), n2(o2);
              });
            }
          }
          Object.defineProperty(a, "defaultMaxListeners", { enumerable: true, get: function() {
            return s;
          }, set: function(t3) {
            if ("number" != typeof t3 || t3 < 0 || o(t3))
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t3 + ".");
            s = t3;
          } }), a.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, a.prototype.setMaxListeners = function(t3) {
            if ("number" != typeof t3 || t3 < 0 || o(t3))
              throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t3 + ".");
            return this._maxListeners = t3, this;
          }, a.prototype.getMaxListeners = function() {
            return c(this);
          }, a.prototype.emit = function(t3) {
            for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
              e3.push(arguments[r3]);
            var n2 = "error" === t3, o2 = this._events;
            if (void 0 !== o2)
              n2 = n2 && void 0 === o2.error;
            else if (!n2)
              return false;
            if (n2) {
              var a2;
              if (e3.length > 0 && (a2 = e3[0]), a2 instanceof Error)
                throw a2;
              var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
              throw s2.context = a2, s2;
            }
            var u2 = o2[t3];
            if (void 0 === u2)
              return false;
            if ("function" == typeof u2)
              i(u2, this, e3);
            else {
              var c2 = u2.length, f2 = y(u2, c2);
              for (r3 = 0; r3 < c2; ++r3)
                i(f2[r3], this, e3);
            }
            return true;
          }, a.prototype.addListener = function(t3, e3) {
            return f(this, t3, e3, false);
          }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function(t3, e3) {
            return f(this, t3, e3, true);
          }, a.prototype.once = function(t3, e3) {
            return u(e3), this.on(t3, h(this, t3, e3)), this;
          }, a.prototype.prependOnceListener = function(t3, e3) {
            return u(e3), this.prependListener(t3, h(this, t3, e3)), this;
          }, a.prototype.removeListener = function(t3, e3) {
            var r3, n2, i2, o2, a2;
            if (u(e3), void 0 === (n2 = this._events))
              return this;
            if (void 0 === (r3 = n2[t3]))
              return this;
            if (r3 === e3 || r3.listener === e3)
              0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[t3], n2.removeListener && this.emit("removeListener", t3, r3.listener || e3));
            else if ("function" != typeof r3) {
              for (i2 = -1, o2 = r3.length - 1; o2 >= 0; o2--)
                if (r3[o2] === e3 || r3[o2].listener === e3) {
                  a2 = r3[o2].listener, i2 = o2;
                  break;
                }
              if (i2 < 0)
                return this;
              0 === i2 ? r3.shift() : function(t4, e4) {
                for (; e4 + 1 < t4.length; e4++)
                  t4[e4] = t4[e4 + 1];
                t4.pop();
              }(r3, i2), 1 === r3.length && (n2[t3] = r3[0]), void 0 !== n2.removeListener && this.emit("removeListener", t3, a2 || e3);
            }
            return this;
          }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function(t3) {
            var e3, r3, n2;
            if (void 0 === (r3 = this._events))
              return this;
            if (void 0 === r3.removeListener)
              return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r3[t3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r3[t3]), this;
            if (0 === arguments.length) {
              var i2, o2 = Object.keys(r3);
              for (n2 = 0; n2 < o2.length; ++n2)
                "removeListener" !== (i2 = o2[n2]) && this.removeAllListeners(i2);
              return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (e3 = r3[t3]))
              this.removeListener(t3, e3);
            else if (void 0 !== e3)
              for (n2 = e3.length - 1; n2 >= 0; n2--)
                this.removeListener(t3, e3[n2]);
            return this;
          }, a.prototype.listeners = function(t3) {
            return p(this, t3, true);
          }, a.prototype.rawListeners = function(t3) {
            return p(this, t3, false);
          }, a.listenerCount = function(t3, e3) {
            return "function" == typeof t3.listenerCount ? t3.listenerCount(e3) : d.call(t3, e3);
          }, a.prototype.listenerCount = d, a.prototype.eventNames = function() {
            return this._eventsCount > 0 ? r2(this._events) : [];
          };
        }, 1685: (t2, e2, r2) => {
          var n = r2(9732).Buffer, i = r2(2635);
          t2.exports = function(t3, e3, r3, o) {
            if (n.isBuffer(t3) || (t3 = n.from(t3, "binary")), e3 && (n.isBuffer(e3) || (e3 = n.from(e3, "binary")), 8 !== e3.length))
              throw new RangeError("salt should be Buffer with 8 byte length");
            for (var a = r3 / 8, s = n.alloc(a), u = n.alloc(o || 0), c = n.alloc(0); a > 0 || o > 0; ) {
              var f = new i();
              f.update(c), f.update(t3), e3 && f.update(e3), c = f.digest();
              var l = 0;
              if (a > 0) {
                var h = s.length - a;
                l = Math.min(a, c.length), c.copy(s, h, 0, l), a -= l;
              }
              if (l < c.length && o > 0) {
                var p = u.length - o, d = Math.min(o, c.length - l);
                c.copy(u, p, l, l + d), o -= d;
              }
            }
            return c.fill(0), { key: s, iv: u };
          };
        }, 3777: (t2, e2, r2) => {
          "use strict";
          var n = r2(9809), i = Object.prototype.toString, o = Object.prototype.hasOwnProperty;
          t2.exports = function(t3, e3, r3) {
            if (!n(e3))
              throw new TypeError("iterator must be a function");
            var a;
            arguments.length >= 3 && (a = r3), "[object Array]" === i.call(t3) ? function(t4, e4, r4) {
              for (var n2 = 0, i2 = t4.length; n2 < i2; n2++)
                o.call(t4, n2) && (null == r4 ? e4(t4[n2], n2, t4) : e4.call(r4, t4[n2], n2, t4));
            }(t3, e3, a) : "string" == typeof t3 ? function(t4, e4, r4) {
              for (var n2 = 0, i2 = t4.length; n2 < i2; n2++)
                null == r4 ? e4(t4.charAt(n2), n2, t4) : e4.call(r4, t4.charAt(n2), n2, t4);
            }(t3, e3, a) : function(t4, e4, r4) {
              for (var n2 in t4)
                o.call(t4, n2) && (null == r4 ? e4(t4[n2], n2, t4) : e4.call(r4, t4[n2], n2, t4));
            }(t3, e3, a);
          };
        }, 6730: (t2) => {
          "use strict";
          var e2 = Object.prototype.toString, r2 = Math.max, n = function(t3, e3) {
            for (var r3 = [], n2 = 0; n2 < t3.length; n2 += 1)
              r3[n2] = t3[n2];
            for (var i = 0; i < e3.length; i += 1)
              r3[i + t3.length] = e3[i];
            return r3;
          };
          t2.exports = function(t3) {
            var i = this;
            if ("function" != typeof i || "[object Function]" !== e2.apply(i))
              throw new TypeError("Function.prototype.bind called on incompatible " + i);
            for (var o, a = function(t4) {
              for (var e3 = [], r3 = 1, n2 = 0; r3 < t4.length; r3 += 1, n2 += 1)
                e3[n2] = t4[r3];
              return e3;
            }(arguments), s = r2(0, i.length - a.length), u = [], c = 0; c < s; c++)
              u[c] = "$" + c;
            if (o = Function("binder", "return function (" + function(t4) {
              for (var e3 = "", r3 = 0; r3 < t4.length; r3 += 1)
                e3 += t4[r3], r3 + 1 < t4.length && (e3 += ",");
              return e3;
            }(u) + "){ return binder.apply(this,arguments); }")(function() {
              if (this instanceof o) {
                var e3 = i.apply(this, n(a, arguments));
                return Object(e3) === e3 ? e3 : this;
              }
              return i.apply(t3, n(a, arguments));
            }), i.prototype) {
              var f = function() {
              };
              f.prototype = i.prototype, o.prototype = new f(), f.prototype = null;
            }
            return o;
          };
        }, 2354: (t2, e2, r2) => {
          "use strict";
          var n = r2(6730);
          t2.exports = Function.prototype.bind || n;
        }, 6400: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i, o = r2(8093), a = r2(9870), s = r2(9206), u = r2(9939), c = r2(783), f = r2(2288), l = r2(2268), h = r2(8188), p = r2(9471), d = r2(2401), y = r2(1697), b = r2(8435), m = r2(8633), v = r2(2151), g = r2(674), _ = Function, w = function(t3) {
            try {
              return _('"use strict"; return (' + t3 + ").constructor;")();
            } catch (t4) {
            }
          }, S = r2(1464), O = r2(988), j = function() {
            throw new l();
          }, $ = S ? function() {
            try {
              return j;
            } catch (t3) {
              try {
                return S(arguments, "callee").get;
              } catch (t4) {
                return j;
              }
            }
          }() : j, E = r2(5510)(), A = r2(209), P = r2(5825), x = r2(2403), k = r2(3279), M = r2(3123), T = {}, B = "undefined" != typeof Uint8Array && A ? A(Uint8Array) : i, I = { __proto__: null, "%AggregateError%": "undefined" == typeof AggregateError ? i : AggregateError, "%Array%": Array, "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? i : ArrayBuffer, "%ArrayIteratorPrototype%": E && A ? A([][Symbol.iterator]()) : i, "%AsyncFromSyncIteratorPrototype%": i, "%AsyncFunction%": T, "%AsyncGenerator%": T, "%AsyncGeneratorFunction%": T, "%AsyncIteratorPrototype%": T, "%Atomics%": "undefined" == typeof Atomics ? i : Atomics, "%BigInt%": "undefined" == typeof BigInt ? i : BigInt, "%BigInt64Array%": "undefined" == typeof BigInt64Array ? i : BigInt64Array, "%BigUint64Array%": "undefined" == typeof BigUint64Array ? i : BigUint64Array, "%Boolean%": Boolean, "%DataView%": "undefined" == typeof DataView ? i : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": a, "%eval%": eval, "%EvalError%": s, "%Float32Array%": "undefined" == typeof Float32Array ? i : Float32Array, "%Float64Array%": "undefined" == typeof Float64Array ? i : Float64Array, "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? i : FinalizationRegistry, "%Function%": _, "%GeneratorFunction%": T, "%Int8Array%": "undefined" == typeof Int8Array ? i : Int8Array, "%Int16Array%": "undefined" == typeof Int16Array ? i : Int16Array, "%Int32Array%": "undefined" == typeof Int32Array ? i : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": E && A ? A(A([][Symbol.iterator]())) : i, "%JSON%": "object" === ("undefined" == typeof JSON ? "undefined" : n(JSON)) ? JSON : i, "%Map%": "undefined" == typeof Map ? i : Map, "%MapIteratorPrototype%": "undefined" != typeof Map && E && A ? A((/* @__PURE__ */ new Map())[Symbol.iterator]()) : i, "%Math%": Math, "%Number%": Number, "%Object%": o, "%Object.getOwnPropertyDescriptor%": S, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": "undefined" == typeof Promise ? i : Promise, "%Proxy%": "undefined" == typeof Proxy ? i : Proxy, "%RangeError%": u, "%ReferenceError%": c, "%Reflect%": "undefined" == typeof Reflect ? i : Reflect, "%RegExp%": RegExp, "%Set%": "undefined" == typeof Set ? i : Set, "%SetIteratorPrototype%": "undefined" != typeof Set && E && A ? A((/* @__PURE__ */ new Set())[Symbol.iterator]()) : i, "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? i : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": E && A ? A(""[Symbol.iterator]()) : i, "%Symbol%": E ? Symbol : i, "%SyntaxError%": f, "%ThrowTypeError%": $, "%TypedArray%": B, "%TypeError%": l, "%Uint8Array%": "undefined" == typeof Uint8Array ? i : Uint8Array, "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? i : Uint8ClampedArray, "%Uint16Array%": "undefined" == typeof Uint16Array ? i : Uint16Array, "%Uint32Array%": "undefined" == typeof Uint32Array ? i : Uint32Array, "%URIError%": h, "%WeakMap%": "undefined" == typeof WeakMap ? i : WeakMap, "%WeakRef%": "undefined" == typeof WeakRef ? i : WeakRef, "%WeakSet%": "undefined" == typeof WeakSet ? i : WeakSet, "%Function.prototype.call%": M, "%Function.prototype.apply%": k, "%Object.defineProperty%": O, "%Object.getPrototypeOf%": P, "%Math.abs%": p, "%Math.floor%": d, "%Math.max%": y, "%Math.min%": b, "%Math.pow%": m, "%Math.round%": v, "%Math.sign%": g, "%Reflect.getPrototypeOf%": x };
          if (A)
            try {
              null.error;
            } catch (t3) {
              var R = A(A(t3));
              I["%Error.prototype%"] = R;
            }
          var N = function t3(e3) {
            var r3;
            if ("%AsyncFunction%" === e3)
              r3 = w("async function () {}");
            else if ("%GeneratorFunction%" === e3)
              r3 = w("function* () {}");
            else if ("%AsyncGeneratorFunction%" === e3)
              r3 = w("async function* () {}");
            else if ("%AsyncGenerator%" === e3) {
              var n2 = t3("%AsyncGeneratorFunction%");
              n2 && (r3 = n2.prototype);
            } else if ("%AsyncIteratorPrototype%" === e3) {
              var i2 = t3("%AsyncGenerator%");
              i2 && A && (r3 = A(i2.prototype));
            }
            return I[e3] = r3, r3;
          }, D = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, L = r2(2354), C = r2(5994), U = L.call(M, Array.prototype.concat), q = L.call(k, Array.prototype.splice), F = L.call(M, String.prototype.replace), V = L.call(M, String.prototype.slice), z = L.call(M, RegExp.prototype.exec), K = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, H = /\\(\\)?/g, W = function(t3, e3) {
            var r3, n2 = t3;
            if (C(D, n2) && (n2 = "%" + (r3 = D[n2])[0] + "%"), C(I, n2)) {
              var i2 = I[n2];
              if (i2 === T && (i2 = N(n2)), void 0 === i2 && !e3)
                throw new l("intrinsic " + t3 + " exists, but is not available. Please file an issue!");
              return { alias: r3, name: n2, value: i2 };
            }
            throw new f("intrinsic " + t3 + " does not exist!");
          };
          t2.exports = function(t3, e3) {
            if ("string" != typeof t3 || 0 === t3.length)
              throw new l("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" != typeof e3)
              throw new l('"allowMissing" argument must be a boolean');
            if (null === z(/^%?[^%]*%?$/, t3))
              throw new f("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
            var r3 = function(t4) {
              var e4 = V(t4, 0, 1), r4 = V(t4, -1);
              if ("%" === e4 && "%" !== r4)
                throw new f("invalid intrinsic syntax, expected closing `%`");
              if ("%" === r4 && "%" !== e4)
                throw new f("invalid intrinsic syntax, expected opening `%`");
              var n3 = [];
              return F(t4, K, function(t5, e5, r5, i3) {
                n3[n3.length] = r5 ? F(i3, H, "$1") : e5 || t5;
              }), n3;
            }(t3), n2 = r3.length > 0 ? r3[0] : "", i2 = W("%" + n2 + "%", e3), o2 = i2.name, a2 = i2.value, s2 = false, u2 = i2.alias;
            u2 && (n2 = u2[0], q(r3, U([0, 1], u2)));
            for (var c2 = 1, h2 = true; c2 < r3.length; c2 += 1) {
              var p2 = r3[c2], d2 = V(p2, 0, 1), y2 = V(p2, -1);
              if (('"' === d2 || "'" === d2 || "`" === d2 || '"' === y2 || "'" === y2 || "`" === y2) && d2 !== y2)
                throw new f("property names with quotes must have matching quotes");
              if ("constructor" !== p2 && h2 || (s2 = true), C(I, o2 = "%" + (n2 += "." + p2) + "%"))
                a2 = I[o2];
              else if (null != a2) {
                if (!(p2 in a2)) {
                  if (!e3)
                    throw new l("base intrinsic for " + t3 + " exists, but the property is not available.");
                  return;
                }
                if (S && c2 + 1 >= r3.length) {
                  var b2 = S(a2, p2);
                  a2 = (h2 = !!b2) && "get" in b2 && !("originalValue" in b2.get) ? b2.get : a2[p2];
                } else
                  h2 = C(a2, p2), a2 = a2[p2];
                h2 && !s2 && (I[o2] = a2);
              }
            }
            return a2;
          };
        }, 5825: (t2, e2, r2) => {
          "use strict";
          var n = r2(8093);
          t2.exports = n.getPrototypeOf || null;
        }, 2403: (t2) => {
          "use strict";
          t2.exports = "undefined" != typeof Reflect && Reflect.getPrototypeOf || null;
        }, 209: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(2403), o = r2(5825), a = r2(8964);
          t2.exports = i ? function(t3) {
            return i(t3);
          } : o ? function(t3) {
            if (!t3 || "object" !== n(t3) && "function" != typeof t3)
              throw new TypeError("getProto: not an object");
            return o(t3);
          } : a ? function(t3) {
            return a(t3);
          } : null;
        }, 5807: (t2) => {
          "use strict";
          t2.exports = Object.getOwnPropertyDescriptor;
        }, 1464: (t2, e2, r2) => {
          "use strict";
          var n = r2(5807);
          if (n)
            try {
              n([], "length");
            } catch (t3) {
              n = null;
            }
          t2.exports = n;
        }, 3191: (t2, e2, r2) => {
          "use strict";
          var n = r2(988), i = function() {
            return !!n;
          };
          i.hasArrayLengthDefineBug = function() {
            if (!n)
              return null;
            try {
              return 1 !== n([], "length", { value: 1 }).length;
            } catch (t3) {
              return true;
            }
          }, t2.exports = i;
        }, 5510: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = "undefined" != typeof Symbol && Symbol, o = r2(5484);
          t2.exports = function() {
            return "function" == typeof i && "function" == typeof Symbol && "symbol" === n(i("foo")) && "symbol" === n(Symbol("bar")) && o();
          };
        }, 5484: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function() {
            if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols)
              return false;
            if ("symbol" === e2(Symbol.iterator))
              return true;
            var t3 = {}, r2 = Symbol("test"), n = Object(r2);
            if ("string" == typeof r2)
              return false;
            if ("[object Symbol]" !== Object.prototype.toString.call(r2))
              return false;
            if ("[object Symbol]" !== Object.prototype.toString.call(n))
              return false;
            for (var i in t3[r2] = 42, t3)
              return false;
            if ("function" == typeof Object.keys && 0 !== Object.keys(t3).length)
              return false;
            if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(t3).length)
              return false;
            var o = Object.getOwnPropertySymbols(t3);
            if (1 !== o.length || o[0] !== r2)
              return false;
            if (!Object.prototype.propertyIsEnumerable.call(t3, r2))
              return false;
            if ("function" == typeof Object.getOwnPropertyDescriptor) {
              var a = Object.getOwnPropertyDescriptor(t3, r2);
              if (42 !== a.value || true !== a.enumerable)
                return false;
            }
            return true;
          };
        }, 953: (t2, e2, r2) => {
          "use strict";
          var n = r2(5484);
          t2.exports = function() {
            return n() && !!Symbol.toStringTag;
          };
        }, 6936: (t2, e2, r2) => {
          "use strict";
          var n = r2(9732).Buffer, i = r2(7775).Transform;
          function o(t3) {
            i.call(this), this._block = n.allocUnsafe(t3), this._blockSize = t3, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
          }
          r2(1679)(o, i), o.prototype._transform = function(t3, e3, r3) {
            var n2 = null;
            try {
              this.update(t3, e3);
            } catch (t4) {
              n2 = t4;
            }
            r3(n2);
          }, o.prototype._flush = function(t3) {
            var e3 = null;
            try {
              this.push(this.digest());
            } catch (t4) {
              e3 = t4;
            }
            t3(e3);
          };
          var a = "undefined" != typeof Uint8Array, s = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array && ArrayBuffer.isView && (n.prototype instanceof Uint8Array || n.TYPED_ARRAY_SUPPORT);
          o.prototype.update = function(t3, e3) {
            if (this._finalized)
              throw new Error("Digest already called");
            t3 = function(t4, e4) {
              if (t4 instanceof n)
                return t4;
              if ("string" == typeof t4)
                return n.from(t4, e4);
              if (s && ArrayBuffer.isView(t4)) {
                if (0 === t4.byteLength)
                  return n.alloc(0);
                var r4 = n.from(t4.buffer, t4.byteOffset, t4.byteLength);
                if (r4.byteLength === t4.byteLength)
                  return r4;
              }
              if (a && t4 instanceof Uint8Array)
                return n.from(t4);
              if (n.isBuffer(t4) && t4.constructor && "function" == typeof t4.constructor.isBuffer && t4.constructor.isBuffer(t4))
                return n.from(t4);
              throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
            }(t3, e3);
            for (var r3 = this._block, i2 = 0; this._blockOffset + t3.length - i2 >= this._blockSize; ) {
              for (var o2 = this._blockOffset; o2 < this._blockSize; )
                r3[o2++] = t3[i2++];
              this._update(), this._blockOffset = 0;
            }
            for (; i2 < t3.length; )
              r3[this._blockOffset++] = t3[i2++];
            for (var u = 0, c = 8 * t3.length; c > 0; ++u)
              this._length[u] += c, (c = this._length[u] / 4294967296 | 0) > 0 && (this._length[u] -= 4294967296 * c);
            return this;
          }, o.prototype._update = function() {
            throw new Error("_update is not implemented");
          }, o.prototype.digest = function(t3) {
            if (this._finalized)
              throw new Error("Digest already called");
            this._finalized = true;
            var e3 = this._digest();
            void 0 !== t3 && (e3 = e3.toString(t3)), this._block.fill(0), this._blockOffset = 0;
            for (var r3 = 0; r3 < 4; ++r3)
              this._length[r3] = 0;
            return e3;
          }, o.prototype._digest = function() {
            throw new Error("_digest is not implemented");
          }, t2.exports = o;
        }, 2859: (t2, e2, r2) => {
          var n = e2;
          n.utils = r2(4685), n.common = r2(7695), n.sha = r2(690), n.ripemd = r2(601), n.hmac = r2(9313), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
        }, 7695: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(3528);
          function o() {
            this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
          }
          e2.BlockHash = o, o.prototype.update = function(t3, e3) {
            if (t3 = n.toArray(t3, e3), this.pending ? this.pending = this.pending.concat(t3) : this.pending = t3, this.pendingTotal += t3.length, this.pending.length >= this._delta8) {
              var r3 = (t3 = this.pending).length % this._delta8;
              this.pending = t3.slice(t3.length - r3, t3.length), 0 === this.pending.length && (this.pending = null), t3 = n.join32(t3, 0, t3.length - r3, this.endian);
              for (var i2 = 0; i2 < t3.length; i2 += this._delta32)
                this._update(t3, i2, i2 + this._delta32);
            }
            return this;
          }, o.prototype.digest = function(t3) {
            return this.update(this._pad()), i(null === this.pending), this._digest(t3);
          }, o.prototype._pad = function() {
            var t3 = this.pendingTotal, e3 = this._delta8, r3 = e3 - (t3 + this.padLength) % e3, n2 = new Array(r3 + this.padLength);
            n2[0] = 128;
            for (var i2 = 1; i2 < r3; i2++)
              n2[i2] = 0;
            if (t3 <<= 3, "big" === this.endian) {
              for (var o2 = 8; o2 < this.padLength; o2++)
                n2[i2++] = 0;
              n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = t3 >>> 24 & 255, n2[i2++] = t3 >>> 16 & 255, n2[i2++] = t3 >>> 8 & 255, n2[i2++] = 255 & t3;
            } else
              for (n2[i2++] = 255 & t3, n2[i2++] = t3 >>> 8 & 255, n2[i2++] = t3 >>> 16 & 255, n2[i2++] = t3 >>> 24 & 255, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, o2 = 8; o2 < this.padLength; o2++)
                n2[i2++] = 0;
            return n2;
          };
        }, 9313: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(3528);
          function o(t3, e3, r3) {
            if (!(this instanceof o))
              return new o(t3, e3, r3);
            this.Hash = t3, this.blockSize = t3.blockSize / 8, this.outSize = t3.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(e3, r3));
          }
          t2.exports = o, o.prototype._init = function(t3) {
            t3.length > this.blockSize && (t3 = new this.Hash().update(t3).digest()), i(t3.length <= this.blockSize);
            for (var e3 = t3.length; e3 < this.blockSize; e3++)
              t3.push(0);
            for (e3 = 0; e3 < t3.length; e3++)
              t3[e3] ^= 54;
            for (this.inner = new this.Hash().update(t3), e3 = 0; e3 < t3.length; e3++)
              t3[e3] ^= 106;
            this.outer = new this.Hash().update(t3);
          }, o.prototype.update = function(t3, e3) {
            return this.inner.update(t3, e3), this;
          }, o.prototype.digest = function(t3) {
            return this.outer.update(this.inner.digest()), this.outer.digest(t3);
          };
        }, 601: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(7695), o = n.rotl32, a = n.sum32, s = n.sum32_3, u = n.sum32_4, c = i.BlockHash;
          function f() {
            if (!(this instanceof f))
              return new f();
            c.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
          }
          function l(t3, e3, r3, n2) {
            return t3 <= 15 ? e3 ^ r3 ^ n2 : t3 <= 31 ? e3 & r3 | ~e3 & n2 : t3 <= 47 ? (e3 | ~r3) ^ n2 : t3 <= 63 ? e3 & n2 | r3 & ~n2 : e3 ^ (r3 | ~n2);
          }
          function h(t3) {
            return t3 <= 15 ? 0 : t3 <= 31 ? 1518500249 : t3 <= 47 ? 1859775393 : t3 <= 63 ? 2400959708 : 2840853838;
          }
          function p(t3) {
            return t3 <= 15 ? 1352829926 : t3 <= 31 ? 1548603684 : t3 <= 47 ? 1836072691 : t3 <= 63 ? 2053994217 : 0;
          }
          n.inherits(f, c), e2.ripemd160 = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 192, f.padLength = 64, f.prototype._update = function(t3, e3) {
            for (var r3 = this.h[0], n2 = this.h[1], i2 = this.h[2], c2 = this.h[3], f2 = this.h[4], v = r3, g = n2, _ = i2, w = c2, S = f2, O = 0; O < 80; O++) {
              var j = a(o(u(r3, l(O, n2, i2, c2), t3[d[O] + e3], h(O)), b[O]), f2);
              r3 = f2, f2 = c2, c2 = o(i2, 10), i2 = n2, n2 = j, j = a(o(u(v, l(79 - O, g, _, w), t3[y[O] + e3], p(O)), m[O]), S), v = S, S = w, w = o(_, 10), _ = g, g = j;
            }
            j = s(this.h[1], i2, w), this.h[1] = s(this.h[2], c2, S), this.h[2] = s(this.h[3], f2, v), this.h[3] = s(this.h[4], r3, g), this.h[4] = s(this.h[0], n2, _), this.h[0] = j;
          }, f.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
          };
          var d = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], y = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], b = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], m = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
        }, 690: (t2, e2, r2) => {
          "use strict";
          e2.sha1 = r2(4042), e2.sha224 = r2(3329), e2.sha256 = r2(2344), e2.sha384 = r2(3420), e2.sha512 = r2(6749);
        }, 4042: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(7695), o = r2(4104), a = n.rotl32, s = n.sum32, u = n.sum32_5, c = o.ft_1, f = i.BlockHash, l = [1518500249, 1859775393, 2400959708, 3395469782];
          function h() {
            if (!(this instanceof h))
              return new h();
            f.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
          }
          n.inherits(h, f), t2.exports = h, h.blockSize = 512, h.outSize = 160, h.hmacStrength = 80, h.padLength = 64, h.prototype._update = function(t3, e3) {
            for (var r3 = this.W, n2 = 0; n2 < 16; n2++)
              r3[n2] = t3[e3 + n2];
            for (; n2 < r3.length; n2++)
              r3[n2] = a(r3[n2 - 3] ^ r3[n2 - 8] ^ r3[n2 - 14] ^ r3[n2 - 16], 1);
            var i2 = this.h[0], o2 = this.h[1], f2 = this.h[2], h2 = this.h[3], p = this.h[4];
            for (n2 = 0; n2 < r3.length; n2++) {
              var d = ~~(n2 / 20), y = u(a(i2, 5), c(d, o2, f2, h2), p, r3[n2], l[d]);
              p = h2, h2 = f2, f2 = a(o2, 30), o2 = i2, i2 = y;
            }
            this.h[0] = s(this.h[0], i2), this.h[1] = s(this.h[1], o2), this.h[2] = s(this.h[2], f2), this.h[3] = s(this.h[3], h2), this.h[4] = s(this.h[4], p);
          }, h.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        }, 3329: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(2344);
          function o() {
            if (!(this instanceof o))
              return new o();
            i.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
          }
          n.inherits(o, i), t2.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
          };
        }, 2344: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(7695), o = r2(4104), a = r2(3528), s = n.sum32, u = n.sum32_4, c = n.sum32_5, f = o.ch32, l = o.maj32, h = o.s0_256, p = o.s1_256, d = o.g0_256, y = o.g1_256, b = i.BlockHash, m = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
          function v() {
            if (!(this instanceof v))
              return new v();
            b.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = m, this.W = new Array(64);
          }
          n.inherits(v, b), t2.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, v.padLength = 64, v.prototype._update = function(t3, e3) {
            for (var r3 = this.W, n2 = 0; n2 < 16; n2++)
              r3[n2] = t3[e3 + n2];
            for (; n2 < r3.length; n2++)
              r3[n2] = u(y(r3[n2 - 2]), r3[n2 - 7], d(r3[n2 - 15]), r3[n2 - 16]);
            var i2 = this.h[0], o2 = this.h[1], b2 = this.h[2], m2 = this.h[3], v2 = this.h[4], g = this.h[5], _ = this.h[6], w = this.h[7];
            for (a(this.k.length === r3.length), n2 = 0; n2 < r3.length; n2++) {
              var S = c(w, p(v2), f(v2, g, _), this.k[n2], r3[n2]), O = s(h(i2), l(i2, o2, b2));
              w = _, _ = g, g = v2, v2 = s(m2, S), m2 = b2, b2 = o2, o2 = i2, i2 = s(S, O);
            }
            this.h[0] = s(this.h[0], i2), this.h[1] = s(this.h[1], o2), this.h[2] = s(this.h[2], b2), this.h[3] = s(this.h[3], m2), this.h[4] = s(this.h[4], v2), this.h[5] = s(this.h[5], g), this.h[6] = s(this.h[6], _), this.h[7] = s(this.h[7], w);
          }, v.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        }, 3420: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(6749);
          function o() {
            if (!(this instanceof o))
              return new o();
            i.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
          }
          n.inherits(o, i), t2.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
          };
        }, 6749: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685), i = r2(7695), o = r2(3528), a = n.rotr64_hi, s = n.rotr64_lo, u = n.shr64_hi, c = n.shr64_lo, f = n.sum64, l = n.sum64_hi, h = n.sum64_lo, p = n.sum64_4_hi, d = n.sum64_4_lo, y = n.sum64_5_hi, b = n.sum64_5_lo, m = i.BlockHash, v = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
          function g() {
            if (!(this instanceof g))
              return new g();
            m.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = v, this.W = new Array(160);
          }
          function _(t3, e3, r3, n2, i2) {
            var o2 = t3 & r3 ^ ~t3 & i2;
            return o2 < 0 && (o2 += 4294967296), o2;
          }
          function w(t3, e3, r3, n2, i2, o2) {
            var a2 = e3 & n2 ^ ~e3 & o2;
            return a2 < 0 && (a2 += 4294967296), a2;
          }
          function S(t3, e3, r3, n2, i2) {
            var o2 = t3 & r3 ^ t3 & i2 ^ r3 & i2;
            return o2 < 0 && (o2 += 4294967296), o2;
          }
          function O(t3, e3, r3, n2, i2, o2) {
            var a2 = e3 & n2 ^ e3 & o2 ^ n2 & o2;
            return a2 < 0 && (a2 += 4294967296), a2;
          }
          function j(t3, e3) {
            var r3 = a(t3, e3, 28) ^ a(e3, t3, 2) ^ a(e3, t3, 7);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          function $(t3, e3) {
            var r3 = s(t3, e3, 28) ^ s(e3, t3, 2) ^ s(e3, t3, 7);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          function E(t3, e3) {
            var r3 = s(t3, e3, 14) ^ s(t3, e3, 18) ^ s(e3, t3, 9);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          function A(t3, e3) {
            var r3 = a(t3, e3, 1) ^ a(t3, e3, 8) ^ u(t3, e3, 7);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          function P(t3, e3) {
            var r3 = s(t3, e3, 1) ^ s(t3, e3, 8) ^ c(t3, e3, 7);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          function x(t3, e3) {
            var r3 = s(t3, e3, 19) ^ s(e3, t3, 29) ^ c(t3, e3, 6);
            return r3 < 0 && (r3 += 4294967296), r3;
          }
          n.inherits(g, m), t2.exports = g, g.blockSize = 1024, g.outSize = 512, g.hmacStrength = 192, g.padLength = 128, g.prototype._prepareBlock = function(t3, e3) {
            for (var r3 = this.W, n2 = 0; n2 < 32; n2++)
              r3[n2] = t3[e3 + n2];
            for (; n2 < r3.length; n2 += 2) {
              var i2 = (b2 = r3[n2 - 4], m2 = r3[n2 - 3], v2 = void 0, (v2 = a(b2, m2, 19) ^ a(m2, b2, 29) ^ u(b2, m2, 6)) < 0 && (v2 += 4294967296), v2), o2 = x(r3[n2 - 4], r3[n2 - 3]), s2 = r3[n2 - 14], c2 = r3[n2 - 13], f2 = A(r3[n2 - 30], r3[n2 - 29]), l2 = P(r3[n2 - 30], r3[n2 - 29]), h2 = r3[n2 - 32], y2 = r3[n2 - 31];
              r3[n2] = p(i2, o2, s2, c2, f2, l2, h2, y2), r3[n2 + 1] = d(i2, o2, s2, c2, f2, l2, h2, y2);
            }
            var b2, m2, v2;
          }, g.prototype._update = function(t3, e3) {
            this._prepareBlock(t3, e3);
            var r3, n2, i2, s2 = this.W, u2 = this.h[0], c2 = this.h[1], p2 = this.h[2], d2 = this.h[3], m2 = this.h[4], v2 = this.h[5], g2 = this.h[6], A2 = this.h[7], P2 = this.h[8], x2 = this.h[9], k = this.h[10], M = this.h[11], T = this.h[12], B = this.h[13], I = this.h[14], R = this.h[15];
            o(this.k.length === s2.length);
            for (var N = 0; N < s2.length; N += 2) {
              var D = I, L = R, C = (i2 = void 0, (i2 = a(r3 = P2, n2 = x2, 14) ^ a(r3, n2, 18) ^ a(n2, r3, 9)) < 0 && (i2 += 4294967296), i2), U = E(P2, x2), q = _(P2, 0, k, 0, T), F = w(0, x2, 0, M, 0, B), V = this.k[N], z = this.k[N + 1], K = s2[N], H = s2[N + 1], W = y(D, L, C, U, q, F, V, z, K, H), J = b(D, L, C, U, q, F, V, z, K, H);
              D = j(u2, c2), L = $(u2, c2), C = S(u2, 0, p2, 0, m2), U = O(0, c2, 0, d2, 0, v2);
              var G = l(D, L, C, U), Y = h(D, L, C, U);
              I = T, R = B, T = k, B = M, k = P2, M = x2, P2 = l(g2, A2, W, J), x2 = h(A2, A2, W, J), g2 = m2, A2 = v2, m2 = p2, v2 = d2, p2 = u2, d2 = c2, u2 = l(W, J, G, Y), c2 = h(W, J, G, Y);
            }
            f(this.h, 0, u2, c2), f(this.h, 2, p2, d2), f(this.h, 4, m2, v2), f(this.h, 6, g2, A2), f(this.h, 8, P2, x2), f(this.h, 10, k, M), f(this.h, 12, T, B), f(this.h, 14, I, R);
          }, g.prototype._digest = function(t3) {
            return "hex" === t3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        }, 4104: (t2, e2, r2) => {
          "use strict";
          var n = r2(4685).rotr32;
          function i(t3, e3, r3) {
            return t3 & e3 ^ ~t3 & r3;
          }
          function o(t3, e3, r3) {
            return t3 & e3 ^ t3 & r3 ^ e3 & r3;
          }
          function a(t3, e3, r3) {
            return t3 ^ e3 ^ r3;
          }
          e2.ft_1 = function(t3, e3, r3, n2) {
            return 0 === t3 ? i(e3, r3, n2) : 1 === t3 || 3 === t3 ? a(e3, r3, n2) : 2 === t3 ? o(e3, r3, n2) : void 0;
          }, e2.ch32 = i, e2.maj32 = o, e2.p32 = a, e2.s0_256 = function(t3) {
            return n(t3, 2) ^ n(t3, 13) ^ n(t3, 22);
          }, e2.s1_256 = function(t3) {
            return n(t3, 6) ^ n(t3, 11) ^ n(t3, 25);
          }, e2.g0_256 = function(t3) {
            return n(t3, 7) ^ n(t3, 18) ^ t3 >>> 3;
          }, e2.g1_256 = function(t3) {
            return n(t3, 17) ^ n(t3, 19) ^ t3 >>> 10;
          };
        }, 4685: (t2, e2, r2) => {
          "use strict";
          var n = r2(3528), i = r2(1679);
          function o(t3, e3) {
            return 55296 == (64512 & t3.charCodeAt(e3)) && !(e3 < 0 || e3 + 1 >= t3.length) && 56320 == (64512 & t3.charCodeAt(e3 + 1));
          }
          function a(t3) {
            return (t3 >>> 24 | t3 >>> 8 & 65280 | t3 << 8 & 16711680 | (255 & t3) << 24) >>> 0;
          }
          function s(t3) {
            return 1 === t3.length ? "0" + t3 : t3;
          }
          function u(t3) {
            return 7 === t3.length ? "0" + t3 : 6 === t3.length ? "00" + t3 : 5 === t3.length ? "000" + t3 : 4 === t3.length ? "0000" + t3 : 3 === t3.length ? "00000" + t3 : 2 === t3.length ? "000000" + t3 : 1 === t3.length ? "0000000" + t3 : t3;
          }
          e2.inherits = i, e2.toArray = function(t3, e3) {
            if (Array.isArray(t3))
              return t3.slice();
            if (!t3)
              return [];
            var r3 = [];
            if ("string" == typeof t3)
              if (e3) {
                if ("hex" === e3)
                  for ((t3 = t3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t3 = "0" + t3), i2 = 0; i2 < t3.length; i2 += 2)
                    r3.push(parseInt(t3[i2] + t3[i2 + 1], 16));
              } else
                for (var n2 = 0, i2 = 0; i2 < t3.length; i2++) {
                  var a2 = t3.charCodeAt(i2);
                  a2 < 128 ? r3[n2++] = a2 : a2 < 2048 ? (r3[n2++] = a2 >> 6 | 192, r3[n2++] = 63 & a2 | 128) : o(t3, i2) ? (a2 = 65536 + ((1023 & a2) << 10) + (1023 & t3.charCodeAt(++i2)), r3[n2++] = a2 >> 18 | 240, r3[n2++] = a2 >> 12 & 63 | 128, r3[n2++] = a2 >> 6 & 63 | 128, r3[n2++] = 63 & a2 | 128) : (r3[n2++] = a2 >> 12 | 224, r3[n2++] = a2 >> 6 & 63 | 128, r3[n2++] = 63 & a2 | 128);
                }
            else
              for (i2 = 0; i2 < t3.length; i2++)
                r3[i2] = 0 | t3[i2];
            return r3;
          }, e2.toHex = function(t3) {
            for (var e3 = "", r3 = 0; r3 < t3.length; r3++)
              e3 += s(t3[r3].toString(16));
            return e3;
          }, e2.htonl = a, e2.toHex32 = function(t3, e3) {
            for (var r3 = "", n2 = 0; n2 < t3.length; n2++) {
              var i2 = t3[n2];
              "little" === e3 && (i2 = a(i2)), r3 += u(i2.toString(16));
            }
            return r3;
          }, e2.zero2 = s, e2.zero8 = u, e2.join32 = function(t3, e3, r3, i2) {
            var o2 = r3 - e3;
            n(o2 % 4 == 0);
            for (var a2 = new Array(o2 / 4), s2 = 0, u2 = e3; s2 < a2.length; s2++, u2 += 4) {
              var c;
              c = "big" === i2 ? t3[u2] << 24 | t3[u2 + 1] << 16 | t3[u2 + 2] << 8 | t3[u2 + 3] : t3[u2 + 3] << 24 | t3[u2 + 2] << 16 | t3[u2 + 1] << 8 | t3[u2], a2[s2] = c >>> 0;
            }
            return a2;
          }, e2.split32 = function(t3, e3) {
            for (var r3 = new Array(4 * t3.length), n2 = 0, i2 = 0; n2 < t3.length; n2++, i2 += 4) {
              var o2 = t3[n2];
              "big" === e3 ? (r3[i2] = o2 >>> 24, r3[i2 + 1] = o2 >>> 16 & 255, r3[i2 + 2] = o2 >>> 8 & 255, r3[i2 + 3] = 255 & o2) : (r3[i2 + 3] = o2 >>> 24, r3[i2 + 2] = o2 >>> 16 & 255, r3[i2 + 1] = o2 >>> 8 & 255, r3[i2] = 255 & o2);
            }
            return r3;
          }, e2.rotr32 = function(t3, e3) {
            return t3 >>> e3 | t3 << 32 - e3;
          }, e2.rotl32 = function(t3, e3) {
            return t3 << e3 | t3 >>> 32 - e3;
          }, e2.sum32 = function(t3, e3) {
            return t3 + e3 >>> 0;
          }, e2.sum32_3 = function(t3, e3, r3) {
            return t3 + e3 + r3 >>> 0;
          }, e2.sum32_4 = function(t3, e3, r3, n2) {
            return t3 + e3 + r3 + n2 >>> 0;
          }, e2.sum32_5 = function(t3, e3, r3, n2, i2) {
            return t3 + e3 + r3 + n2 + i2 >>> 0;
          }, e2.sum64 = function(t3, e3, r3, n2) {
            var i2 = t3[e3], o2 = n2 + t3[e3 + 1] >>> 0, a2 = (o2 < n2 ? 1 : 0) + r3 + i2;
            t3[e3] = a2 >>> 0, t3[e3 + 1] = o2;
          }, e2.sum64_hi = function(t3, e3, r3, n2) {
            return (e3 + n2 >>> 0 < e3 ? 1 : 0) + t3 + r3 >>> 0;
          }, e2.sum64_lo = function(t3, e3, r3, n2) {
            return e3 + n2 >>> 0;
          }, e2.sum64_4_hi = function(t3, e3, r3, n2, i2, o2, a2, s2) {
            var u2 = 0, c = e3;
            return u2 += (c = c + n2 >>> 0) < e3 ? 1 : 0, u2 += (c = c + o2 >>> 0) < o2 ? 1 : 0, t3 + r3 + i2 + a2 + (u2 += (c = c + s2 >>> 0) < s2 ? 1 : 0) >>> 0;
          }, e2.sum64_4_lo = function(t3, e3, r3, n2, i2, o2, a2, s2) {
            return e3 + n2 + o2 + s2 >>> 0;
          }, e2.sum64_5_hi = function(t3, e3, r3, n2, i2, o2, a2, s2, u2, c) {
            var f = 0, l = e3;
            return f += (l = l + n2 >>> 0) < e3 ? 1 : 0, f += (l = l + o2 >>> 0) < o2 ? 1 : 0, f += (l = l + s2 >>> 0) < s2 ? 1 : 0, t3 + r3 + i2 + a2 + u2 + (f += (l = l + c >>> 0) < c ? 1 : 0) >>> 0;
          }, e2.sum64_5_lo = function(t3, e3, r3, n2, i2, o2, a2, s2, u2, c) {
            return e3 + n2 + o2 + s2 + c >>> 0;
          }, e2.rotr64_hi = function(t3, e3, r3) {
            return (e3 << 32 - r3 | t3 >>> r3) >>> 0;
          }, e2.rotr64_lo = function(t3, e3, r3) {
            return (t3 << 32 - r3 | e3 >>> r3) >>> 0;
          }, e2.shr64_hi = function(t3, e3, r3) {
            return t3 >>> r3;
          }, e2.shr64_lo = function(t3, e3, r3) {
            return (t3 << 32 - r3 | e3 >>> r3) >>> 0;
          };
        }, 5994: (t2, e2, r2) => {
          "use strict";
          var n = Function.prototype.call, i = Object.prototype.hasOwnProperty, o = r2(2354);
          t2.exports = o.call(n, i);
        }, 6934: (t2, e2, r2) => {
          "use strict";
          var n = r2(2859), i = r2(6706), o = r2(3528);
          function a(t3) {
            if (!(this instanceof a))
              return new a(t3);
            this.hash = t3.hash, this.predResist = !!t3.predResist, this.outLen = this.hash.outSize, this.minEntropy = t3.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var e3 = i.toArray(t3.entropy, t3.entropyEnc || "hex"), r3 = i.toArray(t3.nonce, t3.nonceEnc || "hex"), n2 = i.toArray(t3.pers, t3.persEnc || "hex");
            o(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e3, r3, n2);
          }
          t2.exports = a, a.prototype._init = function(t3, e3, r3) {
            var n2 = t3.concat(e3).concat(r3);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i2 = 0; i2 < this.V.length; i2++)
              this.K[i2] = 0, this.V[i2] = 1;
            this._update(n2), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, a.prototype._hmac = function() {
            return new n.hmac(this.hash, this.K);
          }, a.prototype._update = function(t3) {
            var e3 = this._hmac().update(this.V).update([0]);
            t3 && (e3 = e3.update(t3)), this.K = e3.digest(), this.V = this._hmac().update(this.V).digest(), t3 && (this.K = this._hmac().update(this.V).update([1]).update(t3).digest(), this.V = this._hmac().update(this.V).digest());
          }, a.prototype.reseed = function(t3, e3, r3, n2) {
            "string" != typeof e3 && (n2 = r3, r3 = e3, e3 = null), t3 = i.toArray(t3, e3), r3 = i.toArray(r3, n2), o(t3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(t3.concat(r3 || [])), this._reseed = 1;
          }, a.prototype.generate = function(t3, e3, r3, n2) {
            if (this._reseed > this.reseedInterval)
              throw new Error("Reseed is required");
            "string" != typeof e3 && (n2 = r3, r3 = e3, e3 = null), r3 && (r3 = i.toArray(r3, n2 || "hex"), this._update(r3));
            for (var o2 = []; o2.length < t3; )
              this.V = this._hmac().update(this.V).digest(), o2 = o2.concat(this.V);
            var a2 = o2.slice(0, t3);
            return this._update(r3), this._reseed++, i.encode(a2, e3);
          };
        }, 2486: (t2, e2) => {
          e2.read = function(t3, e3, r2, n, i) {
            var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, c = u >> 1, f = -7, l = r2 ? i - 1 : 0, h = r2 ? -1 : 1, p = t3[e3 + l];
            for (l += h, o = p & (1 << -f) - 1, p >>= -f, f += s; f > 0; o = 256 * o + t3[e3 + l], l += h, f -= 8)
              ;
            for (a = o & (1 << -f) - 1, o >>= -f, f += n; f > 0; a = 256 * a + t3[e3 + l], l += h, f -= 8)
              ;
            if (0 === o)
              o = 1 - c;
            else {
              if (o === u)
                return a ? NaN : 1 / 0 * (p ? -1 : 1);
              a += Math.pow(2, n), o -= c;
            }
            return (p ? -1 : 1) * a * Math.pow(2, o - n);
          }, e2.write = function(t3, e3, r2, n, i, o) {
            var a, s, u, c = 8 * o - i - 1, f = (1 << c) - 1, l = f >> 1, h = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p = n ? 0 : o - 1, d = n ? 1 : -1, y = e3 < 0 || 0 === e3 && 1 / e3 < 0 ? 1 : 0;
            for (e3 = Math.abs(e3), isNaN(e3) || e3 === 1 / 0 ? (s = isNaN(e3) ? 1 : 0, a = f) : (a = Math.floor(Math.log(e3) / Math.LN2), e3 * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (e3 += a + l >= 1 ? h / u : h * Math.pow(2, 1 - l)) * u >= 2 && (a++, u /= 2), a + l >= f ? (s = 0, a = f) : a + l >= 1 ? (s = (e3 * u - 1) * Math.pow(2, i), a += l) : (s = e3 * Math.pow(2, l - 1) * Math.pow(2, i), a = 0)); i >= 8; t3[r2 + p] = 255 & s, p += d, s /= 256, i -= 8)
              ;
            for (a = a << i | s, c += i; c > 0; t3[r2 + p] = 255 & a, p += d, a /= 256, c -= 8)
              ;
            t3[r2 + p - d] |= 128 * y;
          };
        }, 1679: (t2) => {
          "function" == typeof Object.create ? t2.exports = function(t3, e2) {
            e2 && (t3.super_ = e2, t3.prototype = Object.create(e2.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));
          } : t2.exports = function(t3, e2) {
            if (e2) {
              t3.super_ = e2;
              var r2 = function() {
              };
              r2.prototype = e2.prototype, t3.prototype = new r2(), t3.prototype.constructor = t3;
            }
          };
        }, 5899: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(953)(), o = r2(3071)("Object.prototype.toString"), a = function(t3) {
            return !(i && t3 && "object" === n(t3) && Symbol.toStringTag in t3) && "[object Arguments]" === o(t3);
          }, s = function(t3) {
            return !!a(t3) || null !== t3 && "object" === n(t3) && "length" in t3 && "number" == typeof t3.length && t3.length >= 0 && "[object Array]" !== o(t3) && "callee" in t3 && "[object Function]" === o(t3.callee);
          }, u = function() {
            return a(arguments);
          }();
          a.isLegacyArguments = s, t2.exports = u ? a : s;
        }, 9809: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          var r2, n, i = Function.prototype.toString, o = "object" === ("undefined" == typeof Reflect ? "undefined" : e2(Reflect)) && null !== Reflect && Reflect.apply;
          if ("function" == typeof o && "function" == typeof Object.defineProperty)
            try {
              r2 = Object.defineProperty({}, "length", { get: function() {
                throw n;
              } }), n = {}, o(function() {
                throw 42;
              }, null, r2);
            } catch (t3) {
              t3 !== n && (o = null);
            }
          else
            o = null;
          var a = /^\s*class\b/, s = function(t3) {
            try {
              var e3 = i.call(t3);
              return a.test(e3);
            } catch (t4) {
              return false;
            }
          }, u = function(t3) {
            try {
              return !s(t3) && (i.call(t3), true);
            } catch (t4) {
              return false;
            }
          }, c = Object.prototype.toString, f = "function" == typeof Symbol && !!Symbol.toStringTag, l = !(0 in [,]), h = function() {
            return false;
          };
          if ("object" === ("undefined" == typeof document ? "undefined" : e2(document))) {
            var p = document.all;
            c.call(p) === c.call(document.all) && (h = function(t3) {
              if ((l || !t3) && (void 0 === t3 || "object" === e2(t3)))
                try {
                  var r3 = c.call(t3);
                  return ("[object HTMLAllCollection]" === r3 || "[object HTML document.all class]" === r3 || "[object HTMLCollection]" === r3 || "[object Object]" === r3) && null == t3("");
                } catch (t4) {
                }
              return false;
            });
          }
          t2.exports = o ? function(t3) {
            if (h(t3))
              return true;
            if (!t3)
              return false;
            if ("function" != typeof t3 && "object" !== e2(t3))
              return false;
            try {
              o(t3, null, r2);
            } catch (t4) {
              if (t4 !== n)
                return false;
            }
            return !s(t3) && u(t3);
          } : function(t3) {
            if (h(t3))
              return true;
            if (!t3)
              return false;
            if ("function" != typeof t3 && "object" !== e2(t3))
              return false;
            if (f)
              return u(t3);
            if (s(t3))
              return false;
            var r3 = c.call(t3);
            return !("[object Function]" !== r3 && "[object GeneratorFunction]" !== r3 && !/^\[object HTML/.test(r3)) && u(t3);
          };
        }, 1905: (t2, e2, r2) => {
          "use strict";
          var n, i = r2(3071), o = r2(2724)(/^\s*(?:function)?\*/), a = r2(953)(), s = r2(209), u = i("Object.prototype.toString"), c = i("Function.prototype.toString");
          t2.exports = function(t3) {
            if ("function" != typeof t3)
              return false;
            if (o(c(t3)))
              return true;
            if (!a)
              return "[object GeneratorFunction]" === u(t3);
            if (!s)
              return false;
            if (void 0 === n) {
              var e3 = function() {
                if (!a)
                  return false;
                try {
                  return Function("return function*() {}")();
                } catch (t4) {
                }
              }();
              n = !!e3 && s(e3);
            }
            return s(t3) === n;
          };
        }, 118: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            return t3 != t3;
          };
        }, 6062: (t2, e2, r2) => {
          "use strict";
          var n = r2(9122), i = r2(2273), o = r2(118), a = r2(4183), s = r2(7878), u = n(a(), Number);
          i(u, { getPolyfill: a, implementation: o, shim: s }), t2.exports = u;
        }, 4183: (t2, e2, r2) => {
          "use strict";
          var n = r2(118);
          t2.exports = function() {
            return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : n;
          };
        }, 7878: (t2, e2, r2) => {
          "use strict";
          var n = r2(2273), i = r2(4183);
          t2.exports = function() {
            var t3 = i();
            return n(Number, { isNaN: t3 }, { isNaN: function() {
              return Number.isNaN !== t3;
            } }), t3;
          };
        }, 9344: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i, o = r2(3071), a = r2(953)(), s = r2(5994), u = r2(1464);
          if (a) {
            var c = o("RegExp.prototype.exec"), f = {}, l = function() {
              throw f;
            }, h = { toString: l, valueOf: l };
            "symbol" === n(Symbol.toPrimitive) && (h[Symbol.toPrimitive] = l), i = function(t3) {
              if (!t3 || "object" !== n(t3))
                return false;
              var e3 = u(t3, "lastIndex");
              if (!e3 || !s(e3, "value"))
                return false;
              try {
                c(t3, h);
              } catch (t4) {
                return t4 === f;
              }
            };
          } else {
            var p = o("Object.prototype.toString");
            i = function(t3) {
              return !(!t3 || "object" !== n(t3) && "function" != typeof t3) && "[object RegExp]" === p(t3);
            };
          }
          t2.exports = i;
        }, 7911: (t2, e2, r2) => {
          "use strict";
          var n = r2(9834);
          t2.exports = function(t3) {
            return !!n(t3);
          };
        }, 5455: (t2) => {
          var e2 = {}.toString;
          t2.exports = Array.isArray || function(t3) {
            return "[object Array]" == e2.call(t3);
          };
        }, 8297: (t2) => {
          "use strict";
          function e2(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = n(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var i2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return i2 >= t3.length ? { done: true } : { done: false, value: t3[i2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function r2(t3) {
            return r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, r2(t3);
          }
          function n(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return i(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? i(t3, e3) : void 0;
            }
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function o(t3, e3, r3) {
            if (s())
              return Reflect.construct.apply(null, arguments);
            var n2 = [null];
            n2.push.apply(n2, e3);
            var i2 = new (t3.bind.apply(t3, n2))();
            return r3 && a(i2, r3.prototype), i2;
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          function s() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (s = function() {
              return !!t3;
            })();
          }
          function u() {
            this._pres = /* @__PURE__ */ new Map(), this._posts = /* @__PURE__ */ new Map();
          }
          function c(t3, e3, r3, n2, i2, o2, a2) {
            return o2.useErrorHandlers ? t3.execPost(r3, n2, i2, { error: e3 }, function(t4) {
              return "function" == typeof a2 && a2(t4);
            }) : "function" == typeof a2 && a2(e3);
          }
          function f(t3, e3, r3, n2) {
            var i2;
            try {
              i2 = t3.apply(e3, r3);
            } catch (t4) {
              return n2(t4);
            }
            l(i2) && i2.then(function() {
              return n2();
            }, function(t4) {
              return n2(t4);
            });
          }
          function l(t3) {
            return "object" === r2(t3) && null !== t3 && "function" == typeof t3.then;
          }
          function h(t3) {
            var e3 = false, r3 = this;
            return function() {
              var n2 = arguments;
              if (!e3)
                return e3 = true, p(function() {
                  return t3.apply(r3, n2);
                });
            };
          }
          u.skipWrappedFunction = function() {
            if (!(this instanceof u.skipWrappedFunction))
              return o(u.skipWrappedFunction, Array.prototype.slice.call(arguments));
            this.args = Array.prototype.slice.call(arguments);
          }, u.overwriteResult = function() {
            if (!(this instanceof u.overwriteResult))
              return o(u.overwriteResult, Array.prototype.slice.call(arguments));
            this.args = Array.prototype.slice.call(arguments);
          }, u.prototype.execPre = function(t3, e3, r3, n2) {
            3 === arguments.length && (n2 = r3, r3 = []);
            var i2 = this._pres.get(t3) || [], o2 = i2.length, a2 = i2.numAsync || 0, s2 = 0, c2 = a2, d2 = false, y = r3, b = null;
            if (!o2)
              return p(function() {
                n2(null);
              });
            function m() {
              if (!(s2 >= o2)) {
                var t4 = i2[s2];
                if (t4.isAsync) {
                  var r4 = [h(v), h(function(t5) {
                    if (t5) {
                      if (d2)
                        return;
                      if (!(t5 instanceof u.skipWrappedFunction))
                        return d2 = true, n2(t5);
                      b = t5;
                    }
                    if (0 == --c2 && s2 >= o2)
                      return n2(b);
                  })];
                  f(t4.fn, e3, r4, r4[0]);
                } else if (t4.fn.length > 0) {
                  for (var a3 = [h(v)], g = arguments.length >= 2 ? arguments : [null].concat(y), _ = 1; _ < g.length; ++_)
                    _ === g.length - 1 && "function" == typeof g[_] || a3.push(g[_]);
                  f(t4.fn, e3, a3, a3[0]);
                } else {
                  var w = null;
                  try {
                    w = t4.fn.call(e3);
                  } catch (t5) {
                    if (null != t5)
                      return n2(t5);
                  }
                  if (l(w))
                    w.then(function() {
                      return v();
                    }, function(t5) {
                      return v(t5);
                    });
                  else {
                    if (++s2 >= o2)
                      return c2 > 0 ? void 0 : p(function() {
                        n2(b);
                      });
                    m();
                  }
                }
              }
            }
            function v(t4) {
              if (t4) {
                if (d2)
                  return;
                if (!(t4 instanceof u.skipWrappedFunction))
                  return d2 = true, n2(t4);
                b = t4;
              }
              if (++s2 >= o2)
                return c2 > 0 ? void 0 : n2(b);
              m.apply(e3, arguments);
            }
            m.apply(null, [null].concat(r3));
          }, u.prototype.execPreSync = function(t3, e3, r3) {
            for (var n2 = this._pres.get(t3) || [], i2 = n2.length, o2 = 0; o2 < i2; ++o2)
              n2[o2].fn.apply(e3, r3 || []);
          }, u.prototype.execPost = function(t3, e3, r3, n2, i2) {
            arguments.length < 5 && (i2 = n2, n2 = null);
            var o2 = this._posts.get(t3) || [], a2 = o2.length, s2 = 0, c2 = null;
            if (n2 && n2.error && (c2 = n2.error), !a2)
              return p(function() {
                i2.apply(null, [c2].concat(r3));
              });
            !function t4() {
              for (var n3 = o2[s2].fn, p2 = 0, y = r3.length, b = [], m = 0; m < y; ++m)
                p2 += r3[m] && r3[m]._kareemIgnore ? 0 : 1, r3[m] && r3[m]._kareemIgnore || b.push(r3[m]);
              if (c2)
                if (d(o2[s2], p2)) {
                  var v = h(function(e4) {
                    if (e4) {
                      if (e4 instanceof u.overwriteResult)
                        return r3 = e4.args, ++s2 >= a2 ? i2.call(null, c2) : t4();
                      c2 = e4;
                    }
                    if (++s2 >= a2)
                      return i2.call(null, c2);
                    t4();
                  });
                  f(n3, e3, [c2].concat(b).concat([v]), v);
                } else {
                  if (++s2 >= a2)
                    return i2.call(null, c2);
                  t4();
                }
              else {
                var g = h(function(e4) {
                  return e4 ? e4 instanceof u.overwriteResult ? (r3 = e4.args, ++s2 >= a2 ? i2.apply(null, [null].concat(r3)) : t4()) : (c2 = e4, t4()) : ++s2 >= a2 ? i2.apply(null, [null].concat(r3)) : void t4();
                });
                if (d(o2[s2], p2))
                  return ++s2 >= a2 ? i2.apply(null, [null].concat(r3)) : t4();
                if (n3.length === p2 + 1)
                  f(n3, e3, b.concat([g]), g);
                else {
                  var _, w;
                  try {
                    w = n3.apply(e3, b);
                  } catch (t5) {
                    _ = t5, c2 = t5;
                  }
                  if (l(w))
                    return w.then(function(t5) {
                      g(t5 instanceof u.overwriteResult ? t5 : null);
                    }, function(t5) {
                      return g(t5);
                    });
                  if (w instanceof u.overwriteResult && (r3 = w.args), ++s2 >= a2)
                    return i2.apply(null, [_].concat(r3));
                  t4();
                }
              }
            }();
          }, u.prototype.execPostSync = function(t3, e3, r3) {
            for (var n2 = this._posts.get(t3) || [], i2 = n2.length, o2 = 0; o2 < i2; ++o2) {
              var a2 = n2[o2].fn.apply(e3, r3 || []);
              a2 instanceof u.overwriteResult && (r3 = a2.args);
            }
            return r3;
          }, u.prototype.createWrapperSync = function(t3, e3) {
            var r3 = this;
            return function() {
              r3.execPreSync(t3, this, arguments);
              var n2 = e3.apply(this, arguments);
              return r3.execPostSync(t3, this, [n2])[0];
            };
          }, u.prototype.wrap = function(t3, e3, r3, o2, a2) {
            var s2 = o2.length > 0 ? o2[o2.length - 1] : null, f2 = Array.from(o2);
            "function" == typeof s2 && f2.pop();
            var h2 = this, p2 = (a2 = a2 || {}).checkForPromise;
            this.execPre(t3, r3, o2, function(o3) {
              if (o3 && !(o3 instanceof u.skipWrappedFunction)) {
                for (var d2 = a2.numCallbackParams || 0, y = a2.contextParameter ? [r3] : [], b = y.length; b < d2; ++b)
                  y.push(null);
                return c(h2, o3, t3, r3, y, a2, s2);
              }
              var m, v, g = e3.length;
              if (o3 instanceof u.skipWrappedFunction)
                return m = o3.args[0], _.apply(void 0, [null].concat(function(t4) {
                  if (Array.isArray(t4))
                    return i(t4);
                }(v = o3.args) || function(t4) {
                  if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                    return Array.from(t4);
                }(v) || n(v) || function() {
                  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }()));
              try {
                m = e3.apply(r3, f2.concat(_));
              } catch (t4) {
                return _(t4);
              }
              if (p2) {
                if (l(m))
                  return m.then(function(t4) {
                    return _(null, t4);
                  }, function(t4) {
                    return _(t4);
                  });
                if (g < f2.length + 1)
                  return _(null, m);
              }
              function _() {
                var e4 = Array.from(arguments);
                if (e4.shift(), a2.nullResultByDefault && 0 === e4.length && e4.push(null), arguments[0])
                  return c(h2, arguments[0], t3, r3, e4, a2, s2);
                h2.execPost(t3, r3, e4, function() {
                  null !== s2 && (arguments[0] ? s2(arguments[0]) : s2.apply(r3, arguments));
                });
              }
            });
          }, u.prototype.filter = function(t3) {
            for (var e3 = this, r3 = this.clone(), n2 = Array.from(r3._pres.keys()), i2 = function() {
              var n3 = a2[o2], i3 = e3._pres.get(n3).map(function(t4) {
                return Object.assign({}, t4, { name: n3 });
              }).filter(t3);
              if (0 === i3.length)
                return r3._pres.delete(n3), 1;
              i3.numAsync = i3.filter(function(t4) {
                return t4.isAsync;
              }).length, r3._pres.set(n3, i3);
            }, o2 = 0, a2 = n2; o2 < a2.length; o2++)
              i2();
            for (var s2 = Array.from(r3._posts.keys()), u2 = function() {
              var n3 = f2[c2], i3 = e3._posts.get(n3).map(function(t4) {
                return Object.assign({}, t4, { name: n3 });
              }).filter(t3);
              if (0 === i3.length)
                return r3._posts.delete(n3), 1;
              r3._posts.set(n3, i3);
            }, c2 = 0, f2 = s2; c2 < f2.length; c2++)
              u2();
            return r3;
          }, u.prototype.hasHooks = function(t3) {
            return this._pres.has(t3) || this._posts.has(t3);
          }, u.prototype.createWrapper = function(t3, e3, r3, n2) {
            var i2 = this;
            return this.hasHooks(t3) ? function() {
              var o2 = r3 || this;
              i2.wrap(t3, e3, o2, Array.from(arguments), n2);
            } : function() {
              var t4 = arguments, r4 = this;
              p(function() {
                return e3.apply(r4, t4);
              });
            };
          }, u.prototype.pre = function(t3, e3, n2, i2, o2) {
            var a2 = {};
            "object" === r2(e3) && null !== e3 ? e3 = (a2 = e3).isAsync : "boolean" != typeof arguments[1] && (n2 = e3, e3 = false);
            var s2 = this._pres.get(t3) || [];
            if (this._pres.set(t3, s2), e3 && (s2.numAsync = s2.numAsync || 0, ++s2.numAsync), "function" != typeof n2)
              throw new Error('pre() requires a function, got "' + r2(n2) + '"');
            return o2 ? s2.unshift(Object.assign({}, a2, { fn: n2, isAsync: e3 })) : s2.push(Object.assign({}, a2, { fn: n2, isAsync: e3 })), this;
          }, u.prototype.post = function(t3, e3, n2, i2) {
            var o2 = this._posts.get(t3) || [];
            if ("function" == typeof e3 && (i2 = !!n2, n2 = e3, e3 = {}), "function" != typeof n2)
              throw new Error('post() requires a function, got "' + r2(n2) + '"');
            return i2 ? o2.unshift(Object.assign({}, e3, { fn: n2 })) : o2.push(Object.assign({}, e3, { fn: n2 })), this._posts.set(t3, o2), this;
          }, u.prototype.clone = function() {
            var t3, r3 = new u(), n2 = e2(this._pres.keys());
            try {
              for (n2.s(); !(t3 = n2.n()).done; ) {
                var i2 = t3.value, o2 = this._pres.get(i2).slice();
                o2.numAsync = this._pres.get(i2).numAsync, r3._pres.set(i2, o2);
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
            var a2, s2 = e2(this._posts.keys());
            try {
              for (s2.s(); !(a2 = s2.n()).done; ) {
                var c2 = a2.value;
                r3._posts.set(c2, this._posts.get(c2).slice());
              }
            } catch (t4) {
              s2.e(t4);
            } finally {
              s2.f();
            }
            return r3;
          }, u.prototype.merge = function(t3, r3) {
            var n2, i2 = (r3 = 1 === arguments.length || r3) ? this.clone() : this, o2 = e2(t3._pres.keys());
            try {
              var a2 = function() {
                var e3 = n2.value, r4 = i2._pres.get(e3) || [], o3 = t3._pres.get(e3).filter(function(t4) {
                  return -1 === r4.map(function(t5) {
                    return t5.fn;
                  }).indexOf(t4.fn);
                }), a3 = r4.concat(o3);
                a3.numAsync = r4.numAsync || 0, a3.numAsync += o3.filter(function(t4) {
                  return t4.isAsync;
                }).length, i2._pres.set(e3, a3);
              };
              for (o2.s(); !(n2 = o2.n()).done; )
                a2();
            } catch (t4) {
              o2.e(t4);
            } finally {
              o2.f();
            }
            var s2, u2 = e2(t3._posts.keys());
            try {
              var c2 = function() {
                var e3 = s2.value, r4 = i2._posts.get(e3) || [], n3 = t3._posts.get(e3).filter(function(t4) {
                  return -1 === r4.indexOf(t4);
                });
                i2._posts.set(e3, r4.concat(n3));
              };
              for (u2.s(); !(s2 = u2.n()).done; )
                c2();
            } catch (t4) {
              u2.e(t4);
            } finally {
              u2.f();
            }
            return i2;
          };
          var p = "object" === r2({ env: {} }) && null !== { env: {} } && { env: {} }.nextTick || function(t3) {
            setTimeout(t3, 0);
          };
          function d(t3, e3) {
            return !!t3.errorHandler || t3.fn.length === e3 + 2;
          }
          t2.exports = u;
        }, 9471: (t2) => {
          "use strict";
          t2.exports = Math.abs;
        }, 2401: (t2) => {
          "use strict";
          t2.exports = Math.floor;
        }, 3414: (t2) => {
          "use strict";
          t2.exports = Number.isNaN || function(t3) {
            return t3 != t3;
          };
        }, 1697: (t2) => {
          "use strict";
          t2.exports = Math.max;
        }, 8435: (t2) => {
          "use strict";
          t2.exports = Math.min;
        }, 8633: (t2) => {
          "use strict";
          t2.exports = Math.pow;
        }, 2151: (t2) => {
          "use strict";
          t2.exports = Math.round;
        }, 674: (t2, e2, r2) => {
          "use strict";
          var n = r2(3414);
          t2.exports = function(t3) {
            return n(t3) || 0 === t3 ? t3 : t3 < 0 ? -1 : 1;
          };
        }, 2635: (t2, e2, r2) => {
          "use strict";
          var n = r2(1679), i = r2(6936), o = r2(9732).Buffer, a = new Array(16);
          function s() {
            i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
          }
          function u(t3, e3) {
            return t3 << e3 | t3 >>> 32 - e3;
          }
          function c(t3, e3, r3, n2, i2, o2, a2) {
            return u(t3 + (e3 & r3 | ~e3 & n2) + i2 + o2 | 0, a2) + e3 | 0;
          }
          function f(t3, e3, r3, n2, i2, o2, a2) {
            return u(t3 + (e3 & n2 | r3 & ~n2) + i2 + o2 | 0, a2) + e3 | 0;
          }
          function l(t3, e3, r3, n2, i2, o2, a2) {
            return u(t3 + (e3 ^ r3 ^ n2) + i2 + o2 | 0, a2) + e3 | 0;
          }
          function h(t3, e3, r3, n2, i2, o2, a2) {
            return u(t3 + (r3 ^ (e3 | ~n2)) + i2 + o2 | 0, a2) + e3 | 0;
          }
          n(s, i), s.prototype._update = function() {
            for (var t3 = a, e3 = 0; e3 < 16; ++e3)
              t3[e3] = this._block.readInt32LE(4 * e3);
            var r3 = this._a, n2 = this._b, i2 = this._c, o2 = this._d;
            r3 = c(r3, n2, i2, o2, t3[0], 3614090360, 7), o2 = c(o2, r3, n2, i2, t3[1], 3905402710, 12), i2 = c(i2, o2, r3, n2, t3[2], 606105819, 17), n2 = c(n2, i2, o2, r3, t3[3], 3250441966, 22), r3 = c(r3, n2, i2, o2, t3[4], 4118548399, 7), o2 = c(o2, r3, n2, i2, t3[5], 1200080426, 12), i2 = c(i2, o2, r3, n2, t3[6], 2821735955, 17), n2 = c(n2, i2, o2, r3, t3[7], 4249261313, 22), r3 = c(r3, n2, i2, o2, t3[8], 1770035416, 7), o2 = c(o2, r3, n2, i2, t3[9], 2336552879, 12), i2 = c(i2, o2, r3, n2, t3[10], 4294925233, 17), n2 = c(n2, i2, o2, r3, t3[11], 2304563134, 22), r3 = c(r3, n2, i2, o2, t3[12], 1804603682, 7), o2 = c(o2, r3, n2, i2, t3[13], 4254626195, 12), i2 = c(i2, o2, r3, n2, t3[14], 2792965006, 17), r3 = f(r3, n2 = c(n2, i2, o2, r3, t3[15], 1236535329, 22), i2, o2, t3[1], 4129170786, 5), o2 = f(o2, r3, n2, i2, t3[6], 3225465664, 9), i2 = f(i2, o2, r3, n2, t3[11], 643717713, 14), n2 = f(n2, i2, o2, r3, t3[0], 3921069994, 20), r3 = f(r3, n2, i2, o2, t3[5], 3593408605, 5), o2 = f(o2, r3, n2, i2, t3[10], 38016083, 9), i2 = f(i2, o2, r3, n2, t3[15], 3634488961, 14), n2 = f(n2, i2, o2, r3, t3[4], 3889429448, 20), r3 = f(r3, n2, i2, o2, t3[9], 568446438, 5), o2 = f(o2, r3, n2, i2, t3[14], 3275163606, 9), i2 = f(i2, o2, r3, n2, t3[3], 4107603335, 14), n2 = f(n2, i2, o2, r3, t3[8], 1163531501, 20), r3 = f(r3, n2, i2, o2, t3[13], 2850285829, 5), o2 = f(o2, r3, n2, i2, t3[2], 4243563512, 9), i2 = f(i2, o2, r3, n2, t3[7], 1735328473, 14), r3 = l(r3, n2 = f(n2, i2, o2, r3, t3[12], 2368359562, 20), i2, o2, t3[5], 4294588738, 4), o2 = l(o2, r3, n2, i2, t3[8], 2272392833, 11), i2 = l(i2, o2, r3, n2, t3[11], 1839030562, 16), n2 = l(n2, i2, o2, r3, t3[14], 4259657740, 23), r3 = l(r3, n2, i2, o2, t3[1], 2763975236, 4), o2 = l(o2, r3, n2, i2, t3[4], 1272893353, 11), i2 = l(i2, o2, r3, n2, t3[7], 4139469664, 16), n2 = l(n2, i2, o2, r3, t3[10], 3200236656, 23), r3 = l(r3, n2, i2, o2, t3[13], 681279174, 4), o2 = l(o2, r3, n2, i2, t3[0], 3936430074, 11), i2 = l(i2, o2, r3, n2, t3[3], 3572445317, 16), n2 = l(n2, i2, o2, r3, t3[6], 76029189, 23), r3 = l(r3, n2, i2, o2, t3[9], 3654602809, 4), o2 = l(o2, r3, n2, i2, t3[12], 3873151461, 11), i2 = l(i2, o2, r3, n2, t3[15], 530742520, 16), r3 = h(r3, n2 = l(n2, i2, o2, r3, t3[2], 3299628645, 23), i2, o2, t3[0], 4096336452, 6), o2 = h(o2, r3, n2, i2, t3[7], 1126891415, 10), i2 = h(i2, o2, r3, n2, t3[14], 2878612391, 15), n2 = h(n2, i2, o2, r3, t3[5], 4237533241, 21), r3 = h(r3, n2, i2, o2, t3[12], 1700485571, 6), o2 = h(o2, r3, n2, i2, t3[3], 2399980690, 10), i2 = h(i2, o2, r3, n2, t3[10], 4293915773, 15), n2 = h(n2, i2, o2, r3, t3[1], 2240044497, 21), r3 = h(r3, n2, i2, o2, t3[8], 1873313359, 6), o2 = h(o2, r3, n2, i2, t3[15], 4264355552, 10), i2 = h(i2, o2, r3, n2, t3[6], 2734768916, 15), n2 = h(n2, i2, o2, r3, t3[13], 1309151649, 21), r3 = h(r3, n2, i2, o2, t3[4], 4149444226, 6), o2 = h(o2, r3, n2, i2, t3[11], 3174756917, 10), i2 = h(i2, o2, r3, n2, t3[2], 718787259, 15), n2 = h(n2, i2, o2, r3, t3[9], 3951481745, 21), this._a = this._a + r3 | 0, this._b = this._b + n2 | 0, this._c = this._c + i2 | 0, this._d = this._d + o2 | 0;
          }, s.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
            var t3 = o.allocUnsafe(16);
            return t3.writeInt32LE(this._a, 0), t3.writeInt32LE(this._b, 4), t3.writeInt32LE(this._c, 8), t3.writeInt32LE(this._d, 12), t3;
          }, t2.exports = s;
        }, 1257: (t2, e2, r2) => {
          var n = r2(7799), i = r2(8904);
          function o(t3) {
            this.rand = t3 || new i.Rand();
          }
          t2.exports = o, o.create = function(t3) {
            return new o(t3);
          }, o.prototype._randbelow = function(t3) {
            var e3 = t3.bitLength(), r3 = Math.ceil(e3 / 8);
            do {
              var i2 = new n(this.rand.generate(r3));
            } while (i2.cmp(t3) >= 0);
            return i2;
          }, o.prototype._randrange = function(t3, e3) {
            var r3 = e3.sub(t3);
            return t3.add(this._randbelow(r3));
          }, o.prototype.test = function(t3, e3, r3) {
            var i2 = t3.bitLength(), o2 = n.mont(t3), a = new n(1).toRed(o2);
            e3 || (e3 = Math.max(1, i2 / 48 | 0));
            for (var s = t3.subn(1), u = 0; !s.testn(u); u++)
              ;
            for (var c = t3.shrn(u), f = s.toRed(o2); e3 > 0; e3--) {
              var l = this._randrange(new n(2), s);
              r3 && r3(l);
              var h = l.toRed(o2).redPow(c);
              if (0 !== h.cmp(a) && 0 !== h.cmp(f)) {
                for (var p = 1; p < u; p++) {
                  if (0 === (h = h.redSqr()).cmp(a))
                    return false;
                  if (0 === h.cmp(f))
                    break;
                }
                if (p === u)
                  return false;
              }
            }
            return true;
          }, o.prototype.getDivisor = function(t3, e3) {
            var r3 = t3.bitLength(), i2 = n.mont(t3), o2 = new n(1).toRed(i2);
            e3 || (e3 = Math.max(1, r3 / 48 | 0));
            for (var a = t3.subn(1), s = 0; !a.testn(s); s++)
              ;
            for (var u = t3.shrn(s), c = a.toRed(i2); e3 > 0; e3--) {
              var f = this._randrange(new n(2), a), l = t3.gcd(f);
              if (0 !== l.cmpn(1))
                return l;
              var h = f.toRed(i2).redPow(u);
              if (0 !== h.cmp(o2) && 0 !== h.cmp(c)) {
                for (var p = 1; p < s; p++) {
                  if (0 === (h = h.redSqr()).cmp(o2))
                    return h.fromRed().subn(1).gcd(t3);
                  if (0 === h.cmp(c))
                    break;
                }
                if (p === s)
                  return (h = h.redSqr()).fromRed().subn(1).gcd(t3);
              }
            }
            return false;
          };
        }, 3528: (t2) => {
          function e2(t3, e3) {
            if (!t3)
              throw new Error(e3 || "Assertion failed");
          }
          t2.exports = e2, e2.equal = function(t3, e3, r2) {
            if (t3 != e3)
              throw new Error(r2 || "Assertion failed: " + t3 + " != " + e3);
          };
        }, 6706: (t2, e2) => {
          "use strict";
          var r2 = e2;
          function n(t3) {
            return 1 === t3.length ? "0" + t3 : t3;
          }
          function i(t3) {
            for (var e3 = "", r3 = 0; r3 < t3.length; r3++)
              e3 += n(t3[r3].toString(16));
            return e3;
          }
          r2.toArray = function(t3, e3) {
            if (Array.isArray(t3))
              return t3.slice();
            if (!t3)
              return [];
            var r3 = [];
            if ("string" != typeof t3) {
              for (var n2 = 0; n2 < t3.length; n2++)
                r3[n2] = 0 | t3[n2];
              return r3;
            }
            if ("hex" === e3)
              for ((t3 = t3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t3 = "0" + t3), n2 = 0; n2 < t3.length; n2 += 2)
                r3.push(parseInt(t3[n2] + t3[n2 + 1], 16));
            else
              for (n2 = 0; n2 < t3.length; n2++) {
                var i2 = t3.charCodeAt(n2), o = i2 >> 8, a = 255 & i2;
                o ? r3.push(o, a) : r3.push(a);
              }
            return r3;
          }, r2.zero2 = n, r2.toHex = i, r2.encode = function(t3, e3) {
            return "hex" === e3 ? i(t3) : t3;
          };
        }, 5678: (t2, e2, r2) => {
          "use strict";
          t2.exports = r2(2914);
        }, 2914: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(7860), o = ["__proto__", "constructor", "prototype"];
          function a(t3, e3, r3, n2, i2, o2) {
            for (var s2, u = 0; u < t3.length && u < e3.length; ++u)
              s2 = t3[u], Array.isArray(s2) && Array.isArray(e3[u]) ? a(s2, e3[u], r3, n2, i2, o2) : s2 && (n2 ? n2(s2, r3, o2(e3[u])) : (s2[i2] && (s2 = s2[i2]), s2[r3] = o2(e3[u])));
          }
          function s(t3) {
            return t3;
          }
          e2.get = function(t3, r3, o2, a2) {
            var u;
            "function" == typeof o2 && (o2.length < 2 ? (a2 = o2, o2 = void 0) : (u = o2, o2 = void 0)), a2 || (a2 = s);
            var c = "string" == typeof t3 ? i(t3) : t3;
            if (!Array.isArray(c))
              throw new TypeError("Invalid `path`. Must be either string or array");
            for (var f, l = r3, h = 0; h < c.length; ++h) {
              if (f = c[h], "string" != typeof c[h] && "number" != typeof c[h])
                throw new TypeError("Each segment of path to `get()` must be a string or number, got " + n(c[h]));
              if (Array.isArray(l) && !/^\d+$/.test(f)) {
                var p = c.slice(h);
                return [].concat(l).map(function(t4) {
                  return t4 ? e2.get(p, t4, o2 || u, a2) : a2(void 0);
                });
              }
              if (u)
                l = u(l, f);
              else {
                var d = o2 && l[o2] ? l[o2] : l;
                l = d instanceof Map ? d.get(f) : d[f];
              }
              if (!l)
                return a2(l);
            }
            return a2(l);
          }, e2.has = function(t3, e3) {
            var r3 = "string" == typeof t3 ? i(t3) : t3;
            if (!Array.isArray(r3))
              throw new TypeError("Invalid `path`. Must be either string or array");
            for (var o2 = r3.length, a2 = e3, s2 = 0; s2 < o2; ++s2) {
              if ("string" != typeof r3[s2] && "number" != typeof r3[s2])
                throw new TypeError("Each segment of path to `has()` must be a string or number, got " + n(r3[s2]));
              if (null == a2 || "object" !== n(a2) || !(r3[s2] in a2))
                return false;
              a2 = a2[r3[s2]];
            }
            return true;
          }, e2.unset = function(t3, e3) {
            var r3 = "string" == typeof t3 ? i(t3) : t3;
            if (!Array.isArray(r3))
              throw new TypeError("Invalid `path`. Must be either string or array");
            for (var a2 = r3.length, s2 = e3, u = 0; u < a2; ++u) {
              if (null == s2 || "object" !== n(s2) || !(r3[u] in s2))
                return false;
              if ("string" != typeof r3[u] && "number" != typeof r3[u])
                throw new TypeError("Each segment of path to `unset()` must be a string or number, got " + n(r3[u]));
              if (-1 !== o.indexOf(r3[u]))
                return false;
              if (u === a2 - 1)
                return delete s2[r3[u]], true;
              s2 = s2 instanceof Map ? s2.get(r3[u]) : s2[r3[u]];
            }
            return true;
          }, e2.set = function(t3, r3, u, c, f, l) {
            var h;
            "function" == typeof c && (c.length < 2 ? (f = c, c = void 0) : (h = c, c = void 0)), f || (f = s);
            var p = "string" == typeof t3 ? i(t3) : t3;
            if (!Array.isArray(p))
              throw new TypeError("Invalid `path`. Must be either string or array");
            if (null != u) {
              for (var d = 0; d < p.length; ++d) {
                if ("string" != typeof p[d] && "number" != typeof p[d])
                  throw new TypeError("Each segment of path to `set()` must be a string or number, got " + n(p[d]));
                if (-1 !== o.indexOf(p[d]))
                  return;
              }
              for (var y, b = l || /\$/.test(t3) && false !== l, m = u, v = (d = 0, p.length - 1); d < v; ++d)
                if ("$" != (y = p[d])) {
                  if (Array.isArray(m) && !/^\d+$/.test(y)) {
                    var g = p.slice(d);
                    if (!b && Array.isArray(r3))
                      for (var _ = 0; _ < m.length && _ < r3.length; ++_)
                        e2.set(g, r3[_], m[_], c || h, f, b);
                    else
                      for (_ = 0; _ < m.length; ++_)
                        e2.set(g, r3, m[_], c || h, f, b);
                    return;
                  }
                  if (h)
                    m = h(m, y);
                  else {
                    var w = c && m[c] ? m[c] : m;
                    m = w instanceof Map ? w.get(y) : w[y];
                  }
                  if (!m)
                    return;
                } else if (d == v - 1)
                  break;
              if (y = p[v], c && m[c] && (m = m[c]), Array.isArray(m) && !/^\d+$/.test(y))
                if (!b && Array.isArray(r3))
                  a(m, r3, y, h, c, f);
                else
                  for (_ = 0; _ < m.length; ++_) {
                    var S = m[_];
                    S && (h ? h(S, y, f(r3)) : (S[c] && (S = S[c]), S[y] = f(r3)));
                  }
              else
                h ? h(m, y, f(r3)) : m instanceof Map ? m.set(y, f(r3)) : m[y] = f(r3);
            }
          }, e2.stringToParts = i;
        }, 7860: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            for (var e2 = [], r2 = "", n = "DEFAULT", i = 0; i < t3.length; ++i)
              "IN_SQUARE_BRACKETS" !== n || /\d/.test(t3[i]) || "]" === t3[i] || (n = "DEFAULT", r2 = e2[e2.length - 1] + "[" + r2, e2.splice(e2.length - 1, 1)), "[" === t3[i] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && (e2.push(r2), r2 = ""), n = "IN_SQUARE_BRACKETS") : "]" === t3[i] ? "IN_SQUARE_BRACKETS" === n ? (n = "IMMEDIATELY_AFTER_SQUARE_BRACKETS", e2.push(r2), r2 = "") : (n = "DEFAULT", r2 += t3[i]) : "." === t3[i] ? ("IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && (e2.push(r2), r2 = ""), n = "DEFAULT") : r2 += t3[i];
            return "IMMEDIATELY_AFTER_SQUARE_BRACKETS" !== n && e2.push(r2), e2;
          };
        }, 354: (t2) => {
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          var r2 = 1e3, n = 60 * r2, i = 60 * n, o = 24 * i, a = 7 * o;
          function s(t3, e3, r3, n2) {
            var i2 = e3 >= 1.5 * r3;
            return Math.round(t3 / r3) + " " + n2 + (i2 ? "s" : "");
          }
          t2.exports = function(t3, u) {
            u = u || {};
            var c, f, l = e2(t3);
            if ("string" === l && t3.length > 0)
              return function(t4) {
                if (!((t4 = String(t4)).length > 100)) {
                  var e3 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t4);
                  if (e3) {
                    var s2 = parseFloat(e3[1]);
                    switch ((e3[2] || "ms").toLowerCase()) {
                      case "years":
                      case "year":
                      case "yrs":
                      case "yr":
                      case "y":
                        return 315576e5 * s2;
                      case "weeks":
                      case "week":
                      case "w":
                        return s2 * a;
                      case "days":
                      case "day":
                      case "d":
                        return s2 * o;
                      case "hours":
                      case "hour":
                      case "hrs":
                      case "hr":
                      case "h":
                        return s2 * i;
                      case "minutes":
                      case "minute":
                      case "mins":
                      case "min":
                      case "m":
                        return s2 * n;
                      case "seconds":
                      case "second":
                      case "secs":
                      case "sec":
                      case "s":
                        return s2 * r2;
                      case "milliseconds":
                      case "millisecond":
                      case "msecs":
                      case "msec":
                      case "ms":
                        return s2;
                      default:
                        return;
                    }
                  }
                }
              }(t3);
            if ("number" === l && isFinite(t3))
              return u.long ? (c = t3, (f = Math.abs(c)) >= o ? s(c, f, o, "day") : f >= i ? s(c, f, i, "hour") : f >= n ? s(c, f, n, "minute") : f >= r2 ? s(c, f, r2, "second") : c + " ms") : function(t4) {
                var e3 = Math.abs(t4);
                return e3 >= o ? Math.round(t4 / o) + "d" : e3 >= i ? Math.round(t4 / i) + "h" : e3 >= n ? Math.round(t4 / n) + "m" : e3 >= r2 ? Math.round(t4 / r2) + "s" : t4 + "ms";
              }(t3);
            throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t3));
          };
        }, 4756: (t2) => {
          "use strict";
          var e2 = function(t3) {
            return t3 != t3;
          };
          t2.exports = function(t3, r2) {
            return 0 === t3 && 0 === r2 ? 1 / t3 == 1 / r2 : t3 === r2 || !(!e2(t3) || !e2(r2));
          };
        }, 2064: (t2, e2, r2) => {
          "use strict";
          var n = r2(2273), i = r2(9122), o = r2(4756), a = r2(2481), s = r2(9247), u = i(a(), Object);
          n(u, { getPolyfill: a, implementation: o, shim: s }), t2.exports = u;
        }, 2481: (t2, e2, r2) => {
          "use strict";
          var n = r2(4756);
          t2.exports = function() {
            return "function" == typeof Object.is ? Object.is : n;
          };
        }, 9247: (t2, e2, r2) => {
          "use strict";
          var n = r2(2481), i = r2(2273);
          t2.exports = function() {
            var t3 = n();
            return i(Object, { is: t3 }, { is: function() {
              return Object.is !== t3;
            } }), t3;
          };
        }, 6544: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i;
          if (!Object.keys) {
            var o = Object.prototype.hasOwnProperty, a = Object.prototype.toString, s = r2(6312), u = Object.prototype.propertyIsEnumerable, c = !u.call({ toString: null }, "toString"), f = u.call(function() {
            }, "prototype"), l = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], h = function(t3) {
              var e3 = t3.constructor;
              return e3 && e3.prototype === t3;
            }, p = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, d = function() {
              if ("undefined" == typeof window)
                return false;
              for (var t3 in window)
                try {
                  if (!p["$" + t3] && o.call(window, t3) && null !== window[t3] && "object" === n(window[t3]))
                    try {
                      h(window[t3]);
                    } catch (t4) {
                      return true;
                    }
                } catch (t4) {
                  return true;
                }
              return false;
            }();
            i = function(t3) {
              var e3 = null !== t3 && "object" === n(t3), r3 = "[object Function]" === a.call(t3), i2 = s(t3), u2 = e3 && "[object String]" === a.call(t3), p2 = [];
              if (!e3 && !r3 && !i2)
                throw new TypeError("Object.keys called on a non-object");
              var y = f && r3;
              if (u2 && t3.length > 0 && !o.call(t3, 0))
                for (var b = 0; b < t3.length; ++b)
                  p2.push(String(b));
              if (i2 && t3.length > 0)
                for (var m = 0; m < t3.length; ++m)
                  p2.push(String(m));
              else
                for (var v in t3)
                  y && "prototype" === v || !o.call(t3, v) || p2.push(String(v));
              if (c)
                for (var g = function(t4) {
                  if ("undefined" == typeof window || !d)
                    return h(t4);
                  try {
                    return h(t4);
                  } catch (t5) {
                    return false;
                  }
                }(t3), _ = 0; _ < l.length; ++_)
                  g && "constructor" === l[_] || !o.call(t3, l[_]) || p2.push(l[_]);
              return p2;
            };
          }
          t2.exports = i;
        }, 668: (t2, e2, r2) => {
          "use strict";
          var n = Array.prototype.slice, i = r2(6312), o = Object.keys, a = o ? function(t3) {
            return o(t3);
          } : r2(6544), s = Object.keys;
          a.shim = function() {
            if (Object.keys) {
              var t3 = function() {
                var t4 = Object.keys(arguments);
                return t4 && t4.length === arguments.length;
              }(1, 2);
              t3 || (Object.keys = function(t4) {
                return i(t4) ? s(n.call(t4)) : s(t4);
              });
            } else
              Object.keys = a;
            return Object.keys || a;
          }, t2.exports = a;
        }, 6312: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          var r2 = Object.prototype.toString;
          t2.exports = function(t3) {
            var n = r2.call(t3), i = "[object Arguments]" === n;
            return i || (i = "[object Array]" !== n && null !== t3 && "object" === e2(t3) && "number" == typeof t3.length && t3.length >= 0 && "[object Function]" === r2.call(t3.callee)), i;
          };
        }, 6292: (t2, e2, r2) => {
          "use strict";
          var n = r2(1419);
          e2.certificate = r2(6170);
          var i = n.define("RSAPrivateKey", function() {
            this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
          });
          e2.RSAPrivateKey = i;
          var o = n.define("RSAPublicKey", function() {
            this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
          });
          e2.RSAPublicKey = o;
          var a = n.define("AlgorithmIdentifier", function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
          }), s = n.define("SubjectPublicKeyInfo", function() {
            this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
          });
          e2.PublicKey = s;
          var u = n.define("PrivateKeyInfo", function() {
            this.seq().obj(this.key("version").int(), this.key("algorithm").use(a), this.key("subjectPrivateKey").octstr());
          });
          e2.PrivateKey = u;
          var c = n.define("EncryptedPrivateKeyInfo", function() {
            this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
          });
          e2.EncryptedPrivateKey = c;
          var f = n.define("DSAPrivateKey", function() {
            this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
          });
          e2.DSAPrivateKey = f, e2.DSAparam = n.define("DSAparam", function() {
            this.int();
          });
          var l = n.define("ECParameters", function() {
            this.choice({ namedCurve: this.objid() });
          }), h = n.define("ECPrivateKey", function() {
            this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(l), this.key("publicKey").optional().explicit(1).bitstr());
          });
          e2.ECPrivateKey = h, e2.signature = n.define("signature", function() {
            this.seq().obj(this.key("r").int(), this.key("s").int());
          });
        }, 6170: (t2, e2, r2) => {
          "use strict";
          var n = r2(1419), i = n.define("Time", function() {
            this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
          }), o = n.define("AttributeTypeValue", function() {
            this.seq().obj(this.key("type").objid(), this.key("value").any());
          }), a = n.define("AlgorithmIdentifier", function() {
            this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
          }), s = n.define("SubjectPublicKeyInfo", function() {
            this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
          }), u = n.define("RelativeDistinguishedName", function() {
            this.setof(o);
          }), c = n.define("RDNSequence", function() {
            this.seqof(u);
          }), f = n.define("Name", function() {
            this.choice({ rdnSequence: this.use(c) });
          }), l = n.define("Validity", function() {
            this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
          }), h = n.define("Extension", function() {
            this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
          }), p = n.define("TBSCertificate", function() {
            this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(a), this.key("issuer").use(f), this.key("validity").use(l), this.key("subject").use(f), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(h).optional());
          }), d = n.define("X509Certificate", function() {
            this.seq().obj(this.key("tbsCertificate").use(p), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr());
          });
          t2.exports = d;
        }, 3446: (t2, e2, r2) => {
          "use strict";
          var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, a = r2(1685), s = r2(2098), u = r2(9732).Buffer;
          t2.exports = function(t3, e3) {
            var r3, c = t3.toString(), f = c.match(n);
            if (f) {
              var l = "aes" + f[1], h = u.from(f[2], "hex"), p = u.from(f[3].replace(/[\r\n]/g, ""), "base64"), d = a(e3, h.slice(0, 8), parseInt(f[1], 10)).key, y = [], b = s.createDecipheriv(l, d, h);
              y.push(b.update(p)), y.push(b.final()), r3 = u.concat(y);
            } else {
              var m = c.match(o);
              r3 = u.from(m[2].replace(/[\r\n]/g, ""), "base64");
            }
            return { tag: c.match(i)[1], data: r3 };
          };
        }, 5053: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(6292), o = r2(5579), a = r2(3446), s = r2(2098), u = r2(8699), c = r2(9732).Buffer;
          function f(t3) {
            var e3;
            "object" !== n(t3) || c.isBuffer(t3) || (e3 = t3.passphrase, t3 = t3.key), "string" == typeof t3 && (t3 = c.from(t3));
            var r3, f2, l = a(t3, e3), h = l.tag, p = l.data;
            switch (h) {
              case "CERTIFICATE":
                f2 = i.certificate.decode(p, "der").tbsCertificate.subjectPublicKeyInfo;
              case "PUBLIC KEY":
                switch (f2 || (f2 = i.PublicKey.decode(p, "der")), r3 = f2.algorithm.algorithm.join(".")) {
                  case "1.2.840.113549.1.1.1":
                    return i.RSAPublicKey.decode(f2.subjectPublicKey.data, "der");
                  case "1.2.840.10045.2.1":
                    return f2.subjectPrivateKey = f2.subjectPublicKey, { type: "ec", data: f2 };
                  case "1.2.840.10040.4.1":
                    return f2.algorithm.params.pub_key = i.DSAparam.decode(f2.subjectPublicKey.data, "der"), { type: "dsa", data: f2.algorithm.params };
                  default:
                    throw new Error("unknown key id " + r3);
                }
              case "ENCRYPTED PRIVATE KEY":
                p = function(t4, e4) {
                  var r4 = t4.algorithm.decrypt.kde.kdeparams.salt, n2 = parseInt(t4.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), i2 = o[t4.algorithm.decrypt.cipher.algo.join(".")], a2 = t4.algorithm.decrypt.cipher.iv, f3 = t4.subjectPrivateKey, l2 = parseInt(i2.split("-")[1], 10) / 8, h2 = u.pbkdf2Sync(e4, r4, n2, l2, "sha1"), p2 = s.createDecipheriv(i2, h2, a2), d = [];
                  return d.push(p2.update(f3)), d.push(p2.final()), c.concat(d);
                }(p = i.EncryptedPrivateKey.decode(p, "der"), e3);
              case "PRIVATE KEY":
                switch (r3 = (f2 = i.PrivateKey.decode(p, "der")).algorithm.algorithm.join(".")) {
                  case "1.2.840.113549.1.1.1":
                    return i.RSAPrivateKey.decode(f2.subjectPrivateKey, "der");
                  case "1.2.840.10045.2.1":
                    return { curve: f2.algorithm.curve, privateKey: i.ECPrivateKey.decode(f2.subjectPrivateKey, "der").privateKey };
                  case "1.2.840.10040.4.1":
                    return f2.algorithm.params.priv_key = i.DSAparam.decode(f2.subjectPrivateKey, "der"), { type: "dsa", params: f2.algorithm.params };
                  default:
                    throw new Error("unknown key id " + r3);
                }
              case "RSA PUBLIC KEY":
                return i.RSAPublicKey.decode(p, "der");
              case "RSA PRIVATE KEY":
                return i.RSAPrivateKey.decode(p, "der");
              case "DSA PRIVATE KEY":
                return { type: "dsa", params: i.DSAPrivateKey.decode(p, "der") };
              case "EC PRIVATE KEY":
                return { curve: (p = i.ECPrivateKey.decode(p, "der")).parameters.value, privateKey: p.privateKey };
              default:
                throw new Error("unknown key type " + h);
            }
          }
          f.signature = i.signature, t2.exports = f;
        }, 8699: (t2, e2, r2) => {
          e2.pbkdf2 = r2(2367), e2.pbkdf2Sync = r2(245);
        }, 2367: (t2, e2, r2) => {
          var n, i, o = r2(9732).Buffer, a = r2(9217), s = r2(594), u = r2(245), c = r2(6661), f = r2.g.crypto && r2.g.crypto.subtle, l = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, h = [];
          function p() {
            return i || (i = r2.g.process && r2.g.process.nextTick ? r2.g.process.nextTick : r2.g.queueMicrotask ? r2.g.queueMicrotask : r2.g.setImmediate ? r2.g.setImmediate : r2.g.setTimeout);
          }
          function d(t3, e3, r3, n2, i2) {
            return f.importKey("raw", t3, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(t4) {
              return f.deriveBits({ name: "PBKDF2", salt: e3, iterations: r3, hash: { name: i2 } }, t4, n2 << 3);
            }).then(function(t4) {
              return o.from(t4);
            });
          }
          t2.exports = function(t3, e3, i2, y, b, m) {
            "function" == typeof b && (m = b, b = void 0);
            var v = l[(b = b || "sha1").toLowerCase()];
            if (v && "function" == typeof r2.g.Promise) {
              if (a(i2, y), t3 = c(t3, s, "Password"), e3 = c(e3, s, "Salt"), "function" != typeof m)
                throw new Error("No callback provided to pbkdf2");
              !function(t4, e4) {
                t4.then(function(t5) {
                  p()(function() {
                    e4(null, t5);
                  });
                }, function(t5) {
                  p()(function() {
                    e4(t5);
                  });
                });
              }(function(t4) {
                if (r2.g.process && !r2.g.process.browser)
                  return Promise.resolve(false);
                if (!f || !f.importKey || !f.deriveBits)
                  return Promise.resolve(false);
                if (void 0 !== h[t4])
                  return h[t4];
                var e4 = d(n = n || o.alloc(8), n, 10, 128, t4).then(function() {
                  return true;
                }).catch(function() {
                  return false;
                });
                return h[t4] = e4, e4;
              }(v).then(function(r3) {
                return r3 ? d(t3, e3, i2, y, v) : u(t3, e3, i2, y, b);
              }), m);
            } else
              p()(function() {
                var r3;
                try {
                  r3 = u(t3, e3, i2, y, b);
                } catch (t4) {
                  return m(t4);
                }
                m(null, r3);
              });
          };
        }, 594: (t2, e2, r2) => {
          var n;
          n = r2.g.process && r2.g.process.browser ? "utf-8" : r2.g.process && r2.g.process.version ? parseInt({ env: {} }.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", t2.exports = n;
        }, 9217: (t2) => {
          var e2 = Math.pow(2, 30) - 1;
          t2.exports = function(t3, r2) {
            if ("number" != typeof t3)
              throw new TypeError("Iterations not a number");
            if (t3 < 0)
              throw new TypeError("Bad iterations");
            if ("number" != typeof r2)
              throw new TypeError("Key length not a number");
            if (r2 < 0 || r2 > e2 || r2 != r2)
              throw new TypeError("Bad key length");
          };
        }, 245: (t2, e2, r2) => {
          var n = r2(3989), i = r2(1058), o = r2(3261), a = r2(9732).Buffer, s = r2(9217), u = r2(594), c = r2(6661), f = a.alloc(128), l = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
          function h(t3, e3, r3) {
            var s2 = function(t4) {
              return "rmd160" === t4 || "ripemd160" === t4 ? function(t5) {
                return new i().update(t5).digest();
              } : "md5" === t4 ? n : function(e4) {
                return o(t4).update(e4).digest();
              };
            }(t3), u2 = "sha512" === t3 || "sha384" === t3 ? 128 : 64;
            e3.length > u2 ? e3 = s2(e3) : e3.length < u2 && (e3 = a.concat([e3, f], u2));
            for (var c2 = a.allocUnsafe(u2 + l[t3]), h2 = a.allocUnsafe(u2 + l[t3]), p = 0; p < u2; p++)
              c2[p] = 54 ^ e3[p], h2[p] = 92 ^ e3[p];
            var d = a.allocUnsafe(u2 + r3 + 4);
            c2.copy(d, 0, 0, u2), this.ipad1 = d, this.ipad2 = c2, this.opad = h2, this.alg = t3, this.blocksize = u2, this.hash = s2, this.size = l[t3];
          }
          h.prototype.run = function(t3, e3) {
            return t3.copy(e3, this.blocksize), this.hash(e3).copy(this.opad, this.blocksize), this.hash(this.opad);
          }, t2.exports = function(t3, e3, r3, n2, i2) {
            s(r3, n2);
            var o2 = new h(i2 = i2 || "sha1", t3 = c(t3, u, "Password"), (e3 = c(e3, u, "Salt")).length), f2 = a.allocUnsafe(n2), p = a.allocUnsafe(e3.length + 4);
            e3.copy(p, 0, 0, e3.length);
            for (var d = 0, y = l[i2], b = Math.ceil(n2 / y), m = 1; m <= b; m++) {
              p.writeUInt32BE(m, e3.length);
              for (var v = o2.run(p, o2.ipad1), g = v, _ = 1; _ < r3; _++) {
                g = o2.run(g, o2.ipad2);
                for (var w = 0; w < y; w++)
                  v[w] ^= g[w];
              }
              v.copy(f2, d), d += y;
            }
            return f2;
          };
        }, 6661: (t2, e2, r2) => {
          var n = r2(9732).Buffer;
          t2.exports = function(t3, e3, r3) {
            if (n.isBuffer(t3))
              return t3;
            if ("string" == typeof t3)
              return n.from(t3, e3);
            if (ArrayBuffer.isView(t3))
              return n.from(t3.buffer);
            throw new TypeError(r3 + " must be a string, a Buffer, a typed array or a DataView");
          };
        }, 2653: (t2) => {
          "use strict";
          t2.exports = ["Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "BigInt64Array", "BigUint64Array"];
        }, 4758: (t2) => {
          "use strict";
          !{ env: {} }.version || 0 === { env: {} }.version.indexOf("v0.") || 0 === { env: {} }.version.indexOf("v1.") && 0 !== { env: {} }.version.indexOf("v1.8.") ? t2.exports = { nextTick: function(t3, e2, r2, n) {
            if ("function" != typeof t3)
              throw new TypeError('"callback" argument must be a function');
            var i, o, a = arguments.length;
            switch (a) {
              case 0:
              case 1:
                return { env: {} }.nextTick(t3);
              case 2:
                return { env: {} }.nextTick(function() {
                  t3.call(null, e2);
                });
              case 3:
                return { env: {} }.nextTick(function() {
                  t3.call(null, e2, r2);
                });
              case 4:
                return { env: {} }.nextTick(function() {
                  t3.call(null, e2, r2, n);
                });
              default:
                for (i = new Array(a - 1), o = 0; o < i.length; )
                  i[o++] = arguments[o];
                return { env: {} }.nextTick(function() {
                  t3.apply(null, i);
                });
            }
          } } : t2.exports = { env: {} };
        }, 2327: (t2, e2, r2) => {
          e2.publicEncrypt = r2(2937), e2.privateDecrypt = r2(5443), e2.privateEncrypt = function(t3, r3) {
            return e2.publicEncrypt(t3, r3, true);
          }, e2.publicDecrypt = function(t3, r3) {
            return e2.privateDecrypt(t3, r3, true);
          };
        }, 7797: (t2, e2, r2) => {
          var n = r2(5833), i = r2(9732).Buffer;
          function o(t3) {
            var e3 = i.allocUnsafe(4);
            return e3.writeUInt32BE(t3, 0), e3;
          }
          t2.exports = function(t3, e3) {
            for (var r3, a = i.alloc(0), s = 0; a.length < e3; )
              r3 = o(s++), a = i.concat([a, n("sha1").update(t3).update(r3).digest()]);
            return a.slice(0, e3);
          };
        }, 5443: (t2, e2, r2) => {
          var n = r2(5053), i = r2(7797), o = r2(1190), a = r2(7799), s = r2(1095), u = r2(5833), c = r2(5218), f = r2(9732).Buffer;
          t2.exports = function(t3, e3, r3) {
            var l;
            l = t3.padding ? t3.padding : r3 ? 1 : 4;
            var h, p = n(t3), d = p.modulus.byteLength();
            if (e3.length > d || new a(e3).cmp(p.modulus) >= 0)
              throw new Error("decryption error");
            h = r3 ? c(new a(e3), p) : s(e3, p);
            var y = f.alloc(d - h.length);
            if (h = f.concat([y, h], d), 4 === l)
              return function(t4, e4) {
                var r4 = t4.modulus.byteLength(), n2 = u("sha1").update(f.alloc(0)).digest(), a2 = n2.length;
                if (0 !== e4[0])
                  throw new Error("decryption error");
                var s2 = e4.slice(1, a2 + 1), c2 = e4.slice(a2 + 1), l2 = o(s2, i(c2, a2)), h2 = o(c2, i(l2, r4 - a2 - 1));
                if (function(t5, e5) {
                  t5 = f.from(t5), e5 = f.from(e5);
                  var r5 = 0, n3 = t5.length;
                  t5.length !== e5.length && (r5++, n3 = Math.min(t5.length, e5.length));
                  for (var i2 = -1; ++i2 < n3; )
                    r5 += t5[i2] ^ e5[i2];
                  return r5;
                }(n2, h2.slice(0, a2)))
                  throw new Error("decryption error");
                for (var p2 = a2; 0 === h2[p2]; )
                  p2++;
                if (1 !== h2[p2++])
                  throw new Error("decryption error");
                return h2.slice(p2);
              }(p, h);
            if (1 === l)
              return function(t4, e4, r4) {
                for (var n2 = e4.slice(0, 2), i2 = 2, o2 = 0; 0 !== e4[i2++]; )
                  if (i2 >= e4.length) {
                    o2++;
                    break;
                  }
                var a2 = e4.slice(2, i2 - 1);
                if (("0002" !== n2.toString("hex") && !r4 || "0001" !== n2.toString("hex") && r4) && o2++, a2.length < 8 && o2++, o2)
                  throw new Error("decryption error");
                return e4.slice(i2);
              }(0, h, r3);
            if (3 === l)
              return h;
            throw new Error("unknown padding");
          };
        }, 2937: (t2, e2, r2) => {
          var n = r2(5053), i = r2(4276), o = r2(5833), a = r2(7797), s = r2(1190), u = r2(7799), c = r2(5218), f = r2(1095), l = r2(9732).Buffer;
          t2.exports = function(t3, e3, r3) {
            var h;
            h = t3.padding ? t3.padding : r3 ? 1 : 4;
            var p, d = n(t3);
            if (4 === h)
              p = function(t4, e4) {
                var r4 = t4.modulus.byteLength(), n2 = e4.length, c2 = o("sha1").update(l.alloc(0)).digest(), f2 = c2.length, h2 = 2 * f2;
                if (n2 > r4 - h2 - 2)
                  throw new Error("message too long");
                var p2 = l.alloc(r4 - n2 - h2 - 2), d2 = r4 - f2 - 1, y = i(f2), b = s(l.concat([c2, p2, l.alloc(1, 1), e4], d2), a(y, d2)), m = s(y, a(b, f2));
                return new u(l.concat([l.alloc(1), m, b], r4));
              }(d, e3);
            else if (1 === h)
              p = function(t4, e4, r4) {
                var n2, o2 = e4.length, a2 = t4.modulus.byteLength();
                if (o2 > a2 - 11)
                  throw new Error("message too long");
                return n2 = r4 ? l.alloc(a2 - o2 - 3, 255) : function(t5) {
                  for (var e5, r5 = l.allocUnsafe(t5), n3 = 0, o3 = i(2 * t5), a3 = 0; n3 < t5; )
                    a3 === o3.length && (o3 = i(2 * t5), a3 = 0), (e5 = o3[a3++]) && (r5[n3++] = e5);
                  return r5;
                }(a2 - o2 - 3), new u(l.concat([l.from([0, r4 ? 1 : 2]), n2, l.alloc(1), e4], a2));
              }(d, e3, r3);
            else {
              if (3 !== h)
                throw new Error("unknown padding");
              if ((p = new u(e3)).cmp(d.modulus) >= 0)
                throw new Error("data too long for modulus");
            }
            return r3 ? f(p, d) : c(p, d);
          };
        }, 5218: (t2, e2, r2) => {
          var n = r2(7799), i = r2(9732).Buffer;
          t2.exports = function(t3, e3) {
            return i.from(t3.toRed(n.mont(e3.modulus)).redPow(new n(e3.publicExponent)).fromRed().toArray());
          };
        }, 1190: (t2) => {
          t2.exports = function(t3, e2) {
            for (var r2 = t3.length, n = -1; ++n < r2; )
              t3[n] ^= e2[n];
            return t3;
          };
        }, 4276: (t2, e2, r2) => {
          "use strict";
          var n = 65536, i = r2(9732).Buffer, o = r2.g.crypto || r2.g.msCrypto;
          o && o.getRandomValues ? t2.exports = function(t3, e3) {
            if (t3 > 4294967295)
              throw new RangeError("requested too many random bytes");
            var r3 = i.allocUnsafe(t3);
            if (t3 > 0)
              if (t3 > n)
                for (var a = 0; a < t3; a += n)
                  o.getRandomValues(r3.slice(a, a + n));
              else
                o.getRandomValues(r3);
            return "function" == typeof e3 ? { env: {} }.nextTick(function() {
              e3(null, r3);
            }) : r3;
          } : t2.exports = function() {
            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
          };
        }, 7952: (t2, e2, r2) => {
          "use strict";
          function n() {
            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
          }
          var i = r2(9732), o = r2(4276), a = i.Buffer, s = i.kMaxLength, u = r2.g.crypto || r2.g.msCrypto, c = Math.pow(2, 32) - 1;
          function f(t3, e3) {
            if ("number" != typeof t3 || t3 != t3)
              throw new TypeError("offset must be a number");
            if (t3 > c || t3 < 0)
              throw new TypeError("offset must be a uint32");
            if (t3 > s || t3 > e3)
              throw new RangeError("offset out of range");
          }
          function l(t3, e3, r3) {
            if ("number" != typeof t3 || t3 != t3)
              throw new TypeError("size must be a number");
            if (t3 > c || t3 < 0)
              throw new TypeError("size must be a uint32");
            if (t3 + e3 > r3 || t3 > s)
              throw new RangeError("buffer too small");
          }
          function h(t3, e3, r3, n2) {
            if ({ env: {} }.browser) {
              var i2 = t3.buffer, a2 = new Uint8Array(i2, e3, r3);
              return u.getRandomValues(a2), n2 ? void { env: {} }.nextTick(function() {
                n2(null, t3);
              }) : t3;
            }
            if (!n2)
              return o(r3).copy(t3, e3), t3;
            o(r3, function(r4, i3) {
              if (r4)
                return n2(r4);
              i3.copy(t3, e3), n2(null, t3);
            });
          }
          u && u.getRandomValues || !{ env: {} }.browser ? (e2.randomFill = function(t3, e3, n2, i2) {
            if (!(a.isBuffer(t3) || t3 instanceof r2.g.Uint8Array))
              throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            if ("function" == typeof e3)
              i2 = e3, e3 = 0, n2 = t3.length;
            else if ("function" == typeof n2)
              i2 = n2, n2 = t3.length - e3;
            else if ("function" != typeof i2)
              throw new TypeError('"cb" argument must be a function');
            return f(e3, t3.length), l(n2, e3, t3.length), h(t3, e3, n2, i2);
          }, e2.randomFillSync = function(t3, e3, n2) {
            if (void 0 === e3 && (e3 = 0), !(a.isBuffer(t3) || t3 instanceof r2.g.Uint8Array))
              throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            return f(e3, t3.length), void 0 === n2 && (n2 = t3.length - e3), l(n2, e3, t3.length), h(t3, e3, n2);
          }) : (e2.randomFill = n, e2.randomFillSync = n);
        }, 1313: (t2, e2, r2) => {
          "use strict";
          var n = r2(4758), i = Object.keys || function(t3) {
            var e3 = [];
            for (var r3 in t3)
              e3.push(r3);
            return e3;
          };
          t2.exports = l;
          var o = Object.create(r2(7919));
          o.inherits = r2(1679);
          var a = r2(7991), s = r2(9147);
          o.inherits(l, a);
          for (var u = i(s.prototype), c = 0; c < u.length; c++) {
            var f = u[c];
            l.prototype[f] || (l.prototype[f] = s.prototype[f]);
          }
          function l(t3) {
            if (!(this instanceof l))
              return new l(t3);
            a.call(this, t3), s.call(this, t3), t3 && false === t3.readable && (this.readable = false), t3 && false === t3.writable && (this.writable = false), this.allowHalfOpen = true, t3 && false === t3.allowHalfOpen && (this.allowHalfOpen = false), this.once("end", h);
          }
          function h() {
            this.allowHalfOpen || this._writableState.ended || n.nextTick(p, this);
          }
          function p(t3) {
            t3.end();
          }
          Object.defineProperty(l.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), Object.defineProperty(l.prototype, "destroyed", { get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
          }, set: function(t3) {
            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t3, this._writableState.destroyed = t3);
          } }), l.prototype._destroy = function(t3, e3) {
            this.push(null), this.end(), n.nextTick(e3, t3);
          };
        }, 9125: (t2, e2, r2) => {
          "use strict";
          t2.exports = o;
          var n = r2(1191), i = Object.create(r2(7919));
          function o(t3) {
            if (!(this instanceof o))
              return new o(t3);
            n.call(this, t3);
          }
          i.inherits = r2(1679), i.inherits(o, n), o.prototype._transform = function(t3, e3, r3) {
            r3(null, t3);
          };
        }, 7991: (t2, e2, r2) => {
          "use strict";
          var n = r2(4758);
          t2.exports = v;
          var i, o = r2(5455);
          v.ReadableState = m, r2(3550).EventEmitter;
          var a = function(t3, e3) {
            return t3.listeners(e3).length;
          }, s = r2(5864), u = r2(8317).Buffer, c = (void 0 !== r2.g ? r2.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {
          }, f = Object.create(r2(7919));
          f.inherits = r2(1679);
          var l = r2(9838), h = void 0;
          h = l && l.debuglog ? l.debuglog("stream") : function() {
          };
          var p, d = r2(6567), y = r2(8639);
          f.inherits(v, s);
          var b = ["error", "close", "destroy", "pause", "resume"];
          function m(t3, e3) {
            t3 = t3 || {};
            var n2 = e3 instanceof (i = i || r2(1313));
            this.objectMode = !!t3.objectMode, n2 && (this.objectMode = this.objectMode || !!t3.readableObjectMode);
            var o2 = t3.highWaterMark, a2 = t3.readableHighWaterMark, s2 = this.objectMode ? 16 : 16384;
            this.highWaterMark = o2 || 0 === o2 ? o2 : n2 && (a2 || 0 === a2) ? a2 : s2, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.destroyed = false, this.defaultEncoding = t3.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t3.encoding && (p || (p = r2(136).I), this.decoder = new p(t3.encoding), this.encoding = t3.encoding);
          }
          function v(t3) {
            if (i = i || r2(1313), !(this instanceof v))
              return new v(t3);
            this._readableState = new m(t3, this), this.readable = true, t3 && ("function" == typeof t3.read && (this._read = t3.read), "function" == typeof t3.destroy && (this._destroy = t3.destroy)), s.call(this);
          }
          function g(t3, e3, r3, n2, i2) {
            var o2, a2 = t3._readableState;
            return null === e3 ? (a2.reading = false, function(t4, e4) {
              if (!e4.ended) {
                if (e4.decoder) {
                  var r4 = e4.decoder.end();
                  r4 && r4.length && (e4.buffer.push(r4), e4.length += e4.objectMode ? 1 : r4.length);
                }
                e4.ended = true, O(t4);
              }
            }(t3, a2)) : (i2 || (o2 = function(t4, e4) {
              var r4, n3;
              return n3 = e4, u.isBuffer(n3) || n3 instanceof c || "string" == typeof e4 || void 0 === e4 || t4.objectMode || (r4 = new TypeError("Invalid non-string/buffer chunk")), r4;
            }(a2, e3)), o2 ? t3.emit("error", o2) : a2.objectMode || e3 && e3.length > 0 ? ("string" == typeof e3 || a2.objectMode || Object.getPrototypeOf(e3) === u.prototype || (e3 = function(t4) {
              return u.from(t4);
            }(e3)), n2 ? a2.endEmitted ? t3.emit("error", new Error("stream.unshift() after end event")) : _(t3, a2, e3, true) : a2.ended ? t3.emit("error", new Error("stream.push() after EOF")) : (a2.reading = false, a2.decoder && !r3 ? (e3 = a2.decoder.write(e3), a2.objectMode || 0 !== e3.length ? _(t3, a2, e3, false) : $(t3, a2)) : _(t3, a2, e3, false))) : n2 || (a2.reading = false)), function(t4) {
              return !t4.ended && (t4.needReadable || t4.length < t4.highWaterMark || 0 === t4.length);
            }(a2);
          }
          function _(t3, e3, r3, n2) {
            e3.flowing && 0 === e3.length && !e3.sync ? (t3.emit("data", r3), t3.read(0)) : (e3.length += e3.objectMode ? 1 : r3.length, n2 ? e3.buffer.unshift(r3) : e3.buffer.push(r3), e3.needReadable && O(t3)), $(t3, e3);
          }
          Object.defineProperty(v.prototype, "destroyed", { get: function() {
            return void 0 !== this._readableState && this._readableState.destroyed;
          }, set: function(t3) {
            this._readableState && (this._readableState.destroyed = t3);
          } }), v.prototype.destroy = y.destroy, v.prototype._undestroy = y.undestroy, v.prototype._destroy = function(t3, e3) {
            this.push(null), e3(t3);
          }, v.prototype.push = function(t3, e3) {
            var r3, n2 = this._readableState;
            return n2.objectMode ? r3 = true : "string" == typeof t3 && ((e3 = e3 || n2.defaultEncoding) !== n2.encoding && (t3 = u.from(t3, e3), e3 = ""), r3 = true), g(this, t3, e3, false, r3);
          }, v.prototype.unshift = function(t3) {
            return g(this, t3, null, true, false);
          }, v.prototype.isPaused = function() {
            return false === this._readableState.flowing;
          }, v.prototype.setEncoding = function(t3) {
            return p || (p = r2(136).I), this._readableState.decoder = new p(t3), this._readableState.encoding = t3, this;
          };
          var w = 8388608;
          function S(t3, e3) {
            return t3 <= 0 || 0 === e3.length && e3.ended ? 0 : e3.objectMode ? 1 : t3 != t3 ? e3.flowing && e3.length ? e3.buffer.head.data.length : e3.length : (t3 > e3.highWaterMark && (e3.highWaterMark = function(t4) {
              return t4 >= w ? t4 = w : (t4--, t4 |= t4 >>> 1, t4 |= t4 >>> 2, t4 |= t4 >>> 4, t4 |= t4 >>> 8, t4 |= t4 >>> 16, t4++), t4;
            }(t3)), t3 <= e3.length ? t3 : e3.ended ? e3.length : (e3.needReadable = true, 0));
          }
          function O(t3) {
            var e3 = t3._readableState;
            e3.needReadable = false, e3.emittedReadable || (h("emitReadable", e3.flowing), e3.emittedReadable = true, e3.sync ? n.nextTick(j, t3) : j(t3));
          }
          function j(t3) {
            h("emit readable"), t3.emit("readable"), x(t3);
          }
          function $(t3, e3) {
            e3.readingMore || (e3.readingMore = true, n.nextTick(E, t3, e3));
          }
          function E(t3, e3) {
            for (var r3 = e3.length; !e3.reading && !e3.flowing && !e3.ended && e3.length < e3.highWaterMark && (h("maybeReadMore read 0"), t3.read(0), r3 !== e3.length); )
              r3 = e3.length;
            e3.readingMore = false;
          }
          function A(t3) {
            h("readable nexttick read 0"), t3.read(0);
          }
          function P(t3, e3) {
            e3.reading || (h("resume read 0"), t3.read(0)), e3.resumeScheduled = false, e3.awaitDrain = 0, t3.emit("resume"), x(t3), e3.flowing && !e3.reading && t3.read(0);
          }
          function x(t3) {
            var e3 = t3._readableState;
            for (h("flow", e3.flowing); e3.flowing && null !== t3.read(); )
              ;
          }
          function k(t3, e3) {
            return 0 === e3.length ? null : (e3.objectMode ? r3 = e3.buffer.shift() : !t3 || t3 >= e3.length ? (r3 = e3.decoder ? e3.buffer.join("") : 1 === e3.buffer.length ? e3.buffer.head.data : e3.buffer.concat(e3.length), e3.buffer.clear()) : r3 = function(t4, e4, r4) {
              var n2;
              return t4 < e4.head.data.length ? (n2 = e4.head.data.slice(0, t4), e4.head.data = e4.head.data.slice(t4)) : n2 = t4 === e4.head.data.length ? e4.shift() : r4 ? function(t5, e5) {
                var r5 = e5.head, n3 = 1, i2 = r5.data;
                for (t5 -= i2.length; r5 = r5.next; ) {
                  var o2 = r5.data, a2 = t5 > o2.length ? o2.length : t5;
                  if (a2 === o2.length ? i2 += o2 : i2 += o2.slice(0, t5), 0 == (t5 -= a2)) {
                    a2 === o2.length ? (++n3, r5.next ? e5.head = r5.next : e5.head = e5.tail = null) : (e5.head = r5, r5.data = o2.slice(a2));
                    break;
                  }
                  ++n3;
                }
                return e5.length -= n3, i2;
              }(t4, e4) : function(t5, e5) {
                var r5 = u.allocUnsafe(t5), n3 = e5.head, i2 = 1;
                for (n3.data.copy(r5), t5 -= n3.data.length; n3 = n3.next; ) {
                  var o2 = n3.data, a2 = t5 > o2.length ? o2.length : t5;
                  if (o2.copy(r5, r5.length - t5, 0, a2), 0 == (t5 -= a2)) {
                    a2 === o2.length ? (++i2, n3.next ? e5.head = n3.next : e5.head = e5.tail = null) : (e5.head = n3, n3.data = o2.slice(a2));
                    break;
                  }
                  ++i2;
                }
                return e5.length -= i2, r5;
              }(t4, e4), n2;
            }(t3, e3.buffer, e3.decoder), r3);
            var r3;
          }
          function M(t3) {
            var e3 = t3._readableState;
            if (e3.length > 0)
              throw new Error('"endReadable()" called on non-empty stream');
            e3.endEmitted || (e3.ended = true, n.nextTick(T, e3, t3));
          }
          function T(t3, e3) {
            t3.endEmitted || 0 !== t3.length || (t3.endEmitted = true, e3.readable = false, e3.emit("end"));
          }
          function B(t3, e3) {
            for (var r3 = 0, n2 = t3.length; r3 < n2; r3++)
              if (t3[r3] === e3)
                return r3;
            return -1;
          }
          v.prototype.read = function(t3) {
            h("read", t3), t3 = parseInt(t3, 10);
            var e3 = this._readableState, r3 = t3;
            if (0 !== t3 && (e3.emittedReadable = false), 0 === t3 && e3.needReadable && (e3.length >= e3.highWaterMark || e3.ended))
              return h("read: emitReadable", e3.length, e3.ended), 0 === e3.length && e3.ended ? M(this) : O(this), null;
            if (0 === (t3 = S(t3, e3)) && e3.ended)
              return 0 === e3.length && M(this), null;
            var n2, i2 = e3.needReadable;
            return h("need readable", i2), (0 === e3.length || e3.length - t3 < e3.highWaterMark) && h("length less than watermark", i2 = true), e3.ended || e3.reading ? h("reading or ended", i2 = false) : i2 && (h("do read"), e3.reading = true, e3.sync = true, 0 === e3.length && (e3.needReadable = true), this._read(e3.highWaterMark), e3.sync = false, e3.reading || (t3 = S(r3, e3))), null === (n2 = t3 > 0 ? k(t3, e3) : null) ? (e3.needReadable = true, t3 = 0) : e3.length -= t3, 0 === e3.length && (e3.ended || (e3.needReadable = true), r3 !== t3 && e3.ended && M(this)), null !== n2 && this.emit("data", n2), n2;
          }, v.prototype._read = function(t3) {
            this.emit("error", new Error("_read() is not implemented"));
          }, v.prototype.pipe = function(t3, e3) {
            var r3 = this, i2 = this._readableState;
            switch (i2.pipesCount) {
              case 0:
                i2.pipes = t3;
                break;
              case 1:
                i2.pipes = [i2.pipes, t3];
                break;
              default:
                i2.pipes.push(t3);
            }
            i2.pipesCount += 1, h("pipe count=%d opts=%j", i2.pipesCount, e3);
            var s2 = e3 && false === e3.end || t3 === { env: {} }.stdout || t3 === { env: {} }.stderr ? m2 : u2;
            function u2() {
              h("onend"), t3.end();
            }
            i2.endEmitted ? n.nextTick(s2) : r3.once("end", s2), t3.on("unpipe", function e4(n2, o2) {
              h("onunpipe"), n2 === r3 && o2 && false === o2.hasUnpiped && (o2.hasUnpiped = true, h("cleanup"), t3.removeListener("close", y2), t3.removeListener("finish", b2), t3.removeListener("drain", c2), t3.removeListener("error", d2), t3.removeListener("unpipe", e4), r3.removeListener("end", u2), r3.removeListener("end", m2), r3.removeListener("data", p2), f2 = true, !i2.awaitDrain || t3._writableState && !t3._writableState.needDrain || c2());
            });
            var c2 = function(t4) {
              return function() {
                var e4 = t4._readableState;
                h("pipeOnDrain", e4.awaitDrain), e4.awaitDrain && e4.awaitDrain--, 0 === e4.awaitDrain && a(t4, "data") && (e4.flowing = true, x(t4));
              };
            }(r3);
            t3.on("drain", c2);
            var f2 = false, l2 = false;
            function p2(e4) {
              h("ondata"), l2 = false, false !== t3.write(e4) || l2 || ((1 === i2.pipesCount && i2.pipes === t3 || i2.pipesCount > 1 && -1 !== B(i2.pipes, t3)) && !f2 && (h("false write response, pause", i2.awaitDrain), i2.awaitDrain++, l2 = true), r3.pause());
            }
            function d2(e4) {
              h("onerror", e4), m2(), t3.removeListener("error", d2), 0 === a(t3, "error") && t3.emit("error", e4);
            }
            function y2() {
              t3.removeListener("finish", b2), m2();
            }
            function b2() {
              h("onfinish"), t3.removeListener("close", y2), m2();
            }
            function m2() {
              h("unpipe"), r3.unpipe(t3);
            }
            return r3.on("data", p2), function(t4, e4, r4) {
              if ("function" == typeof t4.prependListener)
                return t4.prependListener(e4, r4);
              t4._events && t4._events[e4] ? o(t4._events[e4]) ? t4._events[e4].unshift(r4) : t4._events[e4] = [r4, t4._events[e4]] : t4.on(e4, r4);
            }(t3, "error", d2), t3.once("close", y2), t3.once("finish", b2), t3.emit("pipe", r3), i2.flowing || (h("pipe resume"), r3.resume()), t3;
          }, v.prototype.unpipe = function(t3) {
            var e3 = this._readableState, r3 = { hasUnpiped: false };
            if (0 === e3.pipesCount)
              return this;
            if (1 === e3.pipesCount)
              return t3 && t3 !== e3.pipes || (t3 || (t3 = e3.pipes), e3.pipes = null, e3.pipesCount = 0, e3.flowing = false, t3 && t3.emit("unpipe", this, r3)), this;
            if (!t3) {
              var n2 = e3.pipes, i2 = e3.pipesCount;
              e3.pipes = null, e3.pipesCount = 0, e3.flowing = false;
              for (var o2 = 0; o2 < i2; o2++)
                n2[o2].emit("unpipe", this, { hasUnpiped: false });
              return this;
            }
            var a2 = B(e3.pipes, t3);
            return -1 === a2 || (e3.pipes.splice(a2, 1), e3.pipesCount -= 1, 1 === e3.pipesCount && (e3.pipes = e3.pipes[0]), t3.emit("unpipe", this, r3)), this;
          }, v.prototype.on = function(t3, e3) {
            var r3 = s.prototype.on.call(this, t3, e3);
            if ("data" === t3)
              false !== this._readableState.flowing && this.resume();
            else if ("readable" === t3) {
              var i2 = this._readableState;
              i2.endEmitted || i2.readableListening || (i2.readableListening = i2.needReadable = true, i2.emittedReadable = false, i2.reading ? i2.length && O(this) : n.nextTick(A, this));
            }
            return r3;
          }, v.prototype.addListener = v.prototype.on, v.prototype.resume = function() {
            var t3 = this._readableState;
            return t3.flowing || (h("resume"), t3.flowing = true, function(t4, e3) {
              e3.resumeScheduled || (e3.resumeScheduled = true, n.nextTick(P, t4, e3));
            }(this, t3)), this;
          }, v.prototype.pause = function() {
            return h("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (h("pause"), this._readableState.flowing = false, this.emit("pause")), this;
          }, v.prototype.wrap = function(t3) {
            var e3 = this, r3 = this._readableState, n2 = false;
            for (var i2 in t3.on("end", function() {
              if (h("wrapped end"), r3.decoder && !r3.ended) {
                var t4 = r3.decoder.end();
                t4 && t4.length && e3.push(t4);
              }
              e3.push(null);
            }), t3.on("data", function(i3) {
              h("wrapped data"), r3.decoder && (i3 = r3.decoder.write(i3)), r3.objectMode && null == i3 || (r3.objectMode || i3 && i3.length) && (e3.push(i3) || (n2 = true, t3.pause()));
            }), t3)
              void 0 === this[i2] && "function" == typeof t3[i2] && (this[i2] = function(e4) {
                return function() {
                  return t3[e4].apply(t3, arguments);
                };
              }(i2));
            for (var o2 = 0; o2 < b.length; o2++)
              t3.on(b[o2], this.emit.bind(this, b[o2]));
            return this._read = function(e4) {
              h("wrapped _read", e4), n2 && (n2 = false, t3.resume());
            }, this;
          }, Object.defineProperty(v.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
            return this._readableState.highWaterMark;
          } }), v._fromList = k;
        }, 1191: (t2, e2, r2) => {
          "use strict";
          t2.exports = a;
          var n = r2(1313), i = Object.create(r2(7919));
          function o(t3, e3) {
            var r3 = this._transformState;
            r3.transforming = false;
            var n2 = r3.writecb;
            if (!n2)
              return this.emit("error", new Error("write callback called multiple times"));
            r3.writechunk = null, r3.writecb = null, null != e3 && this.push(e3), n2(t3);
            var i2 = this._readableState;
            i2.reading = false, (i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
          }
          function a(t3) {
            if (!(this instanceof a))
              return new a(t3);
            n.call(this, t3), this._transformState = { afterTransform: o.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t3 && ("function" == typeof t3.transform && (this._transform = t3.transform), "function" == typeof t3.flush && (this._flush = t3.flush)), this.on("prefinish", s);
          }
          function s() {
            var t3 = this;
            "function" == typeof this._flush ? this._flush(function(e3, r3) {
              u(t3, e3, r3);
            }) : u(this, null, null);
          }
          function u(t3, e3, r3) {
            if (e3)
              return t3.emit("error", e3);
            if (null != r3 && t3.push(r3), t3._writableState.length)
              throw new Error("Calling transform done when ws.length != 0");
            if (t3._transformState.transforming)
              throw new Error("Calling transform done when still transforming");
            return t3.push(null);
          }
          i.inherits = r2(1679), i.inherits(a, n), a.prototype.push = function(t3, e3) {
            return this._transformState.needTransform = false, n.prototype.push.call(this, t3, e3);
          }, a.prototype._transform = function(t3, e3, r3) {
            throw new Error("_transform() is not implemented");
          }, a.prototype._write = function(t3, e3, r3) {
            var n2 = this._transformState;
            if (n2.writecb = r3, n2.writechunk = t3, n2.writeencoding = e3, !n2.transforming) {
              var i2 = this._readableState;
              (n2.needTransform || i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
            }
          }, a.prototype._read = function(t3) {
            var e3 = this._transformState;
            null !== e3.writechunk && e3.writecb && !e3.transforming ? (e3.transforming = true, this._transform(e3.writechunk, e3.writeencoding, e3.afterTransform)) : e3.needTransform = true;
          }, a.prototype._destroy = function(t3, e3) {
            var r3 = this;
            n.prototype._destroy.call(this, t3, function(t4) {
              e3(t4), r3.emit("close");
            });
          };
        }, 9147: (t2, e2, r2) => {
          "use strict";
          var n = r2(4758);
          function i(t3) {
            var e3 = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(t4, e4) {
                var r3 = t4.entry;
                for (t4.entry = null; r3; ) {
                  var n2 = r3.callback;
                  e4.pendingcb--, n2(void 0), r3 = r3.next;
                }
                e4.corkedRequestsFree.next = t4;
              }(e3, t3);
            };
          }
          t2.exports = b;
          var o, a = !{ env: {} }.browser && ["v0.10", "v0.9."].indexOf({ env: {} }.version.slice(0, 5)) > -1 ? setImmediate : n.nextTick;
          b.WritableState = y;
          var s = Object.create(r2(7919));
          s.inherits = r2(1679);
          var u, c = { deprecate: r2(3340) }, f = r2(5864), l = r2(8317).Buffer, h = (void 0 !== r2.g ? r2.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {
          }, p = r2(8639);
          function d() {
          }
          function y(t3, e3) {
            o = o || r2(1313), t3 = t3 || {};
            var s2 = e3 instanceof o;
            this.objectMode = !!t3.objectMode, s2 && (this.objectMode = this.objectMode || !!t3.writableObjectMode);
            var u2 = t3.highWaterMark, c2 = t3.writableHighWaterMark, f2 = this.objectMode ? 16 : 16384;
            this.highWaterMark = u2 || 0 === u2 ? u2 : s2 && (c2 || 0 === c2) ? c2 : f2, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
            var l2 = false === t3.decodeStrings;
            this.decodeStrings = !l2, this.defaultEncoding = t3.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(t4) {
              !function(t5, e4) {
                var r3 = t5._writableState, i2 = r3.sync, o2 = r3.writecb;
                if (function(t6) {
                  t6.writing = false, t6.writecb = null, t6.length -= t6.writelen, t6.writelen = 0;
                }(r3), e4)
                  !function(t6, e5, r4, i3, o3) {
                    --e5.pendingcb, r4 ? (n.nextTick(o3, i3), n.nextTick(S, t6, e5), t6._writableState.errorEmitted = true, t6.emit("error", i3)) : (o3(i3), t6._writableState.errorEmitted = true, t6.emit("error", i3), S(t6, e5));
                  }(t5, r3, i2, e4, o2);
                else {
                  var s3 = _(r3);
                  s3 || r3.corked || r3.bufferProcessing || !r3.bufferedRequest || g(t5, r3), i2 ? a(v, t5, r3, s3, o2) : v(t5, r3, s3, o2);
                }
              }(e3, t4);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);
          }
          function b(t3) {
            if (o = o || r2(1313), !(u.call(b, this) || this instanceof o))
              return new b(t3);
            this._writableState = new y(t3, this), this.writable = true, t3 && ("function" == typeof t3.write && (this._write = t3.write), "function" == typeof t3.writev && (this._writev = t3.writev), "function" == typeof t3.destroy && (this._destroy = t3.destroy), "function" == typeof t3.final && (this._final = t3.final)), f.call(this);
          }
          function m(t3, e3, r3, n2, i2, o2, a2) {
            e3.writelen = n2, e3.writecb = a2, e3.writing = true, e3.sync = true, r3 ? t3._writev(i2, e3.onwrite) : t3._write(i2, o2, e3.onwrite), e3.sync = false;
          }
          function v(t3, e3, r3, n2) {
            r3 || function(t4, e4) {
              0 === e4.length && e4.needDrain && (e4.needDrain = false, t4.emit("drain"));
            }(t3, e3), e3.pendingcb--, n2(), S(t3, e3);
          }
          function g(t3, e3) {
            e3.bufferProcessing = true;
            var r3 = e3.bufferedRequest;
            if (t3._writev && r3 && r3.next) {
              var n2 = e3.bufferedRequestCount, o2 = new Array(n2), a2 = e3.corkedRequestsFree;
              a2.entry = r3;
              for (var s2 = 0, u2 = true; r3; )
                o2[s2] = r3, r3.isBuf || (u2 = false), r3 = r3.next, s2 += 1;
              o2.allBuffers = u2, m(t3, e3, true, e3.length, o2, "", a2.finish), e3.pendingcb++, e3.lastBufferedRequest = null, a2.next ? (e3.corkedRequestsFree = a2.next, a2.next = null) : e3.corkedRequestsFree = new i(e3), e3.bufferedRequestCount = 0;
            } else {
              for (; r3; ) {
                var c2 = r3.chunk, f2 = r3.encoding, l2 = r3.callback;
                if (m(t3, e3, false, e3.objectMode ? 1 : c2.length, c2, f2, l2), r3 = r3.next, e3.bufferedRequestCount--, e3.writing)
                  break;
              }
              null === r3 && (e3.lastBufferedRequest = null);
            }
            e3.bufferedRequest = r3, e3.bufferProcessing = false;
          }
          function _(t3) {
            return t3.ending && 0 === t3.length && null === t3.bufferedRequest && !t3.finished && !t3.writing;
          }
          function w(t3, e3) {
            t3._final(function(r3) {
              e3.pendingcb--, r3 && t3.emit("error", r3), e3.prefinished = true, t3.emit("prefinish"), S(t3, e3);
            });
          }
          function S(t3, e3) {
            var r3 = _(e3);
            return r3 && (function(t4, e4) {
              e4.prefinished || e4.finalCalled || ("function" == typeof t4._final ? (e4.pendingcb++, e4.finalCalled = true, n.nextTick(w, t4, e4)) : (e4.prefinished = true, t4.emit("prefinish")));
            }(t3, e3), 0 === e3.pendingcb && (e3.finished = true, t3.emit("finish"))), r3;
          }
          s.inherits(b, f), y.prototype.getBuffer = function() {
            for (var t3 = this.bufferedRequest, e3 = []; t3; )
              e3.push(t3), t3 = t3.next;
            return e3;
          }, function() {
            try {
              Object.defineProperty(y.prototype, "buffer", { get: c.deprecate(function() {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
            } catch (t3) {
            }
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (u = Function.prototype[Symbol.hasInstance], Object.defineProperty(b, Symbol.hasInstance, { value: function(t3) {
            return !!u.call(this, t3) || this === b && t3 && t3._writableState instanceof y;
          } })) : u = function(t3) {
            return t3 instanceof this;
          }, b.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"));
          }, b.prototype.write = function(t3, e3, r3) {
            var i2, o2 = this._writableState, a2 = false, s2 = !o2.objectMode && (i2 = t3, l.isBuffer(i2) || i2 instanceof h);
            return s2 && !l.isBuffer(t3) && (t3 = function(t4) {
              return l.from(t4);
            }(t3)), "function" == typeof e3 && (r3 = e3, e3 = null), s2 ? e3 = "buffer" : e3 || (e3 = o2.defaultEncoding), "function" != typeof r3 && (r3 = d), o2.ended ? function(t4, e4) {
              var r4 = new Error("write after end");
              t4.emit("error", r4), n.nextTick(e4, r4);
            }(this, r3) : (s2 || function(t4, e4, r4, i3) {
              var o3 = true, a3 = false;
              return null === r4 ? a3 = new TypeError("May not write null values to stream") : "string" == typeof r4 || void 0 === r4 || e4.objectMode || (a3 = new TypeError("Invalid non-string/buffer chunk")), a3 && (t4.emit("error", a3), n.nextTick(i3, a3), o3 = false), o3;
            }(this, o2, t3, r3)) && (o2.pendingcb++, a2 = function(t4, e4, r4, n2, i3, o3) {
              if (!r4) {
                var a3 = function(t5, e5, r5) {
                  return t5.objectMode || false === t5.decodeStrings || "string" != typeof e5 || (e5 = l.from(e5, r5)), e5;
                }(e4, n2, i3);
                n2 !== a3 && (r4 = true, i3 = "buffer", n2 = a3);
              }
              var s3 = e4.objectMode ? 1 : n2.length;
              e4.length += s3;
              var u2 = e4.length < e4.highWaterMark;
              if (u2 || (e4.needDrain = true), e4.writing || e4.corked) {
                var c2 = e4.lastBufferedRequest;
                e4.lastBufferedRequest = { chunk: n2, encoding: i3, isBuf: r4, callback: o3, next: null }, c2 ? c2.next = e4.lastBufferedRequest : e4.bufferedRequest = e4.lastBufferedRequest, e4.bufferedRequestCount += 1;
              } else
                m(t4, e4, false, s3, n2, i3, o3);
              return u2;
            }(this, o2, s2, t3, e3, r3)), a2;
          }, b.prototype.cork = function() {
            this._writableState.corked++;
          }, b.prototype.uncork = function() {
            var t3 = this._writableState;
            t3.corked && (t3.corked--, t3.writing || t3.corked || t3.bufferProcessing || !t3.bufferedRequest || g(this, t3));
          }, b.prototype.setDefaultEncoding = function(t3) {
            if ("string" == typeof t3 && (t3 = t3.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((t3 + "").toLowerCase()) > -1))
              throw new TypeError("Unknown encoding: " + t3);
            return this._writableState.defaultEncoding = t3, this;
          }, Object.defineProperty(b.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), b.prototype._write = function(t3, e3, r3) {
            r3(new Error("_write() is not implemented"));
          }, b.prototype._writev = null, b.prototype.end = function(t3, e3, r3) {
            var i2 = this._writableState;
            "function" == typeof t3 ? (r3 = t3, t3 = null, e3 = null) : "function" == typeof e3 && (r3 = e3, e3 = null), null != t3 && this.write(t3, e3), i2.corked && (i2.corked = 1, this.uncork()), i2.ending || function(t4, e4, r4) {
              e4.ending = true, S(t4, e4), r4 && (e4.finished ? n.nextTick(r4) : t4.once("finish", r4)), e4.ended = true, t4.writable = false;
            }(this, i2, r3);
          }, Object.defineProperty(b.prototype, "destroyed", { get: function() {
            return void 0 !== this._writableState && this._writableState.destroyed;
          }, set: function(t3) {
            this._writableState && (this._writableState.destroyed = t3);
          } }), b.prototype.destroy = p.destroy, b.prototype._undestroy = p.undestroy, b.prototype._destroy = function(t3, e3) {
            this.end(), e3(t3);
          };
        }, 6567: (t2, e2, r2) => {
          "use strict";
          var n = r2(8317).Buffer, i = r2(5340);
          t2.exports = function() {
            function t3() {
              !function(t4, e3) {
                if (!(t4 instanceof e3))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t3), this.head = null, this.tail = null, this.length = 0;
            }
            return t3.prototype.push = function(t4) {
              var e3 = { data: t4, next: null };
              this.length > 0 ? this.tail.next = e3 : this.head = e3, this.tail = e3, ++this.length;
            }, t3.prototype.unshift = function(t4) {
              var e3 = { data: t4, next: this.head };
              0 === this.length && (this.tail = e3), this.head = e3, ++this.length;
            }, t3.prototype.shift = function() {
              if (0 !== this.length) {
                var t4 = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t4;
              }
            }, t3.prototype.clear = function() {
              this.head = this.tail = null, this.length = 0;
            }, t3.prototype.join = function(t4) {
              if (0 === this.length)
                return "";
              for (var e3 = this.head, r3 = "" + e3.data; e3 = e3.next; )
                r3 += t4 + e3.data;
              return r3;
            }, t3.prototype.concat = function(t4) {
              if (0 === this.length)
                return n.alloc(0);
              for (var e3, r3, i2 = n.allocUnsafe(t4 >>> 0), o = this.head, a = 0; o; )
                e3 = i2, r3 = a, o.data.copy(e3, r3), a += o.data.length, o = o.next;
              return i2;
            }, t3;
          }(), i && i.inspect && i.inspect.custom && (t2.exports.prototype[i.inspect.custom] = function() {
            var t3 = i.inspect({ length: this.length });
            return this.constructor.name + " " + t3;
          });
        }, 8639: (t2, e2, r2) => {
          "use strict";
          var n = r2(4758);
          function i(t3, e3) {
            t3.emit("error", e3);
          }
          t2.exports = { destroy: function(t3, e3) {
            var r3 = this, o = this._readableState && this._readableState.destroyed, a = this._writableState && this._writableState.destroyed;
            return o || a ? (e3 ? e3(t3) : t3 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, n.nextTick(i, this, t3)) : n.nextTick(i, this, t3)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t3 || null, function(t4) {
              !e3 && t4 ? r3._writableState ? r3._writableState.errorEmitted || (r3._writableState.errorEmitted = true, n.nextTick(i, r3, t4)) : n.nextTick(i, r3, t4) : e3 && e3(t4);
            }), this);
          }, undestroy: function() {
            this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
          } };
        }, 5864: (t2, e2, r2) => {
          t2.exports = r2(3550).EventEmitter;
        }, 8317: (t2, e2, r2) => {
          var n = r2(5832), i = n.Buffer;
          function o(t3, e3) {
            for (var r3 in t3)
              e3[r3] = t3[r3];
          }
          function a(t3, e3, r3) {
            return i(t3, e3, r3);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t2.exports = n : (o(n, e2), e2.Buffer = a), o(i, a), a.from = function(t3, e3, r3) {
            if ("number" == typeof t3)
              throw new TypeError("Argument must not be a number");
            return i(t3, e3, r3);
          }, a.alloc = function(t3, e3, r3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            var n2 = i(t3);
            return void 0 !== e3 ? "string" == typeof r3 ? n2.fill(e3, r3) : n2.fill(e3) : n2.fill(0), n2;
          }, a.allocUnsafe = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return i(t3);
          }, a.allocUnsafeSlow = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return n.SlowBuffer(t3);
          };
        }, 3292: (t2, e2, r2) => {
          (e2 = t2.exports = r2(7991)).Stream = e2, e2.Readable = e2, e2.Writable = r2(9147), e2.Duplex = r2(1313), e2.Transform = r2(1191), e2.PassThrough = r2(9125);
        }, 1058: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer, i = r2(1679), o = r2(6936), a = new Array(16), s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], u = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], c = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], f = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11], l = [0, 1518500249, 1859775393, 2400959708, 2840853838], h = [1352829926, 1548603684, 1836072691, 2053994217, 0];
          function p() {
            o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
          }
          function d(t3, e3) {
            return t3 << e3 | t3 >>> 32 - e3;
          }
          function y(t3, e3, r3, n2, i2, o2, a2, s2) {
            return d(t3 + (e3 ^ r3 ^ n2) + o2 + a2 | 0, s2) + i2 | 0;
          }
          function b(t3, e3, r3, n2, i2, o2, a2, s2) {
            return d(t3 + (e3 & r3 | ~e3 & n2) + o2 + a2 | 0, s2) + i2 | 0;
          }
          function m(t3, e3, r3, n2, i2, o2, a2, s2) {
            return d(t3 + ((e3 | ~r3) ^ n2) + o2 + a2 | 0, s2) + i2 | 0;
          }
          function v(t3, e3, r3, n2, i2, o2, a2, s2) {
            return d(t3 + (e3 & n2 | r3 & ~n2) + o2 + a2 | 0, s2) + i2 | 0;
          }
          function g(t3, e3, r3, n2, i2, o2, a2, s2) {
            return d(t3 + (e3 ^ (r3 | ~n2)) + o2 + a2 | 0, s2) + i2 | 0;
          }
          i(p, o), p.prototype._update = function() {
            for (var t3 = a, e3 = 0; e3 < 16; ++e3)
              t3[e3] = this._block.readInt32LE(4 * e3);
            for (var r3 = 0 | this._a, n2 = 0 | this._b, i2 = 0 | this._c, o2 = 0 | this._d, p2 = 0 | this._e, _ = 0 | this._a, w = 0 | this._b, S = 0 | this._c, O = 0 | this._d, j = 0 | this._e, $ = 0; $ < 80; $ += 1) {
              var E, A;
              $ < 16 ? (E = y(r3, n2, i2, o2, p2, t3[s[$]], l[0], c[$]), A = g(_, w, S, O, j, t3[u[$]], h[0], f[$])) : $ < 32 ? (E = b(r3, n2, i2, o2, p2, t3[s[$]], l[1], c[$]), A = v(_, w, S, O, j, t3[u[$]], h[1], f[$])) : $ < 48 ? (E = m(r3, n2, i2, o2, p2, t3[s[$]], l[2], c[$]), A = m(_, w, S, O, j, t3[u[$]], h[2], f[$])) : $ < 64 ? (E = v(r3, n2, i2, o2, p2, t3[s[$]], l[3], c[$]), A = b(_, w, S, O, j, t3[u[$]], h[3], f[$])) : (E = g(r3, n2, i2, o2, p2, t3[s[$]], l[4], c[$]), A = y(_, w, S, O, j, t3[u[$]], h[4], f[$])), r3 = p2, p2 = o2, o2 = d(i2, 10), i2 = n2, n2 = E, _ = j, j = O, O = d(S, 10), S = w, w = A;
            }
            var P = this._b + i2 + O | 0;
            this._b = this._c + o2 + j | 0, this._c = this._d + p2 + _ | 0, this._d = this._e + r3 + w | 0, this._e = this._a + n2 + S | 0, this._a = P;
          }, p.prototype._digest = function() {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
            var t3 = n.alloc ? n.alloc(20) : new n(20);
            return t3.writeInt32LE(this._a, 0), t3.writeInt32LE(this._b, 4), t3.writeInt32LE(this._c, 8), t3.writeInt32LE(this._d, 12), t3.writeInt32LE(this._e, 16), t3;
          }, t2.exports = p;
        }, 9732: (t2, e2, r2) => {
          var n = r2(5832), i = n.Buffer;
          function o(t3, e3) {
            for (var r3 in t3)
              e3[r3] = t3[r3];
          }
          function a(t3, e3, r3) {
            return i(t3, e3, r3);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t2.exports = n : (o(n, e2), e2.Buffer = a), a.prototype = Object.create(i.prototype), o(i, a), a.from = function(t3, e3, r3) {
            if ("number" == typeof t3)
              throw new TypeError("Argument must not be a number");
            return i(t3, e3, r3);
          }, a.alloc = function(t3, e3, r3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            var n2 = i(t3);
            return void 0 !== e3 ? "string" == typeof r3 ? n2.fill(e3, r3) : n2.fill(e3) : n2.fill(0), n2;
          }, a.allocUnsafe = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return i(t3);
          }, a.allocUnsafeSlow = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return n.SlowBuffer(t3);
          };
        }, 2724: (t2, e2, r2) => {
          "use strict";
          var n = r2(3071), i = r2(9344), o = n("RegExp.prototype.exec"), a = r2(2268);
          t2.exports = function(t3) {
            if (!i(t3))
              throw new a("`regex` must be a RegExp");
            return function(e3) {
              return null !== o(t3, e3);
            };
          };
        }, 3900: (t2, e2, r2) => {
          "use strict";
          var n = r2(6400), i = r2(6750), o = r2(3191)(), a = r2(1464), s = r2(2268), u = n("%Math.floor%");
          t2.exports = function(t3, e3) {
            if ("function" != typeof t3)
              throw new s("`fn` is not a function");
            if ("number" != typeof e3 || e3 < 0 || e3 > 4294967295 || u(e3) !== e3)
              throw new s("`length` must be a positive 32-bit integer");
            var r3 = arguments.length > 2 && !!arguments[2], n2 = true, c = true;
            if ("length" in t3 && a) {
              var f = a(t3, "length");
              f && !f.configurable && (n2 = false), f && !f.writable && (c = false);
            }
            return (n2 || c || !r3) && (o ? i(t3, "length", e3, true, true) : i(t3, "length", e3)), t3;
          };
        }, 1485: (t2, e2, r2) => {
          var n = r2(9732).Buffer;
          function i(t3, e3) {
            this._block = n.alloc(t3), this._finalSize = e3, this._blockSize = t3, this._len = 0;
          }
          i.prototype.update = function(t3, e3) {
            "string" == typeof t3 && (e3 = e3 || "utf8", t3 = n.from(t3, e3));
            for (var r3 = this._block, i2 = this._blockSize, o = t3.length, a = this._len, s = 0; s < o; ) {
              for (var u = a % i2, c = Math.min(o - s, i2 - u), f = 0; f < c; f++)
                r3[u + f] = t3[s + f];
              s += c, (a += c) % i2 == 0 && this._update(r3);
            }
            return this._len += o, this;
          }, i.prototype.digest = function(t3) {
            var e3 = this._len % this._blockSize;
            this._block[e3] = 128, this._block.fill(0, e3 + 1), e3 >= this._finalSize && (this._update(this._block), this._block.fill(0));
            var r3 = 8 * this._len;
            if (r3 <= 4294967295)
              this._block.writeUInt32BE(r3, this._blockSize - 4);
            else {
              var n2 = (4294967295 & r3) >>> 0, i2 = (r3 - n2) / 4294967296;
              this._block.writeUInt32BE(i2, this._blockSize - 8), this._block.writeUInt32BE(n2, this._blockSize - 4);
            }
            this._update(this._block);
            var o = this._hash();
            return t3 ? o.toString(t3) : o;
          }, i.prototype._update = function() {
            throw new Error("_update must be implemented by subclass");
          }, t2.exports = i;
        }, 3261: (t2, e2, r2) => {
          var n = t2.exports = function(t3) {
            t3 = t3.toLowerCase();
            var e3 = n[t3];
            if (!e3)
              throw new Error(t3 + " is not supported (we accept pull requests)");
            return new e3();
          };
          n.sha = r2(2219), n.sha1 = r2(68), n.sha224 = r2(3027), n.sha256 = r2(8890), n.sha384 = r2(5938), n.sha512 = r2(6467);
        }, 2219: (t2, e2, r2) => {
          var n = r2(1679), i = r2(1485), o = r2(9732).Buffer, a = [1518500249, 1859775393, -1894007588, -899497514], s = new Array(80);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(t3) {
            return t3 << 30 | t3 >>> 2;
          }
          function f(t3, e3, r3, n2) {
            return 0 === t3 ? e3 & r3 | ~e3 & n2 : 2 === t3 ? e3 & r3 | e3 & n2 | r3 & n2 : e3 ^ r3 ^ n2;
          }
          n(u, i), u.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, u.prototype._update = function(t3) {
            for (var e3, r3 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, l = 0; l < 16; ++l)
              r3[l] = t3.readInt32BE(4 * l);
            for (; l < 80; ++l)
              r3[l] = r3[l - 3] ^ r3[l - 8] ^ r3[l - 14] ^ r3[l - 16];
            for (var h = 0; h < 80; ++h) {
              var p = ~~(h / 20), d = 0 | ((e3 = n2) << 5 | e3 >>> 27) + f(p, i2, o2, s2) + u2 + r3[h] + a[p];
              u2 = s2, s2 = o2, o2 = c(i2), i2 = n2, n2 = d;
            }
            this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0;
          }, u.prototype._hash = function() {
            var t3 = o.allocUnsafe(20);
            return t3.writeInt32BE(0 | this._a, 0), t3.writeInt32BE(0 | this._b, 4), t3.writeInt32BE(0 | this._c, 8), t3.writeInt32BE(0 | this._d, 12), t3.writeInt32BE(0 | this._e, 16), t3;
          }, t2.exports = u;
        }, 68: (t2, e2, r2) => {
          var n = r2(1679), i = r2(1485), o = r2(9732).Buffer, a = [1518500249, 1859775393, -1894007588, -899497514], s = new Array(80);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(t3) {
            return t3 << 5 | t3 >>> 27;
          }
          function f(t3) {
            return t3 << 30 | t3 >>> 2;
          }
          function l(t3, e3, r3, n2) {
            return 0 === t3 ? e3 & r3 | ~e3 & n2 : 2 === t3 ? e3 & r3 | e3 & n2 | r3 & n2 : e3 ^ r3 ^ n2;
          }
          n(u, i), u.prototype.init = function() {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, u.prototype._update = function(t3) {
            for (var e3, r3 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, h = 0; h < 16; ++h)
              r3[h] = t3.readInt32BE(4 * h);
            for (; h < 80; ++h)
              r3[h] = (e3 = r3[h - 3] ^ r3[h - 8] ^ r3[h - 14] ^ r3[h - 16]) << 1 | e3 >>> 31;
            for (var p = 0; p < 80; ++p) {
              var d = ~~(p / 20), y = c(n2) + l(d, i2, o2, s2) + u2 + r3[p] + a[d] | 0;
              u2 = s2, s2 = o2, o2 = f(i2), i2 = n2, n2 = y;
            }
            this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0;
          }, u.prototype._hash = function() {
            var t3 = o.allocUnsafe(20);
            return t3.writeInt32BE(0 | this._a, 0), t3.writeInt32BE(0 | this._b, 4), t3.writeInt32BE(0 | this._c, 8), t3.writeInt32BE(0 | this._d, 12), t3.writeInt32BE(0 | this._e, 16), t3;
          }, t2.exports = u;
        }, 3027: (t2, e2, r2) => {
          var n = r2(1679), i = r2(8890), o = r2(1485), a = r2(9732).Buffer, s = new Array(64);
          function u() {
            this.init(), this._w = s, o.call(this, 64, 56);
          }
          n(u, i), u.prototype.init = function() {
            return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
          }, u.prototype._hash = function() {
            var t3 = a.allocUnsafe(28);
            return t3.writeInt32BE(this._a, 0), t3.writeInt32BE(this._b, 4), t3.writeInt32BE(this._c, 8), t3.writeInt32BE(this._d, 12), t3.writeInt32BE(this._e, 16), t3.writeInt32BE(this._f, 20), t3.writeInt32BE(this._g, 24), t3;
          }, t2.exports = u;
        }, 8890: (t2, e2, r2) => {
          var n = r2(1679), i = r2(1485), o = r2(9732).Buffer, a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], s = new Array(64);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(t3, e3, r3) {
            return r3 ^ t3 & (e3 ^ r3);
          }
          function f(t3, e3, r3) {
            return t3 & e3 | r3 & (t3 | e3);
          }
          function l(t3) {
            return (t3 >>> 2 | t3 << 30) ^ (t3 >>> 13 | t3 << 19) ^ (t3 >>> 22 | t3 << 10);
          }
          function h(t3) {
            return (t3 >>> 6 | t3 << 26) ^ (t3 >>> 11 | t3 << 21) ^ (t3 >>> 25 | t3 << 7);
          }
          function p(t3) {
            return (t3 >>> 7 | t3 << 25) ^ (t3 >>> 18 | t3 << 14) ^ t3 >>> 3;
          }
          n(u, i), u.prototype.init = function() {
            return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
          }, u.prototype._update = function(t3) {
            for (var e3, r3 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, d = 0 | this._f, y = 0 | this._g, b = 0 | this._h, m = 0; m < 16; ++m)
              r3[m] = t3.readInt32BE(4 * m);
            for (; m < 64; ++m)
              r3[m] = 0 | (((e3 = r3[m - 2]) >>> 17 | e3 << 15) ^ (e3 >>> 19 | e3 << 13) ^ e3 >>> 10) + r3[m - 7] + p(r3[m - 15]) + r3[m - 16];
            for (var v = 0; v < 64; ++v) {
              var g = b + h(u2) + c(u2, d, y) + a[v] + r3[v] | 0, _ = l(n2) + f(n2, i2, o2) | 0;
              b = y, y = d, d = u2, u2 = s2 + g | 0, s2 = o2, o2 = i2, i2 = n2, n2 = g + _ | 0;
            }
            this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0, this._f = d + this._f | 0, this._g = y + this._g | 0, this._h = b + this._h | 0;
          }, u.prototype._hash = function() {
            var t3 = o.allocUnsafe(32);
            return t3.writeInt32BE(this._a, 0), t3.writeInt32BE(this._b, 4), t3.writeInt32BE(this._c, 8), t3.writeInt32BE(this._d, 12), t3.writeInt32BE(this._e, 16), t3.writeInt32BE(this._f, 20), t3.writeInt32BE(this._g, 24), t3.writeInt32BE(this._h, 28), t3;
          }, t2.exports = u;
        }, 5938: (t2, e2, r2) => {
          var n = r2(1679), i = r2(6467), o = r2(1485), a = r2(9732).Buffer, s = new Array(160);
          function u() {
            this.init(), this._w = s, o.call(this, 128, 112);
          }
          n(u, i), u.prototype.init = function() {
            return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
          }, u.prototype._hash = function() {
            var t3 = a.allocUnsafe(48);
            function e3(e4, r3, n2) {
              t3.writeInt32BE(e4, n2), t3.writeInt32BE(r3, n2 + 4);
            }
            return e3(this._ah, this._al, 0), e3(this._bh, this._bl, 8), e3(this._ch, this._cl, 16), e3(this._dh, this._dl, 24), e3(this._eh, this._el, 32), e3(this._fh, this._fl, 40), t3;
          }, t2.exports = u;
        }, 6467: (t2, e2, r2) => {
          var n = r2(1679), i = r2(1485), o = r2(9732).Buffer, a = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], s = new Array(160);
          function u() {
            this.init(), this._w = s, i.call(this, 128, 112);
          }
          function c(t3, e3, r3) {
            return r3 ^ t3 & (e3 ^ r3);
          }
          function f(t3, e3, r3) {
            return t3 & e3 | r3 & (t3 | e3);
          }
          function l(t3, e3) {
            return (t3 >>> 28 | e3 << 4) ^ (e3 >>> 2 | t3 << 30) ^ (e3 >>> 7 | t3 << 25);
          }
          function h(t3, e3) {
            return (t3 >>> 14 | e3 << 18) ^ (t3 >>> 18 | e3 << 14) ^ (e3 >>> 9 | t3 << 23);
          }
          function p(t3, e3) {
            return (t3 >>> 1 | e3 << 31) ^ (t3 >>> 8 | e3 << 24) ^ t3 >>> 7;
          }
          function d(t3, e3) {
            return (t3 >>> 1 | e3 << 31) ^ (t3 >>> 8 | e3 << 24) ^ (t3 >>> 7 | e3 << 25);
          }
          function y(t3, e3) {
            return (t3 >>> 19 | e3 << 13) ^ (e3 >>> 29 | t3 << 3) ^ t3 >>> 6;
          }
          function b(t3, e3) {
            return (t3 >>> 19 | e3 << 13) ^ (e3 >>> 29 | t3 << 3) ^ (t3 >>> 6 | e3 << 26);
          }
          function m(t3, e3) {
            return t3 >>> 0 < e3 >>> 0 ? 1 : 0;
          }
          n(u, i), u.prototype.init = function() {
            return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
          }, u.prototype._update = function(t3) {
            for (var e3 = this._w, r3 = 0 | this._ah, n2 = 0 | this._bh, i2 = 0 | this._ch, o2 = 0 | this._dh, s2 = 0 | this._eh, u2 = 0 | this._fh, v = 0 | this._gh, g = 0 | this._hh, _ = 0 | this._al, w = 0 | this._bl, S = 0 | this._cl, O = 0 | this._dl, j = 0 | this._el, $ = 0 | this._fl, E = 0 | this._gl, A = 0 | this._hl, P = 0; P < 32; P += 2)
              e3[P] = t3.readInt32BE(4 * P), e3[P + 1] = t3.readInt32BE(4 * P + 4);
            for (; P < 160; P += 2) {
              var x = e3[P - 30], k = e3[P - 30 + 1], M = p(x, k), T = d(k, x), B = y(x = e3[P - 4], k = e3[P - 4 + 1]), I = b(k, x), R = e3[P - 14], N = e3[P - 14 + 1], D = e3[P - 32], L = e3[P - 32 + 1], C = T + N | 0, U = M + R + m(C, T) | 0;
              U = (U = U + B + m(C = C + I | 0, I) | 0) + D + m(C = C + L | 0, L) | 0, e3[P] = U, e3[P + 1] = C;
            }
            for (var q = 0; q < 160; q += 2) {
              U = e3[q], C = e3[q + 1];
              var F = f(r3, n2, i2), V = f(_, w, S), z = l(r3, _), K = l(_, r3), H = h(s2, j), W = h(j, s2), J = a[q], G = a[q + 1], Y = c(s2, u2, v), Q = c(j, $, E), X = A + W | 0, Z = g + H + m(X, A) | 0;
              Z = (Z = (Z = Z + Y + m(X = X + Q | 0, Q) | 0) + J + m(X = X + G | 0, G) | 0) + U + m(X = X + C | 0, C) | 0;
              var tt = K + V | 0, et = z + F + m(tt, K) | 0;
              g = v, A = E, v = u2, E = $, u2 = s2, $ = j, s2 = o2 + Z + m(j = O + X | 0, O) | 0, o2 = i2, O = S, i2 = n2, S = w, n2 = r3, w = _, r3 = Z + et + m(_ = X + tt | 0, X) | 0;
            }
            this._al = this._al + _ | 0, this._bl = this._bl + w | 0, this._cl = this._cl + S | 0, this._dl = this._dl + O | 0, this._el = this._el + j | 0, this._fl = this._fl + $ | 0, this._gl = this._gl + E | 0, this._hl = this._hl + A | 0, this._ah = this._ah + r3 + m(this._al, _) | 0, this._bh = this._bh + n2 + m(this._bl, w) | 0, this._ch = this._ch + i2 + m(this._cl, S) | 0, this._dh = this._dh + o2 + m(this._dl, O) | 0, this._eh = this._eh + s2 + m(this._el, j) | 0, this._fh = this._fh + u2 + m(this._fl, $) | 0, this._gh = this._gh + v + m(this._gl, E) | 0, this._hh = this._hh + g + m(this._hl, A) | 0;
          }, u.prototype._hash = function() {
            var t3 = o.allocUnsafe(64);
            function e3(e4, r3, n2) {
              t3.writeInt32BE(e4, n2), t3.writeInt32BE(r3, n2 + 4);
            }
            return e3(this._ah, this._al, 0), e3(this._bh, this._bl, 8), e3(this._ch, this._cl, 16), e3(this._dh, this._dl, 24), e3(this._eh, this._el, 32), e3(this._fh, this._fl, 40), e3(this._gh, this._gl, 48), e3(this._hh, this._hl, 56), t3;
          }, t2.exports = u;
        }, 7775: (t2, e2, r2) => {
          t2.exports = i;
          var n = r2(3550).EventEmitter;
          function i() {
            n.call(this);
          }
          r2(1679)(i, n), i.Readable = r2(8134), i.Writable = r2(4186), i.Duplex = r2(4560), i.Transform = r2(8784), i.PassThrough = r2(1026), i.finished = r2(8500), i.pipeline = r2(1144), i.Stream = i, i.prototype.pipe = function(t3, e3) {
            var r3 = this;
            function i2(e4) {
              t3.writable && false === t3.write(e4) && r3.pause && r3.pause();
            }
            function o() {
              r3.readable && r3.resume && r3.resume();
            }
            r3.on("data", i2), t3.on("drain", o), t3._isStdio || e3 && false === e3.end || (r3.on("end", s), r3.on("close", u));
            var a = false;
            function s() {
              a || (a = true, t3.end());
            }
            function u() {
              a || (a = true, "function" == typeof t3.destroy && t3.destroy());
            }
            function c(t4) {
              if (f(), 0 === n.listenerCount(this, "error"))
                throw t4;
            }
            function f() {
              r3.removeListener("data", i2), t3.removeListener("drain", o), r3.removeListener("end", s), r3.removeListener("close", u), r3.removeListener("error", c), t3.removeListener("error", c), r3.removeListener("end", f), r3.removeListener("close", f), t3.removeListener("close", f);
            }
            return r3.on("error", c), t3.on("error", c), r3.on("end", f), r3.on("close", f), t3.on("close", f), t3.emit("pipe", r3), t3;
          };
        }, 198: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          var r2 = {};
          function n(t3, e3, n2) {
            n2 || (n2 = Error);
            var i2 = function(t4) {
              var r3, n3;
              function i3(r4, n4, i4) {
                return t4.call(this, function(t5, r5, n5) {
                  return "string" == typeof e3 ? e3 : e3(t5, r5, n5);
                }(r4, n4, i4)) || this;
              }
              return n3 = t4, (r3 = i3).prototype = Object.create(n3.prototype), r3.prototype.constructor = r3, r3.__proto__ = n3, i3;
            }(n2);
            i2.prototype.name = n2.name, i2.prototype.code = t3, r2[t3] = i2;
          }
          function i(t3, e3) {
            if (Array.isArray(t3)) {
              var r3 = t3.length;
              return t3 = t3.map(function(t4) {
                return String(t4);
              }), r3 > 2 ? "one of ".concat(e3, " ").concat(t3.slice(0, r3 - 1).join(", "), ", or ") + t3[r3 - 1] : 2 === r3 ? "one of ".concat(e3, " ").concat(t3[0], " or ").concat(t3[1]) : "of ".concat(e3, " ").concat(t3[0]);
            }
            return "of ".concat(e3, " ").concat(String(t3));
          }
          n("ERR_INVALID_OPT_VALUE", function(t3, e3) {
            return 'The value "' + e3 + '" is invalid for option "' + t3 + '"';
          }, TypeError), n("ERR_INVALID_ARG_TYPE", function(t3, r3, n2) {
            var o, a, s, u, c;
            if ("string" == typeof r3 && (a = "not ", r3.substr(0, 4) === a) ? (o = "must not be", r3 = r3.replace(/^not /, "")) : o = "must be", function(t4, e3, r4) {
              return (void 0 === r4 || r4 > t4.length) && (r4 = t4.length), t4.substring(r4 - 9, r4) === e3;
            }(t3, " argument"))
              s = "The ".concat(t3, " ").concat(o, " ").concat(i(r3, "type"));
            else {
              var f = ("number" != typeof c && (c = 0), c + 1 > (u = t3).length || -1 === u.indexOf(".", c) ? "argument" : "property");
              s = 'The "'.concat(t3, '" ').concat(f, " ").concat(o, " ").concat(i(r3, "type"));
            }
            return s + ". Received type ".concat(e2(n2));
          }, TypeError), n("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), n("ERR_METHOD_NOT_IMPLEMENTED", function(t3) {
            return "The " + t3 + " method is not implemented";
          }), n("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), n("ERR_STREAM_DESTROYED", function(t3) {
            return "Cannot call " + t3 + " after a stream was destroyed";
          }), n("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), n("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), n("ERR_STREAM_WRITE_AFTER_END", "write after end"), n("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), n("ERR_UNKNOWN_ENCODING", function(t3) {
            return "Unknown encoding: " + t3;
          }, TypeError), n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), t2.exports.F = r2;
        }, 4560: (t2, e2, r2) => {
          "use strict";
          var n = Object.keys || function(t3) {
            var e3 = [];
            for (var r3 in t3)
              e3.push(r3);
            return e3;
          };
          t2.exports = c;
          var i = r2(8134), o = r2(4186);
          r2(1679)(c, i);
          for (var a = n(o.prototype), s = 0; s < a.length; s++) {
            var u = a[s];
            c.prototype[u] || (c.prototype[u] = o.prototype[u]);
          }
          function c(t3) {
            if (!(this instanceof c))
              return new c(t3);
            i.call(this, t3), o.call(this, t3), this.allowHalfOpen = true, t3 && (false === t3.readable && (this.readable = false), false === t3.writable && (this.writable = false), false === t3.allowHalfOpen && (this.allowHalfOpen = false, this.once("end", f)));
          }
          function f() {
            this._writableState.ended || { env: {} }.nextTick(l, this);
          }
          function l(t3) {
            t3.end();
          }
          Object.defineProperty(c.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), Object.defineProperty(c.prototype, "writableBuffer", { enumerable: false, get: function() {
            return this._writableState && this._writableState.getBuffer();
          } }), Object.defineProperty(c.prototype, "writableLength", { enumerable: false, get: function() {
            return this._writableState.length;
          } }), Object.defineProperty(c.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
          }, set: function(t3) {
            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = t3, this._writableState.destroyed = t3);
          } });
        }, 1026: (t2, e2, r2) => {
          "use strict";
          t2.exports = i;
          var n = r2(8784);
          function i(t3) {
            if (!(this instanceof i))
              return new i(t3);
            n.call(this, t3);
          }
          r2(1679)(i, n), i.prototype._transform = function(t3, e3, r3) {
            r3(null, t3);
          };
        }, 8134: (t2, e2, r2) => {
          "use strict";
          var n;
          t2.exports = j, j.ReadableState = O, r2(3550).EventEmitter;
          var i, o = function(t3, e3) {
            return t3.listeners(e3).length;
          }, a = r2(6871), s = r2(5832).Buffer, u = (void 0 !== r2.g ? r2.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {
          }, c = r2(7199);
          i = c && c.debuglog ? c.debuglog("stream") : function() {
          };
          var f, l, h, p = r2(6811), d = r2(6222), y = r2(9681).getHighWaterMark, b = r2(198).F, m = b.ERR_INVALID_ARG_TYPE, v = b.ERR_STREAM_PUSH_AFTER_EOF, g = b.ERR_METHOD_NOT_IMPLEMENTED, _ = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
          r2(1679)(j, a);
          var w = d.errorOrDestroy, S = ["error", "close", "destroy", "pause", "resume"];
          function O(t3, e3, i2) {
            n = n || r2(4560), t3 = t3 || {}, "boolean" != typeof i2 && (i2 = e3 instanceof n), this.objectMode = !!t3.objectMode, i2 && (this.objectMode = this.objectMode || !!t3.readableObjectMode), this.highWaterMark = y(this, t3, "readableHighWaterMark", i2), this.buffer = new p(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = false !== t3.emitClose, this.autoDestroy = !!t3.autoDestroy, this.destroyed = false, this.defaultEncoding = t3.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, t3.encoding && (f || (f = r2(136).I), this.decoder = new f(t3.encoding), this.encoding = t3.encoding);
          }
          function j(t3) {
            if (n = n || r2(4560), !(this instanceof j))
              return new j(t3);
            var e3 = this instanceof n;
            this._readableState = new O(t3, this, e3), this.readable = true, t3 && ("function" == typeof t3.read && (this._read = t3.read), "function" == typeof t3.destroy && (this._destroy = t3.destroy)), a.call(this);
          }
          function $(t3, e3, r3, n2, o2) {
            i("readableAddChunk", e3);
            var a2, c2 = t3._readableState;
            if (null === e3)
              c2.reading = false, function(t4, e4) {
                if (i("onEofChunk"), !e4.ended) {
                  if (e4.decoder) {
                    var r4 = e4.decoder.end();
                    r4 && r4.length && (e4.buffer.push(r4), e4.length += e4.objectMode ? 1 : r4.length);
                  }
                  e4.ended = true, e4.sync ? x(t4) : (e4.needReadable = false, e4.emittedReadable || (e4.emittedReadable = true, k(t4)));
                }
              }(t3, c2);
            else if (o2 || (a2 = function(t4, e4) {
              var r4, n3;
              return n3 = e4, s.isBuffer(n3) || n3 instanceof u || "string" == typeof e4 || void 0 === e4 || t4.objectMode || (r4 = new m("chunk", ["string", "Buffer", "Uint8Array"], e4)), r4;
            }(c2, e3)), a2)
              w(t3, a2);
            else if (c2.objectMode || e3 && e3.length > 0)
              if ("string" == typeof e3 || c2.objectMode || Object.getPrototypeOf(e3) === s.prototype || (e3 = function(t4) {
                return s.from(t4);
              }(e3)), n2)
                c2.endEmitted ? w(t3, new _()) : E(t3, c2, e3, true);
              else if (c2.ended)
                w(t3, new v());
              else {
                if (c2.destroyed)
                  return false;
                c2.reading = false, c2.decoder && !r3 ? (e3 = c2.decoder.write(e3), c2.objectMode || 0 !== e3.length ? E(t3, c2, e3, false) : M(t3, c2)) : E(t3, c2, e3, false);
              }
            else
              n2 || (c2.reading = false, M(t3, c2));
            return !c2.ended && (c2.length < c2.highWaterMark || 0 === c2.length);
          }
          function E(t3, e3, r3, n2) {
            e3.flowing && 0 === e3.length && !e3.sync ? (e3.awaitDrain = 0, t3.emit("data", r3)) : (e3.length += e3.objectMode ? 1 : r3.length, n2 ? e3.buffer.unshift(r3) : e3.buffer.push(r3), e3.needReadable && x(t3)), M(t3, e3);
          }
          Object.defineProperty(j.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._readableState && this._readableState.destroyed;
          }, set: function(t3) {
            this._readableState && (this._readableState.destroyed = t3);
          } }), j.prototype.destroy = d.destroy, j.prototype._undestroy = d.undestroy, j.prototype._destroy = function(t3, e3) {
            e3(t3);
          }, j.prototype.push = function(t3, e3) {
            var r3, n2 = this._readableState;
            return n2.objectMode ? r3 = true : "string" == typeof t3 && ((e3 = e3 || n2.defaultEncoding) !== n2.encoding && (t3 = s.from(t3, e3), e3 = ""), r3 = true), $(this, t3, e3, false, r3);
          }, j.prototype.unshift = function(t3) {
            return $(this, t3, null, true, false);
          }, j.prototype.isPaused = function() {
            return false === this._readableState.flowing;
          }, j.prototype.setEncoding = function(t3) {
            f || (f = r2(136).I);
            var e3 = new f(t3);
            this._readableState.decoder = e3, this._readableState.encoding = this._readableState.decoder.encoding;
            for (var n2 = this._readableState.buffer.head, i2 = ""; null !== n2; )
              i2 += e3.write(n2.data), n2 = n2.next;
            return this._readableState.buffer.clear(), "" !== i2 && this._readableState.buffer.push(i2), this._readableState.length = i2.length, this;
          };
          var A = 1073741824;
          function P(t3, e3) {
            return t3 <= 0 || 0 === e3.length && e3.ended ? 0 : e3.objectMode ? 1 : t3 != t3 ? e3.flowing && e3.length ? e3.buffer.head.data.length : e3.length : (t3 > e3.highWaterMark && (e3.highWaterMark = function(t4) {
              return t4 >= A ? t4 = A : (t4--, t4 |= t4 >>> 1, t4 |= t4 >>> 2, t4 |= t4 >>> 4, t4 |= t4 >>> 8, t4 |= t4 >>> 16, t4++), t4;
            }(t3)), t3 <= e3.length ? t3 : e3.ended ? e3.length : (e3.needReadable = true, 0));
          }
          function x(t3) {
            var e3 = t3._readableState;
            i("emitReadable", e3.needReadable, e3.emittedReadable), e3.needReadable = false, e3.emittedReadable || (i("emitReadable", e3.flowing), e3.emittedReadable = true, { env: {} }.nextTick(k, t3));
          }
          function k(t3) {
            var e3 = t3._readableState;
            i("emitReadable_", e3.destroyed, e3.length, e3.ended), e3.destroyed || !e3.length && !e3.ended || (t3.emit("readable"), e3.emittedReadable = false), e3.needReadable = !e3.flowing && !e3.ended && e3.length <= e3.highWaterMark, N(t3);
          }
          function M(t3, e3) {
            e3.readingMore || (e3.readingMore = true, { env: {} }.nextTick(T, t3, e3));
          }
          function T(t3, e3) {
            for (; !e3.reading && !e3.ended && (e3.length < e3.highWaterMark || e3.flowing && 0 === e3.length); ) {
              var r3 = e3.length;
              if (i("maybeReadMore read 0"), t3.read(0), r3 === e3.length)
                break;
            }
            e3.readingMore = false;
          }
          function B(t3) {
            var e3 = t3._readableState;
            e3.readableListening = t3.listenerCount("readable") > 0, e3.resumeScheduled && !e3.paused ? e3.flowing = true : t3.listenerCount("data") > 0 && t3.resume();
          }
          function I(t3) {
            i("readable nexttick read 0"), t3.read(0);
          }
          function R(t3, e3) {
            i("resume", e3.reading), e3.reading || t3.read(0), e3.resumeScheduled = false, t3.emit("resume"), N(t3), e3.flowing && !e3.reading && t3.read(0);
          }
          function N(t3) {
            var e3 = t3._readableState;
            for (i("flow", e3.flowing); e3.flowing && null !== t3.read(); )
              ;
          }
          function D(t3, e3) {
            return 0 === e3.length ? null : (e3.objectMode ? r3 = e3.buffer.shift() : !t3 || t3 >= e3.length ? (r3 = e3.decoder ? e3.buffer.join("") : 1 === e3.buffer.length ? e3.buffer.first() : e3.buffer.concat(e3.length), e3.buffer.clear()) : r3 = e3.buffer.consume(t3, e3.decoder), r3);
            var r3;
          }
          function L(t3) {
            var e3 = t3._readableState;
            i("endReadable", e3.endEmitted), e3.endEmitted || (e3.ended = true, { env: {} }.nextTick(C, e3, t3));
          }
          function C(t3, e3) {
            if (i("endReadableNT", t3.endEmitted, t3.length), !t3.endEmitted && 0 === t3.length && (t3.endEmitted = true, e3.readable = false, e3.emit("end"), t3.autoDestroy)) {
              var r3 = e3._writableState;
              (!r3 || r3.autoDestroy && r3.finished) && e3.destroy();
            }
          }
          function U(t3, e3) {
            for (var r3 = 0, n2 = t3.length; r3 < n2; r3++)
              if (t3[r3] === e3)
                return r3;
            return -1;
          }
          j.prototype.read = function(t3) {
            i("read", t3), t3 = parseInt(t3, 10);
            var e3 = this._readableState, r3 = t3;
            if (0 !== t3 && (e3.emittedReadable = false), 0 === t3 && e3.needReadable && ((0 !== e3.highWaterMark ? e3.length >= e3.highWaterMark : e3.length > 0) || e3.ended))
              return i("read: emitReadable", e3.length, e3.ended), 0 === e3.length && e3.ended ? L(this) : x(this), null;
            if (0 === (t3 = P(t3, e3)) && e3.ended)
              return 0 === e3.length && L(this), null;
            var n2, o2 = e3.needReadable;
            return i("need readable", o2), (0 === e3.length || e3.length - t3 < e3.highWaterMark) && i("length less than watermark", o2 = true), e3.ended || e3.reading ? i("reading or ended", o2 = false) : o2 && (i("do read"), e3.reading = true, e3.sync = true, 0 === e3.length && (e3.needReadable = true), this._read(e3.highWaterMark), e3.sync = false, e3.reading || (t3 = P(r3, e3))), null === (n2 = t3 > 0 ? D(t3, e3) : null) ? (e3.needReadable = e3.length <= e3.highWaterMark, t3 = 0) : (e3.length -= t3, e3.awaitDrain = 0), 0 === e3.length && (e3.ended || (e3.needReadable = true), r3 !== t3 && e3.ended && L(this)), null !== n2 && this.emit("data", n2), n2;
          }, j.prototype._read = function(t3) {
            w(this, new g("_read()"));
          }, j.prototype.pipe = function(t3, e3) {
            var r3 = this, n2 = this._readableState;
            switch (n2.pipesCount) {
              case 0:
                n2.pipes = t3;
                break;
              case 1:
                n2.pipes = [n2.pipes, t3];
                break;
              default:
                n2.pipes.push(t3);
            }
            n2.pipesCount += 1, i("pipe count=%d opts=%j", n2.pipesCount, e3);
            var a2 = e3 && false === e3.end || t3 === { env: {} }.stdout || t3 === { env: {} }.stderr ? d2 : s2;
            function s2() {
              i("onend"), t3.end();
            }
            n2.endEmitted ? { env: {} }.nextTick(a2) : r3.once("end", a2), t3.on("unpipe", function e4(o2, a3) {
              i("onunpipe"), o2 === r3 && a3 && false === a3.hasUnpiped && (a3.hasUnpiped = true, i("cleanup"), t3.removeListener("close", h2), t3.removeListener("finish", p2), t3.removeListener("drain", u2), t3.removeListener("error", l2), t3.removeListener("unpipe", e4), r3.removeListener("end", s2), r3.removeListener("end", d2), r3.removeListener("data", f2), c2 = true, !n2.awaitDrain || t3._writableState && !t3._writableState.needDrain || u2());
            });
            var u2 = function(t4) {
              return function() {
                var e4 = t4._readableState;
                i("pipeOnDrain", e4.awaitDrain), e4.awaitDrain && e4.awaitDrain--, 0 === e4.awaitDrain && o(t4, "data") && (e4.flowing = true, N(t4));
              };
            }(r3);
            t3.on("drain", u2);
            var c2 = false;
            function f2(e4) {
              i("ondata");
              var o2 = t3.write(e4);
              i("dest.write", o2), false === o2 && ((1 === n2.pipesCount && n2.pipes === t3 || n2.pipesCount > 1 && -1 !== U(n2.pipes, t3)) && !c2 && (i("false write response, pause", n2.awaitDrain), n2.awaitDrain++), r3.pause());
            }
            function l2(e4) {
              i("onerror", e4), d2(), t3.removeListener("error", l2), 0 === o(t3, "error") && w(t3, e4);
            }
            function h2() {
              t3.removeListener("finish", p2), d2();
            }
            function p2() {
              i("onfinish"), t3.removeListener("close", h2), d2();
            }
            function d2() {
              i("unpipe"), r3.unpipe(t3);
            }
            return r3.on("data", f2), function(t4, e4, r4) {
              if ("function" == typeof t4.prependListener)
                return t4.prependListener(e4, r4);
              t4._events && t4._events[e4] ? Array.isArray(t4._events[e4]) ? t4._events[e4].unshift(r4) : t4._events[e4] = [r4, t4._events[e4]] : t4.on(e4, r4);
            }(t3, "error", l2), t3.once("close", h2), t3.once("finish", p2), t3.emit("pipe", r3), n2.flowing || (i("pipe resume"), r3.resume()), t3;
          }, j.prototype.unpipe = function(t3) {
            var e3 = this._readableState, r3 = { hasUnpiped: false };
            if (0 === e3.pipesCount)
              return this;
            if (1 === e3.pipesCount)
              return t3 && t3 !== e3.pipes || (t3 || (t3 = e3.pipes), e3.pipes = null, e3.pipesCount = 0, e3.flowing = false, t3 && t3.emit("unpipe", this, r3)), this;
            if (!t3) {
              var n2 = e3.pipes, i2 = e3.pipesCount;
              e3.pipes = null, e3.pipesCount = 0, e3.flowing = false;
              for (var o2 = 0; o2 < i2; o2++)
                n2[o2].emit("unpipe", this, { hasUnpiped: false });
              return this;
            }
            var a2 = U(e3.pipes, t3);
            return -1 === a2 || (e3.pipes.splice(a2, 1), e3.pipesCount -= 1, 1 === e3.pipesCount && (e3.pipes = e3.pipes[0]), t3.emit("unpipe", this, r3)), this;
          }, j.prototype.on = function(t3, e3) {
            var r3 = a.prototype.on.call(this, t3, e3), n2 = this._readableState;
            return "data" === t3 ? (n2.readableListening = this.listenerCount("readable") > 0, false !== n2.flowing && this.resume()) : "readable" === t3 && (n2.endEmitted || n2.readableListening || (n2.readableListening = n2.needReadable = true, n2.flowing = false, n2.emittedReadable = false, i("on readable", n2.length, n2.reading), n2.length ? x(this) : n2.reading || { env: {} }.nextTick(I, this))), r3;
          }, j.prototype.addListener = j.prototype.on, j.prototype.removeListener = function(t3, e3) {
            var r3 = a.prototype.removeListener.call(this, t3, e3);
            return "readable" === t3 && { env: {} }.nextTick(B, this), r3;
          }, j.prototype.removeAllListeners = function(t3) {
            var e3 = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== t3 && void 0 !== t3 || { env: {} }.nextTick(B, this), e3;
          }, j.prototype.resume = function() {
            var t3 = this._readableState;
            return t3.flowing || (i("resume"), t3.flowing = !t3.readableListening, function(t4, e3) {
              e3.resumeScheduled || (e3.resumeScheduled = true, { env: {} }.nextTick(R, t4, e3));
            }(this, t3)), t3.paused = false, this;
          }, j.prototype.pause = function() {
            return i("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (i("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
          }, j.prototype.wrap = function(t3) {
            var e3 = this, r3 = this._readableState, n2 = false;
            for (var o2 in t3.on("end", function() {
              if (i("wrapped end"), r3.decoder && !r3.ended) {
                var t4 = r3.decoder.end();
                t4 && t4.length && e3.push(t4);
              }
              e3.push(null);
            }), t3.on("data", function(o3) {
              i("wrapped data"), r3.decoder && (o3 = r3.decoder.write(o3)), r3.objectMode && null == o3 || (r3.objectMode || o3 && o3.length) && (e3.push(o3) || (n2 = true, t3.pause()));
            }), t3)
              void 0 === this[o2] && "function" == typeof t3[o2] && (this[o2] = function(e4) {
                return function() {
                  return t3[e4].apply(t3, arguments);
                };
              }(o2));
            for (var a2 = 0; a2 < S.length; a2++)
              t3.on(S[a2], this.emit.bind(this, S[a2]));
            return this._read = function(e4) {
              i("wrapped _read", e4), n2 && (n2 = false, t3.resume());
            }, this;
          }, "function" == typeof Symbol && (j.prototype[Symbol.asyncIterator] = function() {
            return void 0 === l && (l = r2(8493)), l(this);
          }), Object.defineProperty(j.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
            return this._readableState.highWaterMark;
          } }), Object.defineProperty(j.prototype, "readableBuffer", { enumerable: false, get: function() {
            return this._readableState && this._readableState.buffer;
          } }), Object.defineProperty(j.prototype, "readableFlowing", { enumerable: false, get: function() {
            return this._readableState.flowing;
          }, set: function(t3) {
            this._readableState && (this._readableState.flowing = t3);
          } }), j._fromList = D, Object.defineProperty(j.prototype, "readableLength", { enumerable: false, get: function() {
            return this._readableState.length;
          } }), "function" == typeof Symbol && (j.from = function(t3, e3) {
            return void 0 === h && (h = r2(9271)), h(j, t3, e3);
          });
        }, 8784: (t2, e2, r2) => {
          "use strict";
          t2.exports = f;
          var n = r2(198).F, i = n.ERR_METHOD_NOT_IMPLEMENTED, o = n.ERR_MULTIPLE_CALLBACK, a = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, s = n.ERR_TRANSFORM_WITH_LENGTH_0, u = r2(4560);
          function c(t3, e3) {
            var r3 = this._transformState;
            r3.transforming = false;
            var n2 = r3.writecb;
            if (null === n2)
              return this.emit("error", new o());
            r3.writechunk = null, r3.writecb = null, null != e3 && this.push(e3), n2(t3);
            var i2 = this._readableState;
            i2.reading = false, (i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
          }
          function f(t3) {
            if (!(this instanceof f))
              return new f(t3);
            u.call(this, t3), this._transformState = { afterTransform: c.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t3 && ("function" == typeof t3.transform && (this._transform = t3.transform), "function" == typeof t3.flush && (this._flush = t3.flush)), this.on("prefinish", l);
          }
          function l() {
            var t3 = this;
            "function" != typeof this._flush || this._readableState.destroyed ? h(this, null, null) : this._flush(function(e3, r3) {
              h(t3, e3, r3);
            });
          }
          function h(t3, e3, r3) {
            if (e3)
              return t3.emit("error", e3);
            if (null != r3 && t3.push(r3), t3._writableState.length)
              throw new s();
            if (t3._transformState.transforming)
              throw new a();
            return t3.push(null);
          }
          r2(1679)(f, u), f.prototype.push = function(t3, e3) {
            return this._transformState.needTransform = false, u.prototype.push.call(this, t3, e3);
          }, f.prototype._transform = function(t3, e3, r3) {
            r3(new i("_transform()"));
          }, f.prototype._write = function(t3, e3, r3) {
            var n2 = this._transformState;
            if (n2.writecb = r3, n2.writechunk = t3, n2.writeencoding = e3, !n2.transforming) {
              var i2 = this._readableState;
              (n2.needTransform || i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
            }
          }, f.prototype._read = function(t3) {
            var e3 = this._transformState;
            null === e3.writechunk || e3.transforming ? e3.needTransform = true : (e3.transforming = true, this._transform(e3.writechunk, e3.writeencoding, e3.afterTransform));
          }, f.prototype._destroy = function(t3, e3) {
            u.prototype._destroy.call(this, t3, function(t4) {
              e3(t4);
            });
          };
        }, 4186: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            var e3 = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(t4, e4) {
                var r3 = t4.entry;
                for (t4.entry = null; r3; ) {
                  var n2 = r3.callback;
                  e4.pendingcb--, n2(void 0), r3 = r3.next;
                }
                e4.corkedRequestsFree.next = t4;
              }(e3, t3);
            };
          }
          var i;
          t2.exports = j, j.WritableState = O;
          var o, a = { deprecate: r2(3340) }, s = r2(6871), u = r2(5832).Buffer, c = (void 0 !== r2.g ? r2.g : "undefined" != typeof window ? window : "undefined" != typeof self ? self : {}).Uint8Array || function() {
          }, f = r2(6222), l = r2(9681).getHighWaterMark, h = r2(198).F, p = h.ERR_INVALID_ARG_TYPE, d = h.ERR_METHOD_NOT_IMPLEMENTED, y = h.ERR_MULTIPLE_CALLBACK, b = h.ERR_STREAM_CANNOT_PIPE, m = h.ERR_STREAM_DESTROYED, v = h.ERR_STREAM_NULL_VALUES, g = h.ERR_STREAM_WRITE_AFTER_END, _ = h.ERR_UNKNOWN_ENCODING, w = f.errorOrDestroy;
          function S() {
          }
          function O(t3, e3, o2) {
            i = i || r2(4560), t3 = t3 || {}, "boolean" != typeof o2 && (o2 = e3 instanceof i), this.objectMode = !!t3.objectMode, o2 && (this.objectMode = this.objectMode || !!t3.writableObjectMode), this.highWaterMark = l(this, t3, "writableHighWaterMark", o2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
            var a2 = false === t3.decodeStrings;
            this.decodeStrings = !a2, this.defaultEncoding = t3.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(t4) {
              !function(t5, e4) {
                var r3 = t5._writableState, n2 = r3.sync, i2 = r3.writecb;
                if ("function" != typeof i2)
                  throw new y();
                if (function(t6) {
                  t6.writing = false, t6.writecb = null, t6.length -= t6.writelen, t6.writelen = 0;
                }(r3), e4)
                  !function(t6, e5, r4, n3, i3) {
                    --e5.pendingcb, r4 ? ({ env: {} }.nextTick(i3, n3), { env: {} }.nextTick(k, t6, e5), t6._writableState.errorEmitted = true, w(t6, n3)) : (i3(n3), t6._writableState.errorEmitted = true, w(t6, n3), k(t6, e5));
                  }(t5, r3, n2, e4, i2);
                else {
                  var o3 = P(r3) || t5.destroyed;
                  o3 || r3.corked || r3.bufferProcessing || !r3.bufferedRequest || A(t5, r3), n2 ? { env: {} }.nextTick(E, t5, r3, o3, i2) : E(t5, r3, o3, i2);
                }
              }(e3, t4);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = false !== t3.emitClose, this.autoDestroy = !!t3.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new n(this);
          }
          function j(t3) {
            var e3 = this instanceof (i = i || r2(4560));
            if (!e3 && !o.call(j, this))
              return new j(t3);
            this._writableState = new O(t3, this, e3), this.writable = true, t3 && ("function" == typeof t3.write && (this._write = t3.write), "function" == typeof t3.writev && (this._writev = t3.writev), "function" == typeof t3.destroy && (this._destroy = t3.destroy), "function" == typeof t3.final && (this._final = t3.final)), s.call(this);
          }
          function $(t3, e3, r3, n2, i2, o2, a2) {
            e3.writelen = n2, e3.writecb = a2, e3.writing = true, e3.sync = true, e3.destroyed ? e3.onwrite(new m("write")) : r3 ? t3._writev(i2, e3.onwrite) : t3._write(i2, o2, e3.onwrite), e3.sync = false;
          }
          function E(t3, e3, r3, n2) {
            r3 || function(t4, e4) {
              0 === e4.length && e4.needDrain && (e4.needDrain = false, t4.emit("drain"));
            }(t3, e3), e3.pendingcb--, n2(), k(t3, e3);
          }
          function A(t3, e3) {
            e3.bufferProcessing = true;
            var r3 = e3.bufferedRequest;
            if (t3._writev && r3 && r3.next) {
              var i2 = e3.bufferedRequestCount, o2 = new Array(i2), a2 = e3.corkedRequestsFree;
              a2.entry = r3;
              for (var s2 = 0, u2 = true; r3; )
                o2[s2] = r3, r3.isBuf || (u2 = false), r3 = r3.next, s2 += 1;
              o2.allBuffers = u2, $(t3, e3, true, e3.length, o2, "", a2.finish), e3.pendingcb++, e3.lastBufferedRequest = null, a2.next ? (e3.corkedRequestsFree = a2.next, a2.next = null) : e3.corkedRequestsFree = new n(e3), e3.bufferedRequestCount = 0;
            } else {
              for (; r3; ) {
                var c2 = r3.chunk, f2 = r3.encoding, l2 = r3.callback;
                if ($(t3, e3, false, e3.objectMode ? 1 : c2.length, c2, f2, l2), r3 = r3.next, e3.bufferedRequestCount--, e3.writing)
                  break;
              }
              null === r3 && (e3.lastBufferedRequest = null);
            }
            e3.bufferedRequest = r3, e3.bufferProcessing = false;
          }
          function P(t3) {
            return t3.ending && 0 === t3.length && null === t3.bufferedRequest && !t3.finished && !t3.writing;
          }
          function x(t3, e3) {
            t3._final(function(r3) {
              e3.pendingcb--, r3 && w(t3, r3), e3.prefinished = true, t3.emit("prefinish"), k(t3, e3);
            });
          }
          function k(t3, e3) {
            var r3 = P(e3);
            if (r3 && (function(t4, e4) {
              e4.prefinished || e4.finalCalled || ("function" != typeof t4._final || e4.destroyed ? (e4.prefinished = true, t4.emit("prefinish")) : (e4.pendingcb++, e4.finalCalled = true, { env: {} }.nextTick(x, t4, e4)));
            }(t3, e3), 0 === e3.pendingcb && (e3.finished = true, t3.emit("finish"), e3.autoDestroy))) {
              var n2 = t3._readableState;
              (!n2 || n2.autoDestroy && n2.endEmitted) && t3.destroy();
            }
            return r3;
          }
          r2(1679)(j, s), O.prototype.getBuffer = function() {
            for (var t3 = this.bufferedRequest, e3 = []; t3; )
              e3.push(t3), t3 = t3.next;
            return e3;
          }, function() {
            try {
              Object.defineProperty(O.prototype, "buffer", { get: a.deprecate(function() {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
            } catch (t3) {
            }
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (o = Function.prototype[Symbol.hasInstance], Object.defineProperty(j, Symbol.hasInstance, { value: function(t3) {
            return !!o.call(this, t3) || this === j && t3 && t3._writableState instanceof O;
          } })) : o = function(t3) {
            return t3 instanceof this;
          }, j.prototype.pipe = function() {
            w(this, new b());
          }, j.prototype.write = function(t3, e3, r3) {
            var n2, i2 = this._writableState, o2 = false, a2 = !i2.objectMode && (n2 = t3, u.isBuffer(n2) || n2 instanceof c);
            return a2 && !u.isBuffer(t3) && (t3 = function(t4) {
              return u.from(t4);
            }(t3)), "function" == typeof e3 && (r3 = e3, e3 = null), a2 ? e3 = "buffer" : e3 || (e3 = i2.defaultEncoding), "function" != typeof r3 && (r3 = S), i2.ending ? function(t4, e4) {
              var r4 = new g();
              w(t4, r4), { env: {} }.nextTick(e4, r4);
            }(this, r3) : (a2 || function(t4, e4, r4, n3) {
              var i3;
              return null === r4 ? i3 = new v() : "string" == typeof r4 || e4.objectMode || (i3 = new p("chunk", ["string", "Buffer"], r4)), !i3 || (w(t4, i3), { env: {} }.nextTick(n3, i3), false);
            }(this, i2, t3, r3)) && (i2.pendingcb++, o2 = function(t4, e4, r4, n3, i3, o3) {
              if (!r4) {
                var a3 = function(t5, e5, r5) {
                  return t5.objectMode || false === t5.decodeStrings || "string" != typeof e5 || (e5 = u.from(e5, r5)), e5;
                }(e4, n3, i3);
                n3 !== a3 && (r4 = true, i3 = "buffer", n3 = a3);
              }
              var s2 = e4.objectMode ? 1 : n3.length;
              e4.length += s2;
              var c2 = e4.length < e4.highWaterMark;
              if (c2 || (e4.needDrain = true), e4.writing || e4.corked) {
                var f2 = e4.lastBufferedRequest;
                e4.lastBufferedRequest = { chunk: n3, encoding: i3, isBuf: r4, callback: o3, next: null }, f2 ? f2.next = e4.lastBufferedRequest : e4.bufferedRequest = e4.lastBufferedRequest, e4.bufferedRequestCount += 1;
              } else
                $(t4, e4, false, s2, n3, i3, o3);
              return c2;
            }(this, i2, a2, t3, e3, r3)), o2;
          }, j.prototype.cork = function() {
            this._writableState.corked++;
          }, j.prototype.uncork = function() {
            var t3 = this._writableState;
            t3.corked && (t3.corked--, t3.writing || t3.corked || t3.bufferProcessing || !t3.bufferedRequest || A(this, t3));
          }, j.prototype.setDefaultEncoding = function(t3) {
            if ("string" == typeof t3 && (t3 = t3.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((t3 + "").toLowerCase()) > -1))
              throw new _(t3);
            return this._writableState.defaultEncoding = t3, this;
          }, Object.defineProperty(j.prototype, "writableBuffer", { enumerable: false, get: function() {
            return this._writableState && this._writableState.getBuffer();
          } }), Object.defineProperty(j.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), j.prototype._write = function(t3, e3, r3) {
            r3(new d("_write()"));
          }, j.prototype._writev = null, j.prototype.end = function(t3, e3, r3) {
            var n2 = this._writableState;
            return "function" == typeof t3 ? (r3 = t3, t3 = null, e3 = null) : "function" == typeof e3 && (r3 = e3, e3 = null), null != t3 && this.write(t3, e3), n2.corked && (n2.corked = 1, this.uncork()), n2.ending || function(t4, e4, r4) {
              e4.ending = true, k(t4, e4), r4 && (e4.finished ? { env: {} }.nextTick(r4) : t4.once("finish", r4)), e4.ended = true, t4.writable = false;
            }(this, n2, r3), this;
          }, Object.defineProperty(j.prototype, "writableLength", { enumerable: false, get: function() {
            return this._writableState.length;
          } }), Object.defineProperty(j.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._writableState && this._writableState.destroyed;
          }, set: function(t3) {
            this._writableState && (this._writableState.destroyed = t3);
          } }), j.prototype.destroy = f.destroy, j.prototype._undestroy = f.undestroy, j.prototype._destroy = function(t3, e3) {
            e3(t3);
          };
        }, 8493: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i;
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" !== n(t5) || null === t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" !== n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" === n(e4) ? e4 : String(e4);
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var a = r2(8500), s = Symbol("lastResolve"), u = Symbol("lastReject"), c = Symbol("error"), f = Symbol("ended"), l = Symbol("lastPromise"), h = Symbol("handlePromise"), p = Symbol("stream");
          function d(t3, e3) {
            return { value: t3, done: e3 };
          }
          function y(t3) {
            var e3 = t3[s];
            if (null !== e3) {
              var r3 = t3[p].read();
              null !== r3 && (t3[l] = null, t3[s] = null, t3[u] = null, e3(d(r3, false)));
            }
          }
          function b(t3) {
            ({ env: {} }).nextTick(y, t3);
          }
          var m = Object.getPrototypeOf(function() {
          }), v = Object.setPrototypeOf((o(i = { get stream() {
            return this[p];
          }, next: function() {
            var t3 = this, e3 = this[c];
            if (null !== e3)
              return Promise.reject(e3);
            if (this[f])
              return Promise.resolve(d(void 0, true));
            if (this[p].destroyed)
              return new Promise(function(e4, r4) {
                ({ env: {} }).nextTick(function() {
                  t3[c] ? r4(t3[c]) : e4(d(void 0, true));
                });
              });
            var r3, n2 = this[l];
            if (n2)
              r3 = new Promise(function(t4, e4) {
                return function(r4, n3) {
                  t4.then(function() {
                    e4[f] ? r4(d(void 0, true)) : e4[h](r4, n3);
                  }, n3);
                };
              }(n2, this));
            else {
              var i2 = this[p].read();
              if (null !== i2)
                return Promise.resolve(d(i2, false));
              r3 = new Promise(this[h]);
            }
            return this[l] = r3, r3;
          } }, Symbol.asyncIterator, function() {
            return this;
          }), o(i, "return", function() {
            var t3 = this;
            return new Promise(function(e3, r3) {
              t3[p].destroy(null, function(t4) {
                t4 ? r3(t4) : e3(d(void 0, true));
              });
            });
          }), i), m);
          t2.exports = function(t3) {
            var e3, r3 = Object.create(v, (o(e3 = {}, p, { value: t3, writable: true }), o(e3, s, { value: null, writable: true }), o(e3, u, { value: null, writable: true }), o(e3, c, { value: null, writable: true }), o(e3, f, { value: t3._readableState.endEmitted, writable: true }), o(e3, h, { value: function(t4, e4) {
              var n2 = r3[p].read();
              n2 ? (r3[l] = null, r3[s] = null, r3[u] = null, t4(d(n2, false))) : (r3[s] = t4, r3[u] = e4);
            }, writable: true }), e3));
            return r3[l] = null, a(t3, function(t4) {
              if (t4 && "ERR_STREAM_PREMATURE_CLOSE" !== t4.code) {
                var e4 = r3[u];
                return null !== e4 && (r3[l] = null, r3[s] = null, r3[u] = null, e4(t4)), void (r3[c] = t4);
              }
              var n2 = r3[s];
              null !== n2 && (r3[l] = null, r3[s] = null, r3[u] = null, n2(d(void 0, true))), r3[f] = true;
            }), t3.on("readable", b.bind(null, r3)), r3;
          };
        }, 6811: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = u(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function s(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, u(n2.key), n2);
            }
          }
          function u(t3) {
            var e3 = function(t4) {
              if ("object" !== n(t4) || null === t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" !== n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" === n(e3) ? e3 : String(e3);
          }
          var c = r2(5832).Buffer, f = r2(3779).inspect, l = f && f.custom || "inspect";
          t2.exports = function() {
            function t3() {
              !function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t3), this.head = null, this.tail = null, this.length = 0;
            }
            var e3, r3;
            return e3 = t3, (r3 = [{ key: "push", value: function(t4) {
              var e4 = { data: t4, next: null };
              this.length > 0 ? this.tail.next = e4 : this.head = e4, this.tail = e4, ++this.length;
            } }, { key: "unshift", value: function(t4) {
              var e4 = { data: t4, next: this.head };
              0 === this.length && (this.tail = e4), this.head = e4, ++this.length;
            } }, { key: "shift", value: function() {
              if (0 !== this.length) {
                var t4 = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, t4;
              }
            } }, { key: "clear", value: function() {
              this.head = this.tail = null, this.length = 0;
            } }, { key: "join", value: function(t4) {
              if (0 === this.length)
                return "";
              for (var e4 = this.head, r4 = "" + e4.data; e4 = e4.next; )
                r4 += t4 + e4.data;
              return r4;
            } }, { key: "concat", value: function(t4) {
              if (0 === this.length)
                return c.alloc(0);
              for (var e4, r4, n2, i2 = c.allocUnsafe(t4 >>> 0), o2 = this.head, a2 = 0; o2; )
                e4 = o2.data, r4 = i2, n2 = a2, c.prototype.copy.call(e4, r4, n2), a2 += o2.data.length, o2 = o2.next;
              return i2;
            } }, { key: "consume", value: function(t4, e4) {
              var r4;
              return t4 < this.head.data.length ? (r4 = this.head.data.slice(0, t4), this.head.data = this.head.data.slice(t4)) : r4 = t4 === this.head.data.length ? this.shift() : e4 ? this._getString(t4) : this._getBuffer(t4), r4;
            } }, { key: "first", value: function() {
              return this.head.data;
            } }, { key: "_getString", value: function(t4) {
              var e4 = this.head, r4 = 1, n2 = e4.data;
              for (t4 -= n2.length; e4 = e4.next; ) {
                var i2 = e4.data, o2 = t4 > i2.length ? i2.length : t4;
                if (o2 === i2.length ? n2 += i2 : n2 += i2.slice(0, t4), 0 == (t4 -= o2)) {
                  o2 === i2.length ? (++r4, e4.next ? this.head = e4.next : this.head = this.tail = null) : (this.head = e4, e4.data = i2.slice(o2));
                  break;
                }
                ++r4;
              }
              return this.length -= r4, n2;
            } }, { key: "_getBuffer", value: function(t4) {
              var e4 = c.allocUnsafe(t4), r4 = this.head, n2 = 1;
              for (r4.data.copy(e4), t4 -= r4.data.length; r4 = r4.next; ) {
                var i2 = r4.data, o2 = t4 > i2.length ? i2.length : t4;
                if (i2.copy(e4, e4.length - t4, 0, o2), 0 == (t4 -= o2)) {
                  o2 === i2.length ? (++n2, r4.next ? this.head = r4.next : this.head = this.tail = null) : (this.head = r4, r4.data = i2.slice(o2));
                  break;
                }
                ++n2;
              }
              return this.length -= n2, e4;
            } }, { key: l, value: function(t4, e4) {
              return f(this, o(o({}, e4), {}, { depth: 0, customInspect: false }));
            } }]) && s(e3.prototype, r3), Object.defineProperty(e3, "prototype", { writable: false }), t3;
          }();
        }, 6222: (t2) => {
          "use strict";
          function e2(t3, e3) {
            n(t3, e3), r2(t3);
          }
          function r2(t3) {
            t3._writableState && !t3._writableState.emitClose || t3._readableState && !t3._readableState.emitClose || t3.emit("close");
          }
          function n(t3, e3) {
            t3.emit("error", e3);
          }
          t2.exports = { destroy: function(t3, i) {
            var o = this, a = this._readableState && this._readableState.destroyed, s = this._writableState && this._writableState.destroyed;
            return a || s ? (i ? i(t3) : t3 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, { env: {} }.nextTick(n, this, t3)) : { env: {} }.nextTick(n, this, t3)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(t3 || null, function(t4) {
              !i && t4 ? o._writableState ? o._writableState.errorEmitted ? { env: {} }.nextTick(r2, o) : (o._writableState.errorEmitted = true, { env: {} }.nextTick(e2, o, t4)) : { env: {} }.nextTick(e2, o, t4) : i ? ({ env: {} }.nextTick(r2, o), i(t4)) : { env: {} }.nextTick(r2, o);
            }), this);
          }, undestroy: function() {
            this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
          }, errorOrDestroy: function(t3, e3) {
            var r3 = t3._readableState, n2 = t3._writableState;
            r3 && r3.autoDestroy || n2 && n2.autoDestroy ? t3.destroy(e3) : t3.emit("error", e3);
          } };
        }, 8500: (t2, e2, r2) => {
          "use strict";
          var n = r2(198).F.ERR_STREAM_PREMATURE_CLOSE;
          function i() {
          }
          t2.exports = function t3(e3, r3, o) {
            if ("function" == typeof r3)
              return t3(e3, null, r3);
            r3 || (r3 = {}), o = function(t4) {
              var e4 = false;
              return function() {
                if (!e4) {
                  e4 = true;
                  for (var r4 = arguments.length, n2 = new Array(r4), i2 = 0; i2 < r4; i2++)
                    n2[i2] = arguments[i2];
                  t4.apply(this, n2);
                }
              };
            }(o || i);
            var a = r3.readable || false !== r3.readable && e3.readable, s = r3.writable || false !== r3.writable && e3.writable, u = function() {
              e3.writable || f();
            }, c = e3._writableState && e3._writableState.finished, f = function() {
              s = false, c = true, a || o.call(e3);
            }, l = e3._readableState && e3._readableState.endEmitted, h = function() {
              a = false, l = true, s || o.call(e3);
            }, p = function(t4) {
              o.call(e3, t4);
            }, d = function() {
              var t4;
              return a && !l ? (e3._readableState && e3._readableState.ended || (t4 = new n()), o.call(e3, t4)) : s && !c ? (e3._writableState && e3._writableState.ended || (t4 = new n()), o.call(e3, t4)) : void 0;
            }, y = function() {
              e3.req.on("finish", f);
            };
            return function(t4) {
              return t4.setHeader && "function" == typeof t4.abort;
            }(e3) ? (e3.on("complete", f), e3.on("abort", d), e3.req ? y() : e3.on("request", y)) : s && !e3._writableState && (e3.on("end", u), e3.on("close", u)), e3.on("end", h), e3.on("finish", f), false !== r3.error && e3.on("error", p), e3.on("close", d), function() {
              e3.removeListener("complete", f), e3.removeListener("abort", d), e3.removeListener("request", y), e3.req && e3.req.removeListener("finish", f), e3.removeListener("end", u), e3.removeListener("close", u), e3.removeListener("finish", f), e3.removeListener("end", h), e3.removeListener("error", p), e3.removeListener("close", d);
            };
          };
        }, 9271: (t2) => {
          t2.exports = function() {
            throw new Error("Readable.from is not available in the browser");
          };
        }, 1144: (t2, e2, r2) => {
          "use strict";
          var n, i = r2(198).F, o = i.ERR_MISSING_ARGS, a = i.ERR_STREAM_DESTROYED;
          function s(t3) {
            if (t3)
              throw t3;
          }
          function u(t3) {
            t3();
          }
          function c(t3, e3) {
            return t3.pipe(e3);
          }
          t2.exports = function() {
            for (var t3 = arguments.length, e3 = new Array(t3), i2 = 0; i2 < t3; i2++)
              e3[i2] = arguments[i2];
            var f, l = function(t4) {
              return t4.length ? "function" != typeof t4[t4.length - 1] ? s : t4.pop() : s;
            }(e3);
            if (Array.isArray(e3[0]) && (e3 = e3[0]), e3.length < 2)
              throw new o("streams");
            var h = e3.map(function(t4, i3) {
              var o2 = i3 < e3.length - 1;
              return function(t5, e4, i4, o3) {
                o3 = function(t6) {
                  var e5 = false;
                  return function() {
                    e5 || (e5 = true, t6.apply(void 0, arguments));
                  };
                }(o3);
                var s2 = false;
                t5.on("close", function() {
                  s2 = true;
                }), void 0 === n && (n = r2(8500)), n(t5, { readable: e4, writable: i4 }, function(t6) {
                  if (t6)
                    return o3(t6);
                  s2 = true, o3();
                });
                var u2 = false;
                return function(e5) {
                  if (!s2 && !u2)
                    return u2 = true, function(t6) {
                      return t6.setHeader && "function" == typeof t6.abort;
                    }(t5) ? t5.abort() : "function" == typeof t5.destroy ? t5.destroy() : void o3(e5 || new a("pipe"));
                };
              }(t4, o2, i3 > 0, function(t5) {
                f || (f = t5), t5 && h.forEach(u), o2 || (h.forEach(u), l(f));
              });
            });
            return e3.reduce(c);
          };
        }, 9681: (t2, e2, r2) => {
          "use strict";
          var n = r2(198).F.ERR_INVALID_OPT_VALUE;
          t2.exports = { getHighWaterMark: function(t3, e3, r3, i) {
            var o = function(t4, e4, r4) {
              return null != t4.highWaterMark ? t4.highWaterMark : e4 ? t4[r4] : null;
            }(e3, i, r3);
            if (null != o) {
              if (!isFinite(o) || Math.floor(o) !== o || o < 0)
                throw new n(i ? r3 : "highWaterMark", o);
              return Math.floor(o);
            }
            return t3.objectMode ? 16 : 16384;
          } };
        }, 6871: (t2, e2, r2) => {
          t2.exports = r2(3550).EventEmitter;
        }, 136: (t2, e2, r2) => {
          "use strict";
          var n = r2(2).Buffer, i = n.isEncoding || function(t3) {
            switch ((t3 = "" + t3) && t3.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;
              default:
                return false;
            }
          };
          function o(t3) {
            var e3;
            switch (this.encoding = function(t4) {
              var e4 = function(t5) {
                if (!t5)
                  return "utf8";
                for (var e5; ; )
                  switch (t5) {
                    case "utf8":
                    case "utf-8":
                      return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return "utf16le";
                    case "latin1":
                    case "binary":
                      return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                      return t5;
                    default:
                      if (e5)
                        return;
                      t5 = ("" + t5).toLowerCase(), e5 = true;
                  }
              }(t4);
              if ("string" != typeof e4 && (n.isEncoding === i || !i(t4)))
                throw new Error("Unknown encoding: " + t4);
              return e4 || t4;
            }(t3), this.encoding) {
              case "utf16le":
                this.text = u, this.end = c, e3 = 4;
                break;
              case "utf8":
                this.fillLast = s, e3 = 4;
                break;
              case "base64":
                this.text = f, this.end = l, e3 = 3;
                break;
              default:
                return this.write = h, void (this.end = p);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(e3);
          }
          function a(t3) {
            return t3 <= 127 ? 0 : t3 >> 5 == 6 ? 2 : t3 >> 4 == 14 ? 3 : t3 >> 3 == 30 ? 4 : t3 >> 6 == 2 ? -1 : -2;
          }
          function s(t3) {
            var e3 = this.lastTotal - this.lastNeed, r3 = function(t4, e4) {
              if (128 != (192 & e4[0]))
                return t4.lastNeed = 0, "\uFFFD";
              if (t4.lastNeed > 1 && e4.length > 1) {
                if (128 != (192 & e4[1]))
                  return t4.lastNeed = 1, "\uFFFD";
                if (t4.lastNeed > 2 && e4.length > 2 && 128 != (192 & e4[2]))
                  return t4.lastNeed = 2, "\uFFFD";
              }
            }(this, t3);
            return void 0 !== r3 ? r3 : this.lastNeed <= t3.length ? (t3.copy(this.lastChar, e3, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (t3.copy(this.lastChar, e3, 0, t3.length), void (this.lastNeed -= t3.length));
          }
          function u(t3, e3) {
            if ((t3.length - e3) % 2 == 0) {
              var r3 = t3.toString("utf16le", e3);
              if (r3) {
                var n2 = r3.charCodeAt(r3.length - 1);
                if (n2 >= 55296 && n2 <= 56319)
                  return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t3[t3.length - 2], this.lastChar[1] = t3[t3.length - 1], r3.slice(0, -1);
              }
              return r3;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t3[t3.length - 1], t3.toString("utf16le", e3, t3.length - 1);
          }
          function c(t3) {
            var e3 = t3 && t3.length ? this.write(t3) : "";
            if (this.lastNeed) {
              var r3 = this.lastTotal - this.lastNeed;
              return e3 + this.lastChar.toString("utf16le", 0, r3);
            }
            return e3;
          }
          function f(t3, e3) {
            var r3 = (t3.length - e3) % 3;
            return 0 === r3 ? t3.toString("base64", e3) : (this.lastNeed = 3 - r3, this.lastTotal = 3, 1 === r3 ? this.lastChar[0] = t3[t3.length - 1] : (this.lastChar[0] = t3[t3.length - 2], this.lastChar[1] = t3[t3.length - 1]), t3.toString("base64", e3, t3.length - r3));
          }
          function l(t3) {
            var e3 = t3 && t3.length ? this.write(t3) : "";
            return this.lastNeed ? e3 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e3;
          }
          function h(t3) {
            return t3.toString(this.encoding);
          }
          function p(t3) {
            return t3 && t3.length ? this.write(t3) : "";
          }
          e2.I = o, o.prototype.write = function(t3) {
            if (0 === t3.length)
              return "";
            var e3, r3;
            if (this.lastNeed) {
              if (void 0 === (e3 = this.fillLast(t3)))
                return "";
              r3 = this.lastNeed, this.lastNeed = 0;
            } else
              r3 = 0;
            return r3 < t3.length ? e3 ? e3 + this.text(t3, r3) : this.text(t3, r3) : e3 || "";
          }, o.prototype.end = function(t3) {
            var e3 = t3 && t3.length ? this.write(t3) : "";
            return this.lastNeed ? e3 + "\uFFFD" : e3;
          }, o.prototype.text = function(t3, e3) {
            var r3 = function(t4, e4, r4) {
              var n3 = e4.length - 1;
              if (n3 < r4)
                return 0;
              var i2 = a(e4[n3]);
              return i2 >= 0 ? (i2 > 0 && (t4.lastNeed = i2 - 1), i2) : --n3 < r4 || -2 === i2 ? 0 : (i2 = a(e4[n3])) >= 0 ? (i2 > 0 && (t4.lastNeed = i2 - 2), i2) : --n3 < r4 || -2 === i2 ? 0 : (i2 = a(e4[n3])) >= 0 ? (i2 > 0 && (2 === i2 ? i2 = 0 : t4.lastNeed = i2 - 3), i2) : 0;
            }(this, t3, e3);
            if (!this.lastNeed)
              return t3.toString("utf8", e3);
            this.lastTotal = r3;
            var n2 = t3.length - (r3 - this.lastNeed);
            return t3.copy(this.lastChar, 0, n2), t3.toString("utf8", e3, n2);
          }, o.prototype.fillLast = function(t3) {
            if (this.lastNeed <= t3.length)
              return t3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            t3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t3.length), this.lastNeed -= t3.length;
          };
        }, 2: (t2, e2, r2) => {
          var n = r2(5832), i = n.Buffer;
          function o(t3, e3) {
            for (var r3 in t3)
              e3[r3] = t3[r3];
          }
          function a(t3, e3, r3) {
            return i(t3, e3, r3);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t2.exports = n : (o(n, e2), e2.Buffer = a), o(i, a), a.from = function(t3, e3, r3) {
            if ("number" == typeof t3)
              throw new TypeError("Argument must not be a number");
            return i(t3, e3, r3);
          }, a.alloc = function(t3, e3, r3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            var n2 = i(t3);
            return void 0 !== e3 ? "string" == typeof r3 ? n2.fill(e3, r3) : n2.fill(e3) : n2.fill(0), n2;
          }, a.allocUnsafe = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return i(t3);
          }, a.allocUnsafeSlow = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Argument must be a number");
            return n.SlowBuffer(t3);
          };
        }, 3340: (t2, e2, r2) => {
          function n(t3) {
            try {
              if (!r2.g.localStorage)
                return false;
            } catch (t4) {
              return false;
            }
            var e3 = r2.g.localStorage[t3];
            return null != e3 && "true" === String(e3).toLowerCase();
          }
          t2.exports = function(t3, e3) {
            if (n("noDeprecation"))
              return t3;
            var r3 = false;
            return function() {
              if (!r3) {
                if (n("throwDeprecation"))
                  throw new Error(e3);
                n("traceDeprecation") ? console.trace(e3) : console.warn(e3), r3 = true;
              }
              return t3.apply(this, arguments);
            };
          };
        }, 7944: (t2) => {
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            return t3 && "object" === e2(t3) && "function" == typeof t3.copy && "function" == typeof t3.fill && "function" == typeof t3.readUInt8;
          };
        }, 7595: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(5899), o = r2(1905), a = r2(9834), s = r2(7911);
          function u(t3) {
            return t3.call.bind(t3);
          }
          var c = "undefined" != typeof BigInt, f = "undefined" != typeof Symbol, l = u(Object.prototype.toString), h = u(Number.prototype.valueOf), p = u(String.prototype.valueOf), d = u(Boolean.prototype.valueOf);
          if (c)
            var y = u(BigInt.prototype.valueOf);
          if (f)
            var b = u(Symbol.prototype.valueOf);
          function m(t3, e3) {
            if ("object" !== n(t3))
              return false;
            try {
              return e3(t3), true;
            } catch (t4) {
              return false;
            }
          }
          function v(t3) {
            return "[object Map]" === l(t3);
          }
          function g(t3) {
            return "[object Set]" === l(t3);
          }
          function _(t3) {
            return "[object WeakMap]" === l(t3);
          }
          function w(t3) {
            return "[object WeakSet]" === l(t3);
          }
          function S(t3) {
            return "[object ArrayBuffer]" === l(t3);
          }
          function O(t3) {
            return "undefined" != typeof ArrayBuffer && (S.working ? S(t3) : t3 instanceof ArrayBuffer);
          }
          function j(t3) {
            return "[object DataView]" === l(t3);
          }
          function $(t3) {
            return "undefined" != typeof DataView && (j.working ? j(t3) : t3 instanceof DataView);
          }
          e2.isArgumentsObject = i, e2.isGeneratorFunction = o, e2.isTypedArray = s, e2.isPromise = function(t3) {
            return "undefined" != typeof Promise && t3 instanceof Promise || null !== t3 && "object" === n(t3) && "function" == typeof t3.then && "function" == typeof t3.catch;
          }, e2.isArrayBufferView = function(t3) {
            return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t3) : s(t3) || $(t3);
          }, e2.isUint8Array = function(t3) {
            return "Uint8Array" === a(t3);
          }, e2.isUint8ClampedArray = function(t3) {
            return "Uint8ClampedArray" === a(t3);
          }, e2.isUint16Array = function(t3) {
            return "Uint16Array" === a(t3);
          }, e2.isUint32Array = function(t3) {
            return "Uint32Array" === a(t3);
          }, e2.isInt8Array = function(t3) {
            return "Int8Array" === a(t3);
          }, e2.isInt16Array = function(t3) {
            return "Int16Array" === a(t3);
          }, e2.isInt32Array = function(t3) {
            return "Int32Array" === a(t3);
          }, e2.isFloat32Array = function(t3) {
            return "Float32Array" === a(t3);
          }, e2.isFloat64Array = function(t3) {
            return "Float64Array" === a(t3);
          }, e2.isBigInt64Array = function(t3) {
            return "BigInt64Array" === a(t3);
          }, e2.isBigUint64Array = function(t3) {
            return "BigUint64Array" === a(t3);
          }, v.working = "undefined" != typeof Map && v(/* @__PURE__ */ new Map()), e2.isMap = function(t3) {
            return "undefined" != typeof Map && (v.working ? v(t3) : t3 instanceof Map);
          }, g.working = "undefined" != typeof Set && g(/* @__PURE__ */ new Set()), e2.isSet = function(t3) {
            return "undefined" != typeof Set && (g.working ? g(t3) : t3 instanceof Set);
          }, _.working = "undefined" != typeof WeakMap && _(/* @__PURE__ */ new WeakMap()), e2.isWeakMap = function(t3) {
            return "undefined" != typeof WeakMap && (_.working ? _(t3) : t3 instanceof WeakMap);
          }, w.working = "undefined" != typeof WeakSet && w(/* @__PURE__ */ new WeakSet()), e2.isWeakSet = function(t3) {
            return w(t3);
          }, S.working = "undefined" != typeof ArrayBuffer && S(new ArrayBuffer()), e2.isArrayBuffer = O, j.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && j(new DataView(new ArrayBuffer(1), 0, 1)), e2.isDataView = $;
          var E = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
          function A(t3) {
            return "[object SharedArrayBuffer]" === l(t3);
          }
          function P(t3) {
            return void 0 !== E && (void 0 === A.working && (A.working = A(new E())), A.working ? A(t3) : t3 instanceof E);
          }
          function x(t3) {
            return m(t3, h);
          }
          function k(t3) {
            return m(t3, p);
          }
          function M(t3) {
            return m(t3, d);
          }
          function T(t3) {
            return c && m(t3, y);
          }
          function B(t3) {
            return f && m(t3, b);
          }
          e2.isSharedArrayBuffer = P, e2.isAsyncFunction = function(t3) {
            return "[object AsyncFunction]" === l(t3);
          }, e2.isMapIterator = function(t3) {
            return "[object Map Iterator]" === l(t3);
          }, e2.isSetIterator = function(t3) {
            return "[object Set Iterator]" === l(t3);
          }, e2.isGeneratorObject = function(t3) {
            return "[object Generator]" === l(t3);
          }, e2.isWebAssemblyCompiledModule = function(t3) {
            return "[object WebAssembly.Module]" === l(t3);
          }, e2.isNumberObject = x, e2.isStringObject = k, e2.isBooleanObject = M, e2.isBigIntObject = T, e2.isSymbolObject = B, e2.isBoxedPrimitive = function(t3) {
            return x(t3) || k(t3) || M(t3) || T(t3) || B(t3);
          }, e2.isAnyArrayBuffer = function(t3) {
            return "undefined" != typeof Uint8Array && (O(t3) || P(t3));
          }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(t3) {
            Object.defineProperty(e2, t3, { enumerable: false, value: function() {
              throw new Error(t3 + " is not supported in userland");
            } });
          });
        }, 7352: (t2, e2, r2) => {
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = Object.getOwnPropertyDescriptors || function(t3) {
            for (var e3 = Object.keys(t3), r3 = {}, n2 = 0; n2 < e3.length; n2++)
              r3[e3[n2]] = Object.getOwnPropertyDescriptor(t3, e3[n2]);
            return r3;
          }, o = /%[sdj%]/g;
          e2.format = function(t3) {
            if (!g(t3)) {
              for (var e3 = [], r3 = 0; r3 < arguments.length; r3++)
                e3.push(c(arguments[r3]));
              return e3.join(" ");
            }
            r3 = 1;
            for (var n2 = arguments, i2 = n2.length, a2 = String(t3).replace(o, function(t4) {
              if ("%%" === t4)
                return "%";
              if (r3 >= i2)
                return t4;
              switch (t4) {
                case "%s":
                  return String(n2[r3++]);
                case "%d":
                  return Number(n2[r3++]);
                case "%j":
                  try {
                    return JSON.stringify(n2[r3++]);
                  } catch (t5) {
                    return "[Circular]";
                  }
                default:
                  return t4;
              }
            }), s2 = n2[r3]; r3 < i2; s2 = n2[++r3])
              m(s2) || !S(s2) ? a2 += " " + s2 : a2 += " " + c(s2);
            return a2;
          }, e2.deprecate = function(t3, e3) {
            if (true === { env: {} }.noDeprecation)
              return t3;
            var r3 = false;
            return function() {
              if (!r3) {
                if ({ env: {} }.throwDeprecation)
                  throw new Error(e3);
                !{ env: {} }.traceDeprecation ? console.error(e3) : console.trace(e3), r3 = true;
              }
              return t3.apply(this, arguments);
            };
          };
          var a = {}, s = /^$/;
          if ({}.NODE_DEBUG) {
            var u = {}.NODE_DEBUG;
            u = u.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), s = new RegExp("^" + u + "$", "i");
          }
          function c(t3, r3) {
            var n2 = { seen: [], stylize: l };
            return arguments.length >= 3 && (n2.depth = arguments[2]), arguments.length >= 4 && (n2.colors = arguments[3]), b(r3) ? n2.showHidden = r3 : r3 && e2._extend(n2, r3), _(n2.showHidden) && (n2.showHidden = false), _(n2.depth) && (n2.depth = 2), _(n2.colors) && (n2.colors = false), _(n2.customInspect) && (n2.customInspect = true), n2.colors && (n2.stylize = f), h(n2, t3, n2.depth);
          }
          function f(t3, e3) {
            var r3 = c.styles[e3];
            return r3 ? "\x1B[" + c.colors[r3][0] + "m" + t3 + "\x1B[" + c.colors[r3][1] + "m" : t3;
          }
          function l(t3, e3) {
            return t3;
          }
          function h(t3, r3, n2) {
            if (t3.customInspect && r3 && $(r3.inspect) && r3.inspect !== e2.inspect && (!r3.constructor || r3.constructor.prototype !== r3)) {
              var i2 = r3.inspect(n2, t3);
              return g(i2) || (i2 = h(t3, i2, n2)), i2;
            }
            var o2 = function(t4, e3) {
              if (_(e3))
                return t4.stylize("undefined", "undefined");
              if (g(e3)) {
                var r4 = "'" + JSON.stringify(e3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return t4.stylize(r4, "string");
              }
              return v(e3) ? t4.stylize("" + e3, "number") : b(e3) ? t4.stylize("" + e3, "boolean") : m(e3) ? t4.stylize("null", "null") : void 0;
            }(t3, r3);
            if (o2)
              return o2;
            var a2 = Object.keys(r3), s2 = function(t4) {
              var e3 = {};
              return t4.forEach(function(t5, r4) {
                e3[t5] = true;
              }), e3;
            }(a2);
            if (t3.showHidden && (a2 = Object.getOwnPropertyNames(r3)), j(r3) && (a2.indexOf("message") >= 0 || a2.indexOf("description") >= 0))
              return p(r3);
            if (0 === a2.length) {
              if ($(r3)) {
                var u2 = r3.name ? ": " + r3.name : "";
                return t3.stylize("[Function" + u2 + "]", "special");
              }
              if (w(r3))
                return t3.stylize(RegExp.prototype.toString.call(r3), "regexp");
              if (O(r3))
                return t3.stylize(Date.prototype.toString.call(r3), "date");
              if (j(r3))
                return p(r3);
            }
            var c2, f2 = "", l2 = false, S2 = ["{", "}"];
            return y(r3) && (l2 = true, S2 = ["[", "]"]), $(r3) && (f2 = " [Function" + (r3.name ? ": " + r3.name : "") + "]"), w(r3) && (f2 = " " + RegExp.prototype.toString.call(r3)), O(r3) && (f2 = " " + Date.prototype.toUTCString.call(r3)), j(r3) && (f2 = " " + p(r3)), 0 !== a2.length || l2 && 0 != r3.length ? n2 < 0 ? w(r3) ? t3.stylize(RegExp.prototype.toString.call(r3), "regexp") : t3.stylize("[Object]", "special") : (t3.seen.push(r3), c2 = l2 ? function(t4, e3, r4, n3, i3) {
              for (var o3 = [], a3 = 0, s3 = e3.length; a3 < s3; ++a3)
                x(e3, String(a3)) ? o3.push(d(t4, e3, r4, n3, String(a3), true)) : o3.push("");
              return i3.forEach(function(i4) {
                i4.match(/^\d+$/) || o3.push(d(t4, e3, r4, n3, i4, true));
              }), o3;
            }(t3, r3, n2, s2, a2) : a2.map(function(e3) {
              return d(t3, r3, n2, s2, e3, l2);
            }), t3.seen.pop(), function(t4, e3, r4) {
              return t4.reduce(function(t5, e4) {
                return e4.indexOf("\n"), t5 + e4.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0) > 60 ? r4[0] + ("" === e3 ? "" : e3 + "\n ") + " " + t4.join(",\n  ") + " " + r4[1] : r4[0] + e3 + " " + t4.join(", ") + " " + r4[1];
            }(c2, f2, S2)) : S2[0] + f2 + S2[1];
          }
          function p(t3) {
            return "[" + Error.prototype.toString.call(t3) + "]";
          }
          function d(t3, e3, r3, n2, i2, o2) {
            var a2, s2, u2;
            if ((u2 = Object.getOwnPropertyDescriptor(e3, i2) || { value: e3[i2] }).get ? s2 = u2.set ? t3.stylize("[Getter/Setter]", "special") : t3.stylize("[Getter]", "special") : u2.set && (s2 = t3.stylize("[Setter]", "special")), x(n2, i2) || (a2 = "[" + i2 + "]"), s2 || (t3.seen.indexOf(u2.value) < 0 ? (s2 = m(r3) ? h(t3, u2.value, null) : h(t3, u2.value, r3 - 1)).indexOf("\n") > -1 && (s2 = o2 ? s2.split("\n").map(function(t4) {
              return "  " + t4;
            }).join("\n").slice(2) : "\n" + s2.split("\n").map(function(t4) {
              return "   " + t4;
            }).join("\n")) : s2 = t3.stylize("[Circular]", "special")), _(a2)) {
              if (o2 && i2.match(/^\d+$/))
                return s2;
              (a2 = JSON.stringify("" + i2)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a2 = a2.slice(1, -1), a2 = t3.stylize(a2, "name")) : (a2 = a2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a2 = t3.stylize(a2, "string"));
            }
            return a2 + ": " + s2;
          }
          function y(t3) {
            return Array.isArray(t3);
          }
          function b(t3) {
            return "boolean" == typeof t3;
          }
          function m(t3) {
            return null === t3;
          }
          function v(t3) {
            return "number" == typeof t3;
          }
          function g(t3) {
            return "string" == typeof t3;
          }
          function _(t3) {
            return void 0 === t3;
          }
          function w(t3) {
            return S(t3) && "[object RegExp]" === E(t3);
          }
          function S(t3) {
            return "object" === n(t3) && null !== t3;
          }
          function O(t3) {
            return S(t3) && "[object Date]" === E(t3);
          }
          function j(t3) {
            return S(t3) && ("[object Error]" === E(t3) || t3 instanceof Error);
          }
          function $(t3) {
            return "function" == typeof t3;
          }
          function E(t3) {
            return Object.prototype.toString.call(t3);
          }
          function A(t3) {
            return t3 < 10 ? "0" + t3.toString(10) : t3.toString(10);
          }
          e2.debuglog = function(t3) {
            if (t3 = t3.toUpperCase(), !a[t3])
              if (s.test(t3)) {
                var r3 = { env: {} }.pid;
                a[t3] = function() {
                  var n2 = e2.format.apply(e2, arguments);
                  console.error("%s %d: %s", t3, r3, n2);
                };
              } else
                a[t3] = function() {
                };
            return a[t3];
          }, e2.inspect = c, c.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, c.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, e2.types = r2(7595), e2.isArray = y, e2.isBoolean = b, e2.isNull = m, e2.isNullOrUndefined = function(t3) {
            return null == t3;
          }, e2.isNumber = v, e2.isString = g, e2.isSymbol = function(t3) {
            return "symbol" === n(t3);
          }, e2.isUndefined = _, e2.isRegExp = w, e2.types.isRegExp = w, e2.isObject = S, e2.isDate = O, e2.types.isDate = O, e2.isError = j, e2.types.isNativeError = j, e2.isFunction = $, e2.isPrimitive = function(t3) {
            return null === t3 || "boolean" == typeof t3 || "number" == typeof t3 || "string" == typeof t3 || "symbol" === n(t3) || void 0 === t3;
          }, e2.isBuffer = r2(7944);
          var P = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
          function x(t3, e3) {
            return Object.prototype.hasOwnProperty.call(t3, e3);
          }
          e2.log = function() {
            var t3, r3;
            console.log("%s - %s", (r3 = [A((t3 = /* @__PURE__ */ new Date()).getHours()), A(t3.getMinutes()), A(t3.getSeconds())].join(":"), [t3.getDate(), P[t3.getMonth()], r3].join(" ")), e2.format.apply(e2, arguments));
          }, e2.inherits = r2(1679), e2._extend = function(t3, e3) {
            if (!e3 || !S(e3))
              return t3;
            for (var r3 = Object.keys(e3), n2 = r3.length; n2--; )
              t3[r3[n2]] = e3[r3[n2]];
            return t3;
          };
          var k = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
          function M(t3, e3) {
            if (!t3) {
              var r3 = new Error("Promise was rejected with a falsy value");
              r3.reason = t3, t3 = r3;
            }
            return e3(t3);
          }
          e2.promisify = function(t3) {
            if ("function" != typeof t3)
              throw new TypeError('The "original" argument must be of type Function');
            if (k && t3[k]) {
              var e3;
              if ("function" != typeof (e3 = t3[k]))
                throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              return Object.defineProperty(e3, k, { value: e3, enumerable: false, writable: false, configurable: true }), e3;
            }
            function e3() {
              for (var e4, r3, n2 = new Promise(function(t4, n3) {
                e4 = t4, r3 = n3;
              }), i2 = [], o2 = 0; o2 < arguments.length; o2++)
                i2.push(arguments[o2]);
              i2.push(function(t4, n3) {
                t4 ? r3(t4) : e4(n3);
              });
              try {
                t3.apply(this, i2);
              } catch (t4) {
                r3(t4);
              }
              return n2;
            }
            return Object.setPrototypeOf(e3, Object.getPrototypeOf(t3)), k && Object.defineProperty(e3, k, { value: e3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(e3, i(t3));
          }, e2.promisify.custom = k, e2.callbackify = function(t3) {
            if ("function" != typeof t3)
              throw new TypeError('The "original" argument must be of type Function');
            function e3() {
              for (var e4 = [], r3 = 0; r3 < arguments.length; r3++)
                e4.push(arguments[r3]);
              var n2 = e4.pop();
              if ("function" != typeof n2)
                throw new TypeError("The last argument must be of type Function");
              var i2 = this, o2 = function() {
                return n2.apply(i2, arguments);
              };
              t3.apply(this, e4).then(function(t4) {
                ({ env: {} }).nextTick(o2.bind(null, null, t4));
              }, function(t4) {
                ({ env: {} }).nextTick(M.bind(null, t4, o2));
              });
            }
            return Object.setPrototypeOf(e3, Object.getPrototypeOf(t3)), Object.defineProperties(e3, i(t3)), e3;
          };
        }, 9834: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(3777), o = r2(3426), a = r2(9122), s = r2(3071), u = r2(1464), c = s("Object.prototype.toString"), f = r2(953)(), l = "undefined" == typeof globalThis ? r2.g : globalThis, h = o(), p = s("String.prototype.slice"), d = Object.getPrototypeOf, y = s("Array.prototype.indexOf", true) || function(t3, e3) {
            for (var r3 = 0; r3 < t3.length; r3 += 1)
              if (t3[r3] === e3)
                return r3;
            return -1;
          }, b = { __proto__: null };
          i(h, f && u && d ? function(t3) {
            var e3 = new l[t3]();
            if (Symbol.toStringTag in e3) {
              var r3 = d(e3), n2 = u(r3, Symbol.toStringTag);
              if (!n2) {
                var i2 = d(r3);
                n2 = u(i2, Symbol.toStringTag);
              }
              b["$" + t3] = a(n2.get);
            }
          } : function(t3) {
            var e3 = new l[t3](), r3 = e3.slice || e3.set;
            r3 && (b["$" + t3] = a(r3));
          }), t2.exports = function(t3) {
            if (!t3 || "object" !== n(t3))
              return false;
            if (!f) {
              var e3 = p(c(t3), 8, -1);
              return y(h, e3) > -1 ? e3 : "Object" === e3 && function(t4) {
                var e4 = false;
                return i(b, function(r3, n2) {
                  if (!e4)
                    try {
                      r3(t4), e4 = p(n2, 1);
                    } catch (t5) {
                    }
                }), e4;
              }(t3);
            }
            return u ? function(t4) {
              var e4 = false;
              return i(b, function(r3, n2) {
                if (!e4)
                  try {
                    "$" + r3(t4) === n2 && (e4 = p(n2, 1));
                  } catch (t5) {
                  }
              }), e4;
            }(t3) : null;
          };
        }, 7790: () => {
        }, 3776: () => {
        }, 5340: () => {
        }, 9838: () => {
        }, 3779: () => {
        }, 7199: () => {
        }, 4829: (t2, e2, r2) => {
          "use strict";
          t2.exports = r2(8533);
        }, 8533: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          function o() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (o = function() {
              return !!t3;
            })();
          }
          function a(t3) {
            return a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, a(t3);
          }
          function s(t3, e3) {
            return s = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, s(t3, e3);
          }
          r2(7591).set(r2(4026));
          var u = r2(8285);
          u.setBrowser(true), e2.Error = r2(3672), e2.Schema = r2(7058), e2.Types = r2(9600), e2.VirtualType = r2(622), e2.SchemaType = r2(6426), e2.utils = r2(8768), e2.Document = u(), e2.model = function(t3, r3) {
            var n2 = function(t4) {
              function e3(t5, n4) {
                return function(t6, e4) {
                  if (!(t6 instanceof e4))
                    throw new TypeError("Cannot call a class as a function");
                }(this, e3), function(t6, e4, r4) {
                  return e4 = a(e4), function(t7, e5) {
                    if (e5 && ("object" == i(e5) || "function" == typeof e5))
                      return e5;
                    if (void 0 !== e5)
                      throw new TypeError("Derived constructors may only return object or undefined");
                    return function(t8) {
                      if (void 0 === t8)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                      return t8;
                    }(t7);
                  }(t6, o() ? Reflect.construct(e4, r4 || [], a(t6).constructor) : e4.apply(t6, r4));
                }(this, e3, [t5, r3, n4]);
              }
              return function(t5, e4) {
                if ("function" != typeof e4 && null !== e4)
                  throw new TypeError("Super expression must either be null or a function");
                t5.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t5, writable: true, configurable: true } }), Object.defineProperty(t5, "prototype", { writable: false }), e4 && s(t5, e4);
              }(e3, t4), n3 = e3, Object.defineProperty(n3, "prototype", { writable: false }), n3;
              var n3;
            }(e2.Document);
            return n2.modelName = t3, n2;
          }, "undefined" != typeof window && (window.mongoose = t2.exports, window.Buffer = n);
        }, 2580: (t2, e2, r2) => {
          "use strict";
          var n = r2(2400), i = r2(3550).EventEmitter, o = r2(3672), a = r2(7058), s = r2(5549), u = o.ValidationError, c = r2(4957), f = r2(608);
          function l(t3, e3, r3, i2, u2) {
            if (!(this instanceof l))
              return new l(t3, e3, r3, i2, u2);
            if (f(e3) && !e3.instanceOfSchema && (e3 = new a(e3)), e3 = this.schema || e3, !this.schema && e3.options._id && void 0 === (t3 = t3 || {})._id && (t3._id = new s()), !e3)
              throw new o.MissingSchemaError();
            for (var h in this.$__setSchema(e3), n.call(this, t3, r3, i2, u2), c(this, e3, { decorateDoc: true }), e3.methods)
              this[h] = e3.methods[h];
            for (var p in e3.statics)
              this[p] = e3.statics[p];
          }
          l.prototype = Object.create(n.prototype), l.prototype.constructor = l, l.events = new i(), l.$emitter = new i(), ["on", "once", "emit", "listeners", "removeListener", "setMaxListeners", "removeAllListeners", "addListener"].forEach(function(t3) {
            l[t3] = function() {
              return l.$emitter[t3].apply(l.$emitter, arguments);
            };
          }), l.ValidationError = u, t2.exports = l;
        }, 7982: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return i(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? i(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function o(t3) {
            return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, o(t3);
          }
          var a = r2(3609), s = r2(8995), u = r2(7953), c = r2(170), f = r2(1244), l = r2(9064), h = r2(3703), p = r2(7425), d = r2(5110), y = r2(7352), b = r2(608), m = r2(2497), v = r2(8768), g = ["Polygon", "MultiPolygon"];
          function _(t3, e3, r3) {
            if (Array.isArray(t3))
              t3.forEach(function(n3, i3) {
                if (Array.isArray(n3) || b(n3))
                  return _(n3, e3, r3);
                t3[i3] = e3.castForQuery(null, n3, r3);
              });
            else
              for (var n2 = Object.keys(t3), i2 = n2.length; i2--; ) {
                var o2 = n2[i2], a2 = t3[o2];
                Array.isArray(a2) || b(a2) ? (_(a2, e3, r3), t3[o2] = a2) : t3[o2] = e3.castForQuery({ val: a2, context: r3 });
              }
          }
          function w(t3, e3, r3, n2) {
            if ("strictQuery" in t3)
              return t3.strictQuery;
            if ("strictQuery" in e3)
              return e3.strictQuery;
            var i2 = n2 && n2.mongooseCollection && n2.mongooseCollection.conn && n2.mongooseCollection.conn.base && n2.mongooseCollection.conn.base.options;
            return i2 && "strictQuery" in i2 ? i2.strictQuery : r3.strictQuery;
          }
          t2.exports = function t3(e3, r3, i2, S) {
            if (Array.isArray(r3))
              throw new Error("Query filter must be an object, got an array ", y.inspect(r3));
            if (null == r3)
              return r3;
            null != e3 && null != e3.discriminators && null != r3[e3.options.discriminatorKey] && (e3 = p(e3, r3[e3.options.discriminatorKey]) || e3);
            var O, j, $, E, A, P, x = Object.keys(r3), k = x.length;
            for (i2 = i2 || {}; k--; )
              if (P = r3[E = x[k]], "$or" === E || "$nor" === E || "$and" === E) {
                if (!Array.isArray(P))
                  throw new a("Array", P, E);
                for (var M = P.length - 1; M >= 0; M--) {
                  if (null == P[M] || "object" !== o(P[M]))
                    throw new a("Object", P[M], E + "." + M);
                  var T = Object.keys(P[M]).length, B = P[M][e3.options.discriminatorKey];
                  if (null == B)
                    P[M] = t3(e3, P[M], i2, S);
                  else {
                    var I = p(S.schema, B);
                    P[M] = t3(I || e3, P[M], i2, S);
                  }
                  0 === Object.keys(P[M]).length && 0 !== T && P.splice(M, 1);
                }
                0 === P.length && delete r3[E];
              } else {
                if ("$where" === E) {
                  if ("string" !== (A = o(P)) && "function" !== A)
                    throw new Error("Must have a string or function for $where");
                  "function" === A && (r3[E] = P.toString());
                  continue;
                }
                if ("$expr" === E) {
                  P = c(P, e3);
                  continue;
                }
                if ("$elemMatch" === E)
                  P = t3(e3, P, i2, S);
                else if ("$text" === E)
                  P = l(P, E);
                else if ("$comment" !== E || e3.paths.hasOwnProperty("$comment")) {
                  if (!e3)
                    continue;
                  if (!(j = e3.path(E)))
                    for (var R = E.split("."), N = R.length; N--; ) {
                      var D = R.slice(0, N).join("."), L = R.slice(N).join("."), C = e3.path(D), U = C && C.schema && C.schema.options && C.schema.options.discriminatorKey;
                      if (null != C && null != (C.schema && C.schema.discriminators) && null != U && L !== U) {
                        var q = h(r3, D + "." + U), F = C.schema.discriminators;
                        "string" == typeof q && null != F[q] ? j = F[q].path(L) : null != q && 1 === Object.keys(q).length && Array.isArray(q.$in) && 1 === q.$in.length && "string" == typeof q.$in[0] && null != F[q.$in[0]] && (j = F[q.$in[0]].path(L));
                      }
                    }
                  if (j) {
                    if (null == P)
                      continue;
                    if (v.isPOJO(P))
                      if (Object.keys(P).some(d))
                        for (var V = Object.keys(P), z = void 0, K = V.length; K--; )
                          if ($ = P[z = V[K]], "$elemMatch" === z)
                            $ && null != j && null != j.schema ? t3(j.schema, $, i2, S) : $ && null != j && j.$isMongooseArray && (v.isPOJO($) && null != $.$not ? t3(e3, $, i2, S) : P[z] = j.castForQuery(z, $, S));
                          else if ("$not" === z) {
                            if ($ && j) {
                              if ((O = Object.keys($)).length && d(O[0]))
                                for (var H in $)
                                  $[H] = j.castForQuery(H, $[H], S);
                              else
                                P[z] = j.castForQuery(z, $, S);
                              continue;
                            }
                          } else
                            P[z] = j.castForQuery(z, $, S);
                      else
                        r3[E] = j.castForQuery(null, P, S);
                    else if (Array.isArray(P) && -1 === ["Buffer", "Array"].indexOf(j.instance) && !i2.sanitizeFilter) {
                      var W, J = [], G = n(P);
                      try {
                        for (G.s(); !(W = G.n()).done; ) {
                          var Y = W.value;
                          J.push(j.castForQuery(null, Y, S));
                        }
                      } catch (t4) {
                        G.e(t4);
                      } finally {
                        G.f();
                      }
                      r3[E] = { $in: J };
                    } else
                      r3[E] = j.castForQuery(null, P, S);
                  } else {
                    for (var Q = E.split("."), X = Q.length, Z = void 0, tt = void 0, et = void 0; X-- && (Z = Q.slice(0, X).join("."), !(j = e3.path(Z))); )
                      ;
                    if (j) {
                      if (j.caster && j.caster.schema) {
                        (et = {})[tt = Q.slice(X).join(".")] = P;
                        var rt = t3(j.caster.schema, et, i2, S)[tt];
                        void 0 === rt ? delete r3[E] : r3[E] = rt;
                      } else
                        r3[E] = P;
                      continue;
                    }
                    if (b(P)) {
                      var nt = "";
                      if (P.$near ? nt = "$near" : P.$nearSphere ? nt = "$nearSphere" : P.$within ? nt = "$within" : P.$geoIntersects ? nt = "$geoIntersects" : P.$geoWithin && (nt = "$geoWithin"), nt) {
                        var it = new u.Number("__QueryCasting__"), ot = P[nt];
                        if (null != P.$maxDistance && (P.$maxDistance = it.castForQuery(null, P.$maxDistance, S)), null != P.$minDistance && (P.$minDistance = it.castForQuery(null, P.$minDistance, S)), "$within" === nt) {
                          var at = ot.$center || ot.$centerSphere || ot.$box || ot.$polygon;
                          if (!at)
                            throw new Error("Bad $within parameter: " + JSON.stringify(P));
                          ot = at;
                        } else if ("$near" === nt && "string" == typeof ot.type && Array.isArray(ot.coordinates))
                          ot = ot.coordinates;
                        else if (("$near" === nt || "$nearSphere" === nt || "$geoIntersects" === nt) && ot.$geometry && "string" == typeof ot.$geometry.type && Array.isArray(ot.$geometry.coordinates))
                          null != ot.$maxDistance && (ot.$maxDistance = it.castForQuery(null, ot.$maxDistance, S)), null != ot.$minDistance && (ot.$minDistance = it.castForQuery(null, ot.$minDistance, S)), m(ot.$geometry) && (ot.$geometry = ot.$geometry.toObject({ transform: false, virtuals: false })), ot = ot.$geometry.coordinates;
                        else if ("$geoWithin" === nt)
                          if (ot.$geometry) {
                            m(ot.$geometry) && (ot.$geometry = ot.$geometry.toObject({ virtuals: false }));
                            var st = ot.$geometry.type;
                            if (-1 === g.indexOf(st))
                              throw new Error('Invalid geoJSON type for $geoWithin "' + st + '", must be "Polygon" or "MultiPolygon"');
                            ot = ot.$geometry.coordinates;
                          } else
                            ot = ot.$box || ot.$polygon || ot.$center || ot.$centerSphere, m(ot) && (ot = ot.toObject({ virtuals: false }));
                        _(ot, it, S);
                        continue;
                      }
                    }
                    if (e3.nested[E])
                      continue;
                    var ut = "strict" in i2 ? i2.strict : e3.options.strict, ct = w(i2, e3._userProvidedOptions, e3.options, S);
                    if (i2.upsert && ut) {
                      if ("throw" === ut)
                        throw new s(E);
                      throw new s(E, 'Path "' + E + '" is not in schema, strict mode is `true`, and upsert is `true`.');
                    }
                    if ("throw" === ct)
                      throw new s(E, 'Path "' + E + `" is not in schema and strictQuery is 'throw'.`);
                    ct && delete r3[E];
                  }
                } else
                  P = f(P, E), r3[E] = P;
              }
            return r3;
          };
        }, 4058: (t2, e2, r2) => {
          "use strict";
          var n = r2(2402), i = r2(3633).Long;
          t2.exports = function(t3) {
            return null == t3 ? t3 : "" === t3 ? null : "bigint" == typeof t3 ? t3 : t3 instanceof i ? t3.toBigInt() : "string" == typeof t3 || "number" == typeof t3 ? BigInt(t3) : void n.ok(false);
          };
        }, 8953: (t2, e2, r2) => {
          "use strict";
          var n = r2(3609);
          t2.exports = function(e3, r3) {
            if (t2.exports.convertToTrue.has(e3))
              return true;
            if (t2.exports.convertToFalse.has(e3))
              return false;
            if (null == e3)
              return e3;
            throw new n("boolean", e3, r3);
          }, t2.exports.convertToTrue = /* @__PURE__ */ new Set([true, "true", 1, "1", "yes"]), t2.exports.convertToFalse = /* @__PURE__ */ new Set([false, "false", 0, "0", "no"]);
        }, 2477: (t2, e2, r2) => {
          "use strict";
          var n = r2(2402);
          t2.exports = function(t3) {
            return null == t3 || "" === t3 ? null : t3 instanceof Date ? (n.ok(!isNaN(t3.valueOf())), t3) : (n.ok("boolean" != typeof t3), e3 = t3 instanceof Number || "number" == typeof t3 ? new Date(t3) : "string" == typeof t3 && !isNaN(Number(t3)) && (Number(t3) >= 275761 || Number(t3) < -271820) ? new Date(Number(t3)) : "function" == typeof t3.valueOf ? new Date(t3.valueOf()) : new Date(t3), isNaN(e3.valueOf()) ? void n.ok(false) : e3);
            var e3;
          };
        }, 9553: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          var o = r2(9639), a = r2(2402);
          t2.exports = function(t3) {
            return null == t3 ? t3 : "object" === i(t3) && "string" == typeof t3.$numberDecimal ? o.fromString(t3.$numberDecimal) : t3 instanceof o ? t3 : "string" == typeof t3 ? o.fromString(t3) : "function" == typeof n && n.isBuffer(t3) || "function" == typeof Uint8Array && t3 instanceof Uint8Array ? new o(t3) : "number" == typeof t3 ? o.fromString(String(t3)) : "function" == typeof t3.valueOf && "string" == typeof t3.valueOf() ? o.fromString(t3.valueOf()) : void a.ok(false);
          };
        }, 3704: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(2402), o = r2(3633), a = r2(3305);
          t2.exports = function(t3) {
            if (null == t3 || "" === t3)
              return null;
            var e3;
            if (a(t3, "Long"))
              e3 = t3.toNumber();
            else if ("string" == typeof t3)
              try {
                return o.Double.fromString(t3);
              } catch (t4) {
                i.ok(false);
              }
            else if ("object" === n(t3)) {
              var r3, s = null !== (r3 = t3.valueOf()) && void 0 !== r3 ? r3 : t3.toString();
              if ("string" == typeof s)
                try {
                  return o.Double.fromString(t3);
                } catch (t4) {
                  i.ok(false);
                }
              else
                e3 = Number(s);
            } else
              e3 = Number(t3);
            return new o.Double(e3);
          };
        }, 5413: (t2, e2, r2) => {
          "use strict";
          var n = r2(3305), i = r2(2402);
          t2.exports = function(t3) {
            if (null == t3)
              return t3;
            if ("" === t3)
              return null;
            var e3 = n(t3, "Long") ? t3.toNumber() : Number(t3);
            if (e3 === (0 | e3) && e3 >= -2147483648 && e3 <= 2147483647)
              return e3;
            i.ok(false);
          };
        }, 7768: (t2, e2, r2) => {
          "use strict";
          var n = r2(2402);
          t2.exports = function(t3) {
            return null == t3 ? t3 : "" === t3 ? null : ("string" != typeof t3 && "boolean" != typeof t3 || (t3 = Number(t3)), n.ok(!isNaN(t3)), t3 instanceof Number ? t3.valueOf() : "number" == typeof t3 ? t3 : Array.isArray(t3) || "function" != typeof t3.valueOf ? t3.toString && !Array.isArray(t3) && t3.toString() == Number(t3) ? Number(t3) : void n.ok(false) : Number(t3.valueOf()));
          };
        }, 863: (t2, e2, r2) => {
          "use strict";
          var n = r2(3305), i = r2(5549);
          t2.exports = function(t3) {
            if (null == t3)
              return t3;
            if (n(t3, "ObjectId"))
              return t3;
            if (t3._id) {
              if (n(t3._id, "ObjectId"))
                return t3._id;
              if (t3._id.toString instanceof Function)
                return new i(t3._id.toString());
            }
            return t3.toString instanceof Function ? new i(t3.toString()) : new i(t3);
          };
        }, 1244: (t2, e2, r2) => {
          "use strict";
          var n = r2(3609);
          t2.exports = function(t3, e3) {
            if (null == t3)
              return t3;
            if (t3._id && "string" == typeof t3._id)
              return t3._id;
            if (t3.toString && t3.toString !== Object.prototype.toString && !Array.isArray(t3))
              return t3.toString();
            throw new n("string", t3, e3);
          };
        }, 8250: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer, i = r2(6365), o = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/i, a = i.Binary;
          function s(t3) {
            "string" != typeof t3 && (t3 = "");
            var e3, r3 = null != (e3 = t3.replace(/[{}-]/g, "")) && n.from(e3, "hex"), o2 = new i(r3);
            return o2._subtype = 4, o2;
          }
          t2.exports = function(t3) {
            if (null == t3)
              return t3;
            function e3(t4) {
              var e4 = new i(t4);
              return e4._subtype = 4, e4;
            }
            if ("string" == typeof t3) {
              if (o.test(t3))
                return s(t3);
              throw new Error('"'.concat(t3, '" is not a valid UUID string'));
            }
            if (n.isBuffer(t3))
              return e3(t3);
            if (t3 instanceof a)
              return e3(t3.value(true));
            if (t3.toString && t3.toString !== Object.prototype.toString && o.test(t3.toString()))
              return s(t3.toString());
            throw new Error('"'.concat(t3, '" cannot be casted to a UUID'));
          }, t2.exports.UUID_FORMAT = o;
        }, 1260: (t2, e2) => {
          "use strict";
          var r2 = Object.freeze(["countDocuments", "distinct", "estimatedDocumentCount", "find", "findOne", "findOneAndReplace", "findOneAndUpdate", "replaceOne", "updateMany", "updateOne", "deleteMany", "deleteOne", "findOneAndDelete"]).concat(["validate"]);
          e2.Ut = r2;
        }, 2400: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return function(t4) {
              if (Array.isArray(t4))
                return p(t4);
            }(t3) || function(t4) {
              if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                return Array.from(t4);
            }(t3) || h(t3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
          }
          function o() {
            o = function() {
              return e3;
            };
            var t3, e3 = {}, r3 = Object.prototype, n2 = r3.hasOwnProperty, i2 = Object.defineProperty || function(t4, e4, r4) {
              t4[e4] = r4.value;
            }, a2 = "function" == typeof Symbol ? Symbol : {}, s2 = a2.iterator || "@@iterator", u2 = a2.asyncIterator || "@@asyncIterator", c2 = a2.toStringTag || "@@toStringTag";
            function f2(t4, e4, r4) {
              return Object.defineProperty(t4, e4, { value: r4, enumerable: true, configurable: true, writable: true }), t4[e4];
            }
            try {
              f2({}, "");
            } catch (t4) {
              f2 = function(t5, e4, r4) {
                return t5[e4] = r4;
              };
            }
            function l2(t4, e4, r4, n3) {
              var o2 = e4 && e4.prototype instanceof g2 ? e4 : g2, a3 = Object.create(o2.prototype), s3 = new T2(n3 || []);
              return i2(a3, "_invoke", { value: P2(t4, r4, s3) }), a3;
            }
            function h2(t4, e4, r4) {
              try {
                return { type: "normal", arg: t4.call(e4, r4) };
              } catch (t5) {
                return { type: "throw", arg: t5 };
              }
            }
            e3.wrap = l2;
            var p2 = "suspendedStart", y2 = "suspendedYield", b2 = "executing", m2 = "completed", v2 = {};
            function g2() {
            }
            function _2() {
            }
            function w2() {
            }
            var S2 = {};
            f2(S2, s2, function() {
              return this;
            });
            var O2 = Object.getPrototypeOf, j2 = O2 && O2(O2(B2([])));
            j2 && j2 !== r3 && n2.call(j2, s2) && (S2 = j2);
            var $2 = w2.prototype = g2.prototype = Object.create(S2);
            function E2(t4) {
              ["next", "throw", "return"].forEach(function(e4) {
                f2(t4, e4, function(t5) {
                  return this._invoke(e4, t5);
                });
              });
            }
            function A2(t4, e4) {
              function r4(i3, o3, a3, s3) {
                var u3 = h2(t4[i3], t4, o3);
                if ("throw" !== u3.type) {
                  var c3 = u3.arg, f3 = c3.value;
                  return f3 && "object" == d(f3) && n2.call(f3, "__await") ? e4.resolve(f3.__await).then(function(t5) {
                    r4("next", t5, a3, s3);
                  }, function(t5) {
                    r4("throw", t5, a3, s3);
                  }) : e4.resolve(f3).then(function(t5) {
                    c3.value = t5, a3(c3);
                  }, function(t5) {
                    return r4("throw", t5, a3, s3);
                  });
                }
                s3(u3.arg);
              }
              var o2;
              i2(this, "_invoke", { value: function(t5, n3) {
                function i3() {
                  return new e4(function(e5, i4) {
                    r4(t5, n3, e5, i4);
                  });
                }
                return o2 = o2 ? o2.then(i3, i3) : i3();
              } });
            }
            function P2(e4, r4, n3) {
              var i3 = p2;
              return function(o2, a3) {
                if (i3 === b2)
                  throw Error("Generator is already running");
                if (i3 === m2) {
                  if ("throw" === o2)
                    throw a3;
                  return { value: t3, done: true };
                }
                for (n3.method = o2, n3.arg = a3; ; ) {
                  var s3 = n3.delegate;
                  if (s3) {
                    var u3 = x2(s3, n3);
                    if (u3) {
                      if (u3 === v2)
                        continue;
                      return u3;
                    }
                  }
                  if ("next" === n3.method)
                    n3.sent = n3._sent = n3.arg;
                  else if ("throw" === n3.method) {
                    if (i3 === p2)
                      throw i3 = m2, n3.arg;
                    n3.dispatchException(n3.arg);
                  } else
                    "return" === n3.method && n3.abrupt("return", n3.arg);
                  i3 = b2;
                  var c3 = h2(e4, r4, n3);
                  if ("normal" === c3.type) {
                    if (i3 = n3.done ? m2 : y2, c3.arg === v2)
                      continue;
                    return { value: c3.arg, done: n3.done };
                  }
                  "throw" === c3.type && (i3 = m2, n3.method = "throw", n3.arg = c3.arg);
                }
              };
            }
            function x2(e4, r4) {
              var n3 = r4.method, i3 = e4.iterator[n3];
              if (i3 === t3)
                return r4.delegate = null, "throw" === n3 && e4.iterator.return && (r4.method = "return", r4.arg = t3, x2(e4, r4), "throw" === r4.method) || "return" !== n3 && (r4.method = "throw", r4.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), v2;
              var o2 = h2(i3, e4.iterator, r4.arg);
              if ("throw" === o2.type)
                return r4.method = "throw", r4.arg = o2.arg, r4.delegate = null, v2;
              var a3 = o2.arg;
              return a3 ? a3.done ? (r4[e4.resultName] = a3.value, r4.next = e4.nextLoc, "return" !== r4.method && (r4.method = "next", r4.arg = t3), r4.delegate = null, v2) : a3 : (r4.method = "throw", r4.arg = new TypeError("iterator result is not an object"), r4.delegate = null, v2);
            }
            function k2(t4) {
              var e4 = { tryLoc: t4[0] };
              1 in t4 && (e4.catchLoc = t4[1]), 2 in t4 && (e4.finallyLoc = t4[2], e4.afterLoc = t4[3]), this.tryEntries.push(e4);
            }
            function M2(t4) {
              var e4 = t4.completion || {};
              e4.type = "normal", delete e4.arg, t4.completion = e4;
            }
            function T2(t4) {
              this.tryEntries = [{ tryLoc: "root" }], t4.forEach(k2, this), this.reset(true);
            }
            function B2(e4) {
              if (e4 || "" === e4) {
                var r4 = e4[s2];
                if (r4)
                  return r4.call(e4);
                if ("function" == typeof e4.next)
                  return e4;
                if (!isNaN(e4.length)) {
                  var i3 = -1, o2 = function r5() {
                    for (; ++i3 < e4.length; )
                      if (n2.call(e4, i3))
                        return r5.value = e4[i3], r5.done = false, r5;
                    return r5.value = t3, r5.done = true, r5;
                  };
                  return o2.next = o2;
                }
              }
              throw new TypeError(d(e4) + " is not iterable");
            }
            return _2.prototype = w2, i2($2, "constructor", { value: w2, configurable: true }), i2(w2, "constructor", { value: _2, configurable: true }), _2.displayName = f2(w2, c2, "GeneratorFunction"), e3.isGeneratorFunction = function(t4) {
              var e4 = "function" == typeof t4 && t4.constructor;
              return !!e4 && (e4 === _2 || "GeneratorFunction" === (e4.displayName || e4.name));
            }, e3.mark = function(t4) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(t4, w2) : (t4.__proto__ = w2, f2(t4, c2, "GeneratorFunction")), t4.prototype = Object.create($2), t4;
            }, e3.awrap = function(t4) {
              return { __await: t4 };
            }, E2(A2.prototype), f2(A2.prototype, u2, function() {
              return this;
            }), e3.AsyncIterator = A2, e3.async = function(t4, r4, n3, i3, o2) {
              void 0 === o2 && (o2 = Promise);
              var a3 = new A2(l2(t4, r4, n3, i3), o2);
              return e3.isGeneratorFunction(r4) ? a3 : a3.next().then(function(t5) {
                return t5.done ? t5.value : a3.next();
              });
            }, E2($2), f2($2, c2, "Generator"), f2($2, s2, function() {
              return this;
            }), f2($2, "toString", function() {
              return "[object Generator]";
            }), e3.keys = function(t4) {
              var e4 = Object(t4), r4 = [];
              for (var n3 in e4)
                r4.push(n3);
              return r4.reverse(), function t5() {
                for (; r4.length; ) {
                  var n4 = r4.pop();
                  if (n4 in e4)
                    return t5.value = n4, t5.done = false, t5;
                }
                return t5.done = true, t5;
              };
            }, e3.values = B2, T2.prototype = { constructor: T2, reset: function(e4) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(M2), !e4)
                for (var r4 in this)
                  "t" === r4.charAt(0) && n2.call(this, r4) && !isNaN(+r4.slice(1)) && (this[r4] = t3);
            }, stop: function() {
              this.done = true;
              var t4 = this.tryEntries[0].completion;
              if ("throw" === t4.type)
                throw t4.arg;
              return this.rval;
            }, dispatchException: function(e4) {
              if (this.done)
                throw e4;
              var r4 = this;
              function i3(n3, i4) {
                return s3.type = "throw", s3.arg = e4, r4.next = n3, i4 && (r4.method = "next", r4.arg = t3), !!i4;
              }
              for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
                var a3 = this.tryEntries[o2], s3 = a3.completion;
                if ("root" === a3.tryLoc)
                  return i3("end");
                if (a3.tryLoc <= this.prev) {
                  var u3 = n2.call(a3, "catchLoc"), c3 = n2.call(a3, "finallyLoc");
                  if (u3 && c3) {
                    if (this.prev < a3.catchLoc)
                      return i3(a3.catchLoc, true);
                    if (this.prev < a3.finallyLoc)
                      return i3(a3.finallyLoc);
                  } else if (u3) {
                    if (this.prev < a3.catchLoc)
                      return i3(a3.catchLoc, true);
                  } else {
                    if (!c3)
                      throw Error("try statement without catch or finally");
                    if (this.prev < a3.finallyLoc)
                      return i3(a3.finallyLoc);
                  }
                }
              }
            }, abrupt: function(t4, e4) {
              for (var r4 = this.tryEntries.length - 1; r4 >= 0; --r4) {
                var i3 = this.tryEntries[r4];
                if (i3.tryLoc <= this.prev && n2.call(i3, "finallyLoc") && this.prev < i3.finallyLoc) {
                  var o2 = i3;
                  break;
                }
              }
              o2 && ("break" === t4 || "continue" === t4) && o2.tryLoc <= e4 && e4 <= o2.finallyLoc && (o2 = null);
              var a3 = o2 ? o2.completion : {};
              return a3.type = t4, a3.arg = e4, o2 ? (this.method = "next", this.next = o2.finallyLoc, v2) : this.complete(a3);
            }, complete: function(t4, e4) {
              if ("throw" === t4.type)
                throw t4.arg;
              return "break" === t4.type || "continue" === t4.type ? this.next = t4.arg : "return" === t4.type ? (this.rval = this.arg = t4.arg, this.method = "return", this.next = "end") : "normal" === t4.type && e4 && (this.next = e4), v2;
            }, finish: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.finallyLoc === t4)
                  return this.complete(r4.completion, r4.afterLoc), M2(r4), v2;
              }
            }, catch: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.tryLoc === t4) {
                  var n3 = r4.completion;
                  if ("throw" === n3.type) {
                    var i3 = n3.arg;
                    M2(r4);
                  }
                  return i3;
                }
              }
              throw Error("illegal catch attempt");
            }, delegateYield: function(e4, r4, n3) {
              return this.delegate = { iterator: B2(e4), resultName: r4, nextLoc: n3 }, "next" === this.method && (this.arg = t3), v2;
            } }, e3;
          }
          function a(t3, e3, r3, n2, i2, o2, a2) {
            try {
              var s2 = t3[o2](a2), u2 = s2.value;
            } catch (t4) {
              return void r3(t4);
            }
            s2.done ? e3(u2) : Promise.resolve(u2).then(n2, i2);
          }
          function s(t3) {
            return function() {
              var e3 = this, r3 = arguments;
              return new Promise(function(n2, i2) {
                var o2 = t3.apply(e3, r3);
                function s2(t4) {
                  a(o2, n2, i2, s2, u2, "next", t4);
                }
                function u2(t4) {
                  a(o2, n2, i2, s2, u2, "throw", t4);
                }
                s2(void 0);
              });
            };
          }
          function u(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function c(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? u(Object(r3), true).forEach(function(e4) {
                f(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : u(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function f(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != d(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != d(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == d(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function l(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = h(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, a2 = true, s2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return a2 = t4.done, t4;
            }, e: function(t4) {
              s2 = true, o2 = t4;
            }, f: function() {
              try {
                a2 || null == r3.return || r3.return();
              } finally {
                if (s2)
                  throw o2;
              }
            } };
          }
          function h(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return p(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? p(t3, e3) : void 0;
            }
          }
          function p(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function d(t3) {
            return d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, d(t3);
          }
          var y, b, m, v = r2(1417), g = r2(3550).EventEmitter, _ = r2(4224), w = r2(6365), S = r2(3672), O = r2(5022), j = r2(6140), $ = r2(3441), E = r2(1350), A = r2(1635), P = r2(7058), x = r2(8995), k = r2(6949), M = r2(9538), T = r2(6814), B = r2(5335), I = r2(4473), R = r2(4450), N = r2(2068).w, D = r2(2068).X, L = r2(1226), C = r2(7430).B, U = r2(5152), q = r2(791), F = r2(2692), V = r2(3216), z = r2(2746), K = r2(3305), H = r2(7300), W = r2(1793), J = r2(5188), G = r2(7352).inspect, Y = r2(3303)._, Q = r2(1849), X = r2(6451), Z = r2(5678), tt = r2(6223), et = r2(3892), rt = r2(8768), nt = r2(542), it = rt.deepEqual, ot = rt.isMongooseObject, at = r2(7930).arrayAtomicsBackupSymbol, st = r2(7930).arrayAtomicsSymbol, ut = r2(7930).documentArrayParent, ct = r2(7930).documentIsModified, ft = r2(7930).documentModifiedPaths, lt = r2(7930).documentSchemaSymbol, ht = r2(7930).getSymbol, pt = r2(7930).modelSymbol, dt = r2(7930).populateModelSymbol, yt = r2(7930).scopeSymbol, bt = r2(7160).schemaMixedSymbol, mt = r2(5346), vt = r2(7930).sessionNewDocuments, gt = rt.specialProperties;
          function _t(t3, e3, r3, n2) {
            if ("object" === d(r3) && null != r3 && (r3 = (n2 = r3).skipId), n2 = Object.assign({}, n2), null == this.$__schema) {
              var i2 = rt.isObject(e3) && !e3.instanceOfSchema ? new P(e3) : e3;
              this.$__setSchema(i2), e3 = r3, r3 = n2, n2 = arguments[4] || {};
            }
            if (this.$__ = new _(), null != n2.isNew && true !== n2.isNew && (this.$isNew = n2.isNew), null != n2.priorDoc && (this.$__.priorDoc = n2.priorDoc), r3 && (this.$__.skipId = r3), null != t3 && "object" !== d(t3))
              throw new E(t3, "obj", "Document");
            var o2 = true;
            void 0 !== n2.defaults && (this.$__.defaults = n2.defaults, o2 = n2.defaults);
            var a2 = this.$__schema;
            "boolean" == typeof e3 || "throw" === e3 ? (true !== e3 && (this.$__.strictMode = e3), e3 = void 0) : true !== a2.options.strict && (this.$__.strictMode = a2.options.strict);
            var s2, u2 = l(a2.requiredPaths(true));
            try {
              for (u2.s(); !(s2 = u2.n()).done; ) {
                var c2 = s2.value;
                this.$__.activePaths.require(c2);
              }
            } catch (t4) {
              u2.e(t4);
            } finally {
              u2.f();
            }
            var f2 = null;
            rt.isPOJO(e3) && Object.keys(e3).length > 0 && (f2 = W(e3), this.$__.selected = e3, this.$__.exclude = f2);
            var h2 = false === f2 && e3 ? T(e3) : null;
            if (null == this._doc && (this.$__buildDoc(t3, e3, r3, f2, h2, false), o2 && B(this, e3, f2, h2, true, null, { skipParentChangeTracking: true })), t3 && (this.$__original_set ? this.$__original_set(t3, void 0, true, n2) : this.$set(t3, void 0, true, n2), t3 instanceof _t && (this.$isNew = t3.$isNew)), n2.willInit && o2 ? n2.skipDefaults && (this.$__.skipDefaults = n2.skipDefaults) : o2 && B(this, e3, f2, h2, false, n2.skipDefaults), !this.$__.strictMode && t3) {
              var p2 = this;
              Object.keys(this._doc).forEach(function(t4) {
                t4 in a2.tree || t4 in a2.methods || t4 in a2.virtuals || t4.startsWith("$") || D({ prop: t4, subprops: null, prototype: p2 });
              });
            }
            !function(t4) {
              var e4 = t4.$__schema && t4.$__schema.callQueue;
              if (e4.length) {
                var r4, n3 = l(e4);
                try {
                  for (n3.s(); !(r4 = n3.n()).done; ) {
                    var i3 = r4.value;
                    "pre" !== i3[0] && "post" !== i3[0] && "on" !== i3[0] && t4[i3[0]].apply(t4, i3[1]);
                  }
                } catch (t5) {
                  n3.e(t5);
                } finally {
                  n3.f();
                }
              }
            }(this);
          }
          for (var wt in _t.prototype.$isMongooseDocumentPrototype = true, Object.defineProperty(_t.prototype, "isNew", { get: function() {
            return this.$isNew;
          }, set: function(t3) {
            this.$isNew = t3;
          } }), Object.defineProperty(_t.prototype, "errors", { get: function() {
            return this.$errors;
          }, set: function(t3) {
            this.$errors = t3;
          } }), _t.prototype.$isNew = true, rt.each(["on", "once", "emit", "listeners", "removeListener", "setMaxListeners", "removeAllListeners", "addListener"], function(t3) {
            _t.prototype[t3] = function() {
              if (!this.$__.emitter) {
                if ("emit" === t3)
                  return;
                this.$__.emitter = new g(), this.$__.emitter.setMaxListeners(0);
              }
              return this.$__.emitter[t3].apply(this.$__.emitter, arguments);
            }, _t.prototype["$".concat(t3)] = _t.prototype[t3];
          }), _t.prototype.constructor = _t, g.prototype)
            _t[wt] = g.prototype[wt];
          function St(t3, e3, r3) {
            if (null != t3)
              for (var n2 = Object.keys(r3.$__schema.paths), i2 = n2.length, o2 = -1 === e3.indexOf(".") ? [e3] : e3.split("."), a2 = 0; a2 < i2; ++a2) {
                var s2 = "", u2 = n2[a2];
                if (u2.startsWith(e3 + ".")) {
                  var c2 = r3.$__schema.paths[u2], f2 = c2.splitPath().slice(o2.length), l2 = f2.length;
                  if (void 0 !== c2.defaultValue)
                    for (var h2 = t3, p2 = 0; p2 < l2 && null != h2; ++p2) {
                      var d2 = f2[p2];
                      if (p2 === l2 - 1) {
                        if (void 0 !== h2[d2])
                          break;
                        try {
                          var y2 = c2.getDefault(r3, false);
                          void 0 !== y2 && (h2[d2] = y2);
                        } catch (t4) {
                          r3.invalidate(e3 + "." + s2, t4);
                          break;
                        }
                        break;
                      }
                      s2 += (s2.length ? "." : "") + d2, h2[d2] = h2[d2] || {}, h2 = h2[d2];
                    }
                }
              }
          }
          function Ot(t3, e3, r3, n2, i2) {
            i2 = i2 || "", null != e3.$__ && (e3 = e3._doc);
            for (var o2, a2, s2, u2 = Object.keys(e3), c2 = u2.length, f2 = 0, l2 = t3.$__.strictMode, h2 = t3.$__schema; f2 < c2; )
              p2(f2++);
            function p2(c3) {
              if ("__proto__" !== (s2 = u2[c3]) && "constructor" !== s2 && (a2 = i2 ? i2 + s2 : s2, o2 = h2.path(a2), !h2.$isRootDiscriminator || t3.$__isSelected(a2))) {
                var f3 = e3[s2];
                if (!o2 && rt.isPOJO(f3))
                  r3[s2] || (r3[s2] = {}, l2 || s2 in h2.tree || s2 in h2.methods || s2 in h2.virtuals || (t3[s2] = r3[s2])), Ot(t3, f3, r3[s2], n2, a2 + ".");
                else if (o2) {
                  if (r3.hasOwnProperty(s2) && void 0 !== f3 && !n2.hydratedPopulatedDocs && delete r3[s2], null === f3)
                    r3[s2] = o2._castNullish(null);
                  else if (void 0 !== f3) {
                    var p3 = null == f3.$__ ? null : f3.$__.wasPopulated;
                    if (!o2 || p3 || n2.hydratedPopulatedDocs)
                      if (o2 && n2.hydratedPopulatedDocs) {
                        var d2;
                        r3[s2] = o2.cast(f3, t3, true, void 0, { hydratedPopulatedDocs: true }), r3[s2] && r3[s2].$__ && r3[s2].$__.wasPopulated ? t3.$populated(a2, r3[s2].$__.wasPopulated.value, r3[s2].$__.wasPopulated.options) : Array.isArray(r3[s2]) && r3[s2].length && null !== (d2 = r3[s2][0]) && void 0 !== d2 && null !== (d2 = d2.$__) && void 0 !== d2 && d2.wasPopulated && t3.$populated(a2, r3[s2].map(function(t4) {
                          var e4;
                          return null == t4 || null === (e4 = t4.$__) || void 0 === e4 || null === (e4 = e4.wasPopulated) || void 0 === e4 ? void 0 : e4.value;
                        }).filter(function(t4) {
                          return null != t4;
                        }), r3[s2][0].$__.wasPopulated.options);
                      } else
                        r3[s2] = f3;
                    else
                      try {
                        n2 && n2.setters ? r3[s2] = o2.applySetters(f3, t3, false) : r3[s2] = o2.cast(f3, t3, true);
                      } catch (e4) {
                        t3.invalidate(e4.path, new M({ path: e4.path, message: e4.message, type: "cast", value: e4.value, reason: e4 }));
                      }
                  }
                  t3.$isModified(a2) || t3.$__.activePaths.init(a2);
                } else
                  r3[s2] = f3, l2 || i2 || (t3[s2] = f3);
              }
            }
          }
          function jt(t3) {
            if (null == t3)
              return true;
            if ("object" !== d(t3) || Array.isArray(t3))
              return false;
            for (var e3 = 0, r3 = Object.keys(t3); e3 < r3.length; e3++)
              if (!jt(t3[r3[e3]]))
                return false;
            return true;
          }
          function $t(t3, e3, r3, n2) {
            var i2 = {};
            !function(t4) {
              var e4 = Object.keys(t4.$__.activePaths.getStatePaths("require")), r4 = 0, n3 = e4.length;
              for (r4 = 0; r4 < n3; ++r4) {
                var i3 = e4[r4], o3 = t4.$__schema.path(i3);
                if (null != o3 && "function" == typeof o3.originalRequiredValue) {
                  t4.$__.cachedRequired = t4.$__.cachedRequired || {};
                  try {
                    t4.$__.cachedRequired[i3] = o3.originalRequiredValue.call(t4, t4);
                  } catch (e5) {
                    t4.invalidate(i3, e5);
                  }
                }
              }
            }(t3);
            var o2 = new Set(Object.keys(t3.$__.activePaths.getStatePaths("require")).filter(function(e4) {
              return !(!t3.$__isSelected(e4) && !t3.$isModified(e4)) && (null == t3.$__.cachedRequired || !(e4 in t3.$__.cachedRequired) || t3.$__.cachedRequired[e4]);
            }));
            function a2(t4) {
              o2.add(t4);
            }
            if (Object.keys(t3.$__.activePaths.getStatePaths("init")).forEach(a2), Object.keys(t3.$__.activePaths.getStatePaths("modify")).forEach(a2), Object.keys(t3.$__.activePaths.getStatePaths("default")).forEach(a2), !n2) {
              var s2, u2 = t3.$getAllSubdocs({ useCache: true }), c2 = t3.modifiedPaths(), f2 = l(u2);
              try {
                for (f2.s(); !(s2 = f2.n()).done; ) {
                  var h2 = s2.value;
                  if (h2.$basePath) {
                    var p2, d2 = h2.$isSingleNested ? h2.$__pathRelativeToParent() : h2.$__fullPathWithIndexes(), y2 = l(h2.modifiedPaths());
                    try {
                      for (y2.s(); !(p2 = y2.n()).done; ) {
                        var b2 = p2.value;
                        o2.delete(d2 + "." + b2);
                      }
                    } catch (t4) {
                      y2.e(t4);
                    } finally {
                      y2.f();
                    }
                    !t3.$isModified(d2, null, c2) || t3.$__.activePaths.getStatePaths("modify").hasOwnProperty(d2) || t3.$isDefault(d2) || (o2.add(d2), null == t3.$__.pathsToScopes && (t3.$__.pathsToScopes = {}), t3.$__.pathsToScopes[d2] = h2.$isDocumentArrayElement ? h2.__parentArray : h2.$parent(), i2[d2] = { skipSchemaValidators: true }, h2.$isDocumentArrayElement && null != h2.__index && (i2[d2].index = h2.__index));
                  }
                }
              } catch (t4) {
                f2.e(t4);
              } finally {
                f2.f();
              }
            }
            var m2, v2 = l(o2);
            try {
              for (v2.s(); !(m2 = v2.n()).done; ) {
                var g2 = m2.value, _2 = t3.$__schema.path(g2);
                if (_2) {
                  if (_2.$isMongooseDocumentArray) {
                    var w2, S2 = l(o2);
                    try {
                      for (S2.s(); !(w2 = S2.n()).done; ) {
                        var O2 = w2.value;
                        (null == O2 || O2.startsWith(_2.path + ".")) && o2.delete(O2);
                      }
                    } catch (t4) {
                      S2.e(t4);
                    } finally {
                      S2.f();
                    }
                  }
                  (_2.caster || 0 !== _2.validators.length || _2.$parentSchemaDocArray) && (!_2.$isMongooseArray || _2.$isMongooseDocumentArray || _2.$embeddedSchemaType.$isMongooseArray || 0 !== _2.validators.length || 0 !== _2.$embeddedSchemaType.validators.length) || o2.delete(g2);
                }
              }
            } catch (t4) {
              v2.e(t4);
            } finally {
              v2.f();
            }
            Array.isArray(e3) ? o2 = function(t4, e4) {
              var r4, n3 = new Set(e4), i3 = /* @__PURE__ */ new Map([]), o3 = l(e4);
              try {
                for (o3.s(); !(r4 = o3.n()).done; ) {
                  var a3 = r4.value;
                  if (-1 !== a3.indexOf("."))
                    for (var s3 = a3.split("."), u3 = s3[0], c3 = 1; c3 < s3.length; ++c3)
                      i3.set(u3, a3), u3 = u3 + "." + s3[c3];
                }
              } catch (t5) {
                o3.e(t5);
              } finally {
                o3.f();
              }
              var f3, h3 = /* @__PURE__ */ new Set(), p3 = l(t4);
              try {
                for (p3.s(); !(f3 = p3.n()).done; ) {
                  var d3 = f3.value;
                  n3.has(d3) ? h3.add(d3) : i3.has(d3) && h3.add(i3.get(d3));
                }
              } catch (t5) {
                p3.e(t5);
              } finally {
                p3.f();
              }
              return h3;
            }(o2, e3) : Array.isArray(r3) && (o2 = function(t4, e4) {
              return e4 = new Set(e4), t4 = Array.from(t4).filter(function(t5) {
                return !e4.has(t5);
              }), new Set(t4);
            }(o2, r3)), function(t4, e4) {
              var r4, n3 = l(e4);
              try {
                for (n3.s(); !(r4 = n3.n()).done; ) {
                  var i3 = r4.value, o3 = t4.$__schema.path(i3);
                  o3 && o3.$isMongooseArray && (Array.isArray(o3) || !o3.$isMongooseDocumentArray || o3 && o3.schemaOptions && o3.schemaOptions.required) && (!o3.$isMongooseArray || o3.$isMongooseDocumentArray || o3.$embeddedSchemaType.$isMongooseArray || 0 !== o3.$embeddedSchemaType.validators.length) && Et(t4.$__getValue(i3), e4, i3);
                }
              } catch (t5) {
                n3.e(t5);
              } finally {
                n3.f();
              }
            }(t3, o2);
            var j2, $2 = { skipArrays: true }, E2 = l(o2);
            try {
              for (E2.s(); !(j2 = E2.n()).done; ) {
                var A2 = j2.value;
                if (t3.$__schema.nested[A2]) {
                  var P2 = t3.$__getValue(A2);
                  ot(P2) && (P2 = P2.toObject({ transform: false }));
                  var x2 = C(P2, A2, $2, t3.$__schema);
                  Object.keys(x2).filter(function(e4) {
                    return !t3.$__schema.singleNestedPaths.hasOwnProperty(e4);
                  }).forEach(a2);
                }
              }
            } catch (t4) {
              E2.e(t4);
            } finally {
              E2.f();
            }
            var k2, M2 = l(o2);
            try {
              for (M2.s(); !(k2 = M2.n()).done; ) {
                var T2 = k2.value, B2 = t3.$__schema.path(T2);
                if (B2 && (B2.$parentSchemaDocArray && "string" == typeof B2.$parentSchemaDocArray.path && o2.add(B2.$parentSchemaDocArray.path), B2.$isSchemaMap)) {
                  var I2 = t3.$__getValue(T2);
                  if (null != I2) {
                    var R2, N2 = l(I2.keys());
                    try {
                      for (N2.s(); !(R2 = N2.n()).done; ) {
                        var D2 = R2.value;
                        o2.add(T2 + "." + D2);
                      }
                    } catch (t4) {
                      N2.e(t4);
                    } finally {
                      N2.f();
                    }
                  }
                }
              }
            } catch (t4) {
              M2.e(t4);
            } finally {
              M2.f();
            }
            return [o2 = Array.from(o2), i2];
          }
          function Et(t3, e3, r3) {
            if (null != t3)
              for (var n2 = t3.length, i2 = 0; i2 < n2; ++i2)
                Array.isArray(t3[i2]) ? Et(t3[i2], e3, r3 + "." + i2) : e3.add(r3 + "." + i2);
          }
          function At(t3, e3, r3, n2) {
            var i2, o2, a2, s2 = t3.$__schema, u2 = s2.virtuals, c2 = Object.keys(u2), f2 = c2.length, l2 = f2, h2 = t3._doc, p2 = "boolean" != typeof (n2 && n2.aliases) || n2.aliases;
            r3 = r3 || {};
            var d2 = null;
            if (Array.isArray(r3.virtuals))
              d2 = new Set(r3.virtuals);
            else if (r3.virtuals && r3.virtuals.pathsToSkip) {
              d2 = new Set(c2);
              for (var y2 = 0; y2 < r3.virtuals.pathsToSkip.length; y2++)
                d2.has(r3.virtuals.pathsToSkip[y2]) && d2.delete(r3.virtuals.pathsToSkip[y2]);
            }
            if (!h2)
              return e3;
            for (f2 = 0; f2 < l2; ++f2)
              if (i2 = c2[f2], (null == d2 || d2.has(i2)) && (p2 || !s2.aliases.hasOwnProperty(i2))) {
                if (o2 = i2, null != r3.path) {
                  if (!i2.startsWith(r3.path + "."))
                    continue;
                  o2 = i2.substring(r3.path.length + 1);
                }
                if (-1 !== o2.indexOf(".") || o2 !== i2) {
                  var b2 = o2.split(".");
                  if (void 0 !== (a2 = R(t3.get(i2), r3))) {
                    var m2 = b2.length;
                    h2 = e3;
                    for (var v2 = 0; v2 < m2 - 1; ++v2)
                      h2[b2[v2]] = h2[b2[v2]] || {}, h2 = h2[b2[v2]];
                    h2[b2[m2 - 1]] = a2;
                  }
                } else {
                  if (void 0 === (a2 = u2[i2].applyGetters(void 0, t3)))
                    continue;
                  a2 = R(a2, r3), e3[o2] = a2;
                }
              }
            return e3;
          }
          function Pt(t3, e3) {
            if (nt(e3))
              throw new Error("`transform` function must be synchronous, but the transform on path `" + t3 + "` returned a promise.");
          }
          function xt(t3, e3, r3) {
            var n2 = t3.$populated(e3, true);
            if (!n2 && t3.$__.selected) {
              var i2 = e3.split(".")[0];
              if (t3.$__.selected[i2 + ".$"])
                return i2;
            }
            if (n2 && rt.isMongooseArray(r3) && (n2.options.match || n2.options.options && rt.object.hasOwnProperty(n2.options.options, "limit") || n2.options.options && n2.options.options.skip || n2.options.select && (0 === n2.options.select._id || /\s?-_id\s?/.test(n2.options.select)))) {
              var o2 = r3[st];
              if (0 === Object.keys(o2).length || o2.$set || o2.$pop)
                return e3;
            }
          }
          function kt(t3, e3, r3, n2, i2, o2) {
            if (o2 || (o2 = "$set"), r3[o2] || (r3[o2] = {}), r3[o2][n2.path] = i2, false !== t3.$__schema.options.versionKey && !function(t4, e4) {
              var r4 = t4.$__schema.options.skipVersioning;
              return !!r4 && r4[e4 = e4.replace(/\.\d+\./, ".")];
            }(t3, n2.path) && 3 & ~t3.$__.version && !t3.$__schema.options.optimisticConcurrency) {
              switch (o2) {
                case "$set":
                case "$unset":
                case "$pop":
                case "$pull":
                case "$pullAll":
                case "$push":
                case "$addToSet":
                case "$inc":
                  break;
                default:
                  return;
              }
              "$push" === o2 || "$addToSet" === o2 || "$pullAll" === o2 || "$pull" === o2 ? /\.\d+\.|\.\d+$/.test(n2.path) ? t3.$__.version = 3 : t3.$__.version = 2 : /^\$p/.test(o2) || Array.isArray(i2) ? t3.$__.version = 3 : /\.\d+\.|\.\d+$/.test(n2.path) && (t3.$__.version = 1);
            }
          }
          function Mt(t3, e3, r3, n2, i2) {
            if (!r3.$set || !r3.$set[n2.path])
              if ("function" != typeof i2.$__getAtomics) {
                var o2, a2, s2 = i2[st], u2 = Object.keys(s2), c2 = u2.length;
                if (0 === c2)
                  return rt.isMongooseObject(i2) ? i2 = i2.toObject({ depopulate: 1, _isNested: true }) : i2.valueOf && (i2 = i2.valueOf()), kt(t3, 0, r3, n2, i2);
                for (; c2--; )
                  o2 = s2[a2 = u2[c2]], rt.isMongooseObject(o2) ? o2 = o2.toObject({ depopulate: true, transform: false, _isNested: true }) : Array.isArray(o2) ? o2 = o2.map(f2) : o2.valueOf && (o2 = o2.valueOf()), "$addToSet" === a2 && (o2 = { $each: o2 }), kt(t3, 0, r3, n2, o2, a2);
              } else
                i2.$__getAtomics().forEach(function(e4) {
                  var i3 = e4[0], o3 = e4[1];
                  kt(t3, 0, r3, n2, o3, i3);
                });
            function f2(t4) {
              return rt.isMongooseObject(t4) ? t4.toObject({ depopulate: 1, _isNested: true }) : t4;
            }
          }
          _t.prototype.$__schema, _t.prototype.schema, Object.defineProperty(_t.prototype, "$locals", { configurable: false, enumerable: false, get: function() {
            return null == this.$__.locals && (this.$__.locals = {}), this.$__.locals;
          }, set: function(t3) {
            this.$__.locals = t3;
          } }), _t.prototype.isNew, Object.defineProperty(_t.prototype, "$where", { configurable: false, enumerable: false, writable: true }), _t.prototype.id, _t.prototype.$errors, Object.defineProperty(_t.prototype, "$op", { get: function() {
            return this.$__.op || null;
          }, set: function(t3) {
            this.$__.op = t3;
          } }), _t.prototype.$__buildDoc = function(t3, e3, r3, n2, i2) {
            for (var o2 = {}, a2 = Object.keys(this.$__schema.paths).filter(function(t4) {
              return !t4.includes("$*");
            }), s2 = a2.length, u2 = 0; u2 < s2; ++u2) {
              var c2 = a2[u2];
              if ("_id" === c2) {
                if (r3)
                  continue;
                if (t3 && "_id" in t3)
                  continue;
              }
              for (var f2 = this.$__schema.paths[c2].splitPath(), l2 = f2.length, h2 = l2 - 1, p2 = "", d2 = o2, y2 = false, b2 = 0; b2 < l2; ++b2) {
                var m2 = f2[b2];
                if (p2.length ? p2 += "." + m2 : p2 = m2, true === n2) {
                  if (p2 in e3)
                    break;
                } else if (false === n2 && e3 && !y2) {
                  if (p2 in e3)
                    y2 = true;
                  else if (!i2[p2])
                    break;
                }
                b2 < h2 && (d2 = d2[m2] || (d2[m2] = {}));
              }
            }
            this._doc = o2;
          }, _t.prototype.toBSON = function() {
            return this.toObject(Y);
          }, _t.prototype.init = function(t3, e3, r3) {
            return "function" == typeof e3 && (r3 = e3, e3 = null), this.$__init(t3, e3), r3 && r3(null, this), this;
          }, _t.prototype.$init = function() {
            return this.constructor.prototype.init.apply(this, arguments);
          }, _t.prototype.$__init = function(t3, e3) {
            if (this.$isNew = false, e3 = e3 || {}, null != t3._id && e3.populated && e3.populated.length) {
              var r3, n2 = String(t3._id), i2 = l(e3.populated);
              try {
                for (i2.s(); !(r3 = i2.n()).done; ) {
                  var o2 = r3.value;
                  if (o2.isVirtual ? this.$populated(o2.path, rt.getValue(o2.path, t3), o2) : this.$populated(o2.path, o2._docs[n2], o2), null != o2._childDocs) {
                    var a2, s2 = l(o2._childDocs);
                    try {
                      for (s2.s(); !(a2 = s2.n()).done; ) {
                        var u2 = a2.value;
                        null != u2 && null != u2.$__ && (u2.$__.parent = this);
                      }
                    } catch (t4) {
                      s2.e(t4);
                    } finally {
                      s2.f();
                    }
                    o2._childDocs = [];
                  }
                }
              } catch (t4) {
                i2.e(t4);
              } finally {
                i2.f();
              }
            }
            Ot(this, t3, this._doc, e3), Q(this, e3.populated), this.$emit("init", this), this.constructor.emit("init", this);
            var c2 = false === this.$__.exclude && this.$__.selected ? T(this.$__.selected) : null;
            return B(this, this.$__.selected, this.$__.exclude, c2, false, this.$__.skipDefaults), this;
          }, _t.prototype.updateOne = function(t3, e3, r3) {
            var n2 = this.constructor.updateOne({ _id: this._doc._id }, t3, e3), i2 = this;
            return n2.pre(function(t4) {
              i2.constructor._middleware.execPre("updateOne", i2, [i2], t4);
            }), n2.post(function(t4) {
              i2.constructor._middleware.execPost("updateOne", i2, [i2], {}, t4);
            }), null != this.$session() && ("session" in n2.options || (n2.options.session = this.$session())), null != r3 ? n2.exec(r3) : n2;
          }, _t.prototype.replaceOne = function() {
            var t3 = Array.prototype.slice.call(arguments);
            return t3.unshift({ _id: this._doc._id }), this.constructor.replaceOne.apply(this.constructor, t3);
          }, _t.prototype.$session = function(t3) {
            if (0 === arguments.length)
              return null != this.$__.session && this.$__.session.hasEnded ? (this.$__.session = null, null) : this.$__.session;
            if (null != t3 && t3.hasEnded)
              throw new S("Cannot set a document's session to a session that has ended. Make sure you haven't called `endSession()` on the session you are passing to `$session()`.");
            if (null != t3 || null != this.$__.session) {
              if (this.$__.session = t3, !this.$isSubdocument) {
                var e3, r3 = l(this.$getAllSubdocs());
                try {
                  for (r3.s(); !(e3 = r3.n()).done; )
                    e3.value.$session(t3);
                } catch (t4) {
                  r3.e(t4);
                } finally {
                  r3.f();
                }
              }
              return t3;
            }
          }, _t.prototype.$timestamps = function(t3) {
            return 0 === arguments.length ? null != this.$__.timestamps ? this.$__.timestamps : this.$__schema ? this.$__schema.options.timestamps : void 0 : (t3 !== this.$timestamps() && (this.$__.timestamps = t3), this);
          }, _t.prototype.overwrite = function(t3) {
            for (var e3 = 0, r3 = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(t3)))); e3 < r3.length; e3++) {
              var n2 = r3[e3];
              "_id" !== n2 && (this.$__schema.options.versionKey && n2 === this.$__schema.options.versionKey || this.$__schema.options.discriminatorKey && n2 === this.$__schema.options.discriminatorKey || this.$set(n2, t3[n2]));
            }
            return this;
          }, _t.prototype.$set = function(t3, e3, r3, n2) {
            var i2 = this;
            rt.isPOJO(r3) && (n2 = r3, r3 = void 0);
            var o2, a2, s2, u2, h2 = n2 && n2.merge, p2 = r3 && true !== r3, y2 = true === r3, b2 = 0, m2 = n2 && "strict" in n2, v2 = m2 ? n2.strict : this.$__.strictMode;
            if (p2 && ((this.$__.adhocPaths || (this.$__.adhocPaths = {}))[t3] = this.$__schema.interpretAsType(t3, r3, this.$__schema.options)), null == t3) {
              var g2 = [e3, t3];
              t3 = g2[0], e3 = g2[1];
            } else if ("string" != typeof t3) {
              if (t3 instanceof _t && (t3 = t3.$__isNested ? t3.toObject() : t3.$__schema === this.$__schema ? At(t3, c({}, t3._doc)) : t3._doc), null == t3) {
                var _2 = [e3, t3];
                t3 = _2[0], e3 = _2[1];
              }
              u2 = e3 ? e3 + "." : "";
              var w2 = (o2 = q(this.$__schema, t3)).length, j2 = n2 && n2._skipMinimizeTopLevel || false;
              if (0 === w2 && j2)
                return delete n2._skipMinimizeTopLevel, e3 && this.$set(e3, {}), this;
              n2 = Object.assign({}, n2, { _skipMinimizeTopLevel: false });
              for (var E2 = 0; E2 < w2; ++E2) {
                s2 = o2[E2];
                var A2 = u2 ? u2 + s2 : s2;
                a2 = this.$__schema.pathType(A2);
                var P2 = t3[s2];
                if (true !== r3 || u2 || null == P2 || "nested" !== a2 || null == this._doc[s2] || delete this._doc[s2], rt.isNonBuiltinObject(P2) && "nested" === a2)
                  this.$set(A2, P2, y2, Object.assign({}, n2, { _skipMarkModified: true })), St(this.$get(A2), A2, this);
                else if (v2) {
                  if (y2 && void 0 === P2 && void 0 !== this.$get(A2))
                    continue;
                  if ("adhocOrUndefined" === a2 && (a2 = U(this, A2, { typeOnly: true })), "real" === a2 || "virtual" === a2)
                    this.$set(A2, P2, y2, n2);
                  else if ("nested" === a2 && P2 instanceof _t)
                    this.$set(A2, P2.toObject({ transform: false }), y2, n2);
                  else {
                    if ("throw" === v2)
                      throw "nested" === a2 ? new $(s2, P2) : new x(s2);
                    "nested" === a2 && null == P2 && this.$set(A2, P2, y2, n2);
                  }
                } else
                  this.$set(A2, P2, y2, n2);
              }
              for (var k2 = {}, M2 = Object.keys(this.$__schema.tree), T2 = 0, B2 = M2.length; T2 < B2; ++T2)
                (s2 = M2[T2]) && this._doc.hasOwnProperty(s2) && (k2[s2] = void 0);
              return this._doc = Object.assign(k2, this._doc), this;
            }
            var R2 = this.$__schema.pathType(t3), N2 = null;
            if ("adhocOrUndefined" === R2 && (N2 = -1 === t3.indexOf(".") ? [t3] : t3.split("."), R2 = U(this, N2, { typeOnly: true })), "adhocOrUndefined" === R2 && !m2) {
              null == N2 && (N2 = -1 === t3.indexOf(".") ? [t3] : t3.split("."));
              var D2 = F(this.$__schema, N2);
              void 0 !== D2 && (v2 = D2);
            }
            e3 = V(e3, true);
            var L2, C2 = null != i2.$__.priorDoc ? i2.$__.priorDoc.$__getValue(t3) : y2 ? void 0 : i2.$__getValue(t3);
            if ("nested" === R2 && e3) {
              if ("object" === d(e3) && null != e3) {
                if (null != e3.$__ && (e3 = e3.toObject(Y)), null == e3)
                  return this.invalidate(t3, new S.CastError("Object", e3, t3)), this;
                var z2 = this.$isModified(t3), K2 = null != this.$__.savedState && this.$__.savedState.hasOwnProperty(t3);
                if (null != this.$__.savedState && !this.$isNew && !this.$__.savedState.hasOwnProperty(t3)) {
                  var H2 = this.$__getValue(t3);
                  this.$__.savedState[t3] = H2;
                  for (var W2 = 0, J2 = Object.keys(H2 || {}); W2 < J2.length; W2++) {
                    var G2 = J2[W2];
                    this.$__.savedState[t3 + "." + G2] = H2[G2];
                  }
                }
                if (h2)
                  return this.$set(e3, t3, y2, n2);
                this.$__setValue(t3, null), I(this, t3);
                var Q2 = q(this.$__schema, e3, t3);
                this.$__setValue(t3, {});
                var X2, tt2 = l(Q2);
                try {
                  for (tt2.s(); !(X2 = tt2.n()).done; ) {
                    var et2 = X2.value;
                    this.$set(t3 + "." + et2, e3[et2], y2, c(c({}, n2), {}, { _skipMarkModified: true }));
                  }
                } catch (t4) {
                  tt2.e(t4);
                } finally {
                  tt2.f();
                }
                return null == C2 || z2 && !K2 || !rt.deepEqual(K2 ? this.$__.savedState[t3] : C2, e3) ? this.markModified(t3) : this.unmarkModified(t3), this;
              }
              return this.invalidate(t3, new S.CastError("Object", e3, t3)), this;
            }
            if (null == N2 && (N2 = -1 === t3.indexOf(".") ? [t3] : t3.split(".")), "string" == typeof this.$__schema.aliases[N2[0]] && (N2[0] = this.$__schema.aliases[N2[0]]), "adhocOrUndefined" === R2 && v2) {
              var nt2;
              for (b2 = 0; b2 < N2.length; ++b2) {
                var it2 = N2.slice(0, b2 + 1).join(".");
                if (b2 + 1 < N2.length && "virtual" === this.$__schema.pathType(it2))
                  return Z.set(t3, e3, this), this;
                if (null != (L2 = this.$__schema.path(it2))) {
                  if (L2 instanceof O) {
                    nt2 = true;
                    break;
                  }
                  if (L2.$isSchemaMap && L2.$__schemaType instanceof O && b2 < N2.length - 1) {
                    nt2 = true, L2 = L2.$__schemaType;
                    break;
                  }
                }
              }
              if (null == L2 && (L2 = U(this, t3)), !nt2 && !L2) {
                if ("throw" === v2)
                  throw new x(t3);
                return this;
              }
            } else {
              if ("virtual" === R2)
                return (L2 = this.$__schema.virtualpath(t3)).applySetters(e3, this), this;
              L2 = this.$__path(t3);
            }
            var ot2, at2 = this._doc, st2 = "";
            for (b2 = 0; b2 < N2.length - 1; ++b2)
              at2 = at2[N2[b2]], st2 += (0 !== st2.length ? "." : "") + N2[b2], at2 || (this.$set(st2, {}), this.$__isSelected(st2) || this.unmarkModified(st2), at2 = this.$__getValue(st2));
            if (N2.length <= 1)
              ot2 = t3;
            else {
              var ut2 = N2.length;
              for (b2 = 0; b2 < ut2; ++b2) {
                var ct2 = N2.slice(0, b2 + 1).join(".");
                if (null === this.$get(ct2, null, { getters: false })) {
                  ot2 = ct2;
                  break;
                }
              }
              ot2 || (ot2 = t3);
            }
            if (!L2)
              return this.$__set(ot2, t3, n2, y2, N2, L2, e3, C2), "nested" === R2 && null == e3 && I(this, t3), this;
            if ((L2.$isSingleNested || L2.$isMongooseArray) && function(t4, e4) {
              if (t4.$__.validationError) {
                for (var r4 = 0, n3 = Object.keys(t4.$__.validationError.errors); r4 < n3.length; r4++) {
                  var i3 = n3[r4];
                  i3.startsWith(e4 + ".") && delete t4.$__.validationError.errors[i3];
                }
                0 === Object.keys(t4.$__.validationError.errors).length && (t4.$__.validationError = null);
              }
            }(this, t3), null != e3 && h2 && L2.$isSingleNested) {
              e3 instanceof _t && (e3 = e3.toObject({ virtuals: false, transform: false }));
              for (var ft2 = 0, lt2 = Object.keys(e3); ft2 < lt2.length; ft2++) {
                var ht2 = lt2[ft2];
                this.$set(t3 + "." + ht2, e3[ht2], y2, n2);
              }
              return this;
            }
            var yt2 = true;
            try {
              var bt2, gt2 = function() {
                if (null == L2.options)
                  return false;
                if (!(e3 instanceof _t))
                  return false;
                var t4 = e3.constructor, r4 = "function" != typeof L2.options.ref || L2.options.ref[pt] ? L2.options.ref : L2.options.ref.call(i2, i2), n3 = (null == r4 ? void 0 : r4.modelName) || r4;
                if (null != n3 && (n3 === t4.modelName || n3 === t4.baseModelName))
                  return true;
                var o3 = L2.options.refPath;
                if (null == o3)
                  return false;
                var a3 = e3.get(o3);
                return a3 === t4.modelName || a3 === t4.baseModelName;
              }(), wt2 = false;
              if (gt2 && e3 instanceof _t && (!e3.$__.wasPopulated || rt.deepEqual(e3.$__.wasPopulated.value, e3._doc._id))) {
                var Ot2 = L2 && L2.$isSingleNested ? L2.cast(e3, this) : e3._doc._id;
                this.$populated(t3, Ot2, f({}, dt, e3.constructor)), e3.$__.wasPopulated = { value: Ot2 }, wt2 = true;
              }
              var jt2 = this.$__schema.options.typeKey;
              if (L2.options && Array.isArray(L2.options[jt2]) && L2.options[jt2].length && L2.options[jt2][0] && L2.options[jt2][0].ref && function(t4, e4) {
                if (!Array.isArray(t4))
                  return false;
                if (0 === t4.length)
                  return false;
                var r4, n3 = l(t4);
                try {
                  for (n3.s(); !(r4 = n3.n()).done; ) {
                    var i3 = r4.value;
                    if (!(i3 instanceof _t))
                      return false;
                    if (null == i3.constructor.modelName)
                      return false;
                    if (i3.constructor.modelName != e4 && i3.constructor.baseModelName != e4)
                      return false;
                  }
                } catch (t5) {
                  n3.e(t5);
                } finally {
                  n3.f();
                }
                return true;
              }(e3, L2.options[jt2][0].ref)) {
                bt2 = f({}, dt, e3[0].constructor), this.$populated(t3, e3.map(function(t4) {
                  return t4._doc._id;
                }), bt2);
                var $t2, Et2 = l(e3);
                try {
                  for (Et2.s(); !($t2 = Et2.n()).done; ) {
                    var Pt2 = $t2.value;
                    Pt2.$__.wasPopulated = { value: Pt2._doc._id };
                  }
                } catch (t4) {
                  Et2.e(t4);
                } finally {
                  Et2.f();
                }
                wt2 = true;
              }
              if (!gt2 || !L2.$isSingleNested || !e3.$__) {
                var xt2 = this;
                null != this.$__schema.singleNestedPaths[t3] && N2.length > 1 && (xt2 = mt(this, N2, this.schema)), e3 = null != n2 && n2.overwriteImmutable ? L2.applySetters(e3, xt2, false, C2, { overwriteImmutable: true }) : L2.applySetters(e3, xt2, false, C2);
              }
              if (Array.isArray(e3) && !Array.isArray(L2) && L2.$isMongooseDocumentArray && 0 !== e3.length && null != e3[0] && null != e3[0].$__ && null != e3[0].$__.populated) {
                for (var kt2 = Object.keys(e3[0].$__.populated), Mt2 = function() {
                  var r4 = Bt[Tt];
                  i2.$populated(t3 + "." + r4, e3.map(function(t4) {
                    return t4.$populated(r4);
                  }), e3[0].$__.populated[r4].options);
                }, Tt = 0, Bt = kt2; Tt < Bt.length; Tt++)
                  Mt2();
                wt2 = true;
              }
              if (!wt2 && this.$__.populated) {
                if (Array.isArray(e3) && this.$__.populated[t3])
                  for (var It = 0; It < e3.length; ++It)
                    e3[It] instanceof _t && e3.set(It, e3[It]._doc._id, true);
                delete this.$__.populated[t3];
              }
              null != e3 && L2.$isSingleNested && function(t4, e4, r4) {
                var n3 = e4.schema;
                if (null != n3)
                  for (var i3 = 0, o3 = Object.keys(n3.paths); i3 < o3.length; i3++) {
                    var a3 = o3[i3], s3 = n3.paths[a3];
                    if (null != s3.$immutableSetter) {
                      var u3 = null == r4 ? void 0 : r4.$__getValue(a3);
                      s3.$immutableSetter.call(t4, u3);
                    }
                  }
              }(e3, L2, C2), this.$markValid(t3);
            } catch (r4) {
              r4 instanceof S.StrictModeError && r4.isImmutableError ? this.invalidate(t3, r4) : r4 instanceof S.CastError ? (this.invalidate(r4.path, r4), r4.$originalErrorPath && this.invalidate(t3, new S.CastError(L2.instance, e3, t3, r4.$originalErrorPath))) : this.invalidate(t3, new S.CastError(L2.instance, e3, t3, r4)), yt2 = false;
            }
            if (yt2) {
              var Rt, Nt = null, Dt = null;
              if (!y2) {
                var Lt = this.$isSubdocument ? this.ownerDocument() : this;
                Nt = Lt.$__.savedState, Dt = this.$isSubdocument ? this.$__.fullPath + "." + t3 : t3, Lt.$__saveInitialState(Dt);
              }
              this.$__set(ot2, t3, n2, y2, N2, L2, e3, C2);
              var Ct = !(null === (Rt = this.$__.session) || void 0 === Rt || !Rt.transaction), Ut = this.$__.session && this.$__.session[vt] && this.$__.session[vt].has(this) && this.$__.session[vt].get(this).modifiedPaths && !this.$__.session[vt].get(this).modifiedPaths.has(Dt);
              null != Nt && Nt.hasOwnProperty(Dt) && (!Ct || Ut) && rt.deepEqual(e3, Nt[Dt]) && this.unmarkModified(t3);
            }
            return L2.$isSingleNested && (this.isDirectModified(t3) || null == e3) && I(this, t3), this;
          }, _t.prototype.set = _t.prototype.$set, _t.prototype.$__shouldModify = function(t3, e3, r3, n2, i2, o2, a2, s2) {
            return !(r3 && r3._skipMarkModified || !this.$isNew && !(e3 in this.$__.activePaths.getStatePaths("modify")) && (void 0 !== a2 || this.$__isSelected(e3)) && (void 0 === a2 && e3 in this.$__.activePaths.getStatePaths("default") || this.$populated(e3) && a2 instanceof _t && it(a2._doc._id, s2) || it(a2, void 0 !== s2 ? s2 : rt.getValue(e3, this)) && (n2 || null == a2 || !(e3 in this.$__.activePaths.getStatePaths("default")) || !it(a2, o2.getDefault(this, n2)))));
          }, _t.prototype.$__set = function(t3, e3, n2, i2, o2, a2, s2, u2) {
            m = m || r2(6547);
            var c2 = this.$__shouldModify(t3, e3, n2, i2, o2, a2, s2, u2);
            c2 ? (this.$__.primitiveAtomics && this.$__.primitiveAtomics[e3] && (delete this.$__.primitiveAtomics[e3], 0 === Object.keys(this.$__.primitiveAtomics).length && delete this.$__.primitiveAtomics), this.markModified(t3), b || (b = r2(7557)), s2 && rt.isMongooseArray(s2) && (s2._registerAtomic("$set", s2), rt.isMongooseDocumentArray(s2) && s2.forEach(function(t4) {
              t4 && t4.__parentArray && (t4.__parentArray = s2);
            }))) : Array.isArray(s2) && Array.isArray(u2) && rt.isMongooseArray(s2) && rt.isMongooseArray(u2) && (s2[st] = u2[st], s2[at] = u2[at], rt.isMongooseDocumentArray(s2) && s2.forEach(function(t4) {
              null != t4 && (t4.$isNew = false);
            }));
            for (var f2 = this._doc, l2 = 0, h2 = o2.length, p2 = ""; l2 < h2; l2++) {
              var d2 = l2 + 1 === h2;
              if (p2 += p2 ? "." + o2[l2] : o2[l2], gt.has(o2[l2]))
                return;
              if (d2)
                f2 instanceof Map ? f2.set(o2[l2], s2) : f2.$isSingleNested ? (o2[l2] in f2 || (f2[o2[l2]] = s2), f2._doc[o2[l2]] = s2, c2 && f2.markModified(o2[l2])) : f2[o2[l2]] = s2;
              else {
                var y2 = f2 instanceof Map, v2 = y2 ? f2.get(o2[l2]) : f2[o2[l2]];
                rt.isPOJO(v2) || v2 && v2 instanceof m || v2 && !Array.isArray(v2) && v2.$isSingleNested || v2 && Array.isArray(v2) ? f2 = v2 : null == v2 ? (v2 = {}, y2 ? f2.set(o2[l2], v2) : f2[o2[l2]] = v2, f2 = v2) : f2 = v2;
              }
            }
          }, _t.prototype.$__getValue = function(t3) {
            if ("string" != typeof t3 && !Array.isArray(t3))
              throw new TypeError('Invalid `path`. Must be either string or array. Got "'.concat(t3, '" (type ').concat(d(t3), ")"));
            return rt.getValue(t3, this._doc);
          }, _t.prototype.$inc = function(t3, e3) {
            var r3 = this;
            if (null == e3 && (e3 = 1), Array.isArray(t3))
              return t3.forEach(function(t4) {
                return r3.$inc(t4, e3);
              }), this;
            var n2 = this.$__path(t3);
            if (null == n2) {
              if ("throw" === this.$__.strictMode)
                throw new x(t3);
              if (true === this.$__.strictMode)
                return this;
            } else if ("Number" !== n2.instance)
              return this.invalidate(t3, new S.CastError(n2.instance, e3, t3)), this;
            var i2 = this.$__getValue(t3) || 0, o2 = false, a2 = null, s2 = e3;
            try {
              e3 = n2.cast(e3), s2 = (a2 = n2.applySetters(i2 + e3, this)) - i2, o2 = true;
            } catch (r4) {
              this.invalidate(t3, new S.CastError("number", e3, t3, r4));
            }
            return o2 && (this.$__.primitiveAtomics = this.$__.primitiveAtomics || {}, null == this.$__.primitiveAtomics[t3] ? this.$__.primitiveAtomics[t3] = { $inc: s2 } : this.$__.primitiveAtomics[t3].$inc += s2, this.markModified(t3), this.$__setValue(t3, a2)), this;
          }, _t.prototype.$__setValue = function(t3, e3) {
            return rt.setValue(t3, e3, this._doc), this;
          }, _t.prototype.get = function(t3, e3, r3) {
            var n2;
            null == r3 && (r3 = {}), e3 && (n2 = this.$__schema.interpretAsType(t3, e3, this.$__schema.options));
            var i2 = r3.noDottedPath, o2 = i2 ? this.$__schema.paths[t3] : this.$__path(t3);
            if (null == o2 && null != (o2 = this.$__schema.virtualpath(t3)))
              return o2.applyGetters(void 0, this);
            if (i2) {
              var a2 = this._doc[t3];
              return n2 && (a2 = n2.cast(a2)), null != o2 && false !== r3.getters ? o2.applyGetters(a2, this) : a2;
            }
            if (null != o2 && "Mixed" === o2.instance) {
              var s2 = this.$__schema.virtualpath(t3);
              null != s2 && (o2 = s2);
            }
            var u2 = -1 !== t3.indexOf("."), c2 = this._doc, f2 = u2 ? t3.split(".") : [t3];
            "string" == typeof this.$__schema.aliases[f2[0]] && (f2[0] = this.$__schema.aliases[f2[0]]);
            for (var l2 = 0, h2 = f2.length; l2 < h2; l2++)
              c2 && c2._doc && (c2 = c2._doc), c2 = null == c2 ? void 0 : c2 instanceof Map ? c2.get(f2[l2], { getters: false }) : l2 === h2 - 1 ? rt.getValue(f2[l2], c2) : c2[f2[l2]];
            if (n2 && (c2 = n2.cast(c2)), null != o2 && false !== r3.getters)
              c2 = o2.applyGetters(c2, this);
            else if (this.$__schema.nested[t3] && r3.virtuals)
              return At(this, R(c2) || {}, { path: t3 });
            return c2;
          }, _t.prototype[ht] = _t.prototype.get, _t.prototype.$get = _t.prototype.get, _t.prototype.$__path = function(t3) {
            var e3 = this.$__.adhocPaths;
            return (e3 && e3.hasOwnProperty(t3) ? e3[t3] : null) || this.$__schema.path(t3);
          }, _t.prototype.markModified = function(t3, e3) {
            this.$__saveInitialState(t3), this.$__.activePaths.modify(t3), null == e3 || this.$isSubdocument || (this.$__.pathsToScopes = this.$__pathsToScopes || {}, this.$__.pathsToScopes[t3] = e3);
          }, _t.prototype.$__saveInitialState = function(t3) {
            var e3 = this.$__.savedState, r3 = t3;
            if (null != e3) {
              var n2 = r3.indexOf("."), i2 = -1 === n2 ? r3 : r3.slice(0, n2);
              e3.hasOwnProperty(i2) || (e3[i2] = R(this.$__getValue(i2)));
            }
          }, _t.prototype.unmarkModified = function(t3) {
            this.$__.activePaths.init(t3), null != this.$__.pathsToScopes && delete this.$__.pathsToScopes[t3];
          }, _t.prototype.$ignore = function(t3) {
            this.$__.activePaths.ignore(t3);
          }, _t.prototype.directModifiedPaths = function() {
            return Object.keys(this.$__.activePaths.getStatePaths("modify"));
          }, _t.prototype.$isEmpty = function(t3) {
            var e3 = { minimize: true, virtuals: false, getters: false, transform: false };
            if (0 !== arguments.length) {
              var r3 = this.$get(t3);
              return null == r3 || "object" === d(r3) && (rt.isPOJO(r3) ? jt(r3) : 0 === Object.keys(r3.toObject(e3)).length);
            }
            return 0 === Object.keys(this.toObject(e3)).length;
          }, _t.prototype.modifiedPaths = function(t3) {
            t3 = t3 || {};
            var e3 = Object.keys(this.$__.activePaths.getStatePaths("modify")), r3 = /* @__PURE__ */ new Set(), n2 = 0, i2 = 0, o2 = e3.length;
            for (n2 = 0; n2 < o2; ++n2) {
              var a2 = e3[n2], s2 = tt(a2), u2 = s2.length;
              for (i2 = 0; i2 < u2; ++i2)
                r3.add(s2[i2]);
              if (t3.includeChildren) {
                var c2 = 0, f2 = this.$get(a2);
                if ("object" === d(f2) && null !== f2) {
                  f2._doc && (f2 = f2._doc);
                  var l2 = f2.length;
                  if (Array.isArray(f2))
                    for (c2 = 0; c2 < l2; ++c2) {
                      var h2 = a2 + "." + c2;
                      if (!r3.has(h2) && (r3.add(h2), null != f2[c2] && f2[c2].$__)) {
                        var p2 = f2[c2].modifiedPaths(), y2 = 0, b2 = p2.length;
                        for (y2 = 0; y2 < b2; ++y2)
                          r3.add(h2 + "." + p2[y2]);
                      }
                    }
                  else {
                    var m2 = Object.keys(f2), v2 = 0, g2 = m2.length;
                    for (v2 = 0; v2 < g2; ++v2)
                      r3.add(a2 + "." + m2[v2]);
                  }
                }
              }
            }
            return Array.from(r3);
          }, _t.prototype[ft] = _t.prototype.modifiedPaths, _t.prototype.isModified = function(t3, e3, r3) {
            var n2 = this;
            if (t3) {
              var i2 = e3 && e3.ignoreAtomics, o2 = this.$__.activePaths.states.modify;
              if (null == o2)
                return false;
              "string" == typeof t3 && (t3 = -1 === t3.indexOf(" ") ? [t3] : t3.split(" "));
              var a2, s2 = l(t3);
              try {
                for (s2.s(); !(a2 = s2.n()).done; )
                  if (null != o2[a2.value])
                    return true;
              } catch (t4) {
                s2.e(t4);
              } finally {
                s2.f();
              }
              var u2 = r3 || this[ft](), c2 = t3.some(function(t4) {
                return !!~u2.indexOf(t4);
              }), f2 = Object.keys(o2);
              return i2 && (f2 = f2.filter(function(t4) {
                var e4 = n2.$__getValue(t4);
                return null == e4 || null == e4[st] || void 0 !== e4[st].$set;
              })), c2 || t3.some(function(t4) {
                return f2.some(function(e4) {
                  return e4 === t4 || t4.startsWith(e4 + ".");
                });
              });
            }
            return this.$__.activePaths.some("modify");
          }, _t.prototype.$isModified = _t.prototype.isModified, _t.prototype[ct] = _t.prototype.isModified, _t.prototype.$isDefault = function(t3) {
            var e3 = this;
            if (null == t3)
              return this.$__.activePaths.some("default");
            if ("string" == typeof t3 && -1 === t3.indexOf(" "))
              return this.$__.activePaths.getStatePaths("default").hasOwnProperty(t3);
            var r3 = t3;
            return Array.isArray(r3) || (r3 = r3.split(" ")), r3.some(function(t4) {
              return e3.$__.activePaths.getStatePaths("default").hasOwnProperty(t4);
            });
          }, _t.prototype.$isDeleted = function(t3) {
            return 0 === arguments.length ? !!this.$__.isDeleted : (this.$__.isDeleted = !!t3, this);
          }, _t.prototype.isDirectModified = function(t3) {
            var e3 = this;
            if (null == t3)
              return this.$__.activePaths.some("modify");
            if ("string" == typeof t3 && -1 === t3.indexOf(" ")) {
              var r3 = this.$__.activePaths.getStatePaths("modify").hasOwnProperty(t3);
              if (r3 || -1 === t3.indexOf("."))
                return r3;
              for (var n2 = t3.split("."), i2 = 0; i2 < n2.length - 1; ++i2) {
                var o2 = n2.slice(0, i2 + 1).join("."), a2 = this.$get(o2);
                if (null != a2 && null != a2.$__ && a2.isDirectModified(n2.slice(i2 + 1).join(".")))
                  return true;
              }
              return false;
            }
            var s2 = t3;
            return "string" == typeof s2 && (s2 = s2.split(" ")), s2.some(function(t4) {
              return e3.isDirectModified(t4);
            });
          }, _t.prototype.isInit = function(t3) {
            var e3 = this;
            if (null == t3)
              return this.$__.activePaths.some("init");
            if ("string" == typeof t3 && -1 === t3.indexOf(" "))
              return this.$__.activePaths.getStatePaths("init").hasOwnProperty(t3);
            var r3 = t3;
            return Array.isArray(r3) || (r3 = r3.split(" ")), r3.some(function(t4) {
              return e3.$__.activePaths.getStatePaths("init").hasOwnProperty(t4);
            });
          }, _t.prototype.isSelected = function(t3) {
            var e3 = this;
            if (null == this.$__.selected)
              return true;
            if (!t3)
              return false;
            if ("_id" === t3)
              return 0 !== this.$__.selected._id;
            if (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3))
              return t3.some(function(t4) {
                return e3.$__isSelected(t4);
              });
            var r3 = Object.keys(this.$__.selected), n2 = null;
            if (1 === r3.length && "_id" === r3[0])
              return 0 === this.$__.selected._id;
            for (var i2 = 0, o2 = r3; i2 < o2.length; i2++) {
              var a2 = o2[i2];
              if ("_id" !== a2 && H(this.$__.selected[a2])) {
                n2 = !!this.$__.selected[a2];
                break;
              }
            }
            if (null === n2)
              return true;
            if (t3 in this.$__.selected)
              return n2;
            for (var s2 = t3 + ".", u2 = 0, c2 = r3; u2 < c2.length; u2++) {
              var f2 = c2[u2];
              if ("_id" !== f2) {
                if (f2.startsWith(s2))
                  return n2 || f2 !== s2;
                if (s2.startsWith(f2 + "."))
                  return n2;
              }
            }
            return !n2;
          }, _t.prototype.$__isSelected = _t.prototype.isSelected, _t.prototype.isDirectSelected = function(t3) {
            var e3 = this;
            if (null == this.$__.selected)
              return true;
            if ("_id" === t3)
              return 0 !== this.$__.selected._id;
            if (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3))
              return t3.some(function(t4) {
                return e3.isDirectSelected(t4);
              });
            var r3 = Object.keys(this.$__.selected), n2 = null;
            if (1 === r3.length && "_id" === r3[0])
              return 0 === this.$__.selected._id;
            for (var i2 = 0, o2 = r3; i2 < o2.length; i2++) {
              var a2 = o2[i2];
              if ("_id" !== a2 && H(this.$__.selected[a2])) {
                n2 = !!this.$__.selected[a2];
                break;
              }
            }
            return null === n2 || (this.$__.selected.hasOwnProperty(t3) ? n2 : !n2);
          }, _t.prototype.validate = function() {
            var t3 = s(o().mark(function t4(e3, r3) {
              var n2, i2, a2, s2 = this, u2 = arguments;
              return o().wrap(function(t5) {
                for (; ; )
                  switch (t5.prev = t5.next) {
                    case 0:
                      if ("function" != typeof e3 && "function" != typeof r3 && "function" != typeof u2[2]) {
                        t5.next = 2;
                        break;
                      }
                      throw new S("Document.prototype.validate() no longer accepts a callback");
                    case 2:
                      if (this.$op = "validate", 1 === u2.length && ("object" !== d(u2[0]) || Array.isArray(u2[0]) || (r3 = u2[0], e3 = null)), r3 && "string" == typeof r3.pathsToSkip && (i2 = -1 === r3.pathsToSkip.indexOf(" "), r3.pathsToSkip = i2 ? [r3.pathsToSkip] : r3.pathsToSkip.split(" ")), a2 = r3 && r3._skipParallelValidateCheck, null != this.$isSubdocument || (this.$__.validating && !a2 ? n2 = new A(this, { parentStack: r3 && r3.parentStack, conflictStack: this.$__.validating.stack }) : a2 || (this.$__.validating = new A(this, { parentStack: r3 && r3.parentStack }))), null == n2) {
                        t5.next = 9;
                        break;
                      }
                      throw n2;
                    case 9:
                      return t5.abrupt("return", new Promise(function(t6, n3) {
                        s2.$__validate(e3, r3, function(e4) {
                          if (s2.$op = null, s2.$__.validating = null, null != e4)
                            return n3(e4);
                          t6();
                        });
                      }));
                    case 10:
                    case "end":
                      return t5.stop();
                  }
              }, t4, this);
            }));
            return function(e3, r3) {
              return t3.apply(this, arguments);
            };
          }(), _t.prototype.$validate = _t.prototype.validate, _t.prototype.$__validate = function(t3, e3, r3) {
            var n2, o2 = this;
            this.$__.saveOptions && this.$__.saveOptions.pathsToSave && !t3 ? t3 = i(this.$__.saveOptions.pathsToSave) : "function" == typeof t3 ? (r3 = t3, e3 = null, t3 = null) : "function" == typeof e3 && (r3 = e3, e3 = null);
            var a2, s2 = e3 && "object" === d(e3) && "validateModifiedOnly" in e3, u2 = e3 && e3.pathsToSkip || null;
            a2 = s2 ? !!e3.validateModifiedOnly : this.$__schema.options.validateModifiedOnly;
            var f2 = e3 && e3.validateAllPaths;
            if (f2) {
              if (u2)
                throw new TypeError("Cannot set both `validateAllPaths` and `pathsToSkip`");
              if (t3)
                throw new TypeError("Cannot set both `validateAllPaths` and `pathsToValidate`");
              if (s2 && a2)
                throw new TypeError("Cannot set both `validateAllPaths` and `validateModifiedOnly`");
            }
            var h2, p2, y2 = this, b2 = function() {
              var t4 = o2.$__.validationError;
              if (o2.$__.validationError = null, o2.$__.validating = null, a2 && null != t4) {
                for (var e4 = 0, r4 = Object.keys(t4.errors); e4 < r4.length; e4++) {
                  var n3 = r4[e4];
                  o2.$isModified(n3) || delete t4.errors[n3];
                }
                0 === Object.keys(t4.errors).length && (t4 = void 0);
              }
              if (o2.$__.cachedRequired = {}, o2.$emit("validate", y2), o2.constructor.emit("validate", y2), t4) {
                for (var i2 in t4.errors)
                  !o2[ut] && t4.errors[i2] instanceof S.CastError && o2.invalidate(i2, t4.errors[i2]);
                return t4;
              }
            };
            if (f2) {
              var m2, v2 = l(h2 = new Set(Object.keys(this.$__schema.paths)));
              try {
                for (v2.s(); !(m2 = v2.n()).done; ) {
                  var g2 = m2.value, _2 = this.$__schema.path(g2);
                  if (_2 && _2.$isMongooseArray) {
                    var w2 = this.$__getValue(g2);
                    w2 && Et(w2, h2, g2);
                  }
                }
              } catch (t4) {
                v2.e(t4);
              } finally {
                v2.f();
              }
              h2 = i(h2), p2 = {};
            } else {
              var O2 = $t(this, t3, u2, e3 && e3._nestedValidate);
              h2 = a2 ? O2[0].filter(function(t4) {
                return o2.$isModified(t4);
              }) : O2[0], p2 = O2[1];
            }
            if ("string" == typeof t3 && (t3 = t3.split(" ")), 0 === h2.length)
              return z(function() {
                var t4 = b2();
                if (t4)
                  return y2.$__schema.s.hooks.execPost("validate:error", y2, [y2], { error: t4 }, function(t5) {
                    r3(t5);
                  });
                r3(null, y2);
              });
            var j2 = {}, $2 = 0, E2 = null === (n2 = this.$__.saveOptions) || void 0 === n2 ? void 0 : n2.pathsToSave;
            if (Array.isArray(E2)) {
              E2 = new Set(E2);
              var A2, P2 = l(h2);
              try {
                for (P2.s(); !(A2 = P2.n()).done; ) {
                  var x2 = A2.value;
                  E2.has(x2) && B2(x2);
                }
              } catch (t4) {
                P2.e(t4);
              } finally {
                P2.f();
              }
            } else {
              var M2, T2 = l(h2);
              try {
                for (T2.s(); !(M2 = T2.n()).done; )
                  B2(M2.value);
              } catch (t4) {
                T2.e(t4);
              } finally {
                T2.f();
              }
            }
            function B2(t4) {
              null == t4 || j2[t4] || (j2[t4] = true, $2++, z(function() {
                var e4 = y2.$__schema.path(t4);
                if (!e4)
                  return --$2 || I2();
                if (y2.$isValid(t4)) {
                  if (null != e4[bt] && t4 !== e4.path)
                    return --$2 || I2();
                  var r4, n3 = y2.$__getValue(t4);
                  (r4 = y2.$populated(t4)) ? n3 = r4 : null != n3 && null != n3.$__ && n3.$__.wasPopulated && (n3 = n3._doc._id);
                  var i2 = null != y2.$__.pathsToScopes && t4 in y2.$__.pathsToScopes ? y2.$__.pathsToScopes[t4] : y2, o3 = c(c({}, p2[t4]), {}, { path: t4, validateAllPaths: f2, _nestedValidate: true });
                  e4.doValidate(n3, function(r5) {
                    if (r5) {
                      if ((e4.$isSingleNested || e4.$isArraySubdocument || e4.$isMongooseDocumentArray) && r5 instanceof k)
                        return --$2 || I2();
                      y2.invalidate(t4, r5, void 0, true);
                    }
                    --$2 || I2();
                  }, i2, o3);
                } else
                  --$2 || I2();
              }));
            }
            function I2() {
              var t4 = b2();
              if (t4)
                return y2.$__schema.s.hooks.execPost("validate:error", y2, [y2], { error: t4 }, function(t5) {
                  r3(t5);
                });
              r3(null, y2);
            }
          }, _t.prototype.validateSync = function(t3, e3) {
            var r3, n2 = this, o2 = this;
            1 !== arguments.length || "object" !== d(arguments[0]) || Array.isArray(arguments[0]) || (e3 = arguments[0], t3 = null), r3 = e3 && "object" === d(e3) && "validateModifiedOnly" in e3 ? !!e3.validateModifiedOnly : this.$__schema.options.validateModifiedOnly;
            var a2, s2, u2 = e3 && e3.pathsToSkip, c2 = e3 && e3.validateAllPaths;
            if (c2) {
              if (u2)
                throw new TypeError("Cannot set both `validateAllPaths` and `pathsToSkip`");
              if (t3)
                throw new TypeError("Cannot set both `validateAllPaths` and `pathsToValidate`");
            }
            if ("string" == typeof t3) {
              var f2 = -1 === t3.indexOf(" ");
              t3 = f2 ? [t3] : t3.split(" ");
            } else
              "string" == typeof u2 && -1 !== u2.indexOf(" ") && (u2 = u2.split(" "));
            if (c2) {
              var h2, p2 = l(a2 = new Set(Object.keys(this.$__schema.paths)));
              try {
                for (p2.s(); !(h2 = p2.n()).done; ) {
                  var y2 = h2.value, b2 = this.$__schema.path(y2);
                  if (b2 && b2.$isMongooseArray) {
                    var m2 = this.$__getValue(y2);
                    m2 && Et(m2, a2, y2);
                  }
                }
              } catch (A3) {
                p2.e(A3);
              } finally {
                p2.f();
              }
              a2 = i(a2), s2 = {};
            } else {
              var v2 = $t(this, t3, u2);
              a2 = r3 ? v2[0].filter(function(t4) {
                return n2.$isModified(t4);
              }) : v2[0], s2 = v2[1];
            }
            for (var g2 = {}, _2 = 0, w2 = a2.length; _2 < w2; ++_2) {
              var O2 = a2[_2];
              if (!g2[O2]) {
                g2[O2] = true;
                var j2 = o2.$__schema.path(O2);
                if (j2 && o2.$isValid(O2)) {
                  var $2 = o2.$__getValue(O2), E2 = j2.doValidateSync($2, o2, { skipSchemaValidators: s2[O2], path: O2, validateModifiedOnly: r3, validateAllPaths: c2 });
                  if (E2) {
                    if ((j2.$isSingleNested || j2.$isArraySubdocument || j2.$isMongooseDocumentArray) && E2 instanceof k)
                      continue;
                    o2.invalidate(O2, E2, void 0, true);
                  }
                }
              }
            }
            var A2 = o2.$__.validationError;
            if (o2.$__.validationError = void 0, o2.$emit("validate", o2), o2.constructor.emit("validate", o2), A2)
              for (var P2 in A2.errors)
                A2.errors[P2] instanceof S.CastError && o2.invalidate(P2, A2.errors[P2]);
            return A2;
          }, _t.prototype.invalidate = function(t3, e3, r3, n2) {
            if (this.$__.validationError || (this.$__.validationError = new k(this)), !this.$__.validationError.errors[t3])
              return e3 && "string" != typeof e3 || (e3 = new M({ path: t3, message: e3, type: n2 || "user defined", value: r3 })), this.$__.validationError === e3 || this.$__.validationError.addError(t3, e3), this.$__.validationError;
          }, _t.prototype.$markValid = function(t3) {
            this.$__.validationError && this.$__.validationError.errors[t3] && (delete this.$__.validationError.errors[t3], 0 === Object.keys(this.$__.validationError.errors).length && (this.$__.validationError = null));
          }, _t.prototype.$isValid = function(t3) {
            var e3 = this;
            return null == this.$__.validationError || 0 === Object.keys(this.$__.validationError.errors).length || null != t3 && (-1 !== t3.indexOf(" ") && (t3 = t3.split(" ")), Array.isArray(t3) ? t3.some(function(t4) {
              return null == e3.$__.validationError.errors[t4];
            }) : null == this.$__.validationError.errors[t3]);
          }, _t.prototype.$__reset = function() {
            var t3, e3 = this.$isSubdocument ? null : this.$getAllSubdocs({ useCache: true });
            if (e3 && e3.length > 0) {
              var r3, n2 = l(e3);
              try {
                for (n2.s(); !(r3 = n2.n()).done; )
                  r3.value.$__reset();
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
            }
            return this.$__dirty().forEach(function(t4) {
              var e4 = t4.value;
              e4 && e4[st] && (e4[at] = e4[st], e4[st] = {});
            }), this.$__.backup = {}, this.$__.backup.activePaths = { modify: Object.assign({}, this.$__.activePaths.getStatePaths("modify")), default: Object.assign({}, this.$__.activePaths.getStatePaths("default")) }, this.$__.backup.validationError = this.$__.validationError, this.$__.backup.errors = this.$errors, this.$__.activePaths.clear("modify"), this.$__.activePaths.clear("default"), this.$__.validationError = void 0, this.$errors = void 0, t3 = this, this.$__schema.requiredPaths().forEach(function(e4) {
              t3.$__.activePaths.require(e4);
            }), this;
          }, _t.prototype.$__undoReset = function() {
            if (null != this.$__.backup && null != this.$__.backup.activePaths) {
              this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify, this.$__.activePaths.states.default = this.$__.backup.activePaths.default, this.$__.validationError = this.$__.backup.validationError, this.$errors = this.$__.backup.errors;
              var t3, e3 = l(this.$__dirty());
              try {
                for (e3.s(); !(t3 = e3.n()).done; ) {
                  var r3 = t3.value.value;
                  r3 && r3[st] && r3[at] && (r3[st] = r3[at]);
                }
              } catch (t4) {
                e3.e(t4);
              } finally {
                e3.f();
              }
              var n2, i2 = l(this.$getAllSubdocs());
              try {
                for (i2.s(); !(n2 = i2.n()).done; )
                  n2.value.$__undoReset();
              } catch (t4) {
                i2.e(t4);
              } finally {
                i2.f();
              }
            }
          }, _t.prototype.$__dirty = function() {
            var t3 = this, e3 = this.$__.activePaths.map("modify", function(e4) {
              return { path: e4, value: t3.$__getValue(e4), schema: t3.$__path(e4) };
            });
            e3 = e3.concat(this.$__.activePaths.map("default", function(e4) {
              if ("_id" !== e4 && null != t3.$__getValue(e4))
                return { path: e4, value: t3.$__getValue(e4), schema: t3.$__path(e4) };
            }));
            var r3 = new Map(e3.filter(function(t4) {
              return null != t4;
            }).map(function(t4) {
              return [t4.path, t4.value];
            })), n2 = [];
            return e3.forEach(function(t4) {
              if (t4) {
                for (var e4 = null, i2 = tt(t4.path), o2 = 0; o2 < i2.length - 1; o2++)
                  if (r3.has(i2[o2])) {
                    e4 = r3.get(i2[o2]);
                    break;
                  }
                null == e4 ? n2.push(t4) : null != e4 && null != e4[st] && e4.hasAtomics() && (e4[st] = {}, e4[st].$set = e4);
              }
            }), n2;
          }, _t.prototype.$__setSchema = function(t3) {
            N(t3.tree, this, void 0, t3.options);
            for (var e3 = 0, r3 = Object.keys(t3.virtuals); e3 < r3.length; e3++) {
              var n2 = r3[e3];
              t3.virtuals[n2]._applyDefaultGetters();
            }
            null == t3.path("schema") && (this.schema = t3), this.$__schema = t3, this[lt] = t3;
          }, _t.prototype.$__getArrayPathsToValidate = function() {
            return y || (y = r2(4878)), this.$__.activePaths.map("init", "modify", function(t3) {
              return this.$__getValue(t3);
            }.bind(this)).filter(function(t3) {
              return t3 && Array.isArray(t3) && rt.isMongooseDocumentArray(t3) && t3.length;
            }).reduce(function(t3, e3) {
              return t3.concat(e3);
            }, []).filter(function(t3) {
              return t3;
            });
          }, _t.prototype.$getAllSubdocs = function(t3) {
            var e3;
            if (null != t3 && t3.useCache && null !== (e3 = this.$__.saveOptions) && void 0 !== e3 && e3.__subdocs)
              return this.$__.saveOptions.__subdocs;
            y || (y = r2(4878)), m = m || r2(6547);
            var n2 = [];
            return function t4(e4) {
              var r3, i2 = [], o2 = l(e4.$__schema.childSchemas);
              try {
                for (o2.s(); !(r3 = o2.n()).done; ) {
                  var a2 = r3.value.model, s2 = e4.$__getValue(a2.path);
                  if (null != s2) {
                    if (s2.$__ && i2.push(s2), Array.isArray(s2)) {
                      var u2, c2 = l(s2);
                      try {
                        for (c2.s(); !(u2 = c2.n()).done; ) {
                          var f2 = u2.value;
                          null != f2 && f2.$__ && i2.push(f2);
                        }
                      } catch (t5) {
                        c2.e(t5);
                      } finally {
                        c2.f();
                      }
                    }
                    if (s2 instanceof Map) {
                      var h2, p2 = l(s2.values());
                      try {
                        for (p2.s(); !(h2 = p2.n()).done; ) {
                          var d2 = h2.value;
                          null != d2 && d2.$__ && i2.push(d2);
                        }
                      } catch (t5) {
                        p2.e(t5);
                      } finally {
                        p2.f();
                      }
                    }
                  }
                }
              } catch (t5) {
                o2.e(t5);
              } finally {
                o2.f();
              }
              for (var y2 = 0, b2 = i2; y2 < b2.length; y2++)
                t4(b2[y2]);
              n2.push.apply(n2, i2);
            }(this), this.$__.saveOptions && (this.$__.saveOptions.__subdocs = n2), n2;
          }, _t.prototype.$__handleReject = function(t3) {
            this.$listeners("error").length ? this.$emit("error", t3) : this.constructor.listeners && this.constructor.listeners("error").length && this.constructor.emit("error", t3);
          }, _t.prototype.$toObject = function(t3, e3) {
            var r3, n2, i2, o2, a2, s2, u2, f2, l2, h2, p2, y2 = this.$__schema._defaultToObjectOptions(e3), b2 = this.$__hasOnlyPrimitiveValues();
            (t3 = rt.isPOJO(t3) ? c({}, t3) : {})._calledWithOptions = t3._calledWithOptions || c({}, t3), p2 = null != t3._calledWithOptions.minimize ? t3.minimize : null != y2 && null != y2.minimize ? y2.minimize : this.$__schema.options.minimize, t3.minimize = p2, b2 || (t3._seen = t3._seen || /* @__PURE__ */ new Map());
            var m2 = null !== (r3 = null !== (n2 = null !== (i2 = t3._calledWithOptions.depopulate) && void 0 !== i2 ? i2 : null == y2 ? void 0 : y2.depopulate) && void 0 !== n2 ? n2 : t3.depopulate) && void 0 !== r3 && r3;
            if (m2 && t3._isNested && this.$__.wasPopulated)
              return R(this.$__.wasPopulated.value || this._doc._id, t3);
            if (m2 && (t3.depopulate = true), null != y2)
              for (var v2 = 0, g2 = Object.keys(y2); v2 < g2.length; v2++) {
                var _2 = g2[v2];
                null == t3[_2] && (t3[_2] = y2[_2]);
              }
            t3._isNested = true, t3.json = e3, t3.minimize = p2;
            var w2, S2 = t3._parentOptions;
            t3._parentOptions = this.$isSubdocument ? t3 : null, w2 = b2 && !t3.flattenObjectIds ? this.$__toObjectShallow() : R(this._doc, t3) || {};
            var O2 = null !== (o2 = null !== (a2 = null !== (s2 = t3._calledWithOptions.getters) && void 0 !== s2 ? s2 : t3.getters) && void 0 !== a2 ? a2 : y2.getters) && void 0 !== o2 && o2;
            O2 && (function(t4, e4) {
              var r4, n3, i3 = t4.$__schema, o3 = Object.keys(i3.paths), a3 = o3.length, s3 = t4._doc;
              if (!s3)
                return e4;
              for (; a3--; ) {
                var u3 = (r4 = o3[a3]).split("."), c2 = u3.length, f3 = c2 - 1, l3 = e4, h3 = void 0;
                if (s3 = t4._doc, t4.$__isSelected(r4))
                  for (var p3 = 0; p3 < c2 && (n3 = s3[h3 = u3[p3]], null == l3 || "object" === d(l3)); ++p3) {
                    if (p3 === f3) {
                      if (l3[h3] = i3.paths[r4].applyGetters(l3[h3], t4), Array.isArray(l3[h3]) && i3.paths[r4].$embeddedSchemaType)
                        for (var y3 = 0; y3 < l3[h3].length; ++y3)
                          l3[h3][y3] = i3.paths[r4].$embeddedSchemaType.applyGetters(l3[h3][y3], t4);
                    } else {
                      if (null == n3) {
                        h3 in s3 && (l3[h3] = n3);
                        break;
                      }
                      l3 = l3[h3] || (l3[h3] = {});
                    }
                    s3 = n3;
                  }
              }
            }(this, w2), t3.minimize && (w2 = X(w2) || {}));
            var j2 = null !== (u2 = null !== (f2 = null !== (l2 = t3._calledWithOptions.virtuals) && void 0 !== l2 ? l2 : y2.virtuals) && void 0 !== f2 ? f2 : null == S2 ? void 0 : S2.virtuals) && void 0 !== u2 ? u2 : void 0;
            (j2 || O2 && false !== j2) && At(this, w2, t3, t3), false === t3.versionKey && this.$__schema.options.versionKey && delete w2[this.$__schema.options.versionKey];
            var $2 = null === (h2 = t3._calledWithOptions.transform) || void 0 === h2 || h2, E2 = void 0;
            if (true === $2 ? E2 = y2.transform : "function" == typeof $2 && (E2 = $2), $2 && function(t4, e4) {
              var r4 = t4.$__schema, n3 = Object.keys(r4.paths || {});
              if (!t4._doc)
                return e4;
              for (var i3 = 0, o3 = n3; i3 < o3.length; i3++) {
                var a3, s3, u3, c2, f3, l3 = o3[i3], h3 = r4.paths[l3], p3 = null !== (a3 = h3.options.transform) && void 0 !== a3 ? a3 : null === (s3 = h3.constructor) || void 0 === s3 || null === (s3 = s3.defaultOptions) || void 0 === s3 ? void 0 : s3.transform, d2 = null !== (u3 = null === (c2 = h3.$embeddedSchemaType) || void 0 === c2 || null === (c2 = c2.options) || void 0 === c2 ? void 0 : c2.transform) && void 0 !== u3 ? u3 : null === (f3 = h3.$embeddedSchemaType) || void 0 === f3 || null === (f3 = f3.constructor) || void 0 === f3 || null === (f3 = f3.defaultOptions) || void 0 === f3 ? void 0 : f3.transform;
                if ("function" == typeof p3) {
                  var y3 = t4.$get(l3);
                  if (void 0 === y3)
                    continue;
                  var b3 = p3.call(t4, y3);
                  Pt(l3, b3), rt.setValue(l3, b3, e4);
                } else if ("function" == typeof d2) {
                  var m3 = t4.$get(l3);
                  if (void 0 === m3)
                    continue;
                  for (var v3 = [].concat(m3), g3 = 0; g3 < v3.length; ++g3) {
                    var _3 = d2.call(t4, v3[g3]);
                    v3[g3] = _3, Pt(l3, _3);
                  }
                  e4[l3] = v3;
                }
              }
            }(this, w2), t3.useProjection && function(t4, e4) {
              var r4 = t4.$__schema, n3 = Object.keys(r4.paths || {});
              if (!t4._doc)
                return e4;
              var i3 = t4.$__.selected;
              if (void 0 === i3 && (i3 = {}, et.applyPaths(i3, r4)), null == i3 || 0 === Object.keys(i3).length)
                return e4;
              for (var o3 = 0, a3 = n3; o3 < a3.length; o3++) {
                var s3 = a3[o3];
                null == i3[s3] || i3[s3] || delete e4[s3];
              }
            }(this, w2), "function" == typeof E2) {
              var A2 = E2(this, w2, t3);
              void 0 !== A2 && (w2 = A2);
            }
            return w2;
          }, _t.prototype.$__toObjectShallow = function() {
            var t3 = {};
            if (null != this._doc)
              for (var e3 = 0, r3 = Object.keys(this._doc); e3 < r3.length; e3++) {
                var n2 = r3[e3], i2 = this._doc[n2];
                i2 instanceof Date ? t3[n2] = new Date(i2) : void 0 !== i2 && (t3[n2] = i2);
              }
            return t3;
          }, _t.prototype.toObject = function(t3) {
            return this.$toObject(t3);
          }, _t.prototype.toJSON = function(t3) {
            return this.$toObject(t3, true);
          }, _t.prototype.ownerDocument = function() {
            return this;
          }, _t.prototype.parent = function() {
            return this.$isSubdocument || this.$__.wasPopulated ? this.$__.parent : this;
          }, _t.prototype.$parent = _t.prototype.parent, _t.prototype.inspect = function(t3) {
            var e3;
            rt.isPOJO(t3) && ((e3 = t3).minimize = false);
            var r3 = arguments.length > 0 ? this.toObject(e3) : this.toObject();
            return null == r3 ? "MongooseDocument { " + r3 + " }" : r3;
          }, G.custom && (_t.prototype[G.custom] = _t.prototype.inspect), _t.prototype.toString = function() {
            var t3 = this.inspect();
            return "string" == typeof t3 ? t3 : G(t3);
          }, _t.prototype.equals = function(t3) {
            if (!t3)
              return false;
            var e3 = this.$__getValue("_id"), r3 = null != t3.$__ ? t3.$__getValue("_id") : t3;
            return e3 || r3 ? e3 && e3.equals ? e3.equals(r3) : e3 === r3 : it(this, t3);
          }, _t.prototype.populate = function() {
            var t3 = s(o().mark(function t4() {
              var e3, r3, n2, i2, a2, s2, u2, c2, f2, h2, p2 = arguments;
              return o().wrap(function(t5) {
                for (; ; )
                  switch (t5.prev = t5.next) {
                    case 0:
                      if (e3 = {}, "function" != typeof (r3 = Array.prototype.slice.call(p2))[r3.length - 1]) {
                        t5.next = 4;
                        break;
                      }
                      throw new S("Document.prototype.populate() no longer accepts a callback");
                    case 4:
                      if (0 !== r3.length) {
                        n2 = rt.populate.apply(null, r3), i2 = l(n2);
                        try {
                          for (i2.s(); !(a2 = i2.n()).done; )
                            s2 = a2.value, e3[s2.path] = s2;
                        } catch (t6) {
                          i2.e(t6);
                        } finally {
                          i2.f();
                        }
                      }
                      return u2 = rt.object.vals(e3), c2 = this.constructor, this.$__isNested && (c2 = this.$__[yt].constructor, f2 = this.$__.nestedPath, u2.forEach(function(t6) {
                        t6.path = f2 + "." + t6.path;
                      })), null != this.$session() && (h2 = this.$session(), u2.forEach(function(t6) {
                        null != t6.options ? "session" in t6.options || (t6.options.session = h2) : t6.options = { session: h2 };
                      })), u2.forEach(function(t6) {
                        t6._localModel = c2;
                      }), t5.abrupt("return", c2.populate(this, u2));
                    case 11:
                    case "end":
                      return t5.stop();
                  }
              }, t4, this);
            }));
            return function() {
              return t3.apply(this, arguments);
            };
          }(), _t.prototype.$getPopulatedDocs = function() {
            var t3 = [];
            null != this.$__.populated && (t3 = t3.concat(Object.keys(this.$__.populated)));
            var e3, r3 = [], n2 = l(t3);
            try {
              for (n2.s(); !(e3 = n2.n()).done; ) {
                var i2 = e3.value, o2 = this.$get(i2);
                Array.isArray(o2) ? r3 = r3.concat(o2) : o2 instanceof _t && r3.push(o2);
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
            return r3;
          }, _t.prototype.populated = function(t3, e3, r3) {
            if (null == e3 || true === e3) {
              if (!this.$__.populated)
                return;
              if ("string" != typeof t3)
                return;
              var n2 = t3.endsWith(".$*") ? t3.replace(/\.\$\*$/, "") : t3, i2 = this.$__.populated[n2];
              return i2 ? true === e3 ? i2 : i2.value : void 0;
            }
            this.$__.populated || (this.$__.populated = {}), this.$__.populated[t3] = { value: e3, options: r3 };
            for (var o2 = t3.split("."), a2 = 0; a2 < o2.length - 1; ++a2) {
              var s2 = o2.slice(0, a2 + 1).join("."), u2 = this.$get(s2);
              if (null != u2 && null != u2.$__ && this.$populated(s2)) {
                var c2 = o2.slice(a2 + 1).join(".");
                u2.$populated(c2, e3, r3);
                break;
              }
            }
            return e3;
          }, _t.prototype.$populated = _t.prototype.populated, _t.prototype.$assertPopulated = function(t3, e3) {
            var r3 = this;
            if (Array.isArray(t3))
              return t3.forEach(function(t4) {
                return r3.$assertPopulated(t4, e3);
              }), this;
            if (arguments.length > 1 && this.$set(e3), !this.$populated(t3))
              throw new S('Expected path "'.concat(t3, '" to be populated'));
            return this;
          }, _t.prototype.depopulate = function(t3) {
            var e3;
            "string" == typeof t3 && (t3 = -1 === t3.indexOf(" ") ? [t3] : t3.split(" "));
            var r3 = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [], n2 = this.$__ && this.$__.populated || {};
            if (0 === arguments.length) {
              var i2, o2 = l(r3);
              try {
                for (o2.s(); !(i2 = o2.n()).done; ) {
                  var a2 = i2.value;
                  delete this.$$populatedVirtuals[a2], delete this._doc[a2], delete n2[a2];
                }
              } catch (t4) {
                o2.e(t4);
              } finally {
                o2.f();
              }
              for (var s2 = 0, u2 = Object.keys(n2); s2 < u2.length; s2++) {
                var c2 = u2[s2];
                if (e3 = this.$populated(c2))
                  if (delete n2[c2], Array.isArray(e3)) {
                    var f2 = rt.getValue(c2, this._doc);
                    if (f2.isMongooseArray)
                      for (var h2 = f2.__array, p2 = 0; p2 < h2.length; ++p2) {
                        var d2 = h2[p2];
                        null != d2 && (h2[p2] = d2 instanceof _t ? d2._doc._id : d2._id);
                      }
                    else
                      rt.setValue(c2, e3, this._doc);
                  } else
                    rt.setValue(c2, e3, this._doc);
              }
              return this;
            }
            var y2, b2 = l(t3);
            try {
              for (b2.s(); !(y2 = b2.n()).done; ) {
                var m2 = y2.value;
                if (e3 = this.$populated(m2), delete n2[m2], -1 !== r3.indexOf(m2))
                  delete this.$$populatedVirtuals[m2], delete this._doc[m2];
                else if (e3)
                  if (Array.isArray(e3)) {
                    var v2 = rt.getValue(m2, this._doc);
                    if (v2.isMongooseArray)
                      for (var g2 = v2.__array, _2 = 0; _2 < g2.length; ++_2) {
                        var w2 = g2[_2];
                        null != w2 && (g2[_2] = w2 instanceof _t ? w2._doc._id : w2._id);
                      }
                    else
                      rt.setValue(m2, e3, this._doc);
                  } else
                    rt.setValue(m2, e3, this._doc);
              }
            } catch (t4) {
              b2.e(t4);
            } finally {
              b2.f();
            }
            return this;
          }, _t.prototype.$__fullPath = function(t3) {
            return t3 || "";
          }, _t.prototype.getChanges = function() {
            var t3 = this.$__delta();
            return t3 ? t3[1] : {};
          }, _t.prototype.$__delta = function() {
            var t3 = this, e3 = this.$__dirty(), r3 = this.$__schema.options.optimisticConcurrency;
            if (r3)
              if (Array.isArray(r3)) {
                var i2 = new Set(r3);
                this.modifiedPaths().find(function(t4) {
                  return i2.has(t4);
                }) && (this.$__.version = e3.length ? 3 : 1);
              } else
                this.$__.version = e3.length ? 3 : 1;
            if (e3.length || 3 === this.$__.version) {
              var o2 = {}, a2 = {}, s2 = e3.length, u2 = [], c2 = 0;
              for (o2._id = this._doc._id, null != (o2 && o2._id && o2._id.$__ || null) && (o2._id = o2._id.toObject({ transform: false, depopulate: true })); c2 < s2; ++c2) {
                var f2 = e3[c2], l2 = f2.value, h2 = xt(this, f2.path, l2);
                if (h2)
                  u2.push(h2);
                else {
                  if (!this.$populated(f2.path, true) && this.$__.selected) {
                    var p2 = f2.path.split("."), d2 = p2[0];
                    if (this.$__.selected[d2] && this.$__.selected[d2].$elemMatch) {
                      if (!(p2.length > 1 && 0 == p2[1] && void 0 === o2[d2])) {
                        u2.push(f2.path);
                        continue;
                      }
                      o2[d2] = this.$__.selected[d2], p2[1] = "$", f2.path = p2.join(".");
                    }
                  }
                  if (this.$isDefault(f2.path) && this.$__.selected) {
                    if (-1 === f2.path.indexOf(".") && J(this.$__.selected, f2.path))
                      continue;
                    if (tt(f2.path).find(function(e4) {
                      return J(t3.$__.isSelected, e4);
                    }))
                      continue;
                  }
                  if (!u2.length)
                    if (void 0 === l2)
                      kt(this, 0, a2, f2, 1, "$unset");
                    else if (null === l2)
                      kt(this, 0, a2, f2, null);
                    else if (rt.isMongooseArray(l2) && l2.$path() && l2[st])
                      Mt(this, 0, a2, f2, l2);
                    else if (l2[w.pathSymbol] && n.isBuffer(l2))
                      kt(this, 0, a2, f2, l2 = l2.toObject());
                    else if (this.$__.primitiveAtomics && null != this.$__.primitiveAtomics[f2.path]) {
                      var y2 = this.$__.primitiveAtomics[f2.path], b2 = L(y2);
                      kt(this, 0, a2, f2, y2[b2], b2);
                    } else
                      kt(this, 0, a2, f2, l2 = R(l2, { depopulate: true, transform: false, virtuals: false, getters: false, omitUndefined: true, _isNested: true }));
                }
              }
              return u2.length ? new v(u2) : (this.$__.version && this.$__version(o2, a2), 0 === Object.keys(a2).length ? [o2, null] : [o2, a2]);
            }
          }, _t.prototype.$clone = function() {
            var t3 = new (0, this.constructor)();
            if (t3.$isNew = this.$isNew, this._doc && (t3._doc = R(this._doc, { retainDocuments: true })), this.$__) {
              var e3, r3 = new (0, this.$__.constructor)(), n2 = l(Object.getOwnPropertyNames(this.$__));
              try {
                for (n2.s(); !(e3 = n2.n()).done; ) {
                  var i2 = e3.value;
                  "activePaths" !== i2 && (r3[i2] = R(this.$__[i2]));
                }
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
              Object.assign(r3.activePaths, R(c({}, this.$__.activePaths))), t3.$__ = r3;
            }
            return t3;
          }, _t.prototype.$createModifiedPathsSnapshot = function() {
            var t3 = /* @__PURE__ */ new WeakMap();
            if (!this.$isSubdocument) {
              var e3, r3 = l(this.$getAllSubdocs());
              try {
                for (r3.s(); !(e3 = r3.n()).done; ) {
                  var n2 = e3.value;
                  t3.set(n2, n2.$__.activePaths.clone());
                }
              } catch (t4) {
                r3.e(t4);
              } finally {
                r3.f();
              }
            }
            return new j(t3, this.$__.activePaths.clone(), this.$__.version);
          }, _t.prototype.$restoreModifiedPathsSnapshot = function(t3) {
            if (this.$__.activePaths = t3.activePaths.clone(), this.$__.version = t3.version, !this.$isSubdocument) {
              var e3, r3 = l(this.$getAllSubdocs());
              try {
                for (r3.s(); !(e3 = r3.n()).done; ) {
                  var n2 = e3.value;
                  t3.subdocSnapshot.has(n2) && (n2.$__.activePaths = t3.subdocSnapshot.get(n2));
                }
              } catch (t4) {
                r3.e(t4);
              } finally {
                r3.f();
              }
            }
            return this;
          }, _t.prototype.$clearModifiedPaths = function() {
            if (this.$__.activePaths.clear("modify"), this.$__.activePaths.clear("init"), this.$__.version = 0, !this.$isSubdocument) {
              var t3, e3 = l(this.$getAllSubdocs());
              try {
                for (e3.s(); !(t3 = e3.n()).done; )
                  t3.value.$clearModifiedPaths();
              } catch (t4) {
                e3.e(t4);
              } finally {
                e3.f();
              }
            }
            return this;
          }, _t.prototype.$__hasOnlyPrimitiveValues = function() {
            return !this.$__.populated && !this.$__.wasPopulated && (null == this._doc || Object.values(this._doc).every(function(t3) {
              return null == t3 || "object" !== d(t3) || rt.isNativeObject(t3) && !Array.isArray(t3) || K(t3, "ObjectId") || K(t3, "Decimal128");
            }));
          }, _t.VERSION_WHERE = 1, _t.VERSION_INC = 2, _t.VERSION_ALL = 3, _t.ValidationError = k, t2.exports = _t;
        }, 8285: (t2, e2, r2) => {
          "use strict";
          var n = r2(2400), i = r2(2580), o = false;
          t2.exports = function() {
            return o ? i : n;
          }, t2.exports.setBrowser = function(t3) {
            o = t3;
          };
        }, 7591: (t2) => {
          "use strict";
          var e2 = null;
          t2.exports.get = function() {
            return e2;
          }, t2.exports.set = function(t3) {
            e2 = t3;
          };
        }, 4026: (t2, e2) => {
          "use strict";
          e2.Collection = function() {
            throw new Error("Cannot create a collection from browser library");
          }, e2.Connection = function() {
            throw new Error("Cannot create a connection from browser library");
          };
        }, 3609: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, o(n2.key), n2);
            }
          }
          function o(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function a(t3, e3, r3) {
            return e3 = c(e3), function(t4, e4) {
              if (e4 && ("object" == n(e4) || "function" == typeof e4))
                return e4;
              if (void 0 !== e4)
                throw new TypeError("Derived constructors may only return object or undefined");
              return s(t4);
            }(t3, u() ? Reflect.construct(e3, r3 || [], c(t3).constructor) : e3.apply(t3, r3));
          }
          function s(t3) {
            if (void 0 === t3)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t3;
          }
          function u() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (u = function() {
              return !!t3;
            })();
          }
          function c(t3) {
            return c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, c(t3);
          }
          function f(t3, e3) {
            return f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, f(t3, e3);
          }
          var l = r2(8213), h = r2(7352), p = function(t3) {
            function e3(t4, r4, n3, i2, o2) {
              var u2;
              if (function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), arguments.length > 0) {
                var c2 = y(r4);
                (u2 = a(this, e3, [m(null, t4, r4, n3, b(o2), c2, i2)])).init(t4, r4, n3, i2, o2);
              } else
                u2 = a(this, e3, [m()]);
              return s(u2);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && f(t4, e4);
            }(e3, t3), r3 = e3, (n2 = [{ key: "toJSON", value: function() {
              return { stringValue: this.stringValue, valueType: this.valueType, kind: this.kind, value: this.value, path: this.path, reason: this.reason, name: this.name, message: this.message };
            } }, { key: "init", value: function(t4, e4, r4, n3, i2) {
              this.stringValue = d(e4), this.messageFormat = b(i2), this.kind = t4, this.value = e4, this.path = r4, this.reason = n3, this.valueType = y(e4);
            } }, { key: "copy", value: function(t4) {
              this.messageFormat = t4.messageFormat, this.stringValue = t4.stringValue, this.kind = t4.kind, this.value = t4.value, this.path = t4.path, this.reason = t4.reason, this.message = t4.message, this.valueType = t4.valueType;
            } }, { key: "setModel", value: function(t4) {
              this.message = m(t4, this.kind, this.value, this.path, this.messageFormat, this.valueType);
            } }]) && i(r3.prototype, n2), Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3, n2;
          }(l);
          function d(t3) {
            var e3 = h.inspect(t3);
            return (e3 = e3.replace(/^'|'$/g, '"')).startsWith('"') || (e3 = '"' + e3 + '"'), e3;
          }
          function y(t3) {
            if (null == t3)
              return "" + t3;
            var e3 = n(t3);
            return "object" !== e3 || "function" != typeof t3.constructor ? e3 : t3.constructor.name;
          }
          function b(t3) {
            var e3 = t3 && t3._castErrorMessage || null;
            if ("string" == typeof e3 || "function" == typeof e3)
              return e3;
          }
          function m(t3, e3, r3, n2, i2, o2, a2) {
            if ("string" == typeof i2) {
              var s2 = d(r3), u2 = i2.replace("{KIND}", e3).replace("{VALUE}", s2).replace("{PATH}", n2);
              return null != t3 && (u2 = u2.replace("{MODEL}", t3.modelName)), u2;
            }
            if ("function" == typeof i2)
              return i2(r3, n2, t3, e3);
            var c2 = "Cast to " + e3 + " failed for value " + d(r3) + (o2 ? " (type " + o2 + ")" : "") + ' at path "' + n2 + '"';
            return null != t3 && (c2 += ' for model "' + t3.modelName + '"'), null != a2 && "function" == typeof a2.constructor && "AssertionError" !== a2.constructor.name && "Error" !== a2.constructor.name && (c2 += ' because of "' + a2.constructor.name + '"'), c2;
          }
          Object.defineProperty(p.prototype, "name", { value: "CastError" }), t2.exports = p;
        }, 1417: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r4) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r4 || [], o(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, ["For your own good, using `document.save()` to update an array which was selected using an $elemMatch projection OR populated using skip, limit, query conditions, or exclusion of the _id field when the operation results in a $pop or $set of the entire array is not supported. The following path(s) would have been modified unsafely:\n  " + t4.join("\n  ") + "\nUse Model.updateOne() to update these arrays instead."]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "DivergentArrayError" }), t2.exports = s;
        }, 3672: (t2, e2, r2) => {
          "use strict";
          var n = r2(8213);
          t2.exports = n, n.messages = r2(766), n.Messages = n.messages, n.DocumentNotFoundError = r2(1129), n.CastError = r2(3609), n.ValidationError = r2(6949), n.ValidatorError = r2(9538), n.VersionError = r2(6996), n.ParallelSaveError = r2(3940), n.OverwriteModelError = r2(3644), n.MissingSchemaError = r2(8063), n.MongooseServerSelectionError = r2(7219), n.DivergentArrayError = r2(1417), n.StrictModeError = r2(8995), n.StrictPopulateError = r2(6801);
        }, 5537: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, ['Cannot create use schema for property "'.concat(t4, '" because the schema has the ').concat(r4, " option enabled.")]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "InvalidSchemaOptionError" }), t2.exports = s;
        }, 766: (t2, e2) => {
          "use strict";
          var r2 = t2.exports = {};
          r2.DocumentNotFoundError = null, r2.general = {}, r2.general.default = "Validator failed for path `{PATH}` with value `{VALUE}`", r2.general.required = "Path `{PATH}` is required.", r2.Number = {}, r2.Number.min = "Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).", r2.Number.max = "Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).", r2.Number.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", r2.Date = {}, r2.Date.min = "Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).", r2.Date.max = "Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).", r2.String = {}, r2.String.enum = "`{VALUE}` is not a valid enum value for path `{PATH}`.", r2.String.match = "Path `{PATH}` is invalid ({VALUE}).", r2.String.minlength = "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).", r2.String.maxlength = "Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).";
        }, 8063: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r4) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r4 || [], o(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, [`Schema hasn't been registered for model "` + t4 + '".\nUse mongoose.model(name, schema)']);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "MissingSchemaError" }), t2.exports = s;
        }, 8213: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          function r2(t3) {
            var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return r2 = function(t4) {
              if (null === t4 || !function(t5) {
                try {
                  return -1 !== Function.toString.call(t5).indexOf("[native code]");
                } catch (e4) {
                  return "function" == typeof t5;
                }
              }(t4))
                return t4;
              if ("function" != typeof t4)
                throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== e3) {
                if (e3.has(t4))
                  return e3.get(t4);
                e3.set(t4, r3);
              }
              function r3() {
                return function(t5, e4, r4) {
                  if (n())
                    return Reflect.construct.apply(null, arguments);
                  var o2 = [null];
                  o2.push.apply(o2, e4);
                  var a2 = new (t5.bind.apply(t5, o2))();
                  return r4 && i(a2, r4.prototype), a2;
                }(t4, arguments, o(this).constructor);
              }
              return r3.prototype = Object.create(t4.prototype, { constructor: { value: r3, enumerable: false, writable: true, configurable: true } }), i(r3, t4);
            }, r2(t3);
          }
          function n() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (n = function() {
              return !!t3;
            })();
          }
          function i(t3, e3) {
            return i = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, i(t3, e3);
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          var a = function(t3) {
            function r3() {
              return function(t4, e3) {
                if (!(t4 instanceof e3))
                  throw new TypeError("Cannot call a class as a function");
              }(this, r3), function(t4, r4, i2) {
                return r4 = o(r4), function(t5, r5) {
                  if (r5 && ("object" == e2(r5) || "function" == typeof r5))
                    return r5;
                  if (void 0 !== r5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, n() ? Reflect.construct(r4, i2 || [], o(t4).constructor) : r4.apply(t4, i2));
              }(this, r3, arguments);
            }
            return function(t4, e3) {
              if ("function" != typeof e3 && null !== e3)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e3 && i(t4, e3);
            }(r3, t3), a2 = r3, Object.defineProperty(a2, "prototype", { writable: false }), a2;
            var a2;
          }(r2(Error));
          Object.defineProperty(a.prototype, "name", { value: "MongooseError" }), t2.exports = a;
        }, 1129: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = r2(8213), u = r2(7352), c = function(t3) {
            function e3(t4, r4, a2, c2) {
              var f;
              !function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3);
              var l = s.messages;
              return (f = function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [null != l.DocumentNotFoundError ? "function" == typeof l.DocumentNotFoundError ? l.DocumentNotFoundError(t4, r4) : l.DocumentNotFoundError : 'No document found for query "' + u.inspect(t4) + '" on model "' + r4 + '"'])).result = c2, f.numAffected = a2, f.filter = t4, f.query = t4, f;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(s);
          Object.defineProperty(c.prototype, "name", { value: "DocumentNotFoundError" }), t2.exports = c;
        }, 3441: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4) {
              var a2;
              !function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3);
              var s2 = Array.isArray(r4) ? "array" : "primitive value";
              return (a2 = function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, ["Tried to set nested object field `" + t4 + "` to ".concat(s2, " `") + r4 + "`"])).path = t4, a2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "ObjectExpectedError" }), t2.exports = s;
        }, 1350: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4, a2) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, ['Parameter "' + r4 + '" to ' + a2 + '() must be an object, got "' + t4.toString() + '" (type ' + n(t4) + ")"]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "ObjectParameterError" }), t2.exports = s;
        }, 3644: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r4) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r4 || [], o(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, ["Cannot overwrite `" + t4 + "` model once compiled."]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "OverwriteModelError" }), t2.exports = s;
        }, 3940: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r4) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r4 || [], o(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, ["Can't save() the same doc multiple times in parallel. Document: " + t4._doc._id]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "ParallelSaveError" }), t2.exports = s;
        }, 1635: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4) {
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t5, e4, r4) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r4 || [], o(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, ["Can't validate() the same doc multiple times in parallel. Document: " + t4._doc._id]);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "ParallelValidateError" }), t2.exports = s;
        }, 7219: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, o(n2.key), n2);
            }
          }
          function o(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function a() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (a = function() {
              return !!t3;
            })();
          }
          function s(t3) {
            return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, s(t3);
          }
          function u(t3, e3) {
            return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, u(t3, e3);
          }
          var c = r2(8213), f = r2(2900), l = r2(4070), h = r2(5497), p = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = s(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, a() ? Reflect.construct(e4, r4 || [], s(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && u(t4, e4);
            }(e3, t3), r3 = e3, (o2 = [{ key: "assimilateError", value: function(t4) {
              var e4 = t4.reason, r4 = l(e4) && f(e4) && -1 === t4.message.indexOf("bad auth") && -1 === t4.message.indexOf("Authentication failed");
              for (var n2 in r4 ? this.message = "Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://www.mongodb.com/docs/atlas/security-whitelist/" : h(e4) ? this.message = "Mongoose is connecting with SSL enabled, but the server is not accepting SSL connections. Please ensure that the MongoDB server you are connecting to is configured to accept SSL connections. Learn more: https://mongoosejs.com/docs/tutorials/ssl.html" : this.message = t4.message, t4)
                "name" !== n2 && (this[n2] = t4[n2]);
              return this;
            } }]) && i(r3.prototype, o2), Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3, o2;
          }(c);
          Object.defineProperty(p.prototype, "name", { value: "MongooseServerSelectionError" }), t2.exports = p;
        }, 8995: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4, a2) {
              var s2;
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (s2 = function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [r4 = r4 || "Field `" + t4 + "` is not in schema and strict mode is set to throw."])).isImmutableError = !!a2, s2.path = t4, s2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "StrictModeError" }), t2.exports = s;
        }, 6801: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4) {
              var a2;
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (a2 = function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [r4 = r4 || "Cannot populate path `" + t4 + "` because it is not in your schema. Set the `strictPopulate` option to false to override."])).path = t4, a2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "StrictPopulateError" }), t2.exports = s;
        }, 6949: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, o(n2.key), n2);
            }
          }
          function o(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function a() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (a = function() {
              return !!t3;
            })();
          }
          function s(t3) {
            return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, s(t3);
          }
          function u(t3, e3) {
            return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, u(t3, e3);
          }
          var c = r2(8213), f = r2(5879), l = r2(7352), h = r2(1875), p = function(t3) {
            function e3(t4) {
              var r4, i2;
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (r4 = function(t5, e4, r5) {
                return e4 = s(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, a() ? Reflect.construct(e4, r5 || [], s(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [i2 = "model" === f(t4) ? t4.constructor.modelName + " validation failed" : "Validation failed"])).errors = {}, r4._message = i2, t4 && (t4.$errors = r4.errors), r4;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && u(t4, e4);
            }(e3, t3), r3 = e3, (o2 = [{ key: "toString", value: function() {
              return this.name + ": " + h(this);
            } }, { key: "inspect", value: function() {
              return Object.assign(new Error(this.message), this);
            } }, { key: "addError", value: function(t4, r4) {
              if (r4 instanceof e3)
                for (var n2 = r4.errors, i2 = 0, o3 = Object.keys(n2); i2 < o3.length; i2++) {
                  var a2 = o3[i2];
                  this.addError("".concat(t4, ".").concat(a2), n2[a2]);
                }
              else
                this.errors[t4] = r4, this.message = this._message + ": " + h(this);
            } }]) && i(r3.prototype, o2), Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3, o2;
          }(c);
          l.inspect.custom && (p.prototype[l.inspect.custom] = p.prototype.inspect), Object.defineProperty(p.prototype, "toJSON", { enumerable: false, writable: false, configurable: true, value: function() {
            return Object.assign({}, this, { name: this.name, message: this.message });
          } }), Object.defineProperty(p.prototype, "name", { value: "ValidationError" }), t2.exports = p;
        }, 9538: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, o(n2.key), n2);
            }
          }
          function o(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function a() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (a = function() {
              return !!t3;
            })();
          }
          function s(t3) {
            return s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, s(t3);
          }
          function u(t3, e3) {
            return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, u(t3, e3);
          }
          var c = r2(8213), f = function(t3) {
            function e3(t4, r4) {
              var i2;
              !function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3);
              var o3 = t4.message;
              o3 || (o3 = c.messages.general.default);
              var u2 = l(o3, t4, r4);
              return i2 = function(t5, e4, r5) {
                return e4 = s(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, a() ? Reflect.construct(e4, r5 || [], s(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [u2]), t4 = Object.assign({}, t4, { message: u2 }), i2.properties = t4, i2.kind = t4.type, i2.path = t4.path, i2.value = t4.value, i2.reason = t4.reason, i2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && u(t4, e4);
            }(e3, t3), r3 = e3, (o2 = [{ key: "toString", value: function() {
              return this.message;
            } }, { key: "toJSON", value: function() {
              return Object.assign({ name: this.name, message: this.message }, this);
            } }]) && i(r3.prototype, o2), Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3, o2;
          }(c);
          function l(t3, e3, r3) {
            if ("function" == typeof t3)
              return t3(e3, r3);
            for (var n2 = 0, i2 = Object.keys(e3); n2 < i2.length; n2++) {
              var o2 = i2[n2];
              "message" !== o2 && (t3 = t3.replace("{" + o2.toUpperCase() + "}", e3[o2]));
            }
            return t3;
          }
          Object.defineProperty(f.prototype, "name", { value: "ValidatorError" }), Object.defineProperty(f.prototype, "properties", { enumerable: false, writable: true, value: null }), f.prototype.formatMessage = l, t2.exports = f;
        }, 6996: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3(t4, r4, a2) {
              var s2;
              !function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3);
              var u = a2.join(", ");
              return (s2 = function(t5, e4, r5) {
                return e4 = o(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, i() ? Reflect.construct(e4, r5 || [], o(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, ['No matching document found for id "' + t4._doc._id + '" version ' + r4 + ' modifiedPaths "' + u + '"'])).version = r4, s2.modifiedPaths = a2, s2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8213));
          Object.defineProperty(s.prototype, "name", { value: "VersionError" }), t2.exports = s;
        }, 2073: (t2) => {
          "use strict";
          t2.exports = function t3(e2) {
            if (!Array.isArray(e2))
              return { min: 0, max: 0, containsNonArrayItem: true };
            if (0 === e2.length)
              return { min: 1, max: 1, containsNonArrayItem: false };
            if (1 === e2.length && !Array.isArray(e2[0]))
              return { min: 1, max: 1, containsNonArrayItem: false };
            for (var r2 = t3(e2[0]), n = 1; n < e2.length; ++n) {
              var i = t3(e2[n]);
              i.min < r2.min && (r2.min = i.min), i.max > r2.max && (r2.max = i.max), r2.containsNonArrayItem = r2.containsNonArrayItem || i.containsNonArrayItem;
            }
            return r2.min = r2.min + 1, r2.max = r2.max + 1, r2;
          };
        }, 4450: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(9639), o = r2(5549), a = r2(2793), s = r2(2497), u = r2(9696), c = r2(3305), f = r2(1243).isMongooseArray, l = r2(608), h = r2(2789), p = r2(7930), d = r2(7291).trustedSymbol, y = r2(3633);
          function b(t3, e3, r3) {
            if (null == t3)
              return t3;
            if (c(t3, "Double"))
              return new y.Double(t3.value);
            if ("number" == typeof t3 || "string" == typeof t3 || "boolean" == typeof t3 || "bigint" == typeof t3)
              return t3;
            if (Array.isArray(t3))
              return function(t4, e4) {
                var r4 = 0, n2 = t4.length, i2 = new Array(n2);
                for (r4 = 0; r4 < n2; ++r4)
                  i2[r4] = b(t4[r4], e4, true);
                return i2;
              }(f(t3) ? t3.__array : t3, e3);
            if (s(t3)) {
              if (e3 && e3.retainDocuments && null != t3.$__) {
                var a2 = t3.$clone();
                return null != t3.__index && (a2.__index = t3.__index), null != t3.__parentArray && (a2.__parentArray = t3.__parentArray), a2.$__parent = t3.$__parent, a2;
              }
              var d2, v = t3.$isSingleNested;
              if (h(t3) && null != t3.$__ && null != t3._doc)
                return t3._doc;
              if (d2 = e3 && e3.json && "function" == typeof t3.toJSON ? t3.toJSON(e3) : t3.toObject(e3), e3 && e3.minimize && !t3.constructor.$__required && v && 0 === Object.keys(d2).length)
                return;
              return d2;
            }
            var g = t3.constructor;
            if (g)
              switch (u(g)) {
                case "Object":
                  return m(t3, e3, r3);
                case "Date":
                  return new g(+t3);
                case "RegExp":
                  return function(t4) {
                    var e4 = new RegExp(t4.source, t4.flags);
                    return e4.lastIndex !== t4.lastIndex && (e4.lastIndex = t4.lastIndex), e4;
                  }(t3);
              }
            return c(t3, "ObjectId") ? e3 && e3.flattenObjectIds ? t3.toJSON() : new o(t3.id) : c(t3, "Decimal128") ? e3 && e3.flattenDecimals ? t3.toJSON() : i.fromString(t3.toString()) : !g && l(t3) ? m(t3, e3, r3) : "object" === n(t3) && t3[p.schemaTypeSymbol] ? t3.clone() : e3 && e3.bson && "function" == typeof t3.toBSON ? t3 : "function" == typeof t3.valueOf ? t3.valueOf() : m(t3, e3, r3);
          }
          function m(t3, e3, r3) {
            var n2, i2 = e3 && e3.minimize, o2 = e3 && e3.omitUndefined, s2 = e3 && e3._seen, u2 = {};
            if (s2 && s2.has(t3))
              return s2.get(t3);
            s2 && s2.set(t3, u2), d in t3 && (u2[d] = t3[d]);
            for (var c2 = Object.keys(t3), f2 = c2.length, l2 = 0; l2 < f2; ++l2) {
              var h2 = c2[l2];
              if (!a.has(h2)) {
                var p2 = b(t3[h2], e3, false);
                false !== i2 && !o2 || void 0 !== p2 ? true === i2 && void 0 === p2 || (n2 || (n2 = true), u2[h2] = p2) : delete u2[h2];
              }
            }
            return i2 && !r3 ? n2 && u2 : u2;
          }
          t2.exports = b;
        }, 7430: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          var o = r2(3633).Binary, a = r2(3305), s = r2(2497);
          r2(3672), r2(7352);
          function u(t3) {
            return t3 && "object" === i(t3) && !(t3 instanceof Date) && !a(t3, "ObjectId") && (!Array.isArray(t3) || 0 !== t3.length) && !(t3 instanceof n) && !a(t3, "Decimal128") && !(t3 instanceof o);
          }
          e2.B = function t3(e3, r3, i2, o2) {
            var a2, c = (a2 = e3 && s(e3) && !n.isBuffer(e3) ? Object.keys(e3.toObject({ transform: false, virtuals: false }) || {}) : Object.keys(e3 || {})).length, f = {};
            r3 = r3 ? r3 + "." : "";
            for (var l = 0; l < c; ++l) {
              var h = a2[l], p = e3[h];
              f[r3 + h] = p;
              var d = o2 && o2.path && o2.path(r3 + h), y = o2 && o2.nested && o2.nested[r3 + h];
              if (!d || "Mixed" !== d.instance) {
                if (u(p)) {
                  if (i2 && i2.skipArrays && Array.isArray(p))
                    continue;
                  var b = t3(p, r3 + h, i2, o2);
                  for (var m in b)
                    f[m] = b[m];
                  Array.isArray(p) && (f[r3 + h] = p);
                }
                if (y)
                  for (var v = 0, g = Object.keys(o2.paths); v < g.length; v++) {
                    var _ = g[v];
                    _.startsWith(r3 + h + ".") && !f.hasOwnProperty(_) && (f[_] = void 0);
                  }
              }
            }
            return f;
          };
        }, 4327: (t2) => {
          "use strict";
          t2.exports = function(t3, e2, r2, n) {
            return r2 ? n ? { bsonType: e2 } : { bsonType: [e2, "null"] } : n ? { type: t3 } : { type: [t3, "null"] };
          };
        }, 2696: (t2, e2, r2) => {
          "use strict";
          var n = r2(3305);
          t2.exports = function(t3, e3) {
            return "string" == typeof t3 && "string" == typeof e3 || "number" == typeof t3 && "number" == typeof e3 ? t3 === e3 : !(!n(t3, "ObjectId") || !n(e3, "ObjectId")) && t3.toString() === e3.toString();
          };
        }, 3916: (t2) => {
          "use strict";
          t2.exports = function(t3, e2, r2, n, i) {
            var o = Object.keys(t3).reduce(function(t4, r3) {
              return t4 || r3.startsWith(e2 + ".");
            }, false), a = e2 + "." + r2.options.discriminatorKey;
            o || 1 !== i.length || i[0] !== a || n.splice(n.indexOf(a), 1);
          };
        }, 7910: (t2, e2, r2) => {
          "use strict";
          var n = r2(8677);
          t2.exports = function(t3, e3, r3) {
            var i = t3.schema.options.discriminatorKey, o = null != e3 && e3[i];
            if (null == o && (o = r3), t3.discriminators && null != o)
              if (t3.discriminators[o])
                t3 = t3.discriminators[o];
              else {
                var a = n(t3.discriminators, o);
                a && (t3 = a);
              }
            return t3;
          };
        }, 8677: (t2, e2, r2) => {
          "use strict";
          var n = r2(2696);
          t2.exports = function(t3, e3) {
            if (null == t3)
              return null;
            for (var r3 = 0, i = Object.keys(t3); r3 < i.length; r3++) {
              var o = t3[i[r3]];
              if (o.schema && o.schema.discriminatorMapping && n(o.schema.discriminatorMapping.value, e3))
                return o;
            }
            return null;
          };
        }, 7425: (t2, e2, r2) => {
          "use strict";
          var n = r2(2696);
          t2.exports = function(t3, e3) {
            if (null == t3 || null == t3.discriminators)
              return null;
            for (var r3 = 0, i = Object.keys(t3.discriminators); r3 < i.length; r3++) {
              var o = i[r3], a = t3.discriminators[o];
              if (null != a.discriminatorMapping && n(a.discriminatorMapping.value, e3))
                return a;
            }
            return null;
          };
        }, 4301: (t2, e2, r2) => {
          "use strict";
          var n = r2(9539), i = r2(2793), o = r2(3305), a = r2(5549), s = r2(608);
          t2.exports = function t3(e3, r3, u, c) {
            var f, l = Object.keys(r3), h = 0, p = l.length;
            if (u = u || "", !(c = c || /* @__PURE__ */ new WeakSet()).has(r3)) {
              for (c.add(r3); h < p; )
                if (f = l[h++], (u || "discriminators" !== f && "base" !== f && "_applyDiscriminators" !== f && "_userProvidedOptions" !== f && "options" !== f && "tree" !== f) && !("tree" === u && null != r3 && r3.instanceOfSchema || i.has(f))) {
                  if (null == e3[f])
                    e3[f] = r3[f];
                  else if (s(r3[f])) {
                    if (s(e3[f]) || (e3[f] = {}), null != r3[f]) {
                      if (r3[f].$isSingleNested && e3[f].$isMongooseDocumentArray || r3[f].$isMongooseDocumentArray && e3[f].$isSingleNested || r3[f].$isMongooseDocumentArrayElement && e3[f].$isMongooseDocumentArrayElement)
                        continue;
                      if (r3[f].instanceOfSchema) {
                        e3[f].instanceOfSchema ? n(e3[f], r3[f].clone(), true) : e3[f] = r3[f].clone();
                        continue;
                      }
                      if (o(r3[f], "ObjectId")) {
                        e3[f] = new a(r3[f]);
                        continue;
                      }
                    }
                    t3(e3[f], r3[f], u ? u + "." + f : f, c);
                  }
                }
              null != r3 && r3.instanceOfSchema && (e3.tree = Object.assign({}, r3.tree, e3.tree));
            }
          };
        }, 5335: (t2, e2, r2) => {
          "use strict";
          var n = r2(1091);
          function i(t3, e3, r3) {
            t3.$__.activePaths.default(e3), !r3 && t3.$isSubdocument && t3.$isSingleNested && null != t3.$parent() && t3.$parent().$__.activePaths.default(t3.$__pathRelativeToParent(e3));
          }
          t2.exports = function(t3, e3, r3, o, a, s, u) {
            for (var c = Object.keys(t3.$__schema.paths), f = c.length, l = u && u.skipParentChangeTracking, h = 0; h < f; ++h) {
              var p = void 0, d = "", y = c[h];
              if ("_id" !== y || !t3.$__.skipId) {
                var b = t3.$__schema.paths[y], m = b.splitPath(), v = m.length;
                if ("$*" !== m[v - 1])
                  for (var g = false, _ = t3._doc, w = 0; w < v && null != _; ++w) {
                    var S = m[w];
                    if (d += (d.length ? "." : "") + S, true === r3) {
                      if (d in e3)
                        break;
                    } else if (false === r3 && e3 && !g) {
                      var O = b.$isSingleNested || b.$isMongooseDocumentArray;
                      if (d in e3 && !n(e3[d]) || w === v - 1 && O && null != o && o[d])
                        g = true;
                      else if (null != o && !o[d])
                        break;
                    }
                    if (w === v - 1) {
                      if (void 0 !== _[S])
                        break;
                      if (null != a) {
                        if ("function" == typeof b.defaultValue) {
                          if (!b.defaultValue.$runBeforeSetters && a)
                            break;
                          if (b.defaultValue.$runBeforeSetters && !a)
                            break;
                        } else if (!a)
                          continue;
                      }
                      if (s && s[d])
                        break;
                      if (e3 && null !== r3) {
                        if (true === r3) {
                          if (y in e3)
                            continue;
                          try {
                            p = b.getDefault(t3, false);
                          } catch (e4) {
                            t3.invalidate(y, e4);
                            break;
                          }
                          void 0 !== p && (_[S] = p, i(t3, y, l));
                        } else if (g) {
                          try {
                            p = b.getDefault(t3, false);
                          } catch (e4) {
                            t3.invalidate(y, e4);
                            break;
                          }
                          void 0 !== p && (_[S] = p, i(t3, y, l));
                        }
                      } else {
                        try {
                          p = b.getDefault(t3, false);
                        } catch (e4) {
                          t3.invalidate(y, e4);
                          break;
                        }
                        void 0 !== p && (_[S] = p, i(t3, y, l));
                      }
                    } else
                      _ = _[S];
                  }
              }
            }
          };
        }, 4473: (t2) => {
          "use strict";
          function e2(t3, r2) {
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : /* @__PURE__ */ new Set();
            if (n.has(t3))
              throw new Error("Infinite subdocument loop: subdoc with _id " + t3._id + " is a parent of itself");
            var i = t3.$parent(), o = t3.$__pathRelativeToParent(void 0, false) + "." + r2;
            i.$__.activePaths.clearPath(o), i.$isSubdocument && e2(i, o, n);
          }
          t2.exports = function(t3, r2, n) {
            var i = (n = n || {}).skipDocArrays, o = 0;
            if (!t3)
              return o;
            for (var a = 0, s = Object.keys(t3.$__.activePaths.getStatePaths("modify")); a < s.length; a++) {
              var u = s[a];
              if (i) {
                var c = t3.$__schema.path(u);
                if (c && c.$isMongooseDocumentArray)
                  continue;
              }
              u.startsWith(r2 + ".") && (t3.$__.activePaths.clearPath(u), ++o, t3.$isSubdocument && e2(t3, u));
            }
            return o;
          };
        }, 2068: (t2, e2, r2) => {
          "use strict";
          var n, i = r2(4450), o = r2(7930).documentSchemaSymbol, a = r2(3303)._, s = r2(8768), u = r2(7930).getSymbol, c = r2(7930).scopeSymbol, f = s.isPOJO;
          e2.w = p, e2.X = d;
          var l = Object.freeze({ minimize: true, virtuals: false, getters: false, transform: false }), h = Object.freeze({ noDottedPath: true });
          function p(t3, e3, i2, o2) {
            n = n || r2(2400);
            for (var a2 = o2.typeKey, s2 = 0, u2 = Object.keys(t3); s2 < u2.length; s2++) {
              var c2 = u2[s2], l2 = t3[c2];
              d({ prop: c2, subprops: f(l2) && Object.keys(l2).length > 0 && (!l2[a2] || "type" === a2 && f(l2.type) && l2.type.type) ? l2 : null, prototype: e3, prefix: i2, options: o2 });
            }
          }
          function d(t3) {
            var e3 = t3.prop, s2 = t3.subprops, f2 = t3.prototype, d2 = t3.prefix, y = t3.options;
            n = n || r2(2400);
            var b = (d2 ? d2 + "." : "") + e3, m = (d2 = d2 || "") ? Object.freeze({}) : h;
            s2 ? Object.defineProperty(f2, e3, { enumerable: true, configurable: true, get: function() {
              var t4, e4, r3 = this;
              if (this.$__.getters || (this.$__.getters = {}), !this.$__.getters[b]) {
                var a2 = Object.create(n.prototype, (t4 = this, e4 = {}, Object.getOwnPropertyNames(t4).forEach(function(r4) {
                  -1 === ["isNew", "$__", "$errors", "errors", "_doc", "$locals", "$op", "__parentArray", "__index", "$isDocumentArrayElement"].indexOf(r4) || (e4[r4] = Object.getOwnPropertyDescriptor(t4, r4), e4[r4].enumerable = false);
                }), e4));
                d2 || (a2.$__[c] = this), a2.$__.nestedPath = b, Object.defineProperty(a2, "schema", { enumerable: false, configurable: true, writable: false, value: f2.schema }), Object.defineProperty(a2, "$__schema", { enumerable: false, configurable: true, writable: false, value: f2.schema }), Object.defineProperty(a2, o, { enumerable: false, configurable: true, writable: false, value: f2.schema }), Object.defineProperty(a2, "toObject", { enumerable: false, configurable: true, writable: false, value: function() {
                  return i(r3.get(b, null, { virtuals: this && this.schema && this.schema.options && this.schema.options.toObject && this.schema.options.toObject.virtuals || null }));
                } }), Object.defineProperty(a2, "$__get", { enumerable: false, configurable: true, writable: false, value: function() {
                  return r3.get(b, null, { virtuals: this && this.schema && this.schema.options && this.schema.options.toObject && this.schema.options.toObject.virtuals || null });
                } }), Object.defineProperty(a2, "toJSON", { enumerable: false, configurable: true, writable: false, value: function() {
                  return r3.get(b, null, { virtuals: this && this.schema && this.schema.options && this.schema.options.toJSON && this.schema.options.toJSON.virtuals || null });
                } }), Object.defineProperty(a2, "$__isNested", { enumerable: false, configurable: true, writable: false, value: true }), Object.defineProperty(a2, "$isEmpty", { enumerable: false, configurable: true, writable: false, value: function() {
                  return 0 === Object.keys(this.get(b, null, l) || {}).length;
                } }), Object.defineProperty(a2, "$__parent", { enumerable: false, configurable: true, writable: false, value: this }), p(s2, a2, b, y), this.$__.getters[b] = a2;
              }
              return this.$__.getters[b];
            }, set: function(t4) {
              null != t4 && t4.$__isNested ? t4 = t4.$__get() : t4 instanceof n && !t4.$__isNested && (t4 = t4.$toObject(a)), (this.$__[c] || this).$set(b, t4);
            } }) : Object.defineProperty(f2, e3, { enumerable: true, configurable: true, get: function() {
              return this[u].call(this.$__[c] || this, b, null, m);
            }, set: function(t4) {
              this.$set.call(this.$__[c] || this, b, t4);
            } });
          }
        }, 5346: (t2) => {
          "use strict";
          t2.exports = function(t3, e2, r2) {
            for (var n = e2[0], i = r2, o = t3, a = 0; a < e2.length - 1; ++a) {
              var s = i.path(n);
              if (s && s.schema) {
                var u = o.get(n);
                if (i = s.schema, n = e2[a + 1], Array.isArray(u) && !isNaN(n) && (u = u[n], n = ""), null == u)
                  break;
                o = u;
              } else
                n += n.length ? "." + e2[a + 1] : e2[a + 1];
            }
            return o;
          };
        }, 5152: (t2, e2, r2) => {
          "use strict";
          var n = r2(3703), i = r2(7425);
          t2.exports = function t3(e3, r3, o) {
            for (var a = (o = o || {}).typeOnly, s = Array.isArray(r3) ? r3 : -1 === r3.indexOf(".") ? [r3] : r3.split("."), u = null, c = "adhocOrUndefined", f = i(e3.schema, e3.get(e3.schema.options.discriminatorKey)) || e3.schema, l = 0; l < s.length; ++l) {
              var h = s.slice(0, l + 1).join(".");
              if (null != (u = f.path(h))) {
                if ("Mixed" === u.instance)
                  return a ? "real" : u;
                if (c = f.pathType(h), (u.$isSingleNested || u.$isMongooseDocumentArrayElement) && null != u.schema.discriminators) {
                  var p = u.schema.discriminators, d = e3.get(h + "." + n(u, "schema.options.discriminatorKey"));
                  if (null == d || null == p[d])
                    continue;
                  var y = s.slice(l + 1).join(".");
                  return t3(e3.get(h), y, o);
                }
              } else
                c = "adhocOrUndefined";
            }
            return a ? c : u;
          };
        }, 3216: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != a(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != a(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == a(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3) {
            return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, a(t3);
          }
          var s = r2(8768), u = /* @__PURE__ */ new Set(["__index", "__parentArray", "_doc"]);
          t2.exports = function(t3, e3) {
            if (s.isPOJO(t3) && null != t3.$__ && null != t3._doc) {
              if (e3) {
                for (var r3 = {}, n2 = 0, o2 = Object.keys(t3); n2 < o2.length; n2++) {
                  var c = o2[n2];
                  "symbol" !== a(c) && "$" !== c[0] && (u.has(c) || (r3[c] = t3[c]));
                }
                return i(i({}, t3._doc), r3);
              }
              return t3._doc;
            }
            return t3;
          };
        }, 5782: (t2) => {
          "use strict";
          function e2(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r2 = 0, n = Array(e3); r2 < e3; r2++)
              n[r2] = t3[r2];
            return n;
          }
          t2.exports = function(t3, r2, n) {
            if (0 === t3.length)
              return n();
            var i, o = t3.length, a = null, s = function(t4, r3) {
              var n2 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (!n2) {
                if (Array.isArray(t4) || (n2 = function(t5, r4) {
                  if (t5) {
                    if ("string" == typeof t5)
                      return e2(t5, r4);
                    var n3 = {}.toString.call(t5).slice(8, -1);
                    return "Object" === n3 && t5.constructor && (n3 = t5.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(t5) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? e2(t5, r4) : void 0;
                  }
                }(t4)) || r3 && t4 && "number" == typeof t4.length) {
                  n2 && (t4 = n2);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= t4.length ? { done: true } : { done: false, value: t4[i2++] };
                  }, e: function(t5) {
                    throw t5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s2 = true, u = false;
              return { s: function() {
                n2 = n2.call(t4);
              }, n: function() {
                var t5 = n2.next();
                return s2 = t5.done, t5;
              }, e: function(t5) {
                u = true, a2 = t5;
              }, f: function() {
                try {
                  s2 || null == n2.return || n2.return();
                } finally {
                  if (u)
                    throw a2;
                }
              } };
            }(t3);
            try {
              for (s.s(); !(i = s.n()).done; )
                r2(i.value, function(t4) {
                  if (null == a)
                    return null != t4 ? n(a = t4) : --o <= 0 ? n() : void 0;
                });
            } catch (a2) {
              s.e(a2);
            } finally {
              s.f();
            }
          };
        }, 1875: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            for (var e2, r2 = Object.keys(t3.errors || {}), n = r2.length, i = [], o = 0; o < n; ++o)
              e2 = r2[o], t3 !== t3.errors[e2] && i.push(e2 + ": " + t3.errors[e2].message);
            return i.join(", ");
          };
        }, 1226: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            return null == t3 ? null : Object.keys(t3)[0];
          };
        }, 3703: (t2) => {
          "use strict";
          function e2(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n = Array(e3); r3 < e3; r3++)
              n[r3] = t3[r3];
            return n;
          }
          function r2(t3, e3) {
            return null == t3 ? t3 : t3 instanceof Map ? t3.get(e3) : t3[e3];
          }
          t2.exports = function(t3, n, i) {
            var o, a = false;
            if ("string" == typeof n) {
              if (-1 === n.indexOf(".")) {
                var s = r2(t3, n);
                return null == s ? i : s;
              }
              o = n.split(".");
            } else if (a = true, 1 === (o = n).length) {
              var u = r2(t3, o[0]);
              return null == u ? i : u;
            }
            var c, f = n, l = t3, h = function(t4, r3) {
              var n2 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (!n2) {
                if (Array.isArray(t4) || (n2 = function(t5, r4) {
                  if (t5) {
                    if ("string" == typeof t5)
                      return e2(t5, r4);
                    var n3 = {}.toString.call(t5).slice(8, -1);
                    return "Object" === n3 && t5.constructor && (n3 = t5.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(t5) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? e2(t5, r4) : void 0;
                  }
                }(t4)) || r3 && t4 && "number" == typeof t4.length) {
                  n2 && (t4 = n2);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= t4.length ? { done: true } : { done: false, value: t4[i2++] };
                  }, e: function(t5) {
                    throw t5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s2 = true, u2 = false;
              return { s: function() {
                n2 = n2.call(t4);
              }, n: function() {
                var t5 = n2.next();
                return s2 = t5.done, t5;
              }, e: function(t5) {
                u2 = true, a2 = t5;
              }, f: function() {
                try {
                  s2 || null == n2.return || n2.return();
                } finally {
                  if (u2)
                    throw a2;
                }
              } };
            }(o);
            try {
              for (h.s(); !(c = h.n()).done; ) {
                var p = c.value;
                if (null == l)
                  return i;
                if (!a && null != l[f])
                  return l[f];
                l = r2(l, p), a || (f = f.substr(p.length + 1));
              }
            } catch (t4) {
              h.e(t4);
            } finally {
              h.f();
            }
            return null == l ? i : l;
          };
        }, 5879: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            if (null != t3 && "function" == typeof t3.constructor)
              return t3.constructor.name;
          };
        }, 9696: (t2) => {
          "use strict";
          var e2 = /^function\s*([^\s(]+)/;
          t2.exports = function(t3) {
            return t3.name || (t3.toString().trim().match(e2) || [])[1];
          };
        }, 2746: (t2) => {
          "use strict";
          var e2 = "function" == typeof { env: {} }.nextTick ? { env: {} }.nextTick.bind({ env: {} }) : function(t3) {
            return setTimeout(t3, 0);
          };
          t2.exports = function(t3) {
            return e2(t3);
          };
        }, 2423: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            var r2 = t3.discriminatorMapping && t3.discriminatorMapping.value;
            if (r2 && !("sparse" in e2)) {
              var n = t3.options.discriminatorKey;
              e2.partialFilterExpression = e2.partialFilterExpression || {}, e2.partialFilterExpression[n] = r2;
            }
            return e2;
          };
        }, 1199: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            var r2 = Object.keys(t3), n = Object.keys(e2);
            if (r2.length !== n.length)
              return false;
            for (var i = 0; i < r2.length; i++) {
              var o = r2[i];
              if (o !== n[i] || t3[o] !== e2[o])
                return false;
            }
            return true;
          };
        }, 9183: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            return "function" == typeof t3 && t3.constructor && "AsyncFunction" === t3.constructor.name;
          };
        }, 3305: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            return null != t3 && t3._bsontype === e2;
          };
        }, 2497: (t2, e2, r2) => {
          "use strict";
          var n = r2(1243).isMongooseArray;
          t2.exports = function(t3) {
            return null != t3 && (n(t3) || null != t3.$__ || t3.isMongooseBuffer || t3.$isMongooseMap);
          };
        }, 608: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          t2.exports = function(t3) {
            return n.isBuffer(t3) || "[object Object]" === Object.prototype.toString.call(t3);
          };
        }, 2789: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            if (null == t3 || "object" !== e2(t3))
              return false;
            var r2 = Object.getPrototypeOf(t3);
            return !r2 || "Object" === r2.constructor.name;
          };
        }, 542: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            return !!t3 && ("object" === e2(t3) || "function" == typeof t3) && "function" == typeof t3.then;
          };
        }, 6155: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            for (var r2 = Object.keys(t3), n = true, i = 0, o = r2.length; i < o; ++i)
              if ("object" === e2(t3[r2[i]]) && null !== t3[r2[i]]) {
                n = false;
                break;
              }
            return n;
          };
        }, 6451: (t2, e2, r2) => {
          "use strict";
          var n = r2(8768).isPOJO;
          t2.exports = function t3(e3) {
            for (var r3, i, o, a = Object.keys(e3), s = a.length; s--; )
              o = e3[i = a[s]], n(o) && (e3[i] = t3(o)), void 0 !== e3[i] ? r3 = true : delete e3[i];
            return r3 ? e3 : void 0;
          };
        }, 4957: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s = r2(7160), u = r2(5268);
          t2.exports = f, f.middlewareFunctions = ["deleteOne", "save", "validate", "remove", "updateOne", "init"];
          var c = new Set(f.middlewareFunctions.flatMap(function(t3) {
            return [t3, "$__".concat(t3)];
          }));
          function f(t3, e3, r3) {
            var n2 = { useErrorHandlers: true, numCallbackParams: 1, nullResultByDefault: true, contextParameter: true }, i2 = (r3 = r3 || {}).decorateDoc ? t3 : t3.prototype;
            t3.$appliedHooks = true;
            for (var a2 = 0, l = Object.keys(e3.paths); a2 < l.length; a2++) {
              var h = l[a2], p = e3.paths[h], d = null;
              if (p.$isSingleNested)
                d = p.caster;
              else {
                if (!p.$isMongooseDocumentArray)
                  continue;
                d = p.Constructor;
              }
              if (!d.$appliedHooks && (f(d, p.schema, o(o({}, r3), {}, { isChildSchema: true })), null != d.discriminators))
                for (var y = 0, b = Object.keys(d.discriminators); y < b.length; y++) {
                  var m = b[y];
                  f(d.discriminators[m], d.discriminators[m].schema, r3);
                }
            }
            var v = e3.s.hooks.filter(function(t4) {
              return "updateOne" === t4.name || "deleteOne" === t4.name ? !!t4.document : "remove" === t4.name || "init" === t4.name ? null == t4.document || !!t4.document : null == t4.query && null == t4.document || false !== t4.document;
            }).filter(function(t4) {
              return !e3.methods[t4.name] || !t4.fn[s.builtInMiddleware];
            });
            t3._middleware = v, i2.$__originalValidate = i2.$__originalValidate || i2.$__validate;
            for (var g = 0, _ = r3 && r3.isChildSchema ? ["save", "validate", "deleteOne"] : ["save", "validate"]; g < _.length; g++) {
              var w = _[g], S = "validate" === w ? "$__originalValidate" : "$__".concat(w), O = v.createWrapper(w, i2[S], null, n2);
              i2["$__".concat(w)] = O;
            }
            i2.$__init = v.createWrapperSync("init", i2.$__init, null, n2);
            for (var j = Object.keys(e3.methods), $ = Object.assign({}, n2, { checkForPromise: true }), E = function() {
              var e4 = P[A];
              if (c.has(e4))
                return 0;
              if (!v.hasHooks(e4))
                return 0;
              var r4 = i2[e4];
              i2[e4] = function() {
                var r5 = this, n3 = Array.prototype.slice.call(arguments), i3 = n3.slice(-1).pop(), o2 = "function" == typeof i3 ? n3.slice(0, n3.length - 1) : n3;
                return u(i3, function(t4) {
                  return r5["$__".concat(e4)].apply(r5, o2.concat([t4]));
                }, t3.events);
              }, i2["$__".concat(e4)] = v.createWrapper(e4, r4, null, $);
            }, A = 0, P = j; A < P.length; A++)
              E();
          }
        }, 1469: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return s(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? s(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, a2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return a2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, o2 = t4;
            }, f: function() {
              try {
                a2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw o2;
              }
            } };
          }
          function s(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var u = r2(5022), c = r2(8442), f = r2(4450), l = r2(2068).X, h = r2(3703), p = r2(8768), d = r2(4301), y = { toJSON: true, toObject: true, _id: true, id: true, virtuals: true, methods: true };
          t2.exports = function(t3, e3, r3, n2, s2, b, m) {
            if (!r3 || !r3.instanceOfSchema)
              throw new Error("You must pass a valid discriminator Schema");
            if (b = null == b || b, t3.schema.discriminatorMapping && !t3.schema.discriminatorMapping.isRoot)
              throw new Error('Discriminator "' + e3 + '" can only be a discriminator of the root model');
            if (s2) {
              var v = h(t3.base, "options.applyPluginsToDiscriminators", false) || !b;
              t3.base._applyPlugins(r3, { skipTopLevel: !v });
            } else
              b || c(r3);
            var g = t3.schema.options.discriminatorKey, _ = t3.schema.path(g);
            if (null != _)
              p.hasUserDefinedProperty(_.options, "select") || (_.options.select = true), _.options.$skipDiscriminatorCheck = true;
            else {
              var w = {};
              w[g] = { default: void 0, select: true, $skipDiscriminatorCheck: true }, w[g][t3.schema.options.typeKey] = String, t3.schema.add(w), l({ prop: g, prototype: t3.prototype, options: t3.schema.options });
            }
            if (r3.path(g) && true !== r3.path(g).options.$skipDiscriminatorCheck)
              throw new Error('Discriminator "' + e3 + '" cannot have field with name "' + g + '"');
            var S = e3;
            if (("string" == typeof n2 && n2.length || null != n2) && (S = n2), function(e4, r4) {
              e4._baseSchema = r4, r4.paths._id && r4.paths._id.options && !r4.paths._id.options.auto && e4.remove("_id");
              for (var n3 = [], c2 = 0, l2 = Object.keys(r4.paths); c2 < l2.length; c2++) {
                var h2 = l2[c2];
                if (e4.nested[h2])
                  n3.push(h2);
                else if (-1 !== h2.indexOf(".")) {
                  var m2, v2 = "", w2 = a(h2.split(".").slice(0, -1));
                  try {
                    for (w2.s(); !(m2 = w2.n()).done; ) {
                      var O = m2.value;
                      v2 += (v2.length ? "." : "") + O, (e4.paths[v2] instanceof u || e4.singleNestedPaths[v2] instanceof u) && n3.push(h2);
                    }
                  } catch (t4) {
                    w2.e(t4);
                  } finally {
                    w2.f();
                  }
                }
              }
              e4.obj = function(t4) {
                for (var e5 = 1; e5 < arguments.length; e5++) {
                  var r5 = null != arguments[e5] ? arguments[e5] : {};
                  e5 % 2 ? i(Object(r5), true).forEach(function(e6) {
                    o(t4, e6, r5[e6]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t4, Object.getOwnPropertyDescriptors(r5)) : i(Object(r5)).forEach(function(e6) {
                    Object.defineProperty(t4, e6, Object.getOwnPropertyDescriptor(r5, e6));
                  });
                }
                return t4;
              }({}, e4.obj), d(e4, r4), e4._gatherChildSchemas();
              for (var j = 0, $ = n3; j < $.length; j++) {
                var E = $[j];
                delete e4.paths[E];
              }
              e4.childSchemas.forEach(function(t4) {
                t4.model.prototype.$__setSchema(t4.schema);
              });
              var A = {};
              A[g] = { default: S, select: true, set: function(t4) {
                if (t4 === S || Array.isArray(S) && p.deepEqual(t4, S))
                  return S;
                throw new Error(`Can't set discriminator key "` + g + '"');
              }, $skipDiscriminatorCheck: true }, A[g][e4.options.typeKey] = _ ? _.options[e4.options.typeKey] : String, e4.add(A), e4.discriminatorMapping = { key: g, value: S, isRoot: false }, r4.options.collection && (e4.options.collection = r4.options.collection);
              var P = e4.options.toJSON, x = e4.options.toObject, k = e4.options._id, M = e4.options.id, T = Object.keys(e4.options);
              e4.options.discriminatorKey = r4.options.discriminatorKey;
              for (var B = e4._userProvidedOptions, I = 0, R = T; I < R.length; I++) {
                var N = R[I];
                if (!y[N] && N in B && !p.deepEqual(e4.options[N], r4.options[N]))
                  throw new Error("Can't customize discriminator option " + N + " (can only modify " + Object.keys(y).join(", ") + ")");
              }
              e4.options = f(r4.options);
              for (var D = 0, L = Object.keys(B); D < L.length; D++) {
                var C = L[D];
                e4.options[C] = B[C];
              }
              P && (e4.options.toJSON = P), x && (e4.options.toObject = x), void 0 !== k && (e4.options._id = k), e4.options.id = M, b && (e4.s.hooks = t3.schema.s.hooks.merge(e4.s.hooks)), s2 && (e4.plugins = Array.prototype.slice.call(r4.plugins)), e4.callQueue = r4.callQueue.concat(e4.callQueue), delete e4._requiredpaths;
            }(r3, t3.schema), t3.discriminators || (t3.discriminators = {}), t3.schema.discriminatorMapping || (t3.schema.discriminatorMapping = { key: g, value: null, isRoot: true }), t3.schema.discriminators || (t3.schema.discriminators = {}), t3.schema.discriminators[e3] = r3, t3.discriminators[e3] && !r3.options.overwriteModels && !m)
              throw new Error('Discriminator with name "' + e3 + '" already exists');
            return r3;
          };
        }, 7236: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            if (null == t3 || "object" !== e2(t3))
              return t3;
            if (Array.isArray(t3))
              for (var r2 = t3.length - 1; r2 >= 0; --r2)
                void 0 === t3[r2] && t3.splice(r2, 1);
            for (var n = 0, i = Object.keys(t3); n < i.length; n++) {
              var o = i[n];
              void 0 === t3[o] && delete t3[o];
            }
            return t3;
          };
        }, 6223: (t2) => {
          "use strict";
          var e2 = /\./g;
          t2.exports = function(t3) {
            if (-1 === t3.indexOf("."))
              return [t3];
            for (var r2 = t3.split(e2), n = r2.length, i = new Array(n), o = "", a = 0; a < n; ++a)
              o += 0 !== o.length ? "." + r2[a] : r2[a], i[a] = o;
            return i;
          };
        }, 3622: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3, r2, n) {
            if (null == t3)
              return t3;
            if (null != t3._doc && (t3 = t3._doc), arguments.length >= 3) {
              if ("object" !== e2(t3))
                return;
              if (void 0 === n)
                return;
              return t3 instanceof Map ? t3.set(r2, n) : t3[r2] = n, n;
            }
            return "$*" === r2 ? t3 instanceof Map ? Array.from(t3.values()) : Object.keys(t3).map(function(e3) {
              return t3[e3];
            }) : t3 instanceof Map ? t3.get(r2) : t3[r2];
          };
        }, 1849: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var i = r2(8768);
          t2.exports = function(t3, e3) {
            if (null != t3._doc._id && null != e3 && 0 !== e3.length) {
              var r3, o = String(t3._doc._id), a = function(t4, e4) {
                var r4 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                if (!r4) {
                  if (Array.isArray(t4) || (r4 = function(t5, e5) {
                    if (t5) {
                      if ("string" == typeof t5)
                        return n(t5, e5);
                      var r5 = {}.toString.call(t5).slice(8, -1);
                      return "Object" === r5 && t5.constructor && (r5 = t5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(t5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? n(t5, e5) : void 0;
                    }
                  }(t4)) || e4 && t4 && "number" == typeof t4.length) {
                    r4 && (t4 = r4);
                    var i2 = 0, o2 = function() {
                    };
                    return { s: o2, n: function() {
                      return i2 >= t4.length ? { done: true } : { done: false, value: t4[i2++] };
                    }, e: function(t5) {
                      throw t5;
                    }, f: o2 };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var a2, s2 = true, u2 = false;
                return { s: function() {
                  r4 = r4.call(t4);
                }, n: function() {
                  var t5 = r4.next();
                  return s2 = t5.done, t5;
                }, e: function(t5) {
                  u2 = true, a2 = t5;
                }, f: function() {
                  try {
                    s2 || null == r4.return || r4.return();
                  } finally {
                    if (u2)
                      throw a2;
                  }
                } };
              }(e3);
              try {
                for (a.s(); !(r3 = a.n()).done; ) {
                  var s = r3.value;
                  if (!s.isVirtual)
                    for (var u = s.path.split("."), c = 0; c < u.length - 1; ++c) {
                      var f = u.slice(0, c + 1).join("."), l = u.slice(c + 1).join("."), h = t3.get(f);
                      if (null != h && i.isMongooseDocumentArray(h)) {
                        for (var p = 0; p < h.length; ++p)
                          h[p] && h[p].populated(l, null == s._docs[o] ? void 0 : s._docs[o][p], s);
                        break;
                      }
                    }
                }
              } catch (t4) {
                a.e(t4);
              } finally {
                a.f();
              }
            }
          };
        }, 4009: (t2, e2, r2) => {
          "use strict";
          var n = r2(8213), i = r2(5188), o = r2(3622), a = r2(5678), s = r2(7352), u = r2(8768), c = /(\.\d+$|\.\d+\.)/g;
          t2.exports = function(t3, e3, r3, f, l) {
            if (null == t3)
              return [];
            if ("string" == typeof t3 && null != l && i(l, t3))
              throw new n("refPath `" + t3 + "` must not be excluded in projection, got " + s.inspect(l));
            if (c.test(r3)) {
              var h = r3.split(c);
              if ("" === h[h.length - 1])
                throw new Error("Can't populate individual element in an array");
              for (var p = "", d = t3, y = 0; y < h.length; y += 2) {
                var b = h[y];
                if (!d.startsWith(b + ".")) {
                  if (y === h.length - 1) {
                    p += d, d = "";
                    break;
                  }
                  throw new Error("Could not normalize ref path, chunk " + b + " not in populated path");
                }
                p += d.substring(0, b.length) + h[y + 1], d = d.substring(b.length + 1);
              }
              var m = a.get(p, e3, o), v = Array.isArray(m) ? m : [m];
              return u.array.flatten(v);
            }
            var g = a.get(t3, e3, o);
            return null != f && f.virtuals.hasOwnProperty(t3) ? [f.virtuals[t3].applyGetters(void 0, e3)] : Array.isArray(g) ? g : [g];
          };
        }, 7834: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3, r2, n, i) {
            return i.justOne || i.count ? (t3[r2] = Array.isArray(n) ? n[0] : n, "object" !== e2(t3[r2]) && (t3[r2] = i.count ? n : null)) : (t3[r2] = Array.isArray(n) ? n : null == n ? [] : [n], t3[r2] = t3[r2].filter(function(t4) {
              return t4 && "object" === e2(t4);
            })), t3[r2];
          };
        }, 533: (t2, e2, r2) => {
          "use strict";
          var n = r2(8213), i = r2(7352);
          t2.exports = function(t3, e3) {
            if ("string" != typeof t3 && "function" != typeof t3)
              throw new n('Invalid ref at path "' + e3 + '". Got ' + i.inspect(t3, { depth: 0 }));
          };
        }, 6814: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            for (var e2 = {}, r2 = 0, n = Object.keys(t3); r2 < n.length; r2++) {
              var i = n[r2];
              if (-1 !== i.indexOf("."))
                for (var o = i.split("."), a = o[0], s = 0; s < o.length; ++s)
                  e2[a] = 1, s + 1 < o.length && (a = a + "." + o[s + 1]);
              else
                e2[i] = 1;
            }
            return e2;
          };
        }, 7300: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            return null == t3 || "object" !== e2(t3) || !("$meta" in t3) && !("$slice" in t3);
          };
        }, 1793: (t2, e2, r2) => {
          "use strict";
          var n = r2(7300), i = r2(2789);
          t2.exports = function t3(e3) {
            if (null == e3)
              return null;
            var r3 = Object.keys(e3), o = null;
            if (1 === r3.length && "_id" === r3[0])
              o = !e3._id;
            else
              for (var a = 0; a < r3.length; ++a) {
                var s, u = r3[a];
                if ("_id" !== u && n(e3[u]) && null != (o = i(e3[u]) ? null !== (s = t3(e3[u])) && void 0 !== s ? s : o : !e3[u]))
                  break;
              }
            return o;
          };
        }, 1091: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            return null != t3 && "object" === e2(t3) && null == t3.$slice && null == t3.$elemMatch && null == t3.$meta && null == t3.$;
          };
        }, 5188: (t2, e2, r2) => {
          "use strict";
          var n = r2(7300);
          t2.exports = function(t3, e3) {
            if (null == t3)
              return false;
            if ("_id" === e3)
              return 0 === t3._id;
            for (var r3 = null, i = 0, o = Object.keys(t3); i < o.length; i++) {
              var a = o[i];
              if (n(t3[a])) {
                r3 = 1 === t3[e3] ? "inclusive" : "exclusive";
                break;
              }
            }
            return "inclusive" === r3 ? 1 !== t3[e3] : "exclusive" === r3 && 0 === t3[e3];
          };
        }, 6665: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            for (var r2, n, i, o = e2.split("."), a = "", s = 0; s < o.length; ++s)
              if (t3[a += a.length ? "." : "" + o[s]]) {
                for (i = (n = Object.keys(t3)).length, r2 = 0; r2 < i; ++r2)
                  0 !== n[s].indexOf(a + ".") || n[s].indexOf(e2);
                return true;
              }
            return false;
          };
        }, 5268: (t2, e2, r2) => {
          "use strict";
          var n = r2(2746), i = Symbol("mongoose#emitted");
          t2.exports = function(t3, e3, o, a) {
            if ("function" == typeof t3)
              try {
                return e3(function(e4) {
                  if (null == e4)
                    t3.apply(this, arguments);
                  else {
                    null != o && null != o.listeners && o.listeners("error").length > 0 && !e4[i] && (e4[i] = true, o.emit("error", e4));
                    try {
                      t3(e4);
                    } catch (e5) {
                      return n(function() {
                        throw e5;
                      });
                    }
                  }
                });
              } catch (e4) {
                return null != o && null != o.listeners && o.listeners("error").length > 0 && !e4[i] && (e4[i] = true, o.emit("error", e4)), t3(e4);
              }
            return new (a = a || r2.g.Promise)(function(t4, r3) {
              e3(function(e4, n2) {
                return null != e4 ? (null != o && null != o.listeners && o.listeners("error").length > 0 && !e4[i] && (e4[i] = true, o.emit("error", e4)), r3(e4)) : arguments.length > 2 ? t4(Array.prototype.slice.call(arguments, 1)) : void t4(n2);
              });
            });
          };
        }, 170: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(3609), o = r2(8995), a = r2(7768), s = r2(7236), u = /* @__PURE__ */ new Set(["$and", "$or"]), c = /* @__PURE__ */ new Set(["$cmp", "$eq", "$lt", "$lte", "$gt", "$gte"]), f = /* @__PURE__ */ new Set(["$multiply", "$divide", "$log", "$mod", "$trunc", "$avg", "$max", "$min", "$stdDevPop", "$stdDevSamp", "$sum"]), l = /* @__PURE__ */ new Set(["$abs", "$exp", "$ceil", "$floor", "$ln", "$log10", "$sqrt", "$sin", "$cos", "$tan", "$asin", "$acos", "$atan", "$atan2", "$asinh", "$acosh", "$atanh", "$sinh", "$cosh", "$tanh", "$degreesToRadians", "$radiansToDegrees"]), h = /* @__PURE__ */ new Set(["$arrayElemAt", "$first", "$last"]), p = /* @__PURE__ */ new Set(["$year", "$month", "$week", "$dayOfMonth", "$dayOfYear", "$hour", "$minute", "$second", "$isoDayOfWeek", "$isoWeekYear", "$isoWeek", "$millisecond"]), d = /* @__PURE__ */ new Set(["$not"]);
          function y(t3, e3, r3) {
            if (g(t3) || null === t3)
              return t3;
            null != t3.$cond ? Array.isArray(t3.$cond) ? t3.$cond = t3.$cond.map(function(t4) {
              return y(t4, e3, r3);
            }) : (t3.$cond.if = y(t3.$cond.if, e3, r3), t3.$cond.then = y(t3.$cond.then, e3, r3), t3.$cond.else = y(t3.$cond.else, e3, r3)) : null != t3.$ifNull ? t3.$ifNull.map(function(t4) {
              return y(t4, e3, r3);
            }) : null != t3.$switch && (Array.isArray(t3.$switch.branches) && (t3.$switch.branches = t3.$switch.branches.map(function(t4) {
              return y(t4, e3, r3);
            })), "default" in t3.$switch && (t3.$switch.default = y(t3.$switch.default, e3, r3)));
            for (var n2 = 0, a2 = Object.keys(t3); n2 < a2.length; n2++) {
              var h2 = a2[n2];
              u.has(h2) ? t3[h2] = t3[h2].map(function(t4) {
                return y(t4, e3, r3);
              }) : c.has(h2) ? t3[h2] = v(t3[h2], e3, r3) : f.has(h2) ? t3[h2] = m(t3[h2]) : l.has(h2) ? t3[h2] = b(t3[h2]) : d.has(h2) && (t3[h2] = y(t3[h2], e3, r3));
            }
            if (t3.$in && (t3.$in = function(t4, e4, r4) {
              var n3 = t4[1];
              if (!g(n3))
                return t4;
              var i2 = t4[0], a3 = e4.path(n3.slice(1));
              if (null !== a3) {
                if (!a3.$isMongooseArray)
                  throw new Error("Path must be an array for $in");
                return [a3.$isMongooseDocumentArray ? a3.$embeddedSchemaType.cast(i2) : a3.caster.cast(i2), n3];
              }
              if (false === r4)
                return t4;
              if ("throw" === r4)
                throw new o("$in");
            }(t3.$in, e3, r3)), t3.$size && (t3.$size = b(t3.$size)), t3.$round) {
              var p2 = t3.$round;
              if (!Array.isArray(p2) || p2.length < 1 || p2.length > 2)
                throw new i("Array", p2, "$round");
              t3.$round = p2.map(function(t4) {
                return b(t4);
              });
            }
            return s(t3), t3;
          }
          function b(t3) {
            if (!_(t3))
              return t3;
            try {
              return a(t3);
            } catch (e3) {
              throw new i("Number", t3);
            }
          }
          function m(t3) {
            if (!Array.isArray(t3)) {
              if (!_(t3))
                return t3;
              try {
                return a(t3);
              } catch (e3) {
                throw new i("Number", t3);
              }
            }
            return t3.map(function(t4) {
              if (!_(t4))
                return t4;
              try {
                return a(t4);
              } catch (e3) {
                throw new i("Number", t4);
              }
            });
          }
          function v(t3, e3, r3) {
            if (!Array.isArray(t3) || 2 !== t3.length)
              throw new Error("Comparison operator must be an array of length 2");
            t3[0] = y(t3[0], e3, r3);
            var s2 = t3[0];
            if (_(t3[1])) {
              var u2 = null, c2 = null, f2 = null;
              if (g(s2))
                u2 = s2.slice(1), c2 = e3.path(u2);
              else if ("object" === n(s2) && null != s2)
                for (var l2 = 0, d2 = Object.keys(s2); l2 < d2.length; l2++) {
                  var b2 = d2[l2];
                  p.has(b2) && g(s2[b2]) ? (u2 = s2[b2].slice(1) + "." + b2, f2 = a) : h.has(b2) && g(s2[b2]) && (u2 = s2[b2].slice(1) + "." + b2, null != (c2 = e3.path(s2[b2].slice(1))) && (c2.$isMongooseDocumentArray ? c2 = c2.$embeddedSchemaType : c2.$isMongooseArray && (c2 = c2.caster)));
                }
              var m2 = "object" === n(t3[1]) && null != t3[1] && null != t3[1].$literal;
              if (null != c2)
                t3[1] = m2 ? { $literal: c2.cast(t3[1].$literal) } : c2.cast(t3[1]);
              else if (null != f2)
                if (m2)
                  try {
                    t3[1] = { $literal: f2(t3[1].$literal) };
                  } catch (e4) {
                    throw new i(f2.name.replace(/^cast/, ""), t3[1], u2 + ".$literal");
                  }
                else
                  try {
                    t3[1] = f2(t3[1]);
                  } catch (e4) {
                    throw new i(f2.name.replace(/^cast/, ""), t3[1], u2);
                  }
              else {
                if (null != u2 && true === r3)
                  return;
                if (null != u2 && "throw" === r3)
                  throw new o(u2);
              }
            } else
              t3[1] = y(t3[1]);
            return t3;
          }
          function g(t3) {
            return "string" == typeof t3 && "$" === t3[0];
          }
          function _(t3) {
            return !("string" == typeof t3 && "$" === t3[0] || "object" === n(t3) && null !== t3 && Object.keys(t3).find(function(t4) {
              return "$" === t4[0];
            }) && null == t3.$literal);
          }
          t2.exports = function(t3, e3, r3) {
            if ("object" !== n(t3) || null === t3)
              throw new Error("`$expr` must be an object");
            return y(t3, e3, r3);
          };
        }, 5289: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            switch (t3) {
              case "p":
                t3 = "primary";
                break;
              case "pp":
                t3 = "primaryPreferred";
                break;
              case "s":
                t3 = "secondary";
                break;
              case "sp":
                t3 = "secondaryPreferred";
                break;
              case "n":
                t3 = "nearest";
            }
            return t3;
          };
        }, 5110: (t2) => {
          "use strict";
          var e2 = /* @__PURE__ */ new Set(["$ref", "$id", "$db"]);
          t2.exports = function(t3) {
            return "$" === t3[0] && !e2.has(t3);
          };
        }, 7291: (t2, e2) => {
          "use strict";
          function r2(t3) {
            return r2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, r2(t3);
          }
          var n = Symbol("mongoose#trustedSymbol");
          e2.trustedSymbol = n, e2.trusted = function(t3) {
            return null == t3 || "object" !== r2(t3) || (t3[n] = true), t3;
          };
        }, 486: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            var e2 = { _id: { auto: true } };
            e2._id[t3.options.typeKey] = "ObjectId", t3.add(e2);
          };
        }, 8442: (t2, e2, r2) => {
          "use strict";
          var n = r2(1898);
          t2.exports = function(t3) {
            for (var e3 = 0, r3 = Object.values(n); e3 < r3.length; e3++)
              (0, r3[e3])(t3, { deduplicate: true });
            t3.plugins = Object.values(n).map(function(t4) {
              return { fn: t4, opts: { deduplicate: true } };
            }).concat(t3.plugins);
          };
        }, 8759: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            return t3.replace(/\.\$(\[[^\]]*\])?(?=\.)/g, ".0").replace(/\.\$(\[[^\]]*\])?$/g, ".0");
          };
        }, 2003: (t2, e2, r2) => {
          "use strict";
          var n = r2(3703), i = r2(608), o = r2(2423);
          t2.exports = function(t3) {
            var e3 = [], r3 = /* @__PURE__ */ new WeakMap(), a = t3.constructor.indexTypes, s = /* @__PURE__ */ new Map();
            return function t4(u, c, f) {
              if (!r3.has(u)) {
                r3.set(u, true), c = c || "";
                for (var l = 0, h = Object.keys(u.paths); l < h.length; l++) {
                  var p = h[l], d = u.paths[p];
                  if (null == f || !f.paths[p]) {
                    if (null != d._duplicateKeyErrorMessage && (u._duplicateKeyErrorMessagesByPath = u._duplicateKeyErrorMessagesByPath || {}, u._duplicateKeyErrorMessagesByPath[p] = d._duplicateKeyErrorMessage), d.$isMongooseDocumentArray || d.$isSingleNested) {
                      if (true !== n(d, "options.excludeIndexes") && true !== n(d, "schemaOptions.excludeIndexes") && true !== n(d, "schema.options.excludeIndexes") && t4(d.schema, c + p + "."), null != d.schema.discriminators)
                        for (var y = d.schema.discriminators, b = 0, m = Object.keys(y); b < m.length; b++) {
                          t4(y[m[b]], c + p + ".", d.schema);
                        }
                      if (d.$isMongooseDocumentArray)
                        continue;
                    }
                    var v = d._index || d.caster && d.caster._index;
                    if (false !== v && null != v) {
                      var g = {}, _ = i(v), w = _ ? v : {}, S = "string" == typeof v ? v : !!_ && v.type;
                      if (S && -1 !== a.indexOf(S))
                        g[c + p] = S;
                      else if (w.text)
                        g[c + p] = "text", delete w.text;
                      else {
                        var O;
                        O = "descending" === v || "desc" === v || "ascending" !== v && "asc" !== v && -1 === Number(v), g[c + p] = O ? -1 : 1;
                      }
                      delete w.type, "background" in w || (w.background = true), null != u.options.autoIndex && (w._autoIndex = u.options.autoIndex);
                      var j = w && w.name;
                      "string" == typeof j && s.has(j) ? Object.assign(s.get(j), g) : (e3.push([g, w]), s.set(j, g));
                    }
                  }
                }
                r3.delete(u), c ? function(t5, r4) {
                  for (var n2 = t5._indexes, i2 = n2.length, o2 = 0; o2 < i2; ++o2) {
                    for (var a2 = n2[o2][0], s2 = n2[o2][1], u2 = Object.keys(a2), c2 = u2.length, f2 = {}, l2 = 0; l2 < c2; ++l2) {
                      var h2 = u2[l2];
                      f2[r4 + h2] = a2[h2];
                    }
                    var p2 = Object.assign({}, s2);
                    if (null != s2 && null != s2.partialFilterExpression) {
                      p2.partialFilterExpression = {};
                      for (var d2 = s2.partialFilterExpression, y2 = 0, b2 = Object.keys(d2); y2 < b2.length; y2++) {
                        var m2 = b2[y2];
                        p2.partialFilterExpression[r4 + m2] = d2[m2];
                      }
                    }
                    e3.push([f2, p2]);
                  }
                }(u, c) : (u._indexes.forEach(function(t5) {
                  var e4 = t5[1];
                  "background" in e4 || (e4.background = true), o(u, e4);
                }), e3 = e3.concat(u._indexes));
              }
            }(t3), e3;
          };
        }, 791: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return i(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? i(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a, s = true, u = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s = t4.done, t4;
            }, e: function(t4) {
              u = true, a = t4;
            }, f: function() {
              try {
                s || null == r3.return || r3.return();
              } finally {
                if (u)
                  throw a;
              }
            } };
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var o = r2(3703);
          t2.exports = function(t3, e3, r3) {
            var i2, a = null != r3 ? Object.keys(o(t3.tree, r3, {})) : Object.keys(t3.tree), s = new Set(Object.keys(e3));
            if (s.size > 1) {
              i2 = /* @__PURE__ */ new Set();
              var u, c = n(a);
              try {
                for (c.s(); !(u = c.n()).done; ) {
                  var f = u.value;
                  s.has(f) && i2.add(f);
                }
              } catch (t4) {
                c.e(t4);
              } finally {
                c.f();
              }
              var l, h = n(s);
              try {
                for (h.s(); !(l = h.n()).done; ) {
                  var p = l.value;
                  i2.has(p) || i2.add(p);
                }
              } catch (t4) {
                h.e(t4);
              } finally {
                h.f();
              }
              i2 = Array.from(i2);
            } else
              i2 = Array.from(s);
            return i2;
          };
        }, 2692: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            if (1 !== e2.length) {
              for (var r2 = e2[0], n = void 0, i = 0; i < e2.length - 1; ++i) {
                var o = t3.path(r2);
                o && o.schema ? (n = o.schema.options.strict, t3 = o.schema, r2 = o.$isMongooseDocumentArray && !isNaN(e2[i + 1]) ? "" : e2[i + 1]) : r2 += r2.length ? "." + e2[i + 1] : e2[i + 1];
              }
              return n;
            }
          };
        }, 3694: (t2, e2, r2) => {
          "use strict";
          var n = r2(486);
          t2.exports = function(t3, e3) {
            return null == e3 || null == e3._id || (t3 = t3.clone(), e3._id ? t3.paths._id || (n(t3), t3.options._id = true) : (t3.remove("_id"), t3.options._id = false)), t3;
          };
        }, 3696: (t2) => {
          "use strict";
          t2.exports = function(t3, e2) {
            return null == t3 ? null : "boolean" == typeof t3 ? e2 : "boolean" == typeof t3[e2] ? t3[e2] ? e2 : null : e2 in t3 ? t3[e2] : e2;
          };
        }, 3381: (t2) => {
          "use strict";
          function e2() {
            return null != this._id ? this._id.toString() : null;
          }
          t2.exports = function(t3) {
            return !t3.paths.id && t3.paths._id && t3.options.id ? (t3.aliases && t3.aliases.id || t3.virtual("id").get(e2), t3) : t3;
          };
        }, 9539: (t2) => {
          "use strict";
          function e2(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r2 = 0, n = Array(e3); r2 < e3; r2++)
              n[r2] = t3[r2];
            return n;
          }
          t2.exports = function(t3, r2, n) {
            for (var i = {}, o = 0, a = Object.keys(r2.tree); o < a.length; o++) {
              var s = a[o];
              n && (t3.paths[s] || t3.nested[s] || t3.singleNestedPaths[s]) || (i[s] = r2.tree[s]);
            }
            t3.options._isMerging = true, t3.add(i, null), delete t3.options._isMerging, t3.callQueue = t3.callQueue.concat(r2.callQueue), t3.method(r2.methods), t3.static(r2.statics);
            for (var u = 0, c = Object.entries(r2._userProvidedOptions); u < c.length; u++) {
              var f = (p = c[u], d = 2, function(t4) {
                if (Array.isArray(t4))
                  return t4;
              }(p) || function(t4, e3) {
                var r3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                if (null != r3) {
                  var n2, i2, o2, a2, s2 = [], u2 = true, c2 = false;
                  try {
                    if (o2 = (r3 = r3.call(t4)).next, 0 === e3) {
                      if (Object(r3) !== r3)
                        return;
                      u2 = false;
                    } else
                      for (; !(u2 = (n2 = o2.call(r3)).done) && (s2.push(n2.value), s2.length !== e3); u2 = true)
                        ;
                  } catch (t5) {
                    c2 = true, i2 = t5;
                  } finally {
                    try {
                      if (!u2 && null != r3.return && (a2 = r3.return(), Object(a2) !== a2))
                        return;
                    } finally {
                      if (c2)
                        throw i2;
                    }
                  }
                  return s2;
                }
              }(p, d) || function(t4, r3) {
                if (t4) {
                  if ("string" == typeof t4)
                    return e2(t4, r3);
                  var n2 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === n2 && t4.constructor && (n2 = t4.constructor.name), "Map" === n2 || "Set" === n2 ? Array.from(t4) : "Arguments" === n2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? e2(t4, r3) : void 0;
                }
              }(p, d) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }()), l = f[0], h = f[1];
              l in t3._userProvidedOptions || t3.set(l, h);
            }
            var p, d;
            for (var y in r2.query)
              t3.query[y] = r2.query[y];
            for (var b in r2.virtuals)
              t3.virtuals[b] = r2.virtuals[b].clone();
            t3._indexes = t3._indexes.concat(r2._indexes || []), t3.s.hooks.merge(r2.s.hooks, false);
          };
        }, 8133: (t2, e2, r2) => {
          "use strict";
          var n = r2(8995);
          t2.exports = function(t3) {
            var e3, r3;
            t3.$immutable ? (t3.$immutableSetter = (e3 = t3.path, r3 = t3.options.immutable, function(t4, i, o, a) {
              if (null == this || null == this.$__)
                return t4;
              if (this.isNew)
                return t4;
              if (a && a.overwriteImmutable)
                return t4;
              if (!("function" == typeof r3 ? r3.call(this, this) : r3))
                return t4;
              var s = null != this.$__.priorDoc ? this.$__.priorDoc.$__getValue(e3) : this.$__getValue(e3);
              if ("throw" === this.$__.strictMode && t4 !== s)
                throw new n(e3, "Path `" + e3 + "` is immutable and strict mode is set to throw.", true);
              return s;
            }), t3.set(t3.$immutableSetter)) : t3.$immutableSetter && (t3.setters = t3.setters.filter(function(e4) {
              return e4 !== t3.$immutableSetter;
            }), delete t3.$immutableSetter);
          };
        }, 2793: (t2) => {
          "use strict";
          t2.exports = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
        }, 7930: (t2, e2) => {
          "use strict";
          e2.arrayAtomicsBackupSymbol = Symbol("mongoose#Array#atomicsBackup"), e2.arrayAtomicsSymbol = Symbol("mongoose#Array#_atomics"), e2.arrayParentSymbol = Symbol("mongoose#Array#_parent"), e2.arrayPathSymbol = Symbol("mongoose#Array#_path"), e2.arraySchemaSymbol = Symbol("mongoose#Array#_schema"), e2.documentArrayParent = Symbol("mongoose#documentArrayParent"), e2.documentIsSelected = Symbol("mongoose#Document#isSelected"), e2.documentIsModified = Symbol("mongoose#Document#isModified"), e2.documentModifiedPaths = Symbol("mongoose#Document#modifiedPaths"), e2.documentSchemaSymbol = Symbol("mongoose#Document#schema"), e2.getSymbol = Symbol("mongoose#Document#get"), e2.modelSymbol = Symbol("mongoose#Model"), e2.objectIdSymbol = Symbol("mongoose#ObjectId"), e2.populateModelSymbol = Symbol("mongoose#PopulateOptions#Model"), e2.schemaTypeSymbol = Symbol("mongoose#schemaType"), e2.sessionNewDocuments = Symbol("mongoose#ClientSession#newDocuments"), e2.scopeSymbol = Symbol("mongoose#Document#scope"), e2.validatorErrorSymbol = Symbol("mongoose#validatorError");
        }, 1505: (t2) => {
          "use strict";
          t2.exports = function(t3, e2, r2, n, i) {
            var o = null != e2 && false === e2.updatedAt, a = null != e2 && false === e2.createdAt, s = null != r2 ? r2() : t3.ownerDocument().constructor.base.now();
            if (!a && (t3.isNew || t3.$isSubdocument) && n && !t3.$__getValue(n) && t3.$__isSelected(n) && t3.$set(n, s, void 0, { overwriteImmutable: true }), !o && i && (t3.isNew || t3.$isModified())) {
              var u = s;
              t3.isNew && null != n && (u = t3.$__getValue(n)), t3.$set(i, u);
            }
          };
        }, 2097: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var a = r2(9166), s = r2(1824), u = r2(3703), c = r2(3696), f = r2(1505), l = r2(7160), h = /* @__PURE__ */ new Set(["replaceOne", "findOneAndReplace"]);
          t2.exports = function(t3, e3) {
            var r3 = t3.childSchemas.find(function(t4) {
              return !!t4.schema.options.timestamps;
            });
            if (e3 || r3) {
              var n2 = c(e3, "createdAt"), p = c(e3, "updatedAt"), d = null != e3 && e3.hasOwnProperty("currentTime") ? e3.currentTime : null, y = {};
              if (t3.$timestamps = { createdAt: n2, updatedAt: p }, n2 && !t3.paths[n2]) {
                var b = null != t3.base ? t3.base.get("timestamps.createdAt.immutable") : null, m = null == b || b;
                y[n2] = o(o({}, t3.options.typeKey || "type", Date), "immutable", m);
              }
              p && !t3.paths[p] && (y[p] = Date), t3.add(y), t3.pre("save", function(t4) {
                var e4 = u(this, "$__.saveOptions.timestamps");
                if (false === e4)
                  return t4();
                f(this, e4, d, n2, p), t4();
              }), t3.methods.initializeTimestamps = function() {
                var t4 = null != d ? d() : this.constructor.base.now();
                if (n2 && !this.get(n2) && this.$set(n2, t4), p && !this.get(p) && this.$set(p, t4), this.$isSubdocument)
                  return this;
                var e4, r4 = function(t5, e5) {
                  var r5 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                  if (!r5) {
                    if (Array.isArray(t5) || (r5 = function(t6, e6) {
                      if (t6) {
                        if ("string" == typeof t6)
                          return i(t6, e6);
                        var r6 = {}.toString.call(t6).slice(8, -1);
                        return "Object" === r6 && t6.constructor && (r6 = t6.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(t6) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? i(t6, e6) : void 0;
                      }
                    }(t5)) || e5 && t5 && "number" == typeof t5.length) {
                      r5 && (t5 = r5);
                      var n3 = 0, o3 = function() {
                      };
                      return { s: o3, n: function() {
                        return n3 >= t5.length ? { done: true } : { done: false, value: t5[n3++] };
                      }, e: function(t6) {
                        throw t6;
                      }, f: o3 };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  var a2, s2 = true, u2 = false;
                  return { s: function() {
                    r5 = r5.call(t5);
                  }, n: function() {
                    var t6 = r5.next();
                    return s2 = t6.done, t6;
                  }, e: function(t6) {
                    u2 = true, a2 = t6;
                  }, f: function() {
                    try {
                      s2 || null == r5.return || r5.return();
                    } finally {
                      if (u2)
                        throw a2;
                    }
                  } };
                }(this.$getAllSubdocs());
                try {
                  for (r4.s(); !(e4 = r4.n()).done; ) {
                    var o2 = e4.value;
                    o2.initializeTimestamps && o2.initializeTimestamps();
                  }
                } catch (t5) {
                  r4.e(t5);
                } finally {
                  r4.f();
                }
                return this;
              }, g[l.builtInMiddleware] = true;
              var v = { query: true, model: false };
              t3.pre("findOneAndReplace", v, g), t3.pre("findOneAndUpdate", v, g), t3.pre("replaceOne", v, g), t3.pre("update", v, g), t3.pre("updateOne", v, g), t3.pre("updateMany", v, g);
            }
            function g(t4) {
              var e4 = null != d ? d() : this.model.base.now();
              h.has(this.op) && null == this.getUpdate() && this.setUpdate({}), s(e4, n2, p, this.getUpdate(), this._mongooseOptions, h.has(this.op)), a(e4, this.getUpdate(), this.model.schema), t4();
            }
          };
        }, 2900: (t2, e2, r2) => {
          "use strict";
          var n = r2(5879);
          t2.exports = function(t3) {
            if ("TopologyDescription" !== n(t3))
              return false;
            var e3 = Array.from(t3.servers.values());
            return e3.length > 0 && e3.every(function(t4) {
              return "Unknown" === t4.type;
            });
          };
        }, 4070: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var i = r2(5879);
          t2.exports = function(t3) {
            if ("TopologyDescription" !== i(t3))
              return false;
            if (0 === t3.servers.size)
              return false;
            var e3, r3 = function(t4, e4) {
              var r4 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (!r4) {
                if (Array.isArray(t4) || (r4 = function(t5, e5) {
                  if (t5) {
                    if ("string" == typeof t5)
                      return n(t5, e5);
                    var r5 = {}.toString.call(t5).slice(8, -1);
                    return "Object" === r5 && t5.constructor && (r5 = t5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(t5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? n(t5, e5) : void 0;
                  }
                }(t4)) || e4 && t4 && "number" == typeof t4.length) {
                  r4 && (t4 = r4);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= t4.length ? { done: true } : { done: false, value: t4[i2++] };
                  }, e: function(t5) {
                    throw t5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a, s = true, u = false;
              return { s: function() {
                r4 = r4.call(t4);
              }, n: function() {
                var t5 = r4.next();
                return s = t5.done, t5;
              }, e: function(t5) {
                u = true, a = t5;
              }, f: function() {
                try {
                  s || null == r4.return || r4.return();
                } finally {
                  if (u)
                    throw a;
                }
              } };
            }(t3.servers.values());
            try {
              for (r3.s(); !(e3 = r3.n()).done; ) {
                var o = e3.value;
                if (false === o.host.endsWith(".mongodb.net") || 27017 !== o.port)
                  return false;
              }
            } catch (t4) {
              r3.e(t4);
            } finally {
              r3.f();
            }
            return true;
          };
        }, 5497: (t2, e2, r2) => {
          "use strict";
          var n = r2(5879);
          t2.exports = function(t3) {
            if ("TopologyDescription" !== n(t3))
              return false;
            var e3 = Array.from(t3.servers.values());
            return e3.length > 0 && e3.every(function(t4) {
              return t4.error && -1 !== t4.error.message.indexOf("Client network socket disconnected before secure TLS connection was established");
            });
          };
        }, 9166: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return i(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? i(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var o = r2(8759), a = r2(3696);
          function s(t3, e3, r3) {
            if (null != e3) {
              var i2 = Object.keys(e3).some(function(t4) {
                return "$" === t4[0];
              });
              if (i2) {
                if (e3.$push && v(e3.$push), e3.$addToSet && v(e3.$addToSet), null != e3.$set)
                  for (var o2 = 0, c = Object.keys(e3.$set); o2 < c.length; o2++) {
                    var f = c[o2];
                    u(r3, f, e3.$set, t3);
                  }
                if (null != e3.$setOnInsert)
                  for (var l = 0, h = Object.keys(e3.$setOnInsert); l < h.length; l++) {
                    var p = h[l];
                    u(r3, p, e3.$setOnInsert, t3);
                  }
              }
              var d, y = Object.keys(e3).filter(function(t4) {
                return "$" !== t4[0];
              }), b = n(y);
              try {
                for (b.s(); !(d = b.n()).done; ) {
                  var m = d.value;
                  u(r3, m, e3, t3);
                }
              } catch (t4) {
                b.e(t4);
              } finally {
                b.f();
              }
            }
            function v(e4) {
              for (var n2 = function() {
                var n3 = o3[i3], u2 = r3.path(n3.replace(/\.\$\./i, ".").replace(/.\$$/, ""));
                if (e4[n3] && u2 && u2.$isMongooseDocumentArray && u2.schema.options.timestamps) {
                  var c2 = u2.schema.options.timestamps, f2 = a(c2, "createdAt"), l2 = a(c2, "updatedAt");
                  e4[n3].$each ? e4[n3].$each.forEach(function(e5) {
                    null != l2 && (e5[l2] = t3), null != f2 && (e5[f2] = t3), s(t3, e5, u2.schema);
                  }) : (null != l2 && (e4[n3][l2] = t3), null != f2 && (e4[n3][f2] = t3), s(t3, e4[n3], u2.schema));
                }
              }, i3 = 0, o3 = Object.keys(e4); i3 < o3.length; i3++)
                n2();
            }
          }
          function u(t3, e3, r3, i2) {
            var u2 = o(e3), c = t3.path(u2);
            if (c) {
              for (var f = [], l = u2.split("."), h = l.length - 1; h > 0; --h) {
                var p = t3.path(l.slice(0, h).join("."));
                null != p && (p.$isMongooseDocumentArray || p.$isSingleNested) && f.push({ parentPath: e3.split(".").slice(0, h).join("."), parentSchemaType: p });
              }
              if (Array.isArray(r3[e3]) && c.$isMongooseDocumentArray)
                !function(t4, e4, r4) {
                  var n2 = e4.schema.options.timestamps, i3 = t4.length;
                  if (n2)
                    for (var o2 = a(n2, "createdAt"), u3 = a(n2, "updatedAt"), c2 = 0; c2 < i3; ++c2)
                      null != u3 && (t4[c2][u3] = r4), null != o2 && (t4[c2][o2] = r4), s(r4, t4[c2], e4.schema);
                  else
                    for (var f2 = 0; f2 < i3; ++f2)
                      s(r4, t4[f2], e4.schema);
                }(r3[e3], c, i2);
              else if (r3[e3] && c.$isSingleNested)
                !function(t4, e4, r4) {
                  var n2 = e4.schema.options.timestamps;
                  if (n2) {
                    var i3 = a(n2, "createdAt"), o2 = a(n2, "updatedAt");
                    null != o2 && (t4[o2] = r4), null != i3 && (t4[i3] = r4), s(r4, t4, e4.schema);
                  } else
                    s(r4, t4, e4.schema);
                }(r3[e3], c, i2);
              else if (f.length > 0) {
                var d, y = n(f);
                try {
                  for (y.s(); !(d = y.n()).done; ) {
                    var b = d.value, m = b.parentPath, v = b.parentSchemaType, g = v.schema.options.timestamps, _ = a(g, "updatedAt");
                    if (g && null != _) {
                      if (v.$isSingleNested)
                        r3[m + "." + _] = i2;
                      else if (v.$isMongooseDocumentArray) {
                        var w = e3.substring(m.length + 1);
                        if (/^\d+$/.test(w)) {
                          r3[m + "." + w][_] = i2;
                          continue;
                        }
                        var S = w.indexOf(".");
                        r3[m + "." + (w = -1 !== S ? w.substring(0, S) : w) + "." + _] = i2;
                      }
                    }
                  }
                } catch (t4) {
                  y.e(t4);
                } finally {
                  y.f();
                }
              } else if (null != c.schema && c.schema != t3 && r3[e3]) {
                var O = c.schema.options.timestamps, j = a(O, "createdAt"), $ = a(O, "updatedAt");
                if (!O)
                  return;
                null != $ && (r3[e3][$] = i2), null != j && (r3[e3][j] = i2);
              }
            }
          }
          t2.exports = s;
        }, 1824: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(3703);
          t2.exports = function(t3, e3, r3, o, a, s) {
            var u = o, c = u, f = i(a, "timestamps", true);
            if (!f || null == u)
              return o;
            var l, h, p, d = null != f && false === f.createdAt, y = null != f && false === f.updatedAt;
            if (s)
              return o && o.$set && (o = o.$set, u.$set = {}, c = u.$set), y || !r3 || o[r3] || (c[r3] = t3), d || !e3 || o[e3] || (c[e3] = t3), u;
            if (o = o || {}, Array.isArray(u))
              return null == r3 || u.push({ $set: (l = {}, h = r3, p = t3, (h = function(t4) {
                var e4 = function(t5) {
                  if ("object" != n(t5) || !t5)
                    return t5;
                  var e5 = t5[Symbol.toPrimitive];
                  if (void 0 !== e5) {
                    var r4 = e5.call(t5, "string");
                    if ("object" != n(r4))
                      return r4;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return String(t5);
                }(t4);
                return "symbol" == n(e4) ? e4 : e4 + "";
              }(h)) in l ? Object.defineProperty(l, h, { value: p, enumerable: true, configurable: true, writable: true }) : l[h] = p, l) }), u;
            if (u.$set = u.$set || {}, !y && r3 && (!o.$currentDate || !o.$currentDate[r3])) {
              var b = false;
              if (-1 !== r3.indexOf("."))
                for (var m = r3.split("."), v = 1; v < m.length; ++v) {
                  var g = m.slice(-v).join("."), _ = m.slice(0, -v).join(".");
                  if (null != o[_]) {
                    o[_][g] = t3, b = true;
                    break;
                  }
                  if (o.$set && o.$set[_]) {
                    o.$set[_][g] = t3, b = true;
                    break;
                  }
                }
              b || (u.$set[r3] = t3), u.hasOwnProperty(r3) && delete u[r3];
            }
            if (!d && e3) {
              o[e3] && delete o[e3], o.$set && o.$set[e3] && delete o.$set[e3];
              var w = false;
              if (-1 !== e3.indexOf("."))
                for (var S = e3.split("."), O = 1; O < S.length; ++O) {
                  var j = S.slice(-O).join("."), $ = S.slice(0, -O).join(".");
                  if (null != o[$]) {
                    o[$][j] = t3, w = true;
                    break;
                  }
                  if (o.$set && o.$set[$]) {
                    o.$set[$][j] = t3, w = true;
                    break;
                  }
                }
              w || (u.$setOnInsert = u.$setOnInsert || {}, u.$setOnInsert[e3] = t3);
            }
            return 0 === Object.keys(u.$set).length && delete u.$set, u;
          };
        }, 4224: (t2, e2, r2) => {
          "use strict";
          var n = r2(6511).ctor("require", "modify", "init", "default", "ignore");
          function i() {
            this.activePaths = new n();
          }
          t2.exports = i, i.prototype.strictMode = true, i.prototype.fullPath = void 0, i.prototype.selected = void 0, i.prototype.shardval = void 0, i.prototype.saveError = void 0, i.prototype.validationError = void 0, i.prototype.adhocPaths = void 0, i.prototype.removing = void 0, i.prototype.inserting = void 0, i.prototype.saving = void 0, i.prototype.version = void 0, i.prototype._id = void 0, i.prototype.ownerDocument = void 0, i.prototype.populate = void 0, i.prototype.populated = void 0, i.prototype.primitiveAtomics = void 0, i.prototype.wasPopulated = false, i.prototype.scope = void 0, i.prototype.session = null, i.prototype.pathsToScopes = null, i.prototype.cachedRequired = null;
        }, 6140: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          function r2(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, i(n2.key), n2);
            }
          }
          function n(t3, e3, n2) {
            return e3 && r2(t3.prototype, e3), n2 && r2(t3, n2), Object.defineProperty(t3, "prototype", { writable: false }), t3;
          }
          function i(t3) {
            var r3 = function(t4) {
              if ("object" != e2(t4) || !t4)
                return t4;
              var r4 = t4[Symbol.toPrimitive];
              if (void 0 !== r4) {
                var n2 = r4.call(t4, "string");
                if ("object" != e2(n2))
                  return n2;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == e2(r3) ? r3 : r3 + "";
          }
          t2.exports = n(function t3(e3, r3, n2) {
            !function(t4, e4) {
              if (!(t4 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3), this.subdocSnapshot = e3, this.activePaths = r3, this.version = n2;
          });
        }, 3303: (t2, e2) => {
          "use strict";
          e2._ = { transform: false, virtuals: false, getters: false, _skipDepopulateTopLevel: true, depopulate: true, flattenDecimals: false, useProjection: false, versionKey: true, flattenObjectIds: false };
        }, 6948: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, a(n2.key), n2);
            }
          }
          function o(t3, e3, r3) {
            return e3 && i(t3.prototype, e3), r3 && i(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
          }
          function a(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          var s = r2(4450), u = o(function t3(e3) {
            if (function(t4, e4) {
              if (!(t4 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3), this._docs = {}, this._childDocs = [], null != e3 && (e3 = s(e3), Object.assign(this, e3), "object" === n(e3.subPopulate) && (this.populate = e3.subPopulate), null != e3.perDocumentLimit && null != e3.limit))
              throw new Error("Can not use `limit` and `perDocumentLimit` at the same time. Path: `" + e3.path + "`.");
          });
          t2.exports = u;
        }, 5761: (t2) => {
          "use strict";
          t2.exports = Object.freeze({ enumerable: true, configurable: true, writable: true, value: void 0 });
        }, 4592: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "of", u), Object.defineProperty(s.prototype, "castNonArrays", u), t2.exports = s;
        }, 2945: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "subtype", u), t2.exports = s;
        }, 3731: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "min", u), Object.defineProperty(s.prototype, "max", u), Object.defineProperty(s.prototype, "expires", u), t2.exports = s;
        }, 4561: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "excludeIndexes", u), Object.defineProperty(s.prototype, "_id", u), t2.exports = s;
        }, 241: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "of", u), t2.exports = s;
        }, 1007: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "min", u), Object.defineProperty(s.prototype, "max", u), Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "populate", u), t2.exports = s;
        }, 4625: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "auto", u), Object.defineProperty(s.prototype, "populate", u), t2.exports = s;
        }, 9528: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "enum", u), Object.defineProperty(s.prototype, "match", u), Object.defineProperty(s.prototype, "lowercase", u), Object.defineProperty(s.prototype, "trim", u), Object.defineProperty(s.prototype, "uppercase", u), Object.defineProperty(s.prototype, "minLength", u), Object.defineProperty(s.prototype, "minlength", u), Object.defineProperty(s.prototype, "maxLength", u), Object.defineProperty(s.prototype, "maxlength", u), Object.defineProperty(s.prototype, "populate", u), t2.exports = s;
        }, 7494: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (i = function() {
              return !!t3;
            })();
          }
          function o(t3) {
            return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, o(t3);
          }
          function a(t3, e3) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, a(t3, e3);
          }
          var s = function(t3) {
            function e3() {
              return function(t4, e4) {
                if (!(t4 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), function(t4, e4, r4) {
                return e4 = o(e4), function(t5, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t6) {
                    if (void 0 === t6)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t6;
                  }(t5);
                }(t4, i() ? Reflect.construct(e4, r4 || [], o(t4).constructor) : e4.apply(t4, r4));
              }(this, e3, arguments);
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && a(t4, e4);
            }(e3, t3), r3 = e3, Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3;
          }(r2(8879)), u = r2(5761);
          Object.defineProperty(s.prototype, "_id", u), t2.exports = s;
        }, 8879: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, a(n2.key), n2);
            }
          }
          function o(t3, e3, r3) {
            return e3 && i(t3.prototype, e3), r3 && i(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
          }
          function a(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          var s = r2(4450), u = o(function t3(e3) {
            if (function(t4, e4) {
              if (!(t4 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3), null == e3)
              return this;
            Object.assign(this, s(e3));
          }), c = r2(5761);
          Object.defineProperty(u.prototype, "type", c), Object.defineProperty(u.prototype, "validate", c), Object.defineProperty(u.prototype, "cast", c), Object.defineProperty(u.prototype, "required", c), Object.defineProperty(u.prototype, "default", c), Object.defineProperty(u.prototype, "ref", c), Object.defineProperty(u.prototype, "refPath", c), Object.defineProperty(u.prototype, "select", c), Object.defineProperty(u.prototype, "index", c), Object.defineProperty(u.prototype, "unique", c), Object.defineProperty(u.prototype, "immutable", c), Object.defineProperty(u.prototype, "sparse", c), Object.defineProperty(u.prototype, "text", c), Object.defineProperty(u.prototype, "transform", c), t2.exports = u;
        }, 2069: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, a(n2.key), n2);
            }
          }
          function o(t3, e3, r3) {
            return e3 && i(t3.prototype, e3), r3 && i(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
          }
          function a(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          var s = r2(5761), u = o(function t3(e3) {
            !function(t4, e4) {
              if (!(t4 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, t3), Object.assign(this, e3), null != e3 && null != e3.options && (this.options = Object.assign({}, e3.options));
          });
          Object.defineProperty(u.prototype, "ref", s), Object.defineProperty(u.prototype, "refPath", s), Object.defineProperty(u.prototype, "localField", s), Object.defineProperty(u.prototype, "foreignField", s), Object.defineProperty(u.prototype, "justOne", s), Object.defineProperty(u.prototype, "count", s), Object.defineProperty(u.prototype, "match", s), Object.defineProperty(u.prototype, "options", s), Object.defineProperty(u.prototype, "skip", s), Object.defineProperty(u.prototype, "limit", s), Object.defineProperty(u.prototype, "perDocumentLimit", s), t2.exports = u;
        }, 1898: (t2, e2, r2) => {
          "use strict";
          e2.saveSubdocs = r2(4432), e2.sharding = r2(2824), e2.trackTransaction = r2(5889), e2.validateBeforeSave = r2(9848);
        }, 4432: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i() {
            i = function() {
              return e3;
            };
            var t3, e3 = {}, r3 = Object.prototype, o2 = r3.hasOwnProperty, a2 = Object.defineProperty || function(t4, e4, r4) {
              t4[e4] = r4.value;
            }, s2 = "function" == typeof Symbol ? Symbol : {}, u2 = s2.iterator || "@@iterator", c2 = s2.asyncIterator || "@@asyncIterator", f = s2.toStringTag || "@@toStringTag";
            function l(t4, e4, r4) {
              return Object.defineProperty(t4, e4, { value: r4, enumerable: true, configurable: true, writable: true }), t4[e4];
            }
            try {
              l({}, "");
            } catch (t4) {
              l = function(t5, e4, r4) {
                return t5[e4] = r4;
              };
            }
            function h(t4, e4, r4, n2) {
              var i2 = e4 && e4.prototype instanceof g ? e4 : g, o3 = Object.create(i2.prototype), s3 = new T(n2 || []);
              return a2(o3, "_invoke", { value: P(t4, r4, s3) }), o3;
            }
            function p(t4, e4, r4) {
              try {
                return { type: "normal", arg: t4.call(e4, r4) };
              } catch (t5) {
                return { type: "throw", arg: t5 };
              }
            }
            e3.wrap = h;
            var d = "suspendedStart", y = "suspendedYield", b = "executing", m = "completed", v = {};
            function g() {
            }
            function _() {
            }
            function w() {
            }
            var S = {};
            l(S, u2, function() {
              return this;
            });
            var O = Object.getPrototypeOf, j = O && O(O(B([])));
            j && j !== r3 && o2.call(j, u2) && (S = j);
            var $ = w.prototype = g.prototype = Object.create(S);
            function E(t4) {
              ["next", "throw", "return"].forEach(function(e4) {
                l(t4, e4, function(t5) {
                  return this._invoke(e4, t5);
                });
              });
            }
            function A(t4, e4) {
              function r4(i3, a3, s3, u3) {
                var c3 = p(t4[i3], t4, a3);
                if ("throw" !== c3.type) {
                  var f2 = c3.arg, l2 = f2.value;
                  return l2 && "object" == n(l2) && o2.call(l2, "__await") ? e4.resolve(l2.__await).then(function(t5) {
                    r4("next", t5, s3, u3);
                  }, function(t5) {
                    r4("throw", t5, s3, u3);
                  }) : e4.resolve(l2).then(function(t5) {
                    f2.value = t5, s3(f2);
                  }, function(t5) {
                    return r4("throw", t5, s3, u3);
                  });
                }
                u3(c3.arg);
              }
              var i2;
              a2(this, "_invoke", { value: function(t5, n2) {
                function o3() {
                  return new e4(function(e5, i3) {
                    r4(t5, n2, e5, i3);
                  });
                }
                return i2 = i2 ? i2.then(o3, o3) : o3();
              } });
            }
            function P(e4, r4, n2) {
              var i2 = d;
              return function(o3, a3) {
                if (i2 === b)
                  throw Error("Generator is already running");
                if (i2 === m) {
                  if ("throw" === o3)
                    throw a3;
                  return { value: t3, done: true };
                }
                for (n2.method = o3, n2.arg = a3; ; ) {
                  var s3 = n2.delegate;
                  if (s3) {
                    var u3 = x(s3, n2);
                    if (u3) {
                      if (u3 === v)
                        continue;
                      return u3;
                    }
                  }
                  if ("next" === n2.method)
                    n2.sent = n2._sent = n2.arg;
                  else if ("throw" === n2.method) {
                    if (i2 === d)
                      throw i2 = m, n2.arg;
                    n2.dispatchException(n2.arg);
                  } else
                    "return" === n2.method && n2.abrupt("return", n2.arg);
                  i2 = b;
                  var c3 = p(e4, r4, n2);
                  if ("normal" === c3.type) {
                    if (i2 = n2.done ? m : y, c3.arg === v)
                      continue;
                    return { value: c3.arg, done: n2.done };
                  }
                  "throw" === c3.type && (i2 = m, n2.method = "throw", n2.arg = c3.arg);
                }
              };
            }
            function x(e4, r4) {
              var n2 = r4.method, i2 = e4.iterator[n2];
              if (i2 === t3)
                return r4.delegate = null, "throw" === n2 && e4.iterator.return && (r4.method = "return", r4.arg = t3, x(e4, r4), "throw" === r4.method) || "return" !== n2 && (r4.method = "throw", r4.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), v;
              var o3 = p(i2, e4.iterator, r4.arg);
              if ("throw" === o3.type)
                return r4.method = "throw", r4.arg = o3.arg, r4.delegate = null, v;
              var a3 = o3.arg;
              return a3 ? a3.done ? (r4[e4.resultName] = a3.value, r4.next = e4.nextLoc, "return" !== r4.method && (r4.method = "next", r4.arg = t3), r4.delegate = null, v) : a3 : (r4.method = "throw", r4.arg = new TypeError("iterator result is not an object"), r4.delegate = null, v);
            }
            function k(t4) {
              var e4 = { tryLoc: t4[0] };
              1 in t4 && (e4.catchLoc = t4[1]), 2 in t4 && (e4.finallyLoc = t4[2], e4.afterLoc = t4[3]), this.tryEntries.push(e4);
            }
            function M(t4) {
              var e4 = t4.completion || {};
              e4.type = "normal", delete e4.arg, t4.completion = e4;
            }
            function T(t4) {
              this.tryEntries = [{ tryLoc: "root" }], t4.forEach(k, this), this.reset(true);
            }
            function B(e4) {
              if (e4 || "" === e4) {
                var r4 = e4[u2];
                if (r4)
                  return r4.call(e4);
                if ("function" == typeof e4.next)
                  return e4;
                if (!isNaN(e4.length)) {
                  var i2 = -1, a3 = function r5() {
                    for (; ++i2 < e4.length; )
                      if (o2.call(e4, i2))
                        return r5.value = e4[i2], r5.done = false, r5;
                    return r5.value = t3, r5.done = true, r5;
                  };
                  return a3.next = a3;
                }
              }
              throw new TypeError(n(e4) + " is not iterable");
            }
            return _.prototype = w, a2($, "constructor", { value: w, configurable: true }), a2(w, "constructor", { value: _, configurable: true }), _.displayName = l(w, f, "GeneratorFunction"), e3.isGeneratorFunction = function(t4) {
              var e4 = "function" == typeof t4 && t4.constructor;
              return !!e4 && (e4 === _ || "GeneratorFunction" === (e4.displayName || e4.name));
            }, e3.mark = function(t4) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(t4, w) : (t4.__proto__ = w, l(t4, f, "GeneratorFunction")), t4.prototype = Object.create($), t4;
            }, e3.awrap = function(t4) {
              return { __await: t4 };
            }, E(A.prototype), l(A.prototype, c2, function() {
              return this;
            }), e3.AsyncIterator = A, e3.async = function(t4, r4, n2, i2, o3) {
              void 0 === o3 && (o3 = Promise);
              var a3 = new A(h(t4, r4, n2, i2), o3);
              return e3.isGeneratorFunction(r4) ? a3 : a3.next().then(function(t5) {
                return t5.done ? t5.value : a3.next();
              });
            }, E($), l($, f, "Generator"), l($, u2, function() {
              return this;
            }), l($, "toString", function() {
              return "[object Generator]";
            }), e3.keys = function(t4) {
              var e4 = Object(t4), r4 = [];
              for (var n2 in e4)
                r4.push(n2);
              return r4.reverse(), function t5() {
                for (; r4.length; ) {
                  var n3 = r4.pop();
                  if (n3 in e4)
                    return t5.value = n3, t5.done = false, t5;
                }
                return t5.done = true, t5;
              };
            }, e3.values = B, T.prototype = { constructor: T, reset: function(e4) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(M), !e4)
                for (var r4 in this)
                  "t" === r4.charAt(0) && o2.call(this, r4) && !isNaN(+r4.slice(1)) && (this[r4] = t3);
            }, stop: function() {
              this.done = true;
              var t4 = this.tryEntries[0].completion;
              if ("throw" === t4.type)
                throw t4.arg;
              return this.rval;
            }, dispatchException: function(e4) {
              if (this.done)
                throw e4;
              var r4 = this;
              function n2(n3, i3) {
                return s3.type = "throw", s3.arg = e4, r4.next = n3, i3 && (r4.method = "next", r4.arg = t3), !!i3;
              }
              for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                var a3 = this.tryEntries[i2], s3 = a3.completion;
                if ("root" === a3.tryLoc)
                  return n2("end");
                if (a3.tryLoc <= this.prev) {
                  var u3 = o2.call(a3, "catchLoc"), c3 = o2.call(a3, "finallyLoc");
                  if (u3 && c3) {
                    if (this.prev < a3.catchLoc)
                      return n2(a3.catchLoc, true);
                    if (this.prev < a3.finallyLoc)
                      return n2(a3.finallyLoc);
                  } else if (u3) {
                    if (this.prev < a3.catchLoc)
                      return n2(a3.catchLoc, true);
                  } else {
                    if (!c3)
                      throw Error("try statement without catch or finally");
                    if (this.prev < a3.finallyLoc)
                      return n2(a3.finallyLoc);
                  }
                }
              }
            }, abrupt: function(t4, e4) {
              for (var r4 = this.tryEntries.length - 1; r4 >= 0; --r4) {
                var n2 = this.tryEntries[r4];
                if (n2.tryLoc <= this.prev && o2.call(n2, "finallyLoc") && this.prev < n2.finallyLoc) {
                  var i2 = n2;
                  break;
                }
              }
              i2 && ("break" === t4 || "continue" === t4) && i2.tryLoc <= e4 && e4 <= i2.finallyLoc && (i2 = null);
              var a3 = i2 ? i2.completion : {};
              return a3.type = t4, a3.arg = e4, i2 ? (this.method = "next", this.next = i2.finallyLoc, v) : this.complete(a3);
            }, complete: function(t4, e4) {
              if ("throw" === t4.type)
                throw t4.arg;
              return "break" === t4.type || "continue" === t4.type ? this.next = t4.arg : "return" === t4.type ? (this.rval = this.arg = t4.arg, this.method = "return", this.next = "end") : "normal" === t4.type && e4 && (this.next = e4), v;
            }, finish: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.finallyLoc === t4)
                  return this.complete(r4.completion, r4.afterLoc), M(r4), v;
              }
            }, catch: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.tryLoc === t4) {
                  var n2 = r4.completion;
                  if ("throw" === n2.type) {
                    var i2 = n2.arg;
                    M(r4);
                  }
                  return i2;
                }
              }
              throw Error("illegal catch attempt");
            }, delegateYield: function(e4, r4, n2) {
              return this.delegate = { iterator: B(e4), resultName: r4, nextLoc: n2 }, "next" === this.method && (this.arg = t3), v;
            } }, e3;
          }
          function o(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return a(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? a(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, o2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw o2;
              }
            } };
          }
          function a(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function s(t3, e3, r3, n2, i2, o2, a2) {
            try {
              var s2 = t3[o2](a2), u2 = s2.value;
            } catch (t4) {
              return void r3(t4);
            }
            s2.done ? e3(u2) : Promise.resolve(u2).then(n2, i2);
          }
          function u(t3) {
            return function() {
              var e3 = this, r3 = arguments;
              return new Promise(function(n2, i2) {
                var o2 = t3.apply(e3, r3);
                function a2(t4) {
                  s(o2, n2, i2, a2, u2, "next", t4);
                }
                function u2(t4) {
                  s(o2, n2, i2, a2, u2, "throw", t4);
                }
                a2(void 0);
              });
            };
          }
          var c = r2(5782);
          t2.exports = function(t3) {
            var e3 = true;
            t3.s.hooks.pre("save", false, function(t4) {
              if (this.$isSubdocument)
                t4();
              else {
                var e4 = this, r3 = this.$getAllSubdocs({ useCache: true });
                r3.length ? c(r3, function(t5, e5) {
                  t5.$__schema.s.hooks.execPre("save", t5, function(t6) {
                    e5(t6);
                  });
                }, function(r4) {
                  if (e4.$__.saveOptions && (e4.$__.saveOptions.__subdocs = null), r4)
                    return e4.$__schema.s.hooks.execPost("save:error", e4, [e4], { error: r4 }, function(e5) {
                      t4(e5);
                    });
                  t4();
                }) : t4();
              }
            }, null, e3), t3.s.hooks.post("save", function() {
              var t4 = u(i().mark(function t5() {
                var e4, r3, n2, a2, s2;
                return i().wrap(function(t6) {
                  for (; ; )
                    switch (t6.prev = t6.next) {
                      case 0:
                        if ((e4 = this.$__.removedSubdocs) && e4.length) {
                          t6.next = 3;
                          break;
                        }
                        return t6.abrupt("return");
                      case 3:
                        r3 = [], n2 = o(e4), t6.prev = 5, s2 = i().mark(function t7() {
                          var e5;
                          return i().wrap(function(t8) {
                            for (; ; )
                              switch (t8.prev = t8.next) {
                                case 0:
                                  e5 = a2.value, r3.push(new Promise(function(t9, r4) {
                                    e5.$__schema.s.hooks.execPost("deleteOne", e5, [e5], function(e6) {
                                      if (e6)
                                        return r4(e6);
                                      t9();
                                    });
                                  }));
                                case 2:
                                case "end":
                                  return t8.stop();
                              }
                          }, t7);
                        }), n2.s();
                      case 8:
                        if ((a2 = n2.n()).done) {
                          t6.next = 12;
                          break;
                        }
                        return t6.delegateYield(s2(), "t0", 10);
                      case 10:
                        t6.next = 8;
                        break;
                      case 12:
                        t6.next = 17;
                        break;
                      case 14:
                        t6.prev = 14, t6.t1 = t6.catch(5), n2.e(t6.t1);
                      case 17:
                        return t6.prev = 17, n2.f(), t6.finish(17);
                      case 20:
                        return this.$__.removedSubdocs = null, t6.next = 23, Promise.all(r3);
                      case 23:
                      case "end":
                        return t6.stop();
                    }
                }, t5, this, [[5, 14, 17, 20]]);
              }));
              return function() {
                return t4.apply(this, arguments);
              };
            }()), t3.s.hooks.post("save", function() {
              var t4 = u(i().mark(function t5() {
                var e4, r3, n2, a2, s2, u2, c2 = this;
                return i().wrap(function(t6) {
                  for (; ; )
                    switch (t6.prev = t6.next) {
                      case 0:
                        if (!this.$isSubdocument) {
                          t6.next = 2;
                          break;
                        }
                        return t6.abrupt("return");
                      case 2:
                        if (e4 = this, (r3 = this.$getAllSubdocs({ useCache: true })).length) {
                          t6.next = 6;
                          break;
                        }
                        return t6.abrupt("return");
                      case 6:
                        n2 = [], a2 = o(r3), t6.prev = 8, u2 = i().mark(function t7() {
                          var e5;
                          return i().wrap(function(t8) {
                            for (; ; )
                              switch (t8.prev = t8.next) {
                                case 0:
                                  e5 = s2.value, n2.push(new Promise(function(t9, r4) {
                                    e5.$__schema.s.hooks.execPost("save", e5, [e5], function(e6) {
                                      if (e6)
                                        return r4(e6);
                                      t9();
                                    });
                                  }));
                                case 2:
                                case "end":
                                  return t8.stop();
                              }
                          }, t7);
                        }), a2.s();
                      case 11:
                        if ((s2 = a2.n()).done) {
                          t6.next = 15;
                          break;
                        }
                        return t6.delegateYield(u2(), "t0", 13);
                      case 13:
                        t6.next = 11;
                        break;
                      case 15:
                        t6.next = 20;
                        break;
                      case 17:
                        t6.prev = 17, t6.t1 = t6.catch(8), a2.e(t6.t1);
                      case 20:
                        return t6.prev = 20, a2.f(), t6.finish(20);
                      case 23:
                        return t6.prev = 23, t6.next = 26, Promise.all(n2);
                      case 26:
                        t6.next = 32;
                        break;
                      case 28:
                        return t6.prev = 28, t6.t2 = t6.catch(23), t6.next = 32, new Promise(function(r4, n3) {
                          c2.$__schema.s.hooks.execPost("save:error", e4, [e4], { error: t6.t2 }, function(t7) {
                            if (t7)
                              return n3(t7);
                            r4();
                          });
                        });
                      case 32:
                      case "end":
                        return t6.stop();
                    }
                }, t5, this, [[8, 17, 20, 23], [23, 28]]);
              }));
              return function() {
                return t4.apply(this, arguments);
              };
            }(), null, e3);
          };
        }, 2824: (t2, e2, r2) => {
          "use strict";
          var n = r2(7930).objectIdSymbol, i = r2(8768);
          function o() {
            var t3, e3;
            if (this.$__.shardval) {
              e3 = (t3 = Object.keys(this.$__.shardval)).length, this.$where = this.$where || {};
              for (var r3 = 0; r3 < e3; ++r3)
                this.$where[t3[r3]] = this.$__.shardval[t3[r3]];
            }
          }
          function a() {
            var t3 = this.$__schema.options.shardKey || this.$__schema.options.shardkey;
            if (i.isPOJO(t3))
              for (var e3, r3 = this.$__.shardval = {}, o2 = Object.keys(t3), a2 = o2.length, s = 0; s < a2; ++s)
                null == (e3 = this.$__getValue(o2[s])) ? r3[o2[s]] = e3 : i.isMongooseObject(e3) ? r3[o2[s]] = e3.toObject({ depopulate: true, _isNested: true }) : e3 instanceof Date || e3[n] ? r3[o2[s]] = e3 : "function" == typeof e3.valueOf ? r3[o2[s]] = e3.valueOf() : r3[o2[s]] = e3;
          }
          t2.exports = function(t3) {
            t3.post("init", function() {
              return a.call(this), this;
            }), t3.pre("save", function(t4) {
              o.call(this), t4();
            }), t3.pre("remove", function(t4) {
              o.call(this), t4();
            }), t3.post("save", function() {
              a.call(this);
            });
          }, t2.exports.storeShard = a;
        }, 5889: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = i(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function i(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return o(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? o(t3, e3) : void 0;
            }
          }
          function o(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var a = r2(7930).arrayAtomicsSymbol, s = r2(7930).sessionNewDocuments, u = r2(8768);
          function c(t3, e3) {
            return t3 = t3 || {}, null != e3.$pullAll && (t3.$pullAll = (t3.$pullAll || []).concat(e3.$pullAll)), null != e3.$push && (t3.$push = t3.$push || {}, t3.$push.$each = (t3.$push.$each || []).concat(e3.$push.$each)), null != e3.$addToSet && (t3.$addToSet = (t3.$addToSet || []).concat(e3.$addToSet)), null != e3.$set && (t3.$set = Array.isArray(e3.$set) ? function(t4) {
              if (Array.isArray(t4))
                return o(t4);
            }(r3 = e3.$set) || function(t4) {
              if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                return Array.from(t4);
            }(r3) || i(r3) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }() : Object.assign({}, e3.$set)), t3;
            var r3;
          }
          t2.exports = function(t3) {
            t3.pre("save", function() {
              var t4 = this.$session();
              if (null != t4 && null != t4.transaction && null != t4[s] && !t4[s].has(this)) {
                var e3 = {};
                this.isNew && (e3.isNew = true), this.$__schema.options.versionKey && (e3.versionKey = this.get(this.$__schema.options.versionKey)), e3.modifiedPaths = new Set(Object.keys(this.$__.activePaths.getStatePaths("modify"))), e3.atomics = function(t5, e4) {
                  var r3 = /* @__PURE__ */ new Map();
                  e4 = e4 || /* @__PURE__ */ new Map();
                  var i2, o2 = n(Object.keys(t5.$__.activePaths.init).concat(Object.keys(t5.$__.activePaths.modify)));
                  try {
                    for (o2.s(); !(i2 = o2.n()).done; ) {
                      var s2 = i2.value, f = t5.$__getValue(s2);
                      if (null != f && Array.isArray(f) && u.isMongooseDocumentArray(f) && f.length && null != f[a] && 0 !== Object.keys(f[a]).length) {
                        var l = e4.get(s2) || {};
                        r3.set(s2, c(l, f[a]));
                      }
                    }
                  } catch (t6) {
                    o2.e(t6);
                  } finally {
                    o2.f();
                  }
                  var h, p = n(t5.$__dirty());
                  try {
                    for (p.s(); !(h = p.n()).done; ) {
                      var d = h.value, y = d.path, b = d.value;
                      if (null != b && null != b[a] && 0 !== Object.keys(b[a]).length) {
                        var m = e4.get(y) || {};
                        r3.set(y, c(m, b[a]));
                      }
                    }
                  } catch (t6) {
                    p.e(t6);
                  } finally {
                    p.f();
                  }
                  return r3;
                }(this), t4[s].set(this, e3);
              }
            });
          };
        }, 9848: (t2) => {
          "use strict";
          function e2(t3) {
            return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, e2(t3);
          }
          t2.exports = function(t3) {
            t3.pre("save", false, function(t4, r2) {
              var n = this, i = this;
              if (this.$isSubdocument)
                return t4();
              if (r2 && "object" === e2(r2) && "validateBeforeSave" in r2 ? r2.validateBeforeSave : this.$__schema.options.validateBeforeSave) {
                var o = r2 && "object" === e2(r2) && "validateModifiedOnly" in r2 ? { validateModifiedOnly: r2.validateModifiedOnly } : null;
                this.$validate(o).then(function() {
                  n.$op = "save", t4();
                }, function(e3) {
                  i.$__schema.s.hooks.execPost("save:error", i, [i], { error: e3 }, function(e4) {
                    i.$op = "save", t4(e4);
                  });
                });
              } else
                t4();
            }, null, true);
          };
        }, 3892: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return o(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? o(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function o(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function a(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function s(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? a(Object(r3), true).forEach(function(e4) {
                u(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : a(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function u(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var c = r2(6948), f = r2(3916), l = r2(3703), h = r2(8677), p = r2(7300), d = r2(4450), y = r2(6665);
          e2.preparePopulationOptionsMQ = function(t3, e3) {
            var r3, n2 = t3._mongooseOptions.populate, i2 = Object.keys(n2).reduce(function(t4, e4) {
              return t4.concat([n2[e4]]);
            }, []);
            null != e3.lean && i2.filter(function(t4) {
              return null == (t4 && t4.options && t4.options.lean);
            }).forEach((r3 = e3.lean, function(t4) {
              t4.options || (t4.options = {}), null != r3 && Array.isArray(r3.virtuals) && ((r3 = Object.assign({}, r3)).virtuals = r3.virtuals.filter(function(e4) {
                return "string" == typeof e4 && e4.startsWith(t4.path + ".");
              }).map(function(e4) {
                return e4.slice(t4.path.length + 1);
              })), t4.options.lean = r3;
            }));
            var o2 = t3 && t3.options && t3.options.session || null;
            null != o2 && i2.forEach(function(t4) {
              null != t4.options ? "session" in t4.options || (t4.options.session = o2) : t4.options = { session: o2 };
            });
            for (var a2 = t3._fieldsForExec(), u2 = 0; u2 < i2.length; ++u2)
              i2[u2] instanceof c ? i2[u2] = new c(s(s({}, i2[u2]), {}, { _queryProjection: a2, _localModel: t3.model })) : (i2[u2]._queryProjection = a2, i2[u2]._localModel = t3.model);
            return i2;
          }, e2.createModel = function(t3, r3, n2, i2, o2) {
            t3.hooks.execPreSync("createModel", r3);
            var a2 = t3.schema ? t3.schema.discriminatorMapping : null, s2 = a2 && a2.isRoot ? a2.key : null, u2 = r3[s2];
            if (s2 && u2 && t3.discriminators) {
              var c2 = t3.discriminators[u2] || h(t3.discriminators, u2);
              if (c2) {
                var f2 = d(i2);
                return e2.applyPaths(f2, c2.schema), new c2(void 0, f2, true);
              }
            }
            var l2 = { skipId: true, isNew: false, willInit: true };
            return null != o2 && "defaults" in o2 && (l2.defaults = o2.defaults), new t3(void 0, n2, l2);
          }, e2.createModelAndInit = function(t3, r3, n2, i2, o2, a2, s2) {
            var u2 = a2 ? { populated: a2 } : void 0, c2 = e2.createModel(t3, r3, n2, i2, o2);
            try {
              c2.$init(r3, u2, s2);
            } catch (t4) {
              s2(t4, c2);
            }
          }, e2.applyPaths = function(t3, e3, r3) {
            var o2, a2, s2 = /* @__PURE__ */ new Set();
            if (t3) {
              a2 = Object.keys(t3);
              for (var u2 = [], c2 = 0; c2 < a2.length; ++c2) {
                var h2 = a2[c2];
                "-" === a2[c2][0] && (delete t3[h2], "-_id" === h2 ? t3._id = 0 : u2.push(h2.slice(1)));
              }
              a2 = Object.keys(t3);
              for (var d2 = 0; d2 < a2.length; ++d2)
                if ("+" !== a2[d2][0]) {
                  var b = t3[a2[d2]];
                  if (p(b) && !("_id" === a2[d2] && a2.length > 1) && (!(a2[d2] === e3.options.discriminatorKey && a2.length > 1 && null != b) || b)) {
                    o2 = !b;
                    break;
                  }
                }
              for (var m = 0, v = u2; m < v.length; m++) {
                var g = v[m], _ = e3.path(g);
                _ && _.selected && false === o2 ? _ && _.selected && false === o2 && s2.add(g) : (t3[g] = 0, o2 = true);
              }
            }
            var w = [], S = [], O = [];
            switch (function e4(r4, n2) {
              if (n2 || (n2 = ""), -1 !== O.indexOf(r4))
                return [];
              O.push(r4);
              var i2 = [];
              return r4.eachPath(function(r5, a3) {
                if (n2 && (r5 = n2 + "." + r5), a3.$isSchemaMap || r5.endsWith(".$*")) {
                  var s3 = t3 && "+" + r5 in t3;
                  a3.options && false === a3.options.select && !s3 && S.push(r5);
                } else {
                  var u3 = N(r5, a3);
                  if (null != u3 || Array.isArray(a3) || !a3.$isMongooseArray || a3.$isMongooseDocumentArray || (u3 = N(r5, a3.caster)), null != u3 && i2.push(u3), a3.schema) {
                    var c3 = e4(a3.schema, r5);
                    false === o2 && f(t3, r5, a3.schema, w, c3);
                  }
                }
              }), O.pop(), i2;
            }(e3), o2) {
              case true:
                var j, $ = i(S);
                try {
                  for ($.s(); !(j = $.n()).done; ) {
                    var E = j.value;
                    t3[E] = 0;
                  }
                } catch (t4) {
                  $.e(t4);
                } finally {
                  $.f();
                }
                break;
              case false:
                e3 && e3.paths._id && e3.paths._id.options && false === e3.paths._id.options.select && (t3._id = 0);
                var A, P = i(w);
                try {
                  for (P.s(); !(A = P.n()).done; ) {
                    var x = A.value;
                    s2.has(x) || y(t3, x) || (t3[x] = t3[x] || 1);
                  }
                } catch (t4) {
                  P.e(t4);
                } finally {
                  P.f();
                }
                break;
              case void 0:
                if (null == t3)
                  break;
                for (var k = 0, M = Object.keys(t3 || {}); k < M.length; k++) {
                  var T = M[k];
                  T.startsWith("+") && delete t3[T];
                }
                var B, I = i(S);
                try {
                  for (I.s(); !(B = I.n()).done; ) {
                    var R = B.value;
                    null == t3[R] && (t3[R] = 0);
                  }
                } catch (t4) {
                  I.e(t4);
                } finally {
                  I.f();
                }
            }
            function N(i2, s3) {
              if (null != t3 && "boolean" == typeof s3.selected)
                if (false === s3.selected && t3[i2])
                  r3 && (t3[i2] = 0);
                else if (o2 || !s3.selected || i2 !== e3.options.discriminatorKey || null == t3[i2] || t3[i2]) {
                  if (false !== o2 || !s3.selected || null == t3[i2] || t3[i2]) {
                    var u3 = "+" + i2;
                    if (t3 && u3 in t3)
                      return delete t3[u3], void (false === o2 && a2.length > 1 && !~a2.indexOf(i2) && !r3 ? t3[i2] = 1 : null == o2 && r3 && false === s3.selected && (t3[i2] = 0));
                    for (var c3 = i2.split("."), f2 = "", h3 = 0; h3 < c3.length; ++h3)
                      if (f2 += f2.length ? "." + c3[h3] : c3[h3], -1 !== S.indexOf(f2))
                        return;
                    if (!o2 && s3 && s3.options && s3.options.$skipDiscriminatorCheck)
                      for (var p2 = "", d3 = 0; d3 < c3.length; ++d3) {
                        p2 += (0 === p2.length ? "" : ".") + c3[d3];
                        var y2 = l(t3, p2, false) || l(t3, p2 + ".$", false);
                        if (y2 && "object" !== n(y2))
                          return;
                      }
                    return (s3.selected ? w : S).push(i2), i2;
                  }
                  delete t3[i2];
                } else
                  delete t3[i2];
            }
          };
        }, 7058: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != s(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != s(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == s(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function s(t3) {
            return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, s(t3);
          }
          function u(t3, e3) {
            return function(t4) {
              if (Array.isArray(t4))
                return t4;
            }(t3) || function(t4, e4) {
              var r3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (null != r3) {
                var n2, i2, o2, a2, s2 = [], u2 = true, c2 = false;
                try {
                  if (o2 = (r3 = r3.call(t4)).next, 0 === e4) {
                    if (Object(r3) !== r3)
                      return;
                    u2 = false;
                  } else
                    for (; !(u2 = (n2 = o2.call(r3)).done) && (s2.push(n2.value), s2.length !== e4); u2 = true)
                      ;
                } catch (t5) {
                  c2 = true, i2 = t5;
                } finally {
                  try {
                    if (!u2 && null != r3.return && (a2 = r3.return(), Object(a2) !== a2))
                      return;
                  } finally {
                    if (c2)
                      throw i2;
                  }
                }
                return s2;
              }
            }(t3, e3) || f(t3, e3) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }();
          }
          function c(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = f(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, a2 = true, s2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return a2 = t4.done, t4;
            }, e: function(t4) {
              s2 = true, o2 = t4;
            }, f: function() {
              try {
                a2 || null == r3.return || r3.return();
              } finally {
                if (s2)
                  throw o2;
              }
            } };
          }
          function f(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return l(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? l(t3, e3) : void 0;
            }
          }
          function l(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var h, p = r2(3550).EventEmitter, d = r2(8297), y = r2(8213), b = r2(6426), m = r2(8879), v = r2(2069), g = r2(622), _ = r2(486), w = r2(4450), S = r2(3703), O = r2(5879), j = r2(2003), $ = r2(5289), E = r2(3381), A = r2(1199), P = r2(9539), x = r2(5678), k = r2(7834), M = r2(2097), T = r2(8768), B = r2(533), I = /\.\d+(\.|$)/, R = r2(1260).Ut, N = r2(4957).middlewareFunctions, D = R.concat(N).reduce(function(t3, e3) {
            return t3.add(e3);
          }, /* @__PURE__ */ new Set()), L = T.isPOJO, C = 0, U = /^\d+$/;
          function q(t3, e3) {
            if (!(this instanceof q))
              return new q(t3, e3);
            if (this.obj = t3, this.paths = {}, this.aliases = {}, this.subpaths = {}, this.virtuals = {}, this.singleNestedPaths = {}, this.nested = {}, this.inherits = {}, this.callQueue = [], this._indexes = [], this._searchIndexes = [], this.methods = e3 && e3.methods || {}, this.methodOptions = {}, this.statics = e3 && e3.statics || {}, this.tree = {}, this.query = e3 && e3.query || {}, this.childSchemas = [], this.plugins = [], this.$id = ++C, this.mapPaths = [], this.s = { hooks: new d() }, this.options = this.defaultOptions(e3), Array.isArray(t3)) {
              var r3, n2 = c(t3);
              try {
                for (n2.s(); !(r3 = n2.n()).done; ) {
                  var i2 = r3.value;
                  this.add(i2);
                }
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
            } else
              t3 && this.add(t3);
            if (e3 && e3.virtuals)
              for (var o2 = e3.virtuals, a2 = 0, s2 = Object.keys(o2); a2 < s2.length; a2++) {
                var u2 = s2[a2], f2 = o2[u2].options ? o2[u2].options : void 0, l2 = this.virtual(u2, f2);
                o2[u2].get && l2.get(o2[u2].get), o2[u2].set && l2.set(o2[u2].set);
              }
            var h2 = t3 && t3._id && T.isObject(t3._id);
            !this.paths._id && this.options._id && !h2 && _(this), this.setupTimestamp(this.options.timestamps);
          }
          function F(t3, e3) {
            for (var r3 = 0, n2 = Object.keys(e3); r3 < n2.length; r3++) {
              var i2 = n2[r3], o2 = null;
              if (null != e3[i2])
                o2 = e3[i2];
              else {
                var a2 = S(t3.paths[i2], "options");
                if (null == a2)
                  continue;
                o2 = a2.alias;
              }
              if (o2) {
                var s2 = t3.paths[i2].path;
                if (Array.isArray(o2)) {
                  var u2, f2 = c(o2);
                  try {
                    for (f2.s(); !(u2 = f2.n()).done; ) {
                      var l2 = u2.value;
                      if ("string" != typeof l2)
                        throw new Error("Invalid value for alias option on " + s2 + ", got " + l2);
                      t3.aliases[l2] = s2, t3.virtual(l2).get(function(t4) {
                        return function() {
                          return "function" == typeof this.get ? this.get(t4) : this[t4];
                        };
                      }(s2)).set(function(t4) {
                        return function(e4) {
                          return this.$set(t4, e4);
                        };
                      }(s2));
                    }
                  } catch (t4) {
                    f2.e(t4);
                  } finally {
                    f2.f();
                  }
                } else {
                  if ("string" != typeof o2)
                    throw new Error("Invalid value for alias option on " + s2 + ", got " + o2);
                  t3.aliases[o2] = s2, t3.virtual(o2).get(function(t4) {
                    return function() {
                      return "function" == typeof this.get ? this.get(t4) : this[t4];
                    };
                  }(s2)).set(function(t4) {
                    return function(e4) {
                      return this.$set(t4, e4);
                    };
                  }(s2));
                }
              }
            }
          }
          q.prototype = Object.create(p.prototype), q.prototype.constructor = q, q.prototype.instanceOfSchema = true, Object.defineProperty(q.prototype, "$schemaType", { configurable: false, enumerable: false, writable: true }), Object.defineProperty(q.prototype, "childSchemas", { configurable: false, enumerable: true, writable: true }), Object.defineProperty(q.prototype, "virtuals", { configurable: false, enumerable: true, writable: true }), q.prototype.obj, q.prototype.paths, q.prototype.tree, q.prototype.clone = function() {
            var t3 = this, e3 = this._clone();
            return e3.on("init", function(e4) {
              return t3.emit("init", e4);
            }), e3;
          }, q.prototype._clone = function(t3) {
            var e3 = new (t3 = t3 || (null == this.base ? q : this.base.Schema))({}, this._userProvidedOptions);
            e3.base = this.base, e3.obj = this.obj, e3.options = w(this.options), e3.callQueue = this.callQueue.map(function(t4) {
              return t4;
            }), e3.methods = w(this.methods), e3.methodOptions = w(this.methodOptions), e3.statics = w(this.statics), e3.query = w(this.query), e3.plugins = Array.prototype.slice.call(this.plugins), e3._indexes = w(this._indexes), e3._searchIndexes = w(this._searchIndexes), e3.s.hooks = this.s.hooks.clone(), e3.tree = w(this.tree), e3.paths = Object.fromEntries(Object.entries(this.paths).map(function(t4) {
              var e4 = u(t4, 2);
              return [e4[0], e4[1].clone()];
            })), e3.nested = w(this.nested), e3.subpaths = w(this.subpaths);
            for (var r3 = 0, n2 = Object.values(e3.paths); r3 < n2.length; r3++) {
              var i2 = n2[r3];
              if (i2.$isSingleNested) {
                for (var o2 = i2.path, a2 = 0, s2 = Object.keys(i2.schema.paths); a2 < s2.length; a2++) {
                  var c2 = s2[a2];
                  e3.singleNestedPaths[o2 + "." + c2] = i2.schema.paths[c2];
                }
                for (var f2 = 0, l2 = Object.keys(i2.schema.singleNestedPaths); f2 < l2.length; f2++) {
                  var h2 = l2[f2];
                  e3.singleNestedPaths[o2 + "." + h2] = i2.schema.singleNestedPaths[h2];
                }
                for (var p2 = 0, d2 = Object.keys(i2.schema.subpaths); p2 < d2.length; p2++) {
                  var y2 = d2[p2];
                  e3.singleNestedPaths[o2 + "." + y2] = i2.schema.subpaths[y2];
                }
                for (var b2 = 0, m2 = Object.keys(i2.schema.nested); b2 < m2.length; b2++) {
                  var v2 = m2[b2];
                  e3.singleNestedPaths[o2 + "." + v2] = "nested";
                }
              }
            }
            return e3._gatherChildSchemas(), e3.virtuals = w(this.virtuals), e3.$globalPluginsApplied = this.$globalPluginsApplied, e3.$isRootDiscriminator = this.$isRootDiscriminator, e3.$implicitlyCreated = this.$implicitlyCreated, e3.$id = ++C, e3.$originalSchemaId = this.$id, e3.mapPaths = [].concat(this.mapPaths), null != this.discriminatorMapping && (e3.discriminatorMapping = Object.assign({}, this.discriminatorMapping)), null != this.discriminators && (e3.discriminators = Object.assign({}, this.discriminators)), null != this._applyDiscriminators && (e3._applyDiscriminators = new Map(this._applyDiscriminators)), e3.aliases = Object.assign({}, this.aliases), e3;
          }, q.prototype.pick = function(t3, e3) {
            var r3 = new q({}, e3 || this.options);
            if (!Array.isArray(t3))
              throw new y('Schema#pick() only accepts an array argument, got "' + s(t3) + '"');
            var n2, i2 = c(t3);
            try {
              for (i2.s(); !(n2 = i2.n()).done; ) {
                var o2 = n2.value;
                if (this.nested[o2])
                  r3.add(a({}, o2, S(this.tree, o2)));
                else {
                  var u2 = this.path(o2);
                  if (null == u2)
                    throw new y("Path `" + o2 + "` is not in the schema");
                  r3.add(a({}, o2, u2));
                }
              }
            } catch (t4) {
              i2.e(t4);
            } finally {
              i2.f();
            }
            return r3;
          }, q.prototype.omit = function(t3, e3) {
            var r3 = new q(this, e3 || this.options);
            if (!Array.isArray(t3))
              throw new y('Schema#omit() only accepts an array argument, got "' + s(t3) + '"');
            for (var n2 in r3.remove(t3), r3.singleNestedPaths)
              t3.includes(n2) && delete r3.singleNestedPaths[n2];
            return r3;
          }, q.prototype.defaultOptions = function(t3) {
            this._userProvidedOptions = null == t3 ? {} : w(t3);
            var e3 = this.base && this.base.options || {};
            if ((t3 = o({ strict: !("strict" in e3) || e3.strict, strictQuery: "strictQuery" in e3 && e3.strictQuery, bufferCommands: true, capped: false, versionKey: "__v", optimisticConcurrency: false, minimize: true, autoIndex: null, discriminatorKey: "__t", shardKey: null, read: null, validateBeforeSave: true, validateModifiedOnly: false, _id: true, id: !("id" in e3) || e3.id, typeKey: "type" }, t3)).versionKey && "string" != typeof t3.versionKey)
              throw new y("`versionKey` must be falsy or string, got `" + s(t3.versionKey) + "`");
            if ("string" == typeof t3.read ? t3.read = $(t3.read) : Array.isArray(t3.read) && "string" == typeof t3.read[0] && (t3.read = { mode: $(t3.read[0]), tags: t3.read[1] }), t3.optimisticConcurrency && !t3.versionKey)
              throw new y("Must set `versionKey` if using `optimisticConcurrency`");
            return t3;
          }, q.prototype.discriminator = function(t3, e3, r3) {
            return this._applyDiscriminators = this._applyDiscriminators || /* @__PURE__ */ new Map(), this._applyDiscriminators.set(t3, { schema: e3, options: r3 }), this;
          }, q.prototype._defaultToObjectOptions = function(t3) {
            var e3 = t3 ? "toJSON" : "toObject";
            if (this._defaultToObjectOptionsMap && this._defaultToObjectOptionsMap[e3])
              return this._defaultToObjectOptionsMap[e3];
            var r3 = this.base && this.base.options && this.base.options[e3] || {}, n2 = this.options[e3] || {}, i2 = Object.assign({}, r3, n2);
            return this._defaultToObjectOptionsMap = this._defaultToObjectOptionsMap || {}, this._defaultToObjectOptionsMap[e3] = i2, i2;
          }, q.prototype.add = function(t3, e3) {
            if (t3 instanceof q || null != t3 && t3.instanceOfSchema)
              return P(this, t3), this;
            if (false === t3._id && null == e3 && (this.options._id = false), "__proto__." === (e3 = e3 || "") || "constructor." === e3 || "prototype." === e3)
              return this;
            for (var r3 = Object.keys(t3), n2 = this.options.typeKey, i2 = 0, o2 = r3; i2 < o2.length; i2++) {
              var c2 = o2[i2];
              if (!T.specialProperties.has(c2)) {
                var f2 = e3 + c2, l2 = t3[c2];
                if (null == l2)
                  throw new TypeError("Invalid value for schema path `" + f2 + '`, got value "' + l2 + '"');
                if ("_id" !== c2 || false !== l2) {
                  var h2 = false;
                  if ("string" == typeof l2 && (h2 = null != (null != this.base ? this.base.Schema.Types : q.Types)[l2.charAt(0).toUpperCase() + l2.substring(1)]), "_id" !== c2 && ("object" !== s(l2) && "function" != typeof l2 && !h2 || null == l2))
                    throw new TypeError("Invalid schema configuration: `".concat(l2, "` is not ") + "a valid type at path `".concat(c2, "`. See ") + "https://bit.ly/mongoose-schematypes for a list of valid schema types.");
                  if (l2 instanceof g || "VirtualType" === (l2.constructor && l2.constructor.name || null))
                    this.virtual(l2);
                  else {
                    if (Array.isArray(l2) && 1 === l2.length && null == l2[0])
                      throw new TypeError("Invalid value for schema Array path `" + f2 + '`, got value "' + l2[0] + '"');
                    if (L(l2) || l2 instanceof m)
                      if (Object.keys(l2).length < 1)
                        e3 && (this.nested[e3.substring(0, e3.length - 1)] = true), this.path(f2, l2);
                      else if (!l2[n2] || "type" === n2 && L(l2.type) && l2.type.type)
                        this.nested[f2] = true, this.add(l2, f2 + ".");
                      else {
                        var p2 = l2[n2];
                        if (L(p2) && Object.keys(p2).length > 0) {
                          e3 && (this.nested[e3.substring(0, e3.length - 1)] = true);
                          var d2 = {};
                          this._userProvidedOptions.typeKey && (d2.typeKey = this._userProvidedOptions.typeKey), null != this._userProvidedOptions.strict && (d2.strict = this._userProvidedOptions.strict), null != this._userProvidedOptions.toObject && (d2.toObject = T.omit(this._userProvidedOptions.toObject, ["transform"])), null != this._userProvidedOptions.toJSON && (d2.toJSON = T.omit(this._userProvidedOptions.toJSON, ["transform"]));
                          var y2 = new q(p2, d2);
                          y2.$implicitlyCreated = true;
                          var b2 = Object.assign({}, l2, a({}, n2, y2));
                          this.path(e3 + c2, b2);
                        } else if (e3 && (this.nested[e3.substring(0, e3.length - 1)] = true), this.path(e3 + c2, l2), null != l2 && !l2.instanceOfSchema && T.isPOJO(l2.discriminators)) {
                          var v2 = this.path(e3 + c2);
                          for (var _2 in l2.discriminators)
                            v2.discriminator(_2, l2.discriminators[_2]);
                        }
                      }
                    else if (e3 && (this.nested[e3.substring(0, e3.length - 1)] = true), this.path(e3 + c2, l2), null != l2[0] && !l2[0].instanceOfSchema && T.isPOJO(l2[0].discriminators)) {
                      var w2 = this.path(e3 + c2);
                      for (var S2 in l2[0].discriminators)
                        w2.discriminator(S2, l2[0].discriminators[S2]);
                    }
                  }
                }
              }
            }
            var O2 = Object.fromEntries(Object.entries(t3).map(function(t4) {
              var r4 = u(t4, 1)[0];
              return [e3 + r4, null];
            }));
            return F(this, O2), this;
          }, q.prototype.alias = function(t3, e3) {
            return F(this, a({}, t3, e3)), this;
          }, q.prototype.removeIndex = function(t3) {
            if (arguments.length > 1)
              throw new Error("removeIndex() takes only 1 argument");
            if ("object" !== s(t3) && "string" != typeof t3)
              throw new Error("removeIndex() may only take either an object or a string as an argument");
            if ("object" === s(t3))
              for (var e3 = this._indexes.length - 1; e3 >= 0; --e3)
                A(this._indexes[e3][0], t3) && this._indexes.splice(e3, 1);
            else
              for (var r3 = this._indexes.length - 1; r3 >= 0; --r3)
                null != this._indexes[r3][1] && this._indexes[r3][1].name === t3 && this._indexes.splice(r3, 1);
            return this;
          }, q.prototype.clearIndexes = function() {
            return this._indexes.length = 0, this;
          }, q.prototype.searchIndex = function(t3) {
            return this._searchIndexes.push(t3), this;
          }, q.reserved = /* @__PURE__ */ Object.create(null), q.prototype.reserved = q.reserved;
          var V = q.reserved;
          function z(t3) {
            return /\.\d+/.test(t3) ? t3.replace(/\.\d+\./g, ".$.").replace(/\.\d+$/, ".$") : t3;
          }
          function K(t3, e3) {
            if (0 === t3.mapPaths.length)
              return null;
            var r3, n2 = c(t3.mapPaths);
            try {
              for (n2.s(); !(r3 = n2.n()).done; ) {
                var i2 = r3.value.path;
                if (new RegExp("^" + i2.replace(/\.\$\*/g, "\\.[^.]+") + "$").test(e3))
                  return t3.paths[i2];
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
            return null;
          }
          function H(t3, e3, r3) {
            var n2 = e3.split(/\.(\d+)\.|\.(\d+)$/).filter(Boolean);
            if (n2.length < 2)
              return t3.paths.hasOwnProperty(n2[0]) ? t3.paths[n2[0]] : "adhocOrUndefined";
            var i2 = t3.path(n2[0]), o2 = false;
            if (!i2)
              return "adhocOrUndefined";
            for (var a2 = n2.length - 1, s2 = 1; s2 < n2.length; ++s2) {
              o2 = false;
              var u2 = n2[s2];
              if (s2 === a2 && i2 && !/\D/.test(u2)) {
                i2 = i2.$isMongooseDocumentArray ? i2.$embeddedSchemaType : i2 instanceof h.Array ? i2.caster : void 0;
                break;
              }
              if (/\D/.test(u2)) {
                if (!i2 || !i2.schema) {
                  i2 = void 0;
                  break;
                }
                o2 = "nested" === i2.schema.pathType(u2), i2 = i2.schema.path(u2);
              } else
                i2 instanceof h.Array && s2 !== a2 && (i2 = i2.caster);
            }
            return t3.subpaths[r3] = i2, i2 ? "real" : o2 ? "nested" : "adhocOrUndefined";
          }
          function W(t3, e3) {
            var r3, n2 = c(t3.childSchemas);
            try {
              for (n2.s(); !(r3 = n2.n()).done; ) {
                var i2 = r3.value.schema;
                i2.$implicitlyCreated && (Object.assign(i2.options, e3), W(i2, e3));
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
          }
          V.prototype = V.emit = V.listeners = V.removeListener = V.collection = V.errors = V.get = V.init = V.isModified = V.isNew = V.populated = V.remove = V.save = V.toObject = V.validate = 1, V.collection = 1, q.prototype.path = function(t3, e3) {
            if (void 0 === e3) {
              if (null != this.paths[t3])
                return this.paths[t3];
              var r3 = z(t3), n2 = function(t4, e4, r4) {
                if (t4.paths.hasOwnProperty(e4))
                  return t4.paths[e4];
                if (t4.subpaths.hasOwnProperty(r4)) {
                  var n3 = t4.subpaths[r4];
                  if ("nested" === n3)
                    return;
                  return n3;
                }
                if (t4.singleNestedPaths.hasOwnProperty(r4) && "object" === s(t4.singleNestedPaths[r4])) {
                  var i3 = t4.singleNestedPaths[r4];
                  if ("nested" === i3)
                    return;
                  return i3;
                }
                return null;
              }(this, t3, r3);
              if (null != n2)
                return n2;
              var i2 = K(this, t3);
              return null != i2 ? i2 : null != (n2 = this.hasMixedParent(r3)) ? n2 : I.test(t3) ? function(t4, e4, r4) {
                return H(t4, e4, r4), t4.subpaths[r4];
              }(this, t3, r3) : void 0;
            }
            var o2 = t3.split(".")[0];
            if (V[o2] && !this.options.suppressReservedKeysWarning) {
              var a2 = "`".concat(o2, "` is a reserved schema pathname and may break some functionality. ") + "You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.";
              T.warn(a2);
            }
            "object" === s(e3) && T.hasUserDefinedProperty(e3, "ref") && B(e3.ref, t3);
            var u2, f2 = t3.split(/\./), l2 = f2.pop(), h2 = this.tree, p2 = "", d2 = c(f2);
            try {
              for (d2.s(); !(u2 = d2.n()).done; ) {
                var y2 = u2.value;
                if (T.specialProperties.has(y2))
                  throw new Error("Cannot set special property `" + y2 + "` on a schema");
                if (p2 = p2 += (p2.length > 0 ? "." : "") + y2, h2[y2] || (this.nested[p2] = true, h2[y2] = {}), "object" !== s(h2[y2])) {
                  var m2 = "Cannot set nested path `" + t3 + "`. Parent path `" + p2 + "` already set to type " + h2[y2].name + ".";
                  throw new Error(m2);
                }
                h2 = h2[y2];
              }
            } catch (t4) {
              d2.e(t4);
            } finally {
              d2.f();
            }
            h2[l2] = w(e3), this.paths[t3] = this.interpretAsType(t3, e3, this.options);
            var v2 = this.paths[t3];
            if (v2.$isSchemaMap) {
              var g2 = t3 + ".$*";
              this.paths[g2] = v2.$__schemaType, this.mapPaths.push(this.paths[g2]), v2.$__schemaType.$isSingleNested && this.childSchemas.push({ schema: v2.$__schemaType.schema, model: v2.$__schemaType.caster, path: t3 });
            }
            if (v2.$isSingleNested) {
              for (var _2 = 0, S2 = Object.keys(v2.schema.paths); _2 < S2.length; _2++) {
                var O2 = S2[_2];
                this.singleNestedPaths[t3 + "." + O2] = v2.schema.paths[O2];
              }
              for (var j2 = 0, $2 = Object.keys(v2.schema.singleNestedPaths); j2 < $2.length; j2++) {
                var E2 = $2[j2];
                this.singleNestedPaths[t3 + "." + E2] = v2.schema.singleNestedPaths[E2];
              }
              for (var A2 = 0, P2 = Object.keys(v2.schema.subpaths); A2 < P2.length; A2++) {
                var x2 = P2[A2];
                this.singleNestedPaths[t3 + "." + x2] = v2.schema.subpaths[x2];
              }
              for (var k2 = 0, M2 = Object.keys(v2.schema.nested); k2 < M2.length; k2++) {
                var R2 = M2[k2];
                this.singleNestedPaths[t3 + "." + R2] = "nested";
              }
              Object.defineProperty(v2.schema, "base", { configurable: true, enumerable: false, writable: false, value: this.base }), v2.caster.base = this.base, this.childSchemas.push({ schema: v2.schema, model: v2.caster, path: t3 });
            } else
              v2.$isMongooseDocumentArray && (Object.defineProperty(v2.schema, "base", { configurable: true, enumerable: false, writable: false, value: this.base }), v2.casterConstructor.base = this.base, this.childSchemas.push({ schema: v2.schema, model: v2.casterConstructor, path: t3 }));
            if (v2.$isMongooseArray && v2.caster instanceof b) {
              for (var N2 = t3, D2 = v2; D2.$isMongooseArray; )
                N2 += ".$", D2.$isMongooseDocumentArray ? (D2.$embeddedSchemaType._arrayPath = N2, D2.$embeddedSchemaType._arrayParentPath = t3, D2 = D2.$embeddedSchemaType) : (D2.caster._arrayPath = N2, D2.caster._arrayParentPath = t3, D2 = D2.caster), this.subpaths[N2] = D2;
              for (var L2 = 0, C2 = []; L2 < C2.length; L2++) {
                var U2 = C2[L2];
                this.subpaths[U2.path] = U2;
              }
            }
            if (v2.$isMongooseDocumentArray) {
              for (var q2 = 0, F2 = Object.keys(v2.schema.paths); q2 < F2.length; q2++) {
                var W2 = F2[q2], J2 = v2.schema.paths[W2];
                this.subpaths[t3 + "." + W2] = J2, "object" === s(J2) && null != J2 && null == J2.$parentSchemaDocArray && (J2.$parentSchemaDocArray = v2);
              }
              for (var G2 = 0, Y2 = Object.keys(v2.schema.subpaths); G2 < Y2.length; G2++) {
                var Q = Y2[G2], X = v2.schema.subpaths[Q];
                this.subpaths[t3 + "." + Q] = X, "object" === s(X) && null != X && null == X.$parentSchemaDocArray && (X.$parentSchemaDocArray = v2);
              }
              for (var Z = 0, tt = Object.keys(v2.schema.singleNestedPaths); Z < tt.length; Z++) {
                var et = tt[Z], rt = v2.schema.singleNestedPaths[et];
                this.subpaths[t3 + "." + et] = rt, "object" === s(rt) && null != rt && null == rt.$parentSchemaDocArray && (rt.$parentSchemaDocArray = v2);
              }
            }
            return this;
          }, q.prototype._gatherChildSchemas = function() {
            for (var t3 = [], e3 = 0, r3 = Object.keys(this.paths); e3 < r3.length; e3++) {
              var n2 = r3[e3];
              if ("string" == typeof n2) {
                var i2 = this.paths[n2];
                i2.$isMongooseDocumentArray || i2.$isSingleNested ? t3.push({ schema: i2.schema, model: i2.caster, path: n2 }) : i2.$isSchemaMap && i2.$__schemaType.$isSingleNested && t3.push({ schema: i2.$__schemaType.schema, model: i2.$__schemaType.caster, path: n2 });
              }
            }
            return this.childSchemas = t3, t3;
          }, Object.defineProperty(q.prototype, "base", { configurable: true, enumerable: false, writable: true, value: null }), q.prototype.interpretAsType = function(t3, e3, i2) {
            if (e3 instanceof b) {
              if (e3.path === t3)
                return e3;
              var o2 = e3.clone();
              return o2.path = t3, o2;
            }
            var u2 = null != this.base ? this.base.Schema.Types : q.Types, c2 = null != this.base ? this.base.Types : r2(9600);
            if (!(T.isPOJO(e3) || e3 instanceof m) && "Object" !== T.getFunctionName(e3.constructor)) {
              var f2 = e3;
              (e3 = {})[i2.typeKey] = f2;
            }
            var l2, h2 = e3[i2.typeKey] && (e3[i2.typeKey] instanceof Function || "type" !== i2.typeKey || !e3.type.type) ? e3[i2.typeKey] : {};
            if (T.isPOJO(h2) || "mixed" === h2)
              return new u2.Mixed(t3, e3);
            if (Array.isArray(h2) || h2 === Array || "array" === h2 || h2 === u2.Array) {
              var p2 = h2 === Array || "array" === h2 ? e3.cast || e3.of : h2[0];
              if (p2 && p2.instanceOfSchema) {
                if (!(p2 instanceof q)) {
                  if (!this.options._isMerging)
                    throw new TypeError("Schema for array path `" + t3 + "` is from a different copy of the Mongoose module. Please make sure you're using the same version of Mongoose everywhere with `npm list mongoose`. If you are still getting this error, please add `new Schema()` around the path: " + "".concat(t3, ": new Schema(...)"));
                  p2 = new q(p2);
                }
                return new u2.DocumentArray(t3, p2, e3);
              }
              if (p2 && p2[i2.typeKey] && p2[i2.typeKey].instanceOfSchema) {
                if (!(p2[i2.typeKey] instanceof q)) {
                  if (!this.options._isMerging)
                    throw new TypeError("Schema for array path `" + t3 + "` is from a different copy of the Mongoose module. Please make sure you're using the same version of Mongoose everywhere with `npm list mongoose`. If you are still getting this error, please add `new Schema()` around the path: " + "".concat(t3, ": new Schema(...)"));
                  p2[i2.typeKey] = new q(p2[i2.typeKey]);
                }
                return new u2.DocumentArray(t3, p2[i2.typeKey], e3, p2);
              }
              if (void 0 !== p2 && (Array.isArray(p2) || p2.type === Array || "Array" == p2.type))
                return p2 && "Array" == p2.type && (p2.type = Array), new u2.Array(t3, this.interpretAsType(t3, p2, i2), e3);
              var d2 = null == p2 || !p2[i2.typeKey] || "type" === i2.typeKey && p2.type.type ? p2 : p2[i2.typeKey];
              if ("string" == typeof p2)
                p2 = u2[p2.charAt(0).toUpperCase() + p2.substring(1)];
              else if (T.isPOJO(d2)) {
                if (Object.keys(d2).length) {
                  var v2 = { minimize: i2.minimize };
                  i2.typeKey && (v2.typeKey = i2.typeKey), i2.hasOwnProperty("strict") && (v2.strict = i2.strict), i2.hasOwnProperty("strictQuery") && (v2.strictQuery = i2.strictQuery), i2.hasOwnProperty("toObject") && (v2.toObject = T.omit(i2.toObject, ["transform"])), i2.hasOwnProperty("toJSON") && (v2.toJSON = T.omit(i2.toJSON, ["transform"])), this._userProvidedOptions.hasOwnProperty("_id") ? v2._id = this._userProvidedOptions._id : null != q.Types.DocumentArray.defaultOptions._id && (v2._id = q.Types.DocumentArray.defaultOptions._id);
                  var g2 = new q(d2, v2);
                  return g2.$implicitlyCreated = true, new u2.DocumentArray(t3, g2, e3);
                }
                return new u2.Array(t3, u2.Mixed, e3);
              }
              if (p2) {
                if (h2 = !p2[i2.typeKey] || "type" === i2.typeKey && p2.type.type ? p2 : p2[i2.typeKey], Array.isArray(h2))
                  return new u2.Array(t3, this.interpretAsType(t3, h2, i2), e3);
                if ("ClockDate" === (l2 = "string" == typeof h2 ? h2 : h2.schemaName || T.getFunctionName(h2)) && (l2 = "Date"), void 0 === l2)
                  throw new TypeError("Invalid schema configuration: " + "Could not determine the embedded type for array `".concat(t3, "`. ") + "See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.");
                if (!u2.hasOwnProperty(l2))
                  throw new TypeError("Invalid schema configuration: " + "`".concat(l2, "` is not a valid type within the array `").concat(t3, "`.") + "See https://bit.ly/mongoose-schematypes for a list of valid schema types.");
              }
              return new u2.Array(t3, p2 || u2.Mixed, e3, i2);
            }
            if (h2 && h2.instanceOfSchema)
              return new u2.Subdocument(h2, t3, e3);
            if ((l2 = n.isBuffer(h2) ? "Buffer" : "function" == typeof h2 || "object" === s(h2) ? h2.schemaName || T.getFunctionName(h2) : h2 === c2.ObjectId ? "ObjectId" : h2 === c2.Decimal128 ? "Decimal128" : null == h2 ? "" + h2 : h2.toString()) && (l2 = l2.charAt(0).toUpperCase() + l2.substring(1)), "ObjectID" === l2 && (l2 = "ObjectId"), "ClockDate" === l2 && (l2 = "Date"), void 0 === l2)
              throw new TypeError("Invalid schema configuration: `".concat(t3, "` schematype definition is ") + "invalid. See https://mongoosejs.com/docs/guide.html#definition for more info on supported schema syntaxes.");
            if (null == u2[l2])
              throw new TypeError("Invalid schema configuration: `".concat(l2, "` is not ") + "a valid type at path `".concat(t3, "`. See ") + "https://bit.ly/mongoose-schematypes for a list of valid schema types.");
            var _2 = new u2[l2](t3, e3);
            return _2.$isSchemaMap && function(t4, e4, r3, n2, i3) {
              var o3 = r3 + ".$*", s2 = { type: {} };
              T.hasUserDefinedProperty(n2, "of") && ((s2 = T.isPOJO(n2.of) && Object.keys(n2.of).length > 0 && !T.hasUserDefinedProperty(n2.of, t4.options.typeKey) ? a({}, t4.options.typeKey, new q(n2.of)) : T.isPOJO(n2.of) ? Object.assign({}, n2.of) : a({}, t4.options.typeKey, n2.of))[t4.options.typeKey] && s2[t4.options.typeKey].instanceOfSchema && s2[t4.options.typeKey].eachPath(function(t5, e5) {
                if (true === e5.options.select || false === e5.options.select)
                  throw new y('Cannot use schema-level projections (`select: true` or `select: false`) within maps at path "' + r3 + "." + t5 + '"');
              }), T.hasUserDefinedProperty(n2, "ref") && (s2.ref = n2.ref)), e4.$__schemaType = t4.interpretAsType(o3, s2, i3);
            }(this, _2, t3, e3, i2), _2;
          }, q.prototype.eachPath = function(t3) {
            for (var e3 = Object.keys(this.paths), r3 = e3.length, n2 = 0; n2 < r3; ++n2)
              t3(e3[n2], this.paths[e3[n2]]);
            return this;
          }, q.prototype.requiredPaths = function(t3) {
            if (this._requiredpaths && !t3)
              return this._requiredpaths;
            for (var e3 = Object.keys(this.paths), r3 = e3.length, n2 = []; r3--; ) {
              var i2 = e3[r3];
              this.paths[i2].isRequired && n2.push(i2);
            }
            return this._requiredpaths = n2, this._requiredpaths;
          }, q.prototype.indexedPaths = function() {
            return this._indexedpaths || (this._indexedpaths = this.indexes()), this._indexedpaths;
          }, q.prototype.pathType = function(t3) {
            if (this.paths.hasOwnProperty(t3))
              return "real";
            if (this.virtuals.hasOwnProperty(t3))
              return "virtual";
            if (this.nested.hasOwnProperty(t3))
              return "nested";
            var e3 = z(t3);
            if (this.subpaths.hasOwnProperty(e3) || this.subpaths.hasOwnProperty(t3))
              return "real";
            var r3 = this.singleNestedPaths.hasOwnProperty(e3) || this.singleNestedPaths.hasOwnProperty(t3);
            return r3 ? "nested" === r3 ? "nested" : "real" : null != K(this, t3) ? "real" : /\.\d+\.|\.\d+$/.test(t3) ? H(this, t3, e3) : "adhocOrUndefined";
          }, q.prototype.hasMixedParent = function(t3) {
            var e3 = t3.split(/\./g);
            t3 = "";
            for (var r3 = 0; r3 < e3.length; ++r3)
              if (t3 = r3 > 0 ? t3 + "." + e3[r3] : e3[r3], this.paths.hasOwnProperty(t3) && this.paths[t3] instanceof h.Mixed)
                return this.paths[t3];
            return null;
          }, q.prototype.setupTimestamp = function(t3) {
            return M(this, t3);
          }, q.prototype.queue = function(t3, e3) {
            return this.callQueue.push([t3, e3]), this;
          }, q.prototype.pre = function(t3) {
            if (t3 instanceof RegExp) {
              var e3, r3 = Array.prototype.slice.call(arguments, 1), n2 = c(D);
              try {
                for (n2.s(); !(e3 = n2.n()).done; ) {
                  var i2 = e3.value;
                  t3.test(i2) && this.pre.apply(this, [i2].concat(r3));
                }
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
              return this;
            }
            if (Array.isArray(t3)) {
              var o2, a2 = Array.prototype.slice.call(arguments, 1), s2 = c(t3);
              try {
                for (s2.s(); !(o2 = s2.n()).done; ) {
                  var u2 = o2.value;
                  this.pre.apply(this, [u2].concat(a2));
                }
              } catch (t4) {
                s2.e(t4);
              } finally {
                s2.f();
              }
              return this;
            }
            return this.s.hooks.pre.apply(this.s.hooks, arguments), this;
          }, q.prototype.post = function(t3) {
            if (t3 instanceof RegExp) {
              var e3, r3 = Array.prototype.slice.call(arguments, 1), n2 = c(D);
              try {
                for (n2.s(); !(e3 = n2.n()).done; ) {
                  var i2 = e3.value;
                  t3.test(i2) && this.post.apply(this, [i2].concat(r3));
                }
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
              return this;
            }
            if (Array.isArray(t3)) {
              var o2, a2 = Array.prototype.slice.call(arguments, 1), s2 = c(t3);
              try {
                for (s2.s(); !(o2 = s2.n()).done; ) {
                  var u2 = o2.value;
                  this.post.apply(this, [u2].concat(a2));
                }
              } catch (t4) {
                s2.e(t4);
              } finally {
                s2.f();
              }
              return this;
            }
            return this.s.hooks.post.apply(this.s.hooks, arguments), this;
          }, q.prototype.plugin = function(t3, e3) {
            if ("function" != typeof t3)
              throw new Error('First param to `schema.plugin()` must be a function, got "' + s(t3) + '"');
            if (e3 && e3.deduplicate) {
              var r3, n2 = c(this.plugins);
              try {
                for (n2.s(); !(r3 = n2.n()).done; )
                  if (r3.value.fn === t3)
                    return this;
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
            }
            return this.plugins.push({ fn: t3, opts: e3 }), t3(this, e3), this;
          }, q.prototype.method = function(t3, e3, r3) {
            if ("string" != typeof t3)
              for (var n2 in t3)
                this.methods[n2] = t3[n2], this.methodOptions[n2] = w(r3);
            else
              this.methods[t3] = e3, this.methodOptions[t3] = w(r3);
            return this;
          }, q.prototype.static = function(t3, e3) {
            if ("string" != typeof t3)
              for (var r3 in t3)
                this.statics[r3] = t3[r3];
            else
              this.statics[t3] = e3;
            return this;
          }, q.prototype.index = function(t3, e3) {
            for (var r3 in t3 || (t3 = {}), e3 || (e3 = {}), e3.expires && T.expires(e3), t3)
              this.aliases[r3] && (t3 = T.renameObjKey(t3, r3, this.aliases[r3]));
            for (var n2 = 0, i2 = Object.keys(t3); n2 < i2.length; n2++) {
              var o2 = i2[n2];
              "ascending" === t3[o2] || "asc" === t3[o2] ? t3[o2] = 1 : "descending" !== t3[o2] && "desc" !== t3[o2] || (t3[o2] = -1);
            }
            var a2, s2 = c(this.indexes());
            try {
              for (s2.s(); !(a2 = s2.n()).done; ) {
                var u2 = a2.value;
                null == e3.name && null == u2[1].name && A(u2[0], t3) && T.warn("Duplicate schema index on ".concat(JSON.stringify(t3), ' found. This is often due to declaring an index using both "index: true" and "schema.index()". Please remove the duplicate index definition.'));
              }
            } catch (t4) {
              s2.e(t4);
            } finally {
              s2.f();
            }
            return this._indexes.push([t3, e3]), this;
          }, q.prototype.set = function(t3, e3, r3) {
            if (1 === arguments.length)
              return this.options[t3];
            switch (t3) {
              case "read":
                "string" == typeof e3 ? this.options[t3] = { mode: $(e3), tags: r3 } : Array.isArray(e3) && "string" == typeof e3[0] ? this.options[t3] = { mode: $(e3[0]), tags: e3[1] } : this.options[t3] = e3, this._userProvidedOptions[t3] = this.options[t3];
                break;
              case "timestamps":
                this.setupTimestamp(e3), this.options[t3] = e3, this._userProvidedOptions[t3] = this.options[t3];
                break;
              case "_id":
                this.options[t3] = e3, this._userProvidedOptions[t3] = this.options[t3], e3 && !this.paths._id ? _(this) : !e3 && null != this.paths._id && this.paths._id.auto && this.remove("_id");
                break;
              default:
                this.options[t3] = e3, this._userProvidedOptions[t3] = this.options[t3];
            }
            return "strict" === t3 && W(this, { strict: e3 }), "strictQuery" === t3 && W(this, { strictQuery: e3 }), "toObject" === t3 && (delete (e3 = o({}, e3)).transform, W(this, { toObject: e3 })), "toJSON" === t3 && (delete (e3 = o({}, e3)).transform, W(this, { toJSON: e3 })), this;
          }, q.prototype.get = function(t3) {
            return this.options[t3];
          };
          var J = "2d 2dsphere hashed text".split(" ");
          function G(t3, e3) {
            var r3, n2 = e3.split("."), i2 = n2.pop(), o2 = t3.tree, a2 = c(n2);
            try {
              for (a2.s(); !(r3 = a2.n()).done; )
                o2 = o2[r3.value];
            } catch (t4) {
              a2.e(t4);
            } finally {
              a2.f();
            }
            delete o2[i2];
          }
          function Y(t3) {
            return t3.startsWith("$[") && t3.endsWith("]");
          }
          Object.defineProperty(q, "indexTypes", { get: function() {
            return J;
          }, set: function() {
            throw new Error("Cannot overwrite Schema.indexTypes");
          } }), q.prototype.indexes = function() {
            return j(this);
          }, q.prototype.virtual = function(t3, e3) {
            if (t3 instanceof g || "VirtualType" === O(t3))
              return this.virtual(t3.path, t3.options);
            if (e3 = new v(e3), T.hasUserDefinedProperty(e3, ["ref", "refPath"])) {
              if (null == e3.localField)
                throw new Error("Reference virtuals require `localField` option");
              if (null == e3.foreignField)
                throw new Error("Reference virtuals require `foreignField` option");
              var r3 = this.virtual(t3);
              r3.options = e3, this.pre("init", function(n3, i3) {
                if (x.has(t3, n3)) {
                  var o3 = x.get(t3, n3);
                  if (this.$$populatedVirtuals || (this.$$populatedVirtuals = {}), e3.justOne || e3.count ? this.$$populatedVirtuals[t3] = Array.isArray(o3) ? o3[0] : o3 : this.$$populatedVirtuals[t3] = Array.isArray(o3) ? o3 : null == o3 ? [] : [o3], null != i3 && i3.hydratedPopulatedDocs && !e3.count) {
                    var a3 = r3._getModelNamesForPopulate(this), s3 = this.$$populatedVirtuals[t3];
                    if (Array.isArray(s3) || s3.$__ || 1 !== (null == a3 ? void 0 : a3.length)) {
                      if (Array.isArray(s3) && 1 === (null == a3 ? void 0 : a3.length)) {
                        for (var u3 = this.db.model(a3[0]), c3 = 0; c3 < s3.length; ++c3)
                          s3[c3].$__ || (s3[c3] = u3.hydrate(s3[c3], null, { hydratedPopulatedDocs: true }));
                        var f2 = e3.foreignField;
                        this.$populated(t3, s3.map(function(t4) {
                          return null == t4 ? t4 : t4.get("function" == typeof f2 ? f2.call(t4, t4) : f2);
                        }), { populateModelSymbol: u3 });
                      }
                    } else {
                      var l2 = this.db.model(a3[0]);
                      this.$$populatedVirtuals[t3] = l2.hydrate(s3);
                    }
                  }
                  x.unset(t3, n3);
                }
              }), r3.set(function(r4) {
                return this.$$populatedVirtuals || (this.$$populatedVirtuals = {}), k(this.$$populatedVirtuals, t3, r4, e3);
              }), "function" == typeof e3.get && r3.get(e3.get);
              for (var n2 = t3.split("."), i2 = n2[0], o2 = 0; o2 < n2.length - 1; ++o2)
                if (null != this.paths[i2]) {
                  if (this.paths[i2].$isMongooseDocumentArray || this.paths[i2].$isSingleNested) {
                    var a2 = n2.slice(o2 + 1).join(".");
                    this.paths[i2].schema.virtual(a2, e3);
                    break;
                  }
                  i2 += "." + n2[o2 + 1];
                }
              return r3;
            }
            var s2 = this.virtuals, u2 = t3.split(".");
            if ("real" === this.pathType(t3))
              throw new Error('Virtual path "' + t3 + '" conflicts with a real path in the schema');
            if (s2[t3] = u2.reduce(function(r4, n3, i3) {
              return r4[n3] || (r4[n3] = i3 === u2.length - 1 ? new g(e3, t3) : {}), r4[n3];
            }, this.tree), e3 && e3.applyToArray && u2.length > 1) {
              var c2 = this.path(u2.slice(0, -1).join("."));
              if (c2 && c2.$isMongooseArray)
                return c2.virtual(u2[u2.length - 1], e3);
              throw new y('Path "'.concat(c2, '" is not an array'));
            }
            return s2[t3];
          }, q.prototype.virtualpath = function(t3) {
            return this.virtuals.hasOwnProperty(t3) ? this.virtuals[t3] : null;
          }, q.prototype.remove = function(t3) {
            return "string" == typeof t3 && (t3 = [t3]), Array.isArray(t3) && t3.forEach(function(t4) {
              if (null != this.path(t4) || this.nested[t4]) {
                if (this.nested[t4]) {
                  var e3, r3 = c(Object.keys(this.paths).concat(Object.keys(this.nested)));
                  try {
                    for (r3.s(); !(e3 = r3.n()).done; ) {
                      var n2 = e3.value;
                      n2.startsWith(t4 + ".") && (delete this.paths[n2], delete this.nested[n2], G(this, n2));
                    }
                  } catch (t5) {
                    r3.e(t5);
                  } finally {
                    r3.f();
                  }
                  return delete this.nested[t4], void G(this, t4);
                }
                delete this.paths[t4], G(this, t4);
              }
            }, this), this;
          }, q.prototype.removeVirtual = function(t3) {
            if ("string" == typeof t3 && (t3 = [t3]), Array.isArray(t3)) {
              var e3, r3 = c(t3);
              try {
                for (r3.s(); !(e3 = r3.n()).done; ) {
                  var n2 = e3.value;
                  if (null == this.virtuals[n2])
                    throw new y('Attempting to remove virtual "'.concat(n2, '" that does not exist.'));
                }
              } catch (t4) {
                r3.e(t4);
              } finally {
                r3.f();
              }
              var i2, o2 = c(t3);
              try {
                for (o2.s(); !(i2 = o2.n()).done; ) {
                  var a2 = i2.value;
                  delete this.paths[a2], delete this.virtuals[a2], -1 !== a2.indexOf(".") ? x.unset(a2, this.tree) : delete this.tree[a2];
                }
              } catch (t4) {
                o2.e(t4);
              } finally {
                o2.f();
              }
            }
            return this;
          }, q.prototype.loadClass = function(t3, e3) {
            return t3 === Object.prototype || t3 === Function.prototype || t3.prototype.hasOwnProperty("$isMongooseModelPrototype") || t3.prototype.hasOwnProperty("$isMongooseDocumentPrototype") || (this.loadClass(Object.getPrototypeOf(t3), e3), e3 || Object.getOwnPropertyNames(t3).forEach(function(e4) {
              if (!e4.match(/^(length|name|prototype|constructor|__proto__)$/)) {
                var r3 = Object.getOwnPropertyDescriptor(t3, e4);
                r3.hasOwnProperty("value") && this.static(e4, r3.value);
              }
            }, this), Object.getOwnPropertyNames(t3.prototype).forEach(function(r3) {
              if (!r3.match(/^(constructor)$/)) {
                var n2 = Object.getOwnPropertyDescriptor(t3.prototype, r3);
                e3 || "function" == typeof n2.value && this.method(r3, n2.value), "function" == typeof n2.get && (this.virtuals[r3] && (this.virtuals[r3].getters = []), this.virtual(r3).get(n2.get)), "function" == typeof n2.set && (this.virtuals[r3] && (this.virtuals[r3].setters = []), this.virtual(r3).set(n2.set));
              }
            }, this)), this;
          }, q.prototype._getSchema = function(t3) {
            var e3 = this.path(t3), r3 = [];
            if (e3)
              return e3.$fullPath = t3, e3;
            for (var n2 = t3.split("."), i2 = 0; i2 < n2.length; ++i2)
              ("$" === n2[i2] || Y(n2[i2])) && (n2[i2] = "0"), U.test(n2[i2]) && (n2[i2] = "$");
            return function t4(e4, n3) {
              for (var i3, o2, a2 = e4.length + 1; a2--; )
                if (o2 = e4.slice(0, a2).join("."), i3 = n3.path(o2)) {
                  if (r3.push(o2), i3.caster) {
                    if (i3.caster instanceof h.Mixed)
                      return i3.caster.$fullPath = r3.join("."), i3.caster;
                    if (a2 !== e4.length) {
                      if (a2 + 1 === e4.length && i3.$embeddedSchemaType && ("$" === e4[a2] || Y(e4[a2])))
                        return i3.$embeddedSchemaType;
                      if (i3.schema) {
                        var s2 = void 0;
                        return "$" === e4[a2] || Y(e4[a2]) ? a2 + 1 === e4.length ? i3.$embeddedSchemaType : ((s2 = t4(e4.slice(a2 + 1), i3.schema)) && (s2.$parentSchemaDocArray = s2.$parentSchemaDocArray || (i3.schema.$isSingleNested ? null : i3)), s2) : ((s2 = t4(e4.slice(a2), i3.schema)) && (s2.$parentSchemaDocArray = s2.$parentSchemaDocArray || (i3.schema.$isSingleNested ? null : i3)), s2);
                      }
                    }
                  } else if (i3.$isSchemaMap) {
                    if (a2 >= e4.length)
                      return i3;
                    if (a2 + 1 >= e4.length)
                      return i3.$__schemaType;
                    if (i3.$__schemaType instanceof h.Mixed)
                      return i3.$__schemaType;
                    if (null != i3.$__schemaType.schema)
                      return t4(e4.slice(a2 + 1), i3.$__schemaType.schema);
                  }
                  return i3.$fullPath = r3.join("."), i3;
                }
            }(n2, this);
          }, q.prototype._getPathType = function(t3) {
            return this.path(t3) ? "real" : function t4(e3, r3) {
              for (var n2, i2, o2 = e3.length + 1; o2--; ) {
                if (i2 = e3.slice(0, o2).join("."), n2 = r3.path(i2))
                  return n2.caster ? n2.caster instanceof h.Mixed ? { schema: n2, pathType: "mixed" } : o2 !== e3.length && n2.schema ? "$" === e3[o2] || Y(e3[o2]) ? o2 === e3.length - 1 ? { schema: n2, pathType: "nested" } : t4(e3.slice(o2 + 1), n2.schema) : t4(e3.slice(o2), n2.schema) : { schema: n2, pathType: n2.$isSingleNested ? "nested" : "array" } : { schema: n2, pathType: "real" };
                if (o2 === e3.length && r3.nested[i2])
                  return { schema: r3, pathType: "nested" };
              }
              return { schema: n2 || r3, pathType: "undefined" };
            }(t3.split("."), this);
          }, q.prototype._transformDuplicateKeyError = function(t3) {
            if (!this._duplicateKeyErrorMessagesByPath)
              return t3;
            if (11e3 !== t3.code && 11001 !== t3.code)
              return t3;
            if (null != t3.keyPattern) {
              var e3 = t3.keyPattern, r3 = Object.keys(e3);
              if (1 !== r3.length)
                return t3;
              var n2 = r3[0];
              return this._duplicateKeyErrorMessagesByPath.hasOwnProperty(n2) ? new y(this._duplicateKeyErrorMessagesByPath[n2], { cause: t3 }) : t3;
            }
            return t3;
          }, q.prototype._preCompile = function() {
            this.plugin(E, { deduplicate: true });
          }, q.prototype.toJSONSchema = function(t3) {
            for (var e3, r3 = null !== (e3 = null == t3 ? void 0 : t3.useBsonType) && void 0 !== e3 && e3, n2 = r3 ? { required: [], properties: {} } : { type: "object", required: [], properties: {} }, i2 = 0, o2 = Object.keys(this.paths); i2 < o2.length; i2++) {
              var a2 = o2[i2], s2 = this.paths[a2];
              if (-1 === s2._presplitPath.indexOf("$*")) {
                var u2 = n2;
                if (s2._presplitPath.length > 1)
                  for (var c2 = 0; c2 < s2._presplitPath.length - 1; ++c2) {
                    var h2 = s2._presplitPath[c2];
                    null == u2.properties[h2] && (u2.properties[h2] = r3 ? { bsonType: ["object", "null"], properties: {} } : { type: ["object", "null"], properties: {} }), u2 = u2.properties[h2];
                  }
                var p2 = s2._presplitPath[s2._presplitPath.length - 1], d2 = false;
                "_id" === a2 ? (u2.required || (u2.required = []), u2.required.push("_id"), d2 = true) : s2.options.required && "function" != typeof s2.options.required && (u2.required || (u2.required = []), u2.required.push(p2), d2 = true), u2.properties[p2] = s2.toJSONSchema(t3), s2.options.enum && (u2.properties[p2].enum = d2 ? s2.options.enum : [].concat(function(t4) {
                  if (Array.isArray(t4))
                    return l(t4);
                }(y2 = s2.options.enum) || function(t4) {
                  if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                    return Array.from(t4);
                }(y2) || f(y2) || function() {
                  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }(), [null]));
              }
            }
            var y2;
            return 0 === n2.required.length && delete n2.required, n2;
          }, t2.exports = e2 = q, q.Types = h = r2(7953), e2.ObjectId = h.ObjectId;
        }, 7760: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != s(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != s(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == s(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function s(t3) {
            return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, s(t3);
          }
          var u, c, f = r2(8499), l = r2(2555), h = r2(8213), p = r2(4592), d = r2(6426), y = d.CastError, b = r2(5022), m = r2(2069), v = r2(622), g = r2(2073), _ = r2(7982), w = r2(4450), S = r2(5879), O = r2(5110), j = r2(7352), $ = r2(8768), E = r2(5558).G, A = r2(4327), P = r2(9604), x = r2(8677), k = Symbol("mongoose#isNestedArray"), M = Object.freeze({});
          function T(t3, e3, n2, i2) {
            c || (c = r2(9600).Embedded);
            var o2, a2, s2 = "type";
            if (i2 && i2.typeKey && (s2 = i2.typeKey), this.schemaOptions = i2, e3) {
              var u2 = {};
              $.isPOJO(e3) && (e3[s2] ? (delete (u2 = w(e3))[s2], e3 = e3[s2]) : e3 = b), null != n2 && null != n2.ref && null == u2.ref && (u2.ref = n2.ref), e3 === Object && (e3 = b);
              var f2 = "string" == typeof e3 ? e3 : $.getFunctionName(e3), l2 = r2(7953), h2 = l2.hasOwnProperty(f2) ? l2[f2] : e3;
              if (this.casterConstructor = h2, this.casterConstructor instanceof T && (this.casterConstructor[k] = true), "function" != typeof h2 || h2.$isArraySubdocument || h2.$isSchemaMap)
                this.caster = h2, this.caster instanceof c || (this.caster.path = t3);
              else {
                var p2 = this.caster instanceof c ? null : t3;
                this.caster = new h2(p2, u2);
              }
              this.$embeddedSchemaType = this.caster;
            }
            if (this.$isMongooseArray = true, d.call(this, t3, n2, "Array"), null != this.defaultValue && (o2 = this.defaultValue, a2 = "function" == typeof o2), !("defaultValue" in this) || null != this.defaultValue) {
              var y2 = function() {
                return a2 ? o2.call(this) : null != o2 ? [].concat(o2) : [];
              };
              y2.$runBeforeSetters = !a2, this.default(y2);
            }
          }
          T.schemaName = "Array", T.options = { castNonArrays: true }, T.defaultOptions = {}, T.set = d.set, T.setters = [], T.get = d.get, T.prototype = Object.create(d.prototype), T.prototype.constructor = T, T.prototype.OptionsConstructor = p, T._checkRequired = d.prototype.checkRequired, T.checkRequired = d.checkRequired, T.prototype.virtuals = null, T.prototype.checkRequired = function(t3, e3) {
            return "object" === s(t3) && d._isRef(this, t3, e3, true) ? !!t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : T.checkRequired())(t3);
          }, T.prototype.enum = function() {
            for (var t3 = this; ; ) {
              var e3 = t3 && t3.caster && t3.caster.instance;
              if ("Array" !== e3) {
                if ("String" !== e3 && "Number" !== e3)
                  throw new Error("`enum` can only be set on an array of strings or numbers , not " + e3);
                break;
              }
              t3 = t3.caster;
            }
            var r3 = arguments;
            return !Array.isArray(arguments) && $.isObject(arguments) && (r3 = $.object.vals(r3)), t3.caster.enum.apply(t3.caster, r3), this;
          }, T.prototype.applyGetters = function(t3, e3) {
            return null != e3 && null != e3.$__ && e3.$populated(this.path) ? t3 : d.prototype.applyGetters.call(this, t3, e3);
          }, T.prototype._applySetters = function(t3, e3, r3, n2) {
            if (this.casterConstructor.$isMongooseArray && T.options.castNonArrays && !this[k]) {
              for (var i2 = 0, o2 = this; null != o2 && o2.$isMongooseArray && !o2.$isMongooseDocumentArray; )
                ++i2, o2 = o2.casterConstructor;
              if (null != t3 && 0 !== t3.length) {
                var a2 = g(t3);
                if (a2.min === a2.max && a2.max < i2 && a2.containsNonArrayItem)
                  for (var s2 = a2.max; s2 < i2; ++s2)
                    t3 = [t3];
              }
            }
            return d.prototype._applySetters.call(this, t3, e3, r3, n2);
          }, T.prototype.cast = function(t3, e3, n2, i2, o2) {
            var a2, s2;
            if (u || (u = r2(9600).Array), Array.isArray(t3)) {
              if (!t3.length && e3) {
                var c2 = e3.schema.indexedPaths(), f2 = this.path;
                for (a2 = 0, s2 = c2.length; a2 < s2; ++a2) {
                  var l2 = c2[a2][0][f2];
                  if ("2dsphere" === l2 || "2d" === l2)
                    return;
                }
                var h2 = this.path.endsWith(".coordinates") ? this.path.substring(0, this.path.lastIndexOf(".")) : null;
                if (null != h2) {
                  for (a2 = 0, s2 = c2.length; a2 < s2; ++a2)
                    if ("2dsphere" === c2[a2][0][h2])
                      return;
                }
              }
              o2 = o2 || M;
              var p2 = $.isMongooseArray(t3) ? t3.__array : t3, d2 = o2.path || this.path;
              if (null != o2.arrayPathIndex && (d2 += "." + o2.arrayPathIndex), p2 = (t3 = u(p2, d2, e3, this)).__array, n2 && null != e3 && null != e3.$__ && e3.$populated(this.path))
                return t3;
              var m2 = this.caster, v2 = m2.$isMongooseArray;
              if (m2 && this.casterConstructor !== b)
                try {
                  var g2 = p2.length;
                  for (a2 = 0; a2 < g2; a2++) {
                    var _2 = {};
                    v2 && (null != o2.arrayPath || null != m2._arrayParentPath) && (_2.arrayPathIndex = a2), o2.hydratedPopulatedDocs && (_2.hydratedPopulatedDocs = o2.hydratedPopulatedDocs), p2[a2] = m2.applySetters(p2[a2], e3, n2, void 0, _2);
                  }
                } catch (e4) {
                  throw new y("[" + e4.kind + "]", j.inspect(t3), this.path + "." + a2, e4, this);
                }
              return t3;
            }
            var w2 = null != this.options.castNonArrays ? this.options.castNonArrays : T.options.castNonArrays;
            if (n2 || w2)
              return e3 && n2 && e3.markModified(this.path), this.cast([t3], e3, n2);
            throw new y("Array", j.inspect(t3), this.path, null, this);
          }, T.prototype._castForPopulate = function(t3, e3) {
            if (u || (u = r2(9600).Array), Array.isArray(t3)) {
              var n2, i2 = t3.__array ? t3.__array : t3, o2 = i2.length, a2 = this.caster;
              if (a2 && this.casterConstructor !== b)
                try {
                  for (n2 = 0; n2 < o2; n2++) {
                    var s2 = {};
                    a2.$isMongooseArray && null != a2._arrayParentPath && (s2.arrayPathIndex = n2), i2[n2] = a2.cast(i2[n2], e3, false, void 0, s2);
                  }
                } catch (e4) {
                  throw new y("[" + e4.kind + "]", j.inspect(t3), this.path + "." + n2, e4, this);
                }
              return t3;
            }
            throw new y("Array", j.inspect(t3), this.path, null, this);
          }, T.prototype.$toObject = T.prototype.toObject, T.prototype.discriminator = function() {
            for (var t3, e3 = this; e3.$isMongooseArray && !e3.$isMongooseDocumentArray; )
              if (null == (e3 = e3.casterConstructor) || "function" == typeof e3)
                throw new h("You can only add an embedded discriminator on a document array, " + this.path + " is a plain array");
            return (t3 = e3).discriminator.apply(t3, arguments);
          }, T.prototype.clone = function() {
            var t3 = Object.assign({}, this.options), e3 = new this.constructor(this.path, this.caster, t3, this.schemaOptions);
            return e3.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e3.requiredValidator = this.requiredValidator), e3;
          }, T.prototype._castForQuery = function(t3, e3) {
            var r3 = this, n2 = this.casterConstructor;
            if (t3 && n2.discriminators && n2.schema && n2.schema.options && n2.schema.options.discriminatorKey)
              if ("string" == typeof t3[n2.schema.options.discriminatorKey] && n2.discriminators[t3[n2.schema.options.discriminatorKey]])
                n2 = n2.discriminators[t3[n2.schema.options.discriminatorKey]];
              else {
                var i2 = x(n2.discriminators, t3[n2.schema.options.discriminatorKey]);
                i2 && (n2 = i2);
              }
            var o2 = this.casterConstructor.prototype, a2 = o2 && o2.castForQuery, s2 = o2 && o2.cast, u2 = n2.castForQuery, c2 = this.caster;
            return Array.isArray(t3) ? (this.setters.reverse().forEach(function(e4) {
              t3 = e4.call(r3, t3, r3);
            }), t3 = t3.map(function(t4) {
              return $.isObject(t4) && t4.$elemMatch ? t4 : a2 ? t4 = a2.call(c2, null, t4, e3) : s2 ? t4 = s2.call(c2, t4) : u2 ? t4 = u2.call(c2, null, t4, e3) : null != t4 ? t4 = new n2(t4) : t4;
            })) : a2 ? t3 = a2.call(c2, null, t3, e3) : s2 ? t3 = s2.call(c2, t3) : u2 ? t3 = u2.call(c2, null, t3, e3) : null != t3 && (t3 = new n2(t3)), t3;
          }, T.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3 + " with Array.");
              return n2.call(this, e3, r3);
            }
            return this._castForQuery(e3, r3);
          }, T.prototype.virtual = function(t3, e3) {
            if (t3 instanceof v || "VirtualType" === S(t3))
              return this.virtual(t3.path, t3.options);
            if (e3 = new m(e3), $.hasUserDefinedProperty(e3, ["ref", "refPath"]))
              throw new h("Cannot set populate virtual as a property of an array");
            var r3 = new v(e3, t3);
            return null === this.virtuals && (this.virtuals = {}), this.virtuals[t3] = r3, r3;
          };
          var B = T.prototype.$conditionalHandlers = {};
          function I(t3) {
            return function(e3, r3) {
              if (!Array.isArray(e3))
                throw new TypeError("conditional " + t3 + " requires an array");
              var n2, i2 = [], o2 = function(t4, e4) {
                var r4 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
                if (!r4) {
                  if (Array.isArray(t4) || (r4 = function(t5, e5) {
                    if (t5) {
                      if ("string" == typeof t5)
                        return a(t5, e5);
                      var r5 = {}.toString.call(t5).slice(8, -1);
                      return "Object" === r5 && t5.constructor && (r5 = t5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(t5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? a(t5, e5) : void 0;
                    }
                  }(t4)) || e4 && t4 && "number" == typeof t4.length) {
                    r4 && (t4 = r4);
                    var n3 = 0, i3 = function() {
                    };
                    return { s: i3, n: function() {
                      return n3 >= t4.length ? { done: true } : { done: false, value: t4[n3++] };
                    }, e: function(t5) {
                      throw t5;
                    }, f: i3 };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var o3, s3 = true, u3 = false;
                return { s: function() {
                  r4 = r4.call(t4);
                }, n: function() {
                  var t5 = r4.next();
                  return s3 = t5.done, t5;
                }, e: function(t5) {
                  u3 = true, o3 = t5;
                }, f: function() {
                  try {
                    s3 || null == r4.return || r4.return();
                  } finally {
                    if (u3)
                      throw o3;
                  }
                } };
              }(e3);
              try {
                for (o2.s(); !(n2 = o2.n()).done; ) {
                  var s2, u2 = n2.value;
                  i2.push(_(null !== (s2 = this.casterConstructor.schema) && void 0 !== s2 ? s2 : r3.schema, u2, null, this && this.$$context));
                }
              } catch (t4) {
                o2.e(t4);
              } finally {
                o2.f();
              }
              return i2;
            };
          }
          B.$all = function(t3, e3) {
            var r3 = this;
            return Array.isArray(t3) || (t3 = [t3]), t3 = t3.map(function(t4) {
              if (!$.isObject(t4))
                return t4;
              if (null != t4.$elemMatch)
                return { $elemMatch: _(r3.casterConstructor.schema, t4.$elemMatch, null, r3 && r3.$$context) };
              var e4 = {};
              return e4[r3.path] = t4, _(r3.casterConstructor.schema, e4, null, r3 && r3.$$context)[r3.path];
            }, this), this.castForQuery(null, t3, e3);
          }, B.$options = String, B.$elemMatch = function(t3, e3) {
            for (var r3 = Object.keys(t3), n2 = r3.length, i2 = 0; i2 < n2; ++i2) {
              var o2 = r3[i2], a2 = t3[o2];
              O(o2) && null != a2 && (t3[o2] = this.castForQuery(o2, a2, e3));
            }
            return t3;
          }, B.$geoIntersects = P.cast$geoIntersects, B.$or = I("$or"), B.$and = I("$and"), B.$nor = I("$nor"), B.$near = B.$nearSphere = P.cast$near, B.$within = B.$geoWithin = P.cast$within, B.$size = B.$minDistance = B.$maxDistance = E, B.$exists = f, B.$type = l, B.$eq = B.$gt = B.$gte = B.$lt = B.$lte = B.$not = B.$regex = B.$ne = T.prototype._castForQuery, B.$nin = d.prototype.$conditionalHandlers.$nin, B.$in = d.prototype.$conditionalHandlers.$in, T.prototype.toJSONSchema = function(t3) {
            var e3 = this.getEmbeddedSchemaType(), r3 = this.options.required && "function" != typeof this.options.required;
            return i(i({}, A("array", "array", null == t3 ? void 0 : t3.useBsonType, r3)), {}, { items: e3.toJSONSchema(t3) });
          }, t2.exports = T;
        }, 3318: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s = r2(3609), u = r2(6426), c = r2(4058), f = r2(4327);
          function l(t3, e3) {
            u.call(this, t3, e3, "BigInt");
          }
          function h(t3, e3) {
            return this.castForQuery(null, t3, e3);
          }
          l.schemaName = "BigInt", l.defaultOptions = {}, l.prototype = Object.create(u.prototype), l.prototype.constructor = l, l._cast = c, l.set = u.set, l.setters = [], l.get = u.get, l.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, l._checkRequired = function(t3) {
            return null != t3;
          }, l.checkRequired = u.checkRequired, l.prototype.checkRequired = function(t3) {
            return this.constructor._checkRequired(t3);
          }, l.prototype.cast = function(t3) {
            var e3;
            e3 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast();
            try {
              return e3(t3);
            } catch (e4) {
              throw new s("BigInt", t3, this.path, e4, this);
            }
          }, l.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, { $gt: h, $gte: h, $lt: h, $lte: h }), l.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3)
              return (n2 = l.$conditionalHandlers[t3]) ? n2.call(this, e3) : this.applySetters(e3, r3);
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof s && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, l.prototype._castNullish = function(t3) {
            return void 0 === t3 || ("function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast()), t3;
          }, l.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return f("string", "long", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = l;
        }, 6413: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var a = r2(3609), s = r2(6426), u = r2(8953), c = r2(4327);
          function f(t3, e3) {
            s.call(this, t3, e3, "Boolean");
          }
          f.schemaName = "Boolean", f.defaultOptions = {}, f.prototype = Object.create(s.prototype), f.prototype.constructor = f, f._cast = u, f.set = s.set, f.setters = [], f.get = s.get, f.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, f._defaultCaster = function(t3) {
            if (null != t3 && "boolean" != typeof t3)
              throw new Error();
            return t3;
          }, f._checkRequired = function(t3) {
            return true === t3 || false === t3;
          }, f.checkRequired = s.checkRequired, f.prototype.checkRequired = function(t3) {
            return this.constructor._checkRequired(t3);
          }, Object.defineProperty(f, "convertToTrue", { get: function() {
            return u.convertToTrue;
          }, set: function(t3) {
            u.convertToTrue = t3;
          } }), Object.defineProperty(f, "convertToFalse", { get: function() {
            return u.convertToFalse;
          }, set: function(t3) {
            u.convertToFalse = t3;
          } }), f.prototype.cast = function(t3) {
            var e3;
            e3 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : f.cast();
            try {
              return e3(t3);
            } catch (e4) {
              throw new a("Boolean", t3, this.path, e4, this);
            }
          }, f.$conditionalHandlers = function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }({}, s.prototype.$conditionalHandlers), f.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3)
              return (n2 = f.$conditionalHandlers[t3]) ? n2.call(this, e3) : this.applySetters(e3, r3);
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof a && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, f.prototype._castNullish = function(t3) {
            if (void 0 === t3)
              return t3;
            var e3 = "function" == typeof this.constructor.cast ? this.constructor.cast() : f.cast();
            return null == e3 ? t3 : !(e3.convertToFalse instanceof Set && e3.convertToFalse.has(t3)) && (!!(e3.convertToTrue instanceof Set && e3.convertToTrue.has(t3)) || t3);
          }, f.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return c("boolean", "bool", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = f;
        }, 2307: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != s(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != s(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == s(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function s(t3) {
            return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, s(t3);
          }
          var u = r2(6365), c = r2(2945), f = r2(6426), l = r2(4327), h = r2(9460), p = r2(8768), d = u.Binary, y = f.CastError;
          function b(t3, e3) {
            f.call(this, t3, e3, "Buffer");
          }
          function m(t3, e3) {
            return this.castForQuery(null, t3, e3);
          }
          b.schemaName = "Buffer", b.defaultOptions = {}, b.prototype = Object.create(f.prototype), b.prototype.constructor = b, b.prototype.OptionsConstructor = c, b._checkRequired = function(t3) {
            return !(!t3 || !t3.length);
          }, b.set = f.set, b.setters = [], b.get = f.get, b.checkRequired = f.checkRequired, b.prototype.checkRequired = function(t3, e3) {
            return f._isRef(this, t3, e3, true) ? !!t3 : this.constructor._checkRequired(t3);
          }, b.prototype.cast = function(t3, e3, r3, i2, o2) {
            var a2;
            if (f._isRef(this, t3, e3, r3)) {
              if (t3 && t3.isMongooseBuffer)
                return t3;
              if (n.isBuffer(t3))
                return t3 && t3.isMongooseBuffer || (t3 = new u(t3, [this.path, e3]), null != this.options.subtype && (t3._subtype = this.options.subtype)), t3;
              if (t3 instanceof d) {
                if (a2 = new u(t3.value(true), [this.path, e3]), "number" != typeof t3.sub_type)
                  throw new y("Buffer", t3, this.path, null, this);
                return a2._subtype = t3.sub_type, a2;
              }
              if (null == t3 || p.isNonBuiltinObject(t3))
                return this._castRef(t3, e3, r3, o2);
            }
            if (t3 && t3._id && (t3 = t3._id), t3 && t3.isMongooseBuffer)
              return t3;
            if (n.isBuffer(t3))
              return t3 && t3.isMongooseBuffer || (t3 = new u(t3, [this.path, e3]), null != this.options.subtype && (t3._subtype = this.options.subtype)), t3;
            if (t3 instanceof d) {
              if (a2 = new u(t3.value(true), [this.path, e3]), "number" != typeof t3.sub_type)
                throw new y("Buffer", t3, this.path, null, this);
              return a2._subtype = t3.sub_type, a2;
            }
            if (null === t3)
              return t3;
            var c2 = s(t3);
            if ("string" === c2 || "number" === c2 || Array.isArray(t3) || "object" === c2 && "Buffer" === t3.type && Array.isArray(t3.data))
              return "number" === c2 && (t3 = [t3]), a2 = new u(t3, [this.path, e3]), null != this.options.subtype && (a2._subtype = this.options.subtype), a2;
            if (p.isPOJO(t3) && (t3.$binary instanceof d || "string" == typeof t3.$binary)) {
              var l2 = this.cast(n.from(t3.$binary, "base64"));
              if (null != t3.$type)
                return l2._subtype = t3.$type, l2;
            }
            throw new y("Buffer", t3, this.path, null, this);
          }, b.prototype.subtype = function(t3) {
            return this.options.subtype = t3, this;
          }, b.prototype.$conditionalHandlers = o(o({}, f.prototype.$conditionalHandlers), {}, { $bitsAllClear: h, $bitsAnyClear: h, $bitsAllSet: h, $bitsAnySet: h, $gt: m, $gte: m, $lt: m, $lte: m }), b.prototype.castForQuery = function(t3, e3, r3) {
            var n2, i2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3 + " with Buffer.");
              return n2.call(this, e3);
            }
            try {
              i2 = this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof y && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
            return i2 ? i2.toObject({ transform: false, virtuals: false }) : i2;
          }, b.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return l("string", "binData", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = b;
        }, 2345: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != a(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != a(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == a(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3) {
            return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, a(t3);
          }
          var s = r2(3672), u = r2(3731), c = r2(6426), f = r2(2477), l = r2(4327), h = r2(5879), p = r2(8768), d = c.CastError;
          function y(t3, e3) {
            c.call(this, t3, e3, "Date");
          }
          function b(t3) {
            return this.cast(t3);
          }
          y.schemaName = "Date", y.defaultOptions = {}, y.prototype = Object.create(c.prototype), y.prototype.constructor = y, y.prototype.OptionsConstructor = u, y._cast = f, y.set = c.set, y.setters = [], y.get = c.get, y.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, y._defaultCaster = function(t3) {
            if (null != t3 && !(t3 instanceof Date))
              throw new Error();
            return t3;
          }, y.prototype.expires = function(t3) {
            return "Object" !== h(this._index) && (this._index = {}), this._index.expires = t3, p.expires(this._index), this;
          }, y._checkRequired = function(t3) {
            return t3 instanceof Date;
          }, y.checkRequired = c.checkRequired, y.prototype.checkRequired = function(t3, e3) {
            return "object" === a(t3) && c._isRef(this, t3, e3, true) ? null != t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : y.checkRequired())(t3);
          }, y.prototype.min = function(t3, e3) {
            if (this.minValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.minValidator;
            }, this)), t3) {
              var r3 = e3 || s.messages.Date.min;
              "string" == typeof r3 && (r3 = r3.replace(/{MIN}/, t3 === Date.now ? "Date.now()" : t3.toString()));
              var n2 = this;
              this.validators.push({ validator: this.minValidator = function(e4) {
                var r4 = t3;
                "function" == typeof t3 && t3 !== Date.now && (r4 = r4.call(this));
                var i2 = r4 === Date.now ? r4() : n2.cast(r4);
                return null === e4 || e4.valueOf() >= i2.valueOf();
              }, message: r3, type: "min", min: t3 });
            }
            return this;
          }, y.prototype.max = function(t3, e3) {
            if (this.maxValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.maxValidator;
            }, this)), t3) {
              var r3 = e3 || s.messages.Date.max;
              "string" == typeof r3 && (r3 = r3.replace(/{MAX}/, t3 === Date.now ? "Date.now()" : t3.toString()));
              var n2 = this;
              this.validators.push({ validator: this.maxValidator = function(e4) {
                var r4 = t3;
                "function" == typeof r4 && r4 !== Date.now && (r4 = r4.call(this));
                var i2 = r4 === Date.now ? r4() : n2.cast(r4);
                return null === e4 || e4.valueOf() <= i2.valueOf();
              }, message: r3, type: "max", max: t3 });
            }
            return this;
          }, y.prototype.cast = function(t3) {
            var e3;
            e3 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : y.cast();
            try {
              return e3(t3);
            } catch (e4) {
              throw new d("date", t3, this.path, e4, this);
            }
          }, y.prototype.$conditionalHandlers = i(i({}, c.prototype.$conditionalHandlers), {}, { $gt: b, $gte: b, $lt: b, $lte: b }), y.prototype.castForQuery = function(t3, e3, r3) {
            if (null == t3)
              try {
                return this.applySetters(e3, r3);
              } catch (t4) {
                throw t4 instanceof d && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
              }
            var n2 = this.$conditionalHandlers[t3];
            if (!n2)
              throw new Error("Can't use " + t3 + " with Date.");
            return n2.call(this, e3);
          }, y.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return l("string", "date", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = y;
        }, 7045: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s = r2(6426), u = s.CastError, c = r2(9553), f = r2(4327), l = r2(3305);
          function h(t3, e3) {
            s.call(this, t3, e3, "Decimal128");
          }
          function p(t3) {
            return this.cast(t3);
          }
          h.schemaName = "Decimal128", h.defaultOptions = {}, h.prototype = Object.create(s.prototype), h.prototype.constructor = h, h._cast = c, h.set = s.set, h.setters = [], h.get = s.get, h.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, h._defaultCaster = function(t3) {
            if (null != t3 && !l(t3, "Decimal128"))
              throw new Error();
            return t3;
          }, h._checkRequired = function(t3) {
            return l(t3, "Decimal128");
          }, h.checkRequired = s.checkRequired, h.prototype.checkRequired = function(t3, e3) {
            return s._isRef(this, t3, e3, true) ? !!t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : h.checkRequired())(t3);
          }, h.prototype.cast = function(t3, e3, r3, n2, i2) {
            if (s._isRef(this, t3, e3, r3))
              return l(t3, "Decimal128") ? t3 : this._castRef(t3, e3, r3, i2);
            var o2;
            o2 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : h.cast();
            try {
              return o2(t3);
            } catch (e4) {
              throw new u("Decimal128", t3, this.path, e4, this);
            }
          }, h.prototype.$conditionalHandlers = o(o({}, s.prototype.$conditionalHandlers), {}, { $gt: p, $gte: p, $lt: p, $lte: p }), h.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return f("string", "decimal", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = h;
        }, 9123: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s, u, c = r2(3609), f = r2(8235), l = r2(3550).EventEmitter, h = r2(7760), p = r2(4561), d = r2(6426), y = r2(7982), b = r2(4327), m = r2(1469), v = r2(3694), g = r2(3216), _ = r2(5110), w = r2(8768), S = r2(7910), O = r2(5537), j = r2(7930).arrayAtomicsSymbol, $ = r2(7930).arrayPathSymbol, E = r2(7930).documentArrayParent;
          function A(t3, e3, r3, n2) {
            if (e3.options && e3.options.timeseries)
              throw new O(t3, "timeseries");
            var i2 = A.defaultOptions && A.defaultOptions._id;
            null != i2 && ((n2 = n2 || {})._id = i2), null != n2 && null != n2._id ? e3 = v(e3, n2) : null != r3 && null != r3._id && (e3 = v(e3, r3));
            var o2 = P(e3, r3);
            o2.prototype.$basePath = t3, h.call(this, t3, o2, r3), this.schema = e3, this.schemaOptions = n2 || {}, this.$isMongooseDocumentArray = true, this.Constructor = o2, o2.base = e3.base;
            var a2 = this.defaultValue;
            "defaultValue" in this && null == a2 || this.default(function() {
              var t4 = a2.call(this);
              return null == t4 || Array.isArray(t4) || (t4 = [t4]), t4;
            }), this.$embeddedSchemaType = new f(t3 + ".$", { required: this && this.schemaOptions && this.schemaOptions.required || false, $parentSchemaType: this }), this.$embeddedSchemaType.caster = this.Constructor, this.$embeddedSchemaType.schema = this.schema;
          }
          function P(t3, e3, n2) {
            function i2() {
              u.apply(this, arguments), null != this.__parentArray && null != this.__parentArray.getArrayParent() && this.$session(this.__parentArray.getArrayParent().$session());
            }
            u || (u = r2(6547)), t3._preCompile();
            var o2 = null != n2 ? n2.prototype : u.prototype;
            for (var a2 in i2.prototype = Object.create(o2), i2.prototype.$__setSchema(t3), i2.schema = t3, i2.prototype.constructor = i2, i2.$isArraySubdocument = true, i2.events = new l(), i2.base = t3.base, t3.methods)
              i2.prototype[a2] = t3.methods[a2];
            for (var s2 in t3.statics)
              i2[s2] = t3.statics[s2];
            for (var c2 in l.prototype)
              i2[c2] = l.prototype[c2];
            return i2.options = e3, i2;
          }
          A.schemaName = "DocumentArray", A.options = { castNonArrays: true }, A.prototype = Object.create(h.prototype), A.prototype.constructor = A, A.prototype.OptionsConstructor = p, A.prototype.$conditionalHandlers = o({}, h.prototype.$conditionalHandlers), A.prototype.discriminator = function(t3, e3, r3) {
            var n2;
            "function" == typeof t3 && (t3 = w.getFunctionName(t3)), r3 = r3 || {};
            var i2 = w.isPOJO(r3) ? r3.value : r3, o2 = "boolean" != typeof r3.clone || r3.clone;
            e3.instanceOfSchema && o2 && (e3 = e3.clone());
            var a2 = P(e3 = m(this.casterConstructor, t3, e3, i2, null, null, null === (n2 = r3) || void 0 === n2 ? void 0 : n2.overwriteExisting), null, this.casterConstructor);
            a2.baseCasterConstructor = this.casterConstructor;
            try {
              Object.defineProperty(a2, "name", { value: t3 });
            } catch (t4) {
            }
            return this.casterConstructor.discriminators[t3] = a2, this.casterConstructor.discriminators[t3];
          }, A.prototype.doValidate = function(t3, e3, n2, i2) {
            s || (s = r2(4878));
            var o2 = this;
            try {
              d.prototype.doValidate.call(this, t3, function(r3) {
                if (r3)
                  return e3(r3);
                var a2, c2 = t3 && t3.length;
                if (!c2)
                  return e3();
                if (i2 && i2.updateValidator)
                  return e3();
                function f2(t4) {
                  null != t4 && (a2 = t4), --c2 || e3(a2);
                }
                w.isMongooseDocumentArray(t3) || (t3 = new s(t3, o2.path, n2));
                for (var l2 = 0, h2 = c2; l2 < h2; ++l2) {
                  var p2 = t3[l2];
                  if (null != p2) {
                    if (!(p2 instanceof u)) {
                      var d2 = S(o2.casterConstructor, t3[l2]);
                      p2 = t3[l2] = new d2(p2, t3, void 0, void 0, l2);
                    }
                    null == i2 || !i2.validateModifiedOnly || p2.$isModified() ? p2.$__validate(null, i2, f2) : --c2 || e3(a2);
                  } else
                    --c2 || e3(a2);
                }
              }, n2);
            } catch (t4) {
              return e3(t4);
            }
          }, A.prototype.doValidateSync = function(t3, e3, r3) {
            var n2 = d.prototype.doValidateSync.call(this, t3, e3);
            if (null != n2)
              return n2;
            var i2 = t3 && t3.length, o2 = null;
            if (i2) {
              for (var a2 = 0, s2 = i2; a2 < s2; ++a2) {
                var c2 = t3[a2];
                if (c2) {
                  if (!(c2 instanceof u)) {
                    var f2 = S(this.casterConstructor, t3[a2]);
                    c2 = t3[a2] = new f2(c2, t3, void 0, void 0, a2);
                  }
                  if (null == r3 || !r3.validateModifiedOnly || c2.$isModified()) {
                    var l2 = c2.validateSync(r3);
                    l2 && null == o2 && (o2 = l2);
                  }
                }
              }
              return o2;
            }
          }, A.prototype.getDefault = function(t3, e3, n2) {
            var i2 = "function" == typeof this.defaultValue ? this.defaultValue.call(t3) : this.defaultValue;
            if (null == i2)
              return i2;
            if (n2 && n2.skipCast)
              return i2;
            s || (s = r2(4878)), Array.isArray(i2) || (i2 = [i2]), i2 = new s(i2, this.path, t3);
            for (var o2 = 0; o2 < i2.length; ++o2) {
              var a2 = new (S(this.casterConstructor, i2[o2]))({}, i2, void 0, void 0, o2);
              a2.$init(i2[o2]), a2.isNew = true, Object.assign(a2.$__.activePaths.default, a2.$__.activePaths.init), a2.$__.activePaths.init = {}, i2[o2] = a2;
            }
            return i2;
          };
          var x = Object.freeze({ transform: false, virtuals: false }), k = Object.freeze({ skipId: false, willInit: true });
          function M(t3, e3, r3) {
            if (r3 && e3) {
              for (var n2, i2, o2, a2 = t3.path + ".", s2 = Object.keys(e3), u2 = s2.length, c2 = {}; u2--; )
                if ((i2 = s2[u2]).startsWith(a2)) {
                  if ("$" === (o2 = i2.substring(a2.length)))
                    continue;
                  o2.startsWith("$.") && (o2 = o2.substring(2)), n2 || (n2 = true), c2[o2] = e3[i2];
                }
              return n2 && c2 || void 0;
            }
          }
          A.prototype.cast = function(t3, e3, n2, i2, o2) {
            if (s || (s = r2(4878)), null != t3 && null != t3[$] && t3 === i2)
              return t3;
            var a2, f2, l2 = (o2 = o2 || {}).path || this.path;
            if (!Array.isArray(t3)) {
              if (!n2 && !A.options.castNonArrays)
                throw new c("DocumentArray", t3, this.path, null, this);
              return e3 && n2 && e3.markModified(l2), this.cast([t3], e3, n2, i2, o2);
            }
            o2.skipDocumentArrayCast && !w.isMongooseDocumentArray(t3) || (t3 = new s(t3, l2, e3, this)), null != i2 && (t3[j] = i2[j] || {}), null != o2.arrayPathIndex && (t3[$] = l2 + "." + o2.arrayPathIndex);
            for (var h2 = w.isMongooseDocumentArray(t3) ? t3.__array : t3, p2 = h2.length, d2 = 0; d2 < p2; ++d2)
              if (h2[d2]) {
                var y2 = S(this.casterConstructor, h2[d2]), b2 = g(h2[d2], true);
                if (h2[d2] !== b2 && (h2[d2] = b2), h2[d2] instanceof u) {
                  if (h2[d2][E] !== e3)
                    if (n2) {
                      var m2 = new y2(null, t3, k, a2, d2);
                      h2[d2] = m2.$init(h2[d2]);
                    } else {
                      var v2 = new y2(h2[d2], t3, void 0, void 0, d2);
                      h2[d2] = v2;
                    }
                  null == h2[d2].__index && h2[d2].$setIndex(d2);
                } else if (null != h2[d2])
                  if (n2)
                    e3 ? a2 || (a2 = M(this, e3.$__.selected, n2)) : a2 = true, f2 = new y2(null, t3, k, a2, d2), h2[d2] = f2.$init(h2[d2]);
                  else if (i2 && "function" == typeof i2.id && (f2 = i2.id(h2[d2]._id)), i2 && f2 && w.deepEqual(f2.toObject(x), h2[d2]))
                    f2.set(h2[d2]), h2[d2] = f2;
                  else
                    try {
                      f2 = new y2(h2[d2], t3, void 0, void 0, d2), h2[d2] = f2;
                    } catch (e4) {
                      throw new c("embedded", h2[d2], t3[$], e4, this);
                    }
              }
            return t3;
          }, A.prototype.clone = function() {
            var t3 = Object.assign({}, this.options), e3 = new this.constructor(this.path, this.schema, t3, this.schemaOptions);
            return e3.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e3.requiredValidator = this.requiredValidator), e3.Constructor.discriminators = Object.assign({}, this.Constructor.discriminators), e3._appliedDiscriminators = this._appliedDiscriminators, e3;
          }, A.prototype.applyGetters = function(t3, e3) {
            return d.prototype.applyGetters.call(this, t3, e3);
          }, A.defaultOptions = {}, A.set = d.set, A.setters = [], A.get = d.get, A.prototype.$conditionalHandlers.$elemMatch = function(t3, e3) {
            for (var r3, n2 = Object.keys(t3), i2 = n2.length, o2 = 0; o2 < i2; ++o2) {
              var a2 = n2[o2], s2 = t3[a2];
              _(a2) && null != s2 && (t3[a2] = this.castForQuery(a2, s2, e3));
            }
            var u2 = this && this.casterConstructor && this.casterConstructor.schema && this.casterConstructor.schema.options && this.casterConstructor.schema.options.discriminatorKey, c2 = this && this.casterConstructor && this.casterConstructor.schema && this.casterConstructor.schema.discriminators || {};
            if (null != u2 && null != t3[u2] && null != c2[t3[u2]])
              return y(c2[t3[u2]], t3, null, this && this.$$context);
            var f2 = null !== (r3 = this.casterConstructor.schema) && void 0 !== r3 ? r3 : e3.schema;
            return y(f2, t3, null, this && this.$$context);
          }, A.prototype.toJSONSchema = function(t3) {
            var e3 = b("object", "object", null == t3 ? void 0 : t3.useBsonType, false), r3 = this.options.required && "function" != typeof this.options.required;
            return o(o({}, b("array", "array", null == t3 ? void 0 : t3.useBsonType, r3)), {}, { items: o(o({}, e3), this.schema.toJSONSchema(t3)) });
          }, t2.exports = A;
        }, 8235: (t2, e2, r2) => {
          "use strict";
          var n = r2(8213), i = r2(6426), o = r2(5098), a = r2(7910);
          function s(t3, e3) {
            if (this.$parentSchemaType = e3 && e3.$parentSchemaType, !this.$parentSchemaType)
              throw new n("Cannot create DocumentArrayElement schematype without a parent");
            delete e3.$parentSchemaType, i.call(this, t3, e3, "DocumentArrayElement"), this.$isMongooseDocumentArrayElement = true;
          }
          s.schemaName = "DocumentArrayElement", s.defaultOptions = {}, s.prototype = Object.create(i.prototype), s.prototype.constructor = s, s.prototype.cast = function() {
            var t3;
            return (t3 = this.$parentSchemaType).cast.apply(t3, arguments)[0];
          }, s.prototype.doValidate = function(t3, e3, r3, n2) {
            var i2 = a(this.caster, t3);
            return !t3 || t3 instanceof i2 || (t3 = new i2(t3, r3, null, null, n2 && null != n2.index ? n2.index : null)), o.prototype.doValidate.call(this, t3, e3, r3, n2);
          }, s.prototype.clone = function() {
            this.options.$parentSchemaType = this.$parentSchemaType;
            var t3 = i.prototype.clone.apply(this, arguments);
            return delete this.options.$parentSchemaType, t3.caster = this.caster, t3.schema = this.schema, t3;
          }, t2.exports = s;
        }, 1732: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s = r2(3609), u = r2(6426), c = r2(3704), f = r2(4327);
          function l(t3, e3) {
            u.call(this, t3, e3, "Double");
          }
          function h(t3) {
            return this.cast(t3);
          }
          l.schemaName = "Double", l.defaultOptions = {}, l.prototype = Object.create(u.prototype), l.prototype.constructor = l, l._cast = c, l.set = u.set, l.setters = [], l.get = u.get, l._defaultCaster = function(t3) {
            if (null != t3 && "Double" !== t3._bsontype)
              throw new Error();
            return t3;
          }, l.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, l._checkRequired = function(t3) {
            return null != t3;
          }, l.checkRequired = u.checkRequired, l.prototype.checkRequired = function(t3) {
            return this.constructor._checkRequired(t3);
          }, l.prototype.cast = function(t3) {
            var e3;
            e3 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : l.cast();
            try {
              return e3(t3);
            } catch (e4) {
              throw new s("Double", t3, this.path, e4, this);
            }
          }, l.prototype.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, { $gt: h, $gte: h, $lt: h, $lte: h }), l.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return f("number", "double", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = l;
        }, 7953: (t2, e2, r2) => {
          "use strict";
          e2.Array = r2(7760), e2.BigInt = r2(3318), e2.Boolean = r2(6413), e2.Buffer = r2(2307), e2.Date = r2(2345), e2.Decimal128 = e2.Decimal = r2(7045), e2.DocumentArray = r2(9123), e2.Map = r2(6867), e2.Mixed = r2(5022), e2.Number = r2(3660), e2.ObjectId = r2(3091), e2.String = r2(8728), e2.Subdocument = r2(5098), e2.UUID = r2(2134), e2.Double = r2(1732), e2.Int32 = r2(433), e2.Oid = e2.ObjectId, e2.Object = e2.Mixed, e2.Bool = e2.Boolean, e2.ObjectID = e2.ObjectId;
        }, 433: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s = r2(3609), u = r2(6426), c = r2(5413), f = r2(4327), l = r2(9460);
          function h(t3, e3) {
            u.call(this, t3, e3, "Int32");
          }
          function p(t3, e3) {
            return this.castForQuery(null, t3, e3);
          }
          h.schemaName = "Int32", h.defaultOptions = {}, h.prototype = Object.create(u.prototype), h.prototype.constructor = h, h._cast = c, h.set = u.set, h.setters = [], h.get = u.get, h._defaultCaster = function(t3) {
            if (null != t3 && ("number" != typeof t3 || t3 !== (0 | t3) || t3 < -2147483648 || t3 > 2147483647))
              throw new Error();
            return t3;
          }, h.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, h._checkRequired = function(t3) {
            return null != t3;
          }, h.checkRequired = u.checkRequired, h.prototype.checkRequired = function(t3) {
            return this.constructor._checkRequired(t3);
          }, h.prototype.cast = function(t3) {
            var e3;
            e3 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : h.cast();
            try {
              return e3(t3);
            } catch (e4) {
              throw new s("Int32", t3, this.path, e4, this);
            }
          }, h.$conditionalHandlers = o(o({}, u.prototype.$conditionalHandlers), {}, { $gt: p, $gte: p, $lt: p, $lte: p, $bitsAllClear: l, $bitsAnyClear: l, $bitsAllSet: l, $bitsAnySet: l }), h.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3)
              return (n2 = h.$conditionalHandlers[t3]) ? n2.call(this, e3) : this.applySetters(e3, r3);
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof s && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, h.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return f("number", "int", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = h;
        }, 6867: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3, e3, r3) {
            return (e3 = u(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function s(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, u(n2.key), n2);
            }
          }
          function u(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function c() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (c = function() {
              return !!t3;
            })();
          }
          function f() {
            return f = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(t3, e3, r3) {
              var n2 = function(t4, e4) {
                for (; !{}.hasOwnProperty.call(t4, e4) && null !== (t4 = l(t4)); )
                  ;
                return t4;
              }(t3, e3);
              if (n2) {
                var i2 = Object.getOwnPropertyDescriptor(n2, e3);
                return i2.get ? i2.get.call(arguments.length < 3 ? t3 : r3) : i2.value;
              }
            }, f.apply(null, arguments);
          }
          function l(t3) {
            return l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, l(t3);
          }
          function h(t3, e3) {
            return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, h(t3, e3);
          }
          var p = r2(2081), d = r2(241), y = r2(6426), b = r2(4327), m = function(t3) {
            function e3(t4, r3) {
              var i2;
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (i2 = function(t5, e4, r4) {
                return e4 = l(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, c() ? Reflect.construct(e4, r4 || [], l(t5).constructor) : e4.apply(t5, r4));
              }(this, e3, [t4, r3, "Map"])).$isSchemaMap = true, i2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && h(t4, e4);
            }(e3, t3), u2 = e3, d2 = [{ key: "set", value: function(t4, e4) {
              return y.set(t4, e4);
            } }, { key: "cast", value: function(t4, e4, n2) {
              if (t4 instanceof p)
                return t4;
              var i2 = this.path;
              if (n2) {
                var o2 = new p({}, i2, e4, this.$__schemaType);
                if (t4 instanceof r2.g.Map) {
                  var s2, u3 = function(t5, e5) {
                    var r3 = "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
                    if (!r3) {
                      if (Array.isArray(t5) || (r3 = function(t6, e6) {
                        if (t6) {
                          if ("string" == typeof t6)
                            return a(t6, e6);
                          var r4 = {}.toString.call(t6).slice(8, -1);
                          return "Object" === r4 && t6.constructor && (r4 = t6.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t6) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? a(t6, e6) : void 0;
                        }
                      }(t5)) || e5 && t5 && "number" == typeof t5.length) {
                        r3 && (t5 = r3);
                        var n3 = 0, i3 = function() {
                        };
                        return { s: i3, n: function() {
                          return n3 >= t5.length ? { done: true } : { done: false, value: t5[n3++] };
                        }, e: function(t6) {
                          throw t6;
                        }, f: i3 };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var o3, s3 = true, u4 = false;
                    return { s: function() {
                      r3 = r3.call(t5);
                    }, n: function() {
                      var t6 = r3.next();
                      return s3 = t6.done, t6;
                    }, e: function(t6) {
                      u4 = true, o3 = t6;
                    }, f: function() {
                      try {
                        s3 || null == r3.return || r3.return();
                      } finally {
                        if (u4)
                          throw o3;
                      }
                    } };
                  }(t4.keys());
                  try {
                    for (u3.s(); !(s2 = u3.n()).done; ) {
                      var c2 = s2.value, f2 = t4.get(c2);
                      f2 = null == f2 ? o2.$__schemaType._castNullish(f2) : o2.$__schemaType.cast(f2, e4, true, null, { path: i2 + "." + c2 }), o2.$init(c2, f2);
                    }
                  } catch (t5) {
                    u3.e(t5);
                  } finally {
                    u3.f();
                  }
                } else
                  for (var l2 = 0, h2 = Object.keys(t4); l2 < h2.length; l2++) {
                    var d3 = h2[l2], y2 = t4[d3];
                    y2 = null == y2 ? o2.$__schemaType._castNullish(y2) : o2.$__schemaType.cast(y2, e4, true, null, { path: i2 + "." + d3 }), o2.$init(d3, y2);
                  }
                return o2;
              }
              return new p(t4, i2, e4, this.$__schemaType);
            } }, { key: "clone", value: function() {
              var t4, r3, n2, i2 = (t4 = e3, r3 = this, "function" == typeof (n2 = f(l(1 & 3 ? t4.prototype : t4), "clone", r3)) ? function(t5) {
                return n2.apply(r3, t5);
              } : n2)([]);
              return null != this.$__schemaType && (i2.$__schemaType = this.$__schemaType.clone()), i2;
            } }, { key: "getEmbeddedSchemaType", value: function() {
              return this.$__schemaType;
            } }, { key: "toJSONSchema", value: function(t4) {
              var e4 = null == t4 ? void 0 : t4.useBsonType, r3 = this.getEmbeddedSchemaType(), n2 = this.options.required && "function" != typeof this.options.required, a2 = b("object", "object", e4, n2);
              return r3.schema ? a2.additionalProperties = function(t5) {
                for (var e5 = 1; e5 < arguments.length; e5++) {
                  var r4 = null != arguments[e5] ? arguments[e5] : {};
                  e5 % 2 ? i(Object(r4), true).forEach(function(e6) {
                    o(t5, e6, r4[e6]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t5, Object.getOwnPropertyDescriptors(r4)) : i(Object(r4)).forEach(function(e6) {
                    Object.defineProperty(t5, e6, Object.getOwnPropertyDescriptor(r4, e6));
                  });
                }
                return t5;
              }({}, r3.toJSONSchema(t4)) : a2.additionalProperties = r3.toJSONSchema(t4), a2;
            } }], d2 && s(u2.prototype, d2), Object.defineProperty(u2, "prototype", { writable: false }), u2;
            var u2, d2;
          }(y);
          m.schemaName = "Map", m.prototype.OptionsConstructor = d, m.defaultOptions = {}, t2.exports = m;
        }, 5022: (t2, e2, r2) => {
          "use strict";
          var n = r2(6426), i = r2(7160), o = r2(608), a = r2(8768);
          function s(t3, e3) {
            if (e3 && e3.default) {
              var r3 = e3.default;
              Array.isArray(r3) && 0 === r3.length ? e3.default = Array : !e3.shared && o(r3) && 0 === Object.keys(r3).length && (e3.default = function() {
                return {};
              });
            }
            n.call(this, t3, e3, "Mixed"), this[i.schemaMixedSymbol] = true;
          }
          s.schemaName = "Mixed", s.defaultOptions = {}, s.prototype = Object.create(n.prototype), s.prototype.constructor = s, s.get = n.get, s.set = n.set, s.setters = [], s.prototype.cast = function(t3) {
            return t3 instanceof Error ? a.errorToPOJO(t3) : t3;
          }, s.prototype.castForQuery = function(t3, e3) {
            return e3;
          }, t2.exports = s;
        }, 3660: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != a(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != a(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == a(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3) {
            return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, a(t3);
          }
          var s = r2(3672), u = r2(1007), c = r2(6426), f = r2(7768), l = r2(4327), h = r2(9460), p = r2(8768), d = c.CastError;
          function y(t3, e3) {
            c.call(this, t3, e3, "Number");
          }
          function b(t3) {
            return this.cast(t3);
          }
          y.get = c.get, y.set = c.set, y.setters = [], y._cast = f, y.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, y._defaultCaster = function(t3) {
            if ("number" != typeof t3)
              throw new Error();
            return t3;
          }, y.schemaName = "Number", y.defaultOptions = {}, y.prototype = Object.create(c.prototype), y.prototype.constructor = y, y.prototype.OptionsConstructor = u, y._checkRequired = function(t3) {
            return "number" == typeof t3 || t3 instanceof Number;
          }, y.checkRequired = c.checkRequired, y.prototype.checkRequired = function(t3, e3) {
            return "object" === a(t3) && c._isRef(this, t3, e3, true) ? null != t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : y.checkRequired())(t3);
          }, y.prototype.min = function(t3, e3) {
            if (this.minValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.minValidator;
            }, this)), null != t3) {
              var r3 = e3 || s.messages.Number.min;
              r3 = r3.replace(/{MIN}/, t3), this.validators.push({ validator: this.minValidator = function(e4) {
                return null == e4 || e4 >= t3;
              }, message: r3, type: "min", min: t3 });
            }
            return this;
          }, y.prototype.max = function(t3, e3) {
            if (this.maxValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.maxValidator;
            }, this)), null != t3) {
              var r3 = e3 || s.messages.Number.max;
              r3 = r3.replace(/{MAX}/, t3), this.validators.push({ validator: this.maxValidator = function(e4) {
                return null == e4 || e4 <= t3;
              }, message: r3, type: "max", max: t3 });
            }
            return this;
          }, y.prototype.enum = function(t3, e3) {
            return this.enumValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.enumValidator;
            }, this)), Array.isArray(t3) || (p.isPOJO(t3) && null != t3.values ? (e3 = t3.message, t3 = t3.values) : "number" == typeof t3 && (t3 = Array.prototype.slice.call(arguments), e3 = null), p.isPOJO(t3) && (t3 = Object.values(t3)), e3 = e3 || s.messages.Number.enum), e3 = null == e3 ? s.messages.Number.enum : e3, this.enumValidator = function(e4) {
              return null == e4 || -1 !== t3.indexOf(e4);
            }, this.validators.push({ validator: this.enumValidator, message: e3, type: "enum", enumValues: t3 }), this;
          }, y.prototype.cast = function(t3, e3, r3, n2, i2) {
            if ("number" != typeof t3 && c._isRef(this, t3, e3, r3) && (null == t3 || p.isNonBuiltinObject(t3)))
              return this._castRef(t3, e3, r3, i2);
            var o2, a2 = t3 && void 0 !== t3._id ? t3._id : t3;
            o2 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : y.cast();
            try {
              return o2(a2);
            } catch (t4) {
              throw new d("Number", a2, this.path, t4, this);
            }
          }, y.prototype.$conditionalHandlers = i(i({}, c.prototype.$conditionalHandlers), {}, { $bitsAllClear: h, $bitsAnyClear: h, $bitsAllSet: h, $bitsAnySet: h, $gt: b, $gte: b, $lt: b, $lte: b, $mod: function(t3) {
            var e3 = this;
            return Array.isArray(t3) ? t3.map(function(t4) {
              return e3.cast(t4);
            }) : [this.cast(t3)];
          } }), y.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new d("number", e3, this.path, null, this);
              return n2.call(this, e3, r3);
            }
            try {
              e3 = this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof d && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
            return e3;
          }, y.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required || "_id" === this.path;
            return l("number", "number", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = y;
        }, 3091: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var s, u = r2(4625), c = r2(6426), f = r2(863), l = r2(4327), h = r2(5879), p = r2(5549), d = r2(3305), y = r2(8768), b = c.CastError;
          function m(t3, e3) {
            var r3 = "string" == typeof t3 && 24 === t3.length && /^[a-f0-9]+$/i.test(t3), n2 = e3 && e3.suppressWarning;
            !r3 && void 0 !== t3 || n2 || y.warn("mongoose: To create a new ObjectId please try `Mongoose.Types.ObjectId` instead of using `Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if you're trying to create a hex char path in your schema."), c.call(this, t3, e3, "ObjectId");
          }
          function v(t3) {
            return this.cast(t3);
          }
          function g() {
            return new p();
          }
          function _(t3) {
            return s || (s = r2(2400)), this instanceof s && void 0 === t3 ? new p() : t3;
          }
          m.schemaName = "ObjectId", m.defaultOptions = {}, m.prototype = Object.create(c.prototype), m.prototype.constructor = m, m.prototype.OptionsConstructor = u, m.get = c.get, m.set = c.set, m.setters = [], m.prototype.auto = function(t3) {
            return t3 && (this.default(g), this.set(_)), this;
          }, m._checkRequired = function(t3) {
            return d(t3, "ObjectId");
          }, m._cast = f, m.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, m._defaultCaster = function(t3) {
            if (!d(t3, "ObjectId"))
              throw new Error(t3 + " is not an instance of ObjectId");
            return t3;
          }, m.checkRequired = c.checkRequired, m.prototype.checkRequired = function(t3, e3) {
            return c._isRef(this, t3, e3, true) ? !!t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : m.checkRequired())(t3);
          }, m.prototype.cast = function(t3, e3, r3, n2, i2) {
            if (!d(t3, "ObjectId") && c._isRef(this, t3, e3, r3)) {
              if ("objectid" === (h(t3) || "").toLowerCase())
                return new p(t3.toHexString());
              if (null == t3 || y.isNonBuiltinObject(t3))
                return this._castRef(t3, e3, r3, i2);
            }
            var o2;
            o2 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : m.cast();
            try {
              return o2(t3);
            } catch (e4) {
              throw new b("ObjectId", t3, this.path, e4, this);
            }
          }, m.prototype.$conditionalHandlers = o(o({}, c.prototype.$conditionalHandlers), {}, { $gt: v, $gte: v, $lt: v, $lte: v }), g.$runBeforeSetters = true, m.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required || "_id" === this.path;
            return l("string", "objectId", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = m;
        }, 9460: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer, i = r2(3609);
          function o(t3, e3) {
            var r3 = Number(e3);
            if (isNaN(r3))
              throw new i("number", e3, t3);
            return r3;
          }
          t2.exports = function(t3) {
            var e3 = this;
            return Array.isArray(t3) ? t3.map(function(t4) {
              return o(e3.path, t4);
            }) : n.isBuffer(t3) ? t3 : o(e3.path, t3);
          };
        }, 8499: (t2, e2, r2) => {
          "use strict";
          var n = r2(8953);
          t2.exports = function(t3) {
            var e3 = null != this ? this.path : null;
            return n(t3, e3);
          };
        }, 9604: (t2, e2, r2) => {
          "use strict";
          var n = r2(5558).p, i = r2(5558).G;
          function o(t3, e3) {
            switch (t3.$geometry.type) {
              case "Polygon":
              case "LineString":
              case "Point":
                n(t3.$geometry.coordinates, e3);
            }
            return a(e3, t3), t3;
          }
          function a(t3, e3) {
            e3.$maxDistance && (e3.$maxDistance = i.call(t3, e3.$maxDistance)), e3.$minDistance && (e3.$minDistance = i.call(t3, e3.$minDistance));
          }
          e2.cast$geoIntersects = function(t3) {
            if (t3.$geometry)
              return o(t3, this), t3;
          }, e2.cast$near = function(t3) {
            var e3 = r2(7760);
            if (Array.isArray(t3))
              return n(t3, this), t3;
            if (a(this, t3), t3 && t3.$geometry)
              return o(t3, this);
            if (!Array.isArray(t3))
              throw new TypeError("$near must be either an array or an object with a $geometry property");
            return e3.prototype.castForQuery.call(this, null, t3);
          }, e2.cast$within = function(t3) {
            var e3 = this;
            if (a(this, t3), t3.$box || t3.$polygon) {
              var r3 = t3.$box ? "$box" : "$polygon";
              t3[r3].forEach(function(t4) {
                if (!Array.isArray(t4))
                  throw new TypeError("Invalid $within $box argument. Expected an array, received " + t4);
                t4.forEach(function(r4, n3) {
                  t4[n3] = i.call(e3, r4);
                });
              });
            } else if (t3.$center || t3.$centerSphere) {
              var n2 = t3.$center ? "$center" : "$centerSphere";
              t3[n2].forEach(function(r4, o2) {
                Array.isArray(r4) ? r4.forEach(function(t4, n3) {
                  r4[n3] = i.call(e3, t4);
                }) : t3[n2][o2] = i.call(e3, r4);
              });
            } else
              t3.$geometry && o(t3, this);
            return t3;
          };
        }, 5558: (t2, e2, r2) => {
          "use strict";
          var n = r2(3660);
          function i(t3) {
            return n.cast()(t3);
          }
          e2.G = i, e2.p = function t3(e3, r3) {
            e3.forEach(function(n2, o) {
              Array.isArray(n2) ? t3(n2, r3) : e3[o] = i.call(r3, n2);
            });
          };
        }, 9064: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          var i = r2(3609), o = r2(8953), a = r2(1244);
          t2.exports = function(t3, e3) {
            if (null == t3 || "object" !== n(t3))
              throw new i("$text", t3, e3);
            return null != t3.$search && (t3.$search = a(t3.$search, e3 + ".$search")), null != t3.$language && (t3.$language = a(t3.$language, e3 + ".$language")), null != t3.$caseSensitive && (t3.$caseSensitive = o(t3.$caseSensitive, e3 + ".$castSensitive")), null != t3.$diacriticSensitive && (t3.$diacriticSensitive = o(t3.$diacriticSensitive, e3 + ".$diacriticSensitive")), t3;
          };
        }, 2555: (t2) => {
          "use strict";
          t2.exports = function(t3) {
            if (Array.isArray(t3)) {
              if (!t3.every(function(t4) {
                return "number" == typeof t4 || "string" == typeof t4;
              }))
                throw new Error("$type array values must be strings or numbers");
              return t3;
            }
            if ("number" != typeof t3 && "string" != typeof t3)
              throw new Error("$type parameter must be number, string, or array of numbers and strings");
            return t3;
          };
        }, 8728: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != a(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != a(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == a(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3) {
            return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, a(t3);
          }
          function s(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var u = r2(6426), c = r2(3672), f = r2(9528), l = r2(1244), h = r2(4327), p = r2(8768), d = r2(3305), y = u.CastError;
          function b(t3, e3) {
            this.enumValues = [], this.regExp = null, u.call(this, t3, e3, "String");
          }
          function m(t3, e3) {
            return this.castForQuery(null, t3, e3);
          }
          function v(t3) {
            return null == t3 ? this._castNullish(t3) : this.cast(t3, this);
          }
          b.schemaName = "String", b.defaultOptions = {}, b.prototype = Object.create(u.prototype), b.prototype.constructor = b, Object.defineProperty(b.prototype, "OptionsConstructor", { configurable: false, enumerable: false, writable: false, value: f }), b._cast = l, b.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, b._defaultCaster = function(t3) {
            if (null != t3 && "string" != typeof t3)
              throw new Error();
            return t3;
          }, b.get = u.get, b.set = u.set, b.setters = [], b._checkRequired = function(t3) {
            return (t3 instanceof String || "string" == typeof t3) && t3.length;
          }, b.checkRequired = u.checkRequired, b.prototype.enum = function() {
            if (this.enumValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.enumValidator;
            }, this), this.enumValidator = false), void 0 === arguments[0] || false === arguments[0])
              return this;
            var t3, e3;
            p.isObject(arguments[0]) ? Array.isArray(arguments[0].values) ? (t3 = arguments[0].values, e3 = arguments[0].message) : (t3 = p.object.vals(arguments[0]), e3 = c.messages.String.enum) : (t3 = arguments, e3 = c.messages.String.enum);
            var r3, n2 = function(t4, e4) {
              var r4 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (!r4) {
                if (Array.isArray(t4) || (r4 = function(t5, e5) {
                  if (t5) {
                    if ("string" == typeof t5)
                      return s(t5, e5);
                    var r5 = {}.toString.call(t5).slice(8, -1);
                    return "Object" === r5 && t5.constructor && (r5 = t5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(t5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? s(t5, e5) : void 0;
                  }
                }(t4)) || e4 && t4 && "number" == typeof t4.length) {
                  r4 && (t4 = r4);
                  var n3 = 0, i3 = function() {
                  };
                  return { s: i3, n: function() {
                    return n3 >= t4.length ? { done: true } : { done: false, value: t4[n3++] };
                  }, e: function(t5) {
                    throw t5;
                  }, f: i3 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var o3, a2 = true, u2 = false;
              return { s: function() {
                r4 = r4.call(t4);
              }, n: function() {
                var t5 = r4.next();
                return a2 = t5.done, t5;
              }, e: function(t5) {
                u2 = true, o3 = t5;
              }, f: function() {
                try {
                  a2 || null == r4.return || r4.return();
                } finally {
                  if (u2)
                    throw o3;
                }
              } };
            }(t3);
            try {
              for (n2.s(); !(r3 = n2.n()).done; ) {
                var i2 = r3.value;
                void 0 !== i2 && this.enumValues.push(this.cast(i2));
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
            var o2 = this.enumValues;
            return this.enumValidator = function(t4) {
              return null == t4 || ~o2.indexOf(t4);
            }, this.validators.push({ validator: this.enumValidator, message: e3, type: "enum", enumValues: o2 }), this;
          }, b.prototype.lowercase = function(t3) {
            var e3 = this;
            return arguments.length > 0 && !t3 ? this : this.set(function(t4) {
              return "string" != typeof t4 && (t4 = e3.cast(t4)), t4 ? t4.toLowerCase() : t4;
            });
          }, b.prototype.uppercase = function(t3) {
            var e3 = this;
            return arguments.length > 0 && !t3 ? this : this.set(function(t4) {
              return "string" != typeof t4 && (t4 = e3.cast(t4)), t4 ? t4.toUpperCase() : t4;
            });
          }, b.prototype.trim = function(t3) {
            var e3 = this;
            return arguments.length > 0 && !t3 ? this : this.set(function(t4) {
              return "string" != typeof t4 && (t4 = e3.cast(t4)), t4 ? t4.trim() : t4;
            });
          }, b.prototype.minlength = function(t3, e3) {
            if (this.minlengthValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.minlengthValidator;
            }, this)), null != t3) {
              var r3 = e3 || c.messages.String.minlength;
              r3 = r3.replace(/{MINLENGTH}/, t3), this.validators.push({ validator: this.minlengthValidator = function(e4) {
                return null === e4 || e4.length >= t3;
              }, message: r3, type: "minlength", minlength: t3 });
            }
            return this;
          }, b.prototype.minLength = b.prototype.minlength, b.prototype.maxlength = function(t3, e3) {
            if (this.maxlengthValidator && (this.validators = this.validators.filter(function(t4) {
              return t4.validator !== this.maxlengthValidator;
            }, this)), null != t3) {
              var r3 = e3 || c.messages.String.maxlength;
              r3 = r3.replace(/{MAXLENGTH}/, t3), this.validators.push({ validator: this.maxlengthValidator = function(e4) {
                return null === e4 || e4.length <= t3;
              }, message: r3, type: "maxlength", maxlength: t3 });
            }
            return this;
          }, b.prototype.maxLength = b.prototype.maxlength, b.prototype.match = function(t3, e3) {
            var r3 = e3 || c.messages.String.match;
            return this.validators.push({ validator: function(e4) {
              return !!t3 && (t3.lastIndex = 0, null == e4 || "" === e4 || t3.test(e4));
            }, message: r3, type: "regexp", regexp: t3 }), this;
          }, b.prototype.checkRequired = function(t3, e3) {
            return "object" === a(t3) && u._isRef(this, t3, e3, true) ? null != t3 : ("function" == typeof this.constructor.checkRequired ? this.constructor.checkRequired() : b.checkRequired())(t3);
          }, b.prototype.cast = function(t3, e3, r3, n2, i2) {
            if ("string" != typeof t3 && u._isRef(this, t3, e3, r3))
              return this._castRef(t3, e3, r3, i2);
            var o2;
            o2 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : b.cast();
            try {
              return o2(t3);
            } catch (e4) {
              throw new y("string", t3, this.path, null, this);
            }
          };
          var g = i(i({}, u.prototype.$conditionalHandlers), {}, { $all: function(t3, e3) {
            var r3 = this;
            return Array.isArray(t3) ? t3.map(function(t4) {
              return r3.castForQuery(null, t4, e3);
            }) : [this.castForQuery(null, t3, e3)];
          }, $gt: m, $gte: m, $lt: m, $lte: m, $options: v, $regex: function(t3) {
            return "[object RegExp]" === Object.prototype.toString.call(t3) ? t3 : v.call(this, t3);
          }, $not: m });
          Object.defineProperty(b.prototype, "$conditionalHandlers", { configurable: false, enumerable: false, writable: false, value: Object.freeze(g) }), b.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3 + " with String.");
              return n2.call(this, e3, r3);
            }
            if ("[object RegExp]" === Object.prototype.toString.call(e3) || d(e3, "BSONRegExp"))
              return e3;
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof y && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, b.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return h("string", "string", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = b;
        }, 5098: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? n(Object(r3), true).forEach(function(e4) {
                o(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : n(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function o(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != a(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != a(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == a(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function a(t3) {
            return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, a(t3);
          }
          var s, u = r2(3609), c = r2(3550).EventEmitter, f = r2(3441), l = r2(7494), h = r2(6426), p = r2(5335), d = r2(8499), y = r2(5558).G, b = r2(4327), m = r2(1469), v = r2(9604), g = r2(7910), _ = r2(3694), w = r2(3303)._, S = r2(1793), O = r2(8768), j = r2(5537);
          function $(t3, e3, r3) {
            if (t3.options.timeseries)
              throw new j(e3, "timeseries");
            var n2 = $.defaultOptions && $.defaultOptions._id;
            null != n2 && ((r3 = r3 || {})._id = n2), t3 = _(t3, r3), this.caster = E(t3, null, r3), this.caster.path = e3, this.caster.prototype.$basePath = e3, this.schema = t3, this.$isSingleNested = true, this.base = t3.base, h.call(this, e3, r3, "Embedded");
          }
          function E(t3, e3, n2) {
            s || (s = r2(9380));
            var i2 = function(t4, e4, r3) {
              this.$__parent = r3, s.apply(this, arguments), null != r3 && this.$session(r3.$session());
            };
            t3._preCompile();
            var o2 = null != e3 ? e3.prototype : s.prototype;
            for (var a2 in (i2.prototype = Object.create(o2)).$__setSchema(t3), i2.prototype.constructor = i2, i2.$__required = null == n2 ? void 0 : n2.required, i2.base = t3.base, i2.schema = t3, i2.$isSingleNested = true, i2.events = new c(), i2.prototype.toBSON = function() {
              return this.toObject(w);
            }, t3.methods)
              i2.prototype[a2] = t3.methods[a2];
            for (var u2 in t3.statics)
              i2[u2] = t3.statics[u2];
            for (var f2 in c.prototype)
              i2[f2] = c.prototype[f2];
            return i2;
          }
          t2.exports = $, $.prototype = Object.create(h.prototype), $.prototype.constructor = $, $.prototype.OptionsConstructor = l, $.prototype.$conditionalHandlers.$geoWithin = function(t3, e3) {
            return { $geometry: this.castForQuery(null, t3.$geometry, e3) };
          }, $.prototype.$conditionalHandlers.$near = $.prototype.$conditionalHandlers.$nearSphere = v.cast$near, $.prototype.$conditionalHandlers.$within = $.prototype.$conditionalHandlers.$geoWithin = v.cast$within, $.prototype.$conditionalHandlers.$geoIntersects = v.cast$geoIntersects, $.prototype.$conditionalHandlers.$minDistance = y, $.prototype.$conditionalHandlers.$maxDistance = y, $.prototype.$conditionalHandlers.$exists = d, $.prototype.cast = function(t3, e3, r3, n2, i2) {
            if (t3 && t3.$isSingleNested && t3.parent === e3)
              return t3;
            if (null != t3 && ("object" !== a(t3) || Array.isArray(t3)))
              throw new f(this.path, t3);
            var o2, s2 = this.schema.path(this.schema.options.discriminatorKey), u2 = null == s2 ? null : s2.getDefault(e3), c2 = g(this.caster, t3, u2), l2 = e3 && e3.$__ && e3.$__.selected, h2 = this.path, d2 = null == l2 ? null : Object.keys(l2).reduce(function(t4, e4) {
              return e4.startsWith(h2 + ".") && ((t4 = t4 || {})[e4.substring(h2.length + 1)] = l2[e4]), t4;
            }, null);
            if (!r3)
              return i2 = Object.assign({}, i2, { priorDoc: n2 }), 0 === Object.keys(t3).length ? new c2({}, d2, e3, void 0, i2) : new c2(t3, d2, e3, void 0, i2);
            delete (o2 = new c2(void 0, d2, e3, false, { defaults: false })).$__.defaults, o2.$init(t3);
            var y2 = S(d2);
            return p(o2, d2, y2), o2;
          }, $.prototype.castForQuery = function(t3, e3, r3, n2) {
            var i2;
            if (null != t3) {
              if (!(i2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3);
              return i2.call(this, e3);
            }
            if (null == e3)
              return e3;
            var o2 = g(this.caster, e3);
            if (e3 instanceof o2)
              return e3;
            this.options.runSetters && (e3 = this._applySetters(e3, r3));
            var a2 = null != n2 && null != n2.strict ? n2.strict : void 0;
            try {
              e3 = new o2(e3, a2);
            } catch (t4) {
              if (!(t4 instanceof u))
                throw new u("Embedded", e3, this.path, t4, this);
              throw t4;
            }
            return e3;
          }, $.prototype.doValidate = function(t3, e3, r3, n2) {
            var i2 = g(this.caster, t3);
            if (!t3 || t3 instanceof i2 || (t3 = new i2(t3, null, null != r3 && null != r3.$__ ? r3 : null)), n2 && n2.skipSchemaValidators)
              return t3 ? t3.validate().then(function() {
                return e3(null);
              }, function(t4) {
                return e3(t4);
              }) : e3(null);
            h.prototype.doValidate.call(this, t3, function(r4) {
              return r4 ? e3(r4) : t3 ? void t3.validate().then(function() {
                return e3(null);
              }, function(t4) {
                return e3(t4);
              }) : e3(null);
            }, r3, n2);
          }, $.prototype.doValidateSync = function(t3, e3, r3) {
            if (!r3 || !r3.skipSchemaValidators) {
              var n2 = h.prototype.doValidateSync.call(this, t3, e3);
              if (n2)
                return n2;
            }
            if (t3)
              return t3.validateSync();
          }, $.prototype.discriminator = function(t3, e3, r3) {
            r3 = r3 || {};
            var n2 = O.isPOJO(r3) ? r3.value : r3, i2 = "boolean" != typeof r3.clone || r3.clone;
            return e3.instanceOfSchema && i2 && (e3 = e3.clone()), e3 = m(this.caster, t3, e3, n2, null, null, r3.overwriteExisting), this.caster.discriminators[t3] = E(e3, this.caster), this.caster.discriminators[t3];
          }, $.defaultOptions = {}, $.set = h.set, $.setters = [], $.get = h.get, $.prototype.toJSON = function() {
            return { path: this.path, options: this.options };
          }, $.prototype.clone = function() {
            var t3 = new this.constructor(this.schema, this.path, i(i({}, this.options), {}, { _skipApplyDiscriminators: true }));
            return t3.validators = this.validators.slice(), void 0 !== this.requiredValidator && (t3.requiredValidator = this.requiredValidator), t3.caster.discriminators = Object.assign({}, this.caster.discriminators), t3._appliedDiscriminators = this._appliedDiscriminators, t3;
          }, $.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return i(i({}, this.schema.toJSONSchema(t3)), b("object", "object", null == t3 ? void 0 : t3.useBsonType, e3));
          };
        }, 7160: (t2, e2) => {
          "use strict";
          e2.schemaMixedSymbol = Symbol.for("mongoose:schema_mixed"), e2.builtInMiddleware = Symbol.for("mongoose:built-in-middleware");
        }, 2134: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          function o(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function a(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? o(Object(r3), true).forEach(function(e4) {
                s(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : o(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function s(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != i(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != i(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == i(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var u = r2(6365), c = r2(6426), f = c.CastError, l = r2(8250), h = r2(4327), p = r2(8768), d = r2(9460), y = l.UUID_FORMAT, b = u.Binary;
          function m(t3) {
            var e3;
            return "string" != typeof t3 && null != t3 ? (e3 = t3.toString("hex")).substring(0, 8) + "-" + e3.substring(8, 12) + "-" + e3.substring(12, 16) + "-" + e3.substring(16, 20) + "-" + e3.substring(20, 32) : t3;
          }
          function v(t3, e3) {
            c.call(this, t3, e3, "UUID"), this.getters.push(function(t4) {
              return null != t4 && null != t4.$__ ? t4 : n.isBuffer(t4) ? m(t4) : t4 instanceof b ? m(t4.buffer) : p.isPOJO(t4) && "Buffer" === t4.type && Array.isArray(t4.data) ? m(n.from(t4.data)) : t4;
            });
          }
          function g(t3) {
            return this.cast(t3);
          }
          function _(t3) {
            var e3 = this;
            return t3.map(function(t4) {
              return e3.cast(t4);
            });
          }
          v.schemaName = "UUID", v.defaultOptions = {}, v.prototype = Object.create(c.prototype), v.prototype.constructor = v, v._cast = l, v.get = c.get, v.set = c.set, v.setters = [], v.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = this._defaultCaster), this._cast = t3), this._cast;
          }, v._checkRequired = function(t3) {
            return null != t3;
          }, v.checkRequired = c.checkRequired, v.prototype.checkRequired = function(t3) {
            return n.isBuffer(t3) && (t3 = m(t3)), null != t3 && y.test(t3);
          }, v.prototype.cast = function(t3, e3, r3, n2, i2) {
            if (p.isNonBuiltinObject(t3) && c._isRef(this, t3, e3, r3))
              return this._castRef(t3, e3, r3, i2);
            var o2;
            o2 = "function" == typeof this._castFunction ? this._castFunction : "function" == typeof this.constructor.cast ? this.constructor.cast() : v.cast();
            try {
              return o2(t3);
            } catch (e4) {
              throw new f(v.schemaName, t3, this.path, e4, this);
            }
          }, v.prototype.$conditionalHandlers = a(a({}, c.prototype.$conditionalHandlers), {}, { $bitsAllClear: d, $bitsAnyClear: d, $bitsAllSet: d, $bitsAnySet: d, $all: _, $gt: g, $gte: g, $in: _, $lt: g, $lte: g, $ne: g, $nin: _ }), v.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3 + " with UUID.");
              return n2.call(this, e3, r3);
            }
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof f && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, v.prototype.toJSONSchema = function(t3) {
            var e3 = this.options.required && "function" != typeof this.options.required;
            return h("string", "binData", null == t3 ? void 0 : t3.useBsonType, e3);
          }, t2.exports = v;
        }, 6426: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          var o = r2(3672), a = r2(8879), s = r2(8499), u = r2(2555), c = r2(4450), f = r2(8133), l = r2(9183), h = r2(6155), p = r2(2746), d = r2(7930).schemaTypeSymbol, y = r2(8768), b = r2(7930).validatorErrorSymbol, m = r2(7930).documentIsModified, v = r2(7930).populateModelSymbol, g = o.CastError, _ = o.ValidatorError, w = { _skipMarkModified: true };
          function S(t3, e3, r3) {
            this[d] = true, this.path = t3, this.instance = r3, this.validators = [], this.getters = this.constructor.hasOwnProperty("getters") ? this.constructor.getters.slice() : [], this.setters = this.constructor.hasOwnProperty("setters") ? this.constructor.setters.slice() : [], this.splitPath(), e3 = e3 || {};
            for (var n2 = this.constructor.defaultOptions || {}, o2 = 0, s2 = Object.keys(n2); o2 < s2.length; o2++) {
              var u2 = s2[o2];
              "validate" === u2 ? this.validate(n2.validate) : n2.hasOwnProperty(u2) && !Object.prototype.hasOwnProperty.call(e3, u2) && (e3[u2] = n2[u2]);
            }
            null == e3.select && delete e3.select;
            var c2 = this.OptionsConstructor || a;
            this.options = new c2(e3), this._index = null, y.hasUserDefinedProperty(this.options, "immutable") && (this.$immutable = this.options.immutable, f(this));
            for (var l2 = 0, h2 = Object.keys(this.options); l2 < h2.length; l2++) {
              var p2 = h2[l2];
              if ("cast" !== p2) {
                if (y.hasUserDefinedProperty(this.options, p2) && "function" == typeof this[p2]) {
                  if ("index" === p2 && this._index) {
                    if (false === e3.index) {
                      var b2 = this._index;
                      if ("object" === i(b2) && null != b2) {
                        if (b2.unique)
                          throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
                        if (b2.sparse)
                          throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
                      }
                      this._index = false;
                    }
                    continue;
                  }
                  var m2 = e3[p2];
                  if ("default" === p2) {
                    this.default(m2);
                    continue;
                  }
                  var v2 = Array.isArray(m2) ? m2 : [m2];
                  this[p2].apply(this, v2);
                }
              } else
                Array.isArray(this.options[p2]) ? this.castFunction.apply(this, this.options[p2]) : this.castFunction(this.options[p2]);
            }
            Object.defineProperty(this, "$$context", { enumerable: false, configurable: false, writable: true, value: null });
          }
          function O(t3, e3) {
            if (void 0 !== t3 && !t3) {
              var r3 = new (e3.ErrorConstructor || _)(e3);
              return r3[b] = true, r3;
            }
          }
          function j(t3, e3) {
            return this.castForQuery(null, t3, e3);
          }
          function $(t3, e3) {
            var r3 = this;
            return Array.isArray(t3) ? t3.map(function(t4) {
              return Array.isArray(t4) && 0 === t4.length ? t4 : r3.castForQuery(null, t4, e3);
            }) : [this.castForQuery(null, t3, e3)];
          }
          S.prototype.OptionsConstructor = a, S.prototype.path, S.prototype.validators, S.prototype.isRequired, S.prototype.splitPath = function() {
            return null != this._presplitPath ? this._presplitPath : null != this.path ? (this._presplitPath = -1 === this.path.indexOf(".") ? [this.path] : this.path.split("."), this._presplitPath) : void 0;
          }, S.cast = function(t3) {
            return 0 === arguments.length || (false === t3 && (t3 = function(t4) {
              return t4;
            }), this._cast = t3), this._cast;
          }, S.prototype.castFunction = function(t3, e3) {
            return 0 === arguments.length ? this._castFunction : (false === t3 && (t3 = this.constructor._defaultCaster || function(t4) {
              return t4;
            }), "string" == typeof t3 ? (this._castErrorMessage = t3, this._castFunction) : (null != t3 && (this._castFunction = t3), null != e3 && (this._castErrorMessage = e3), this._castFunction));
          }, S.prototype.cast = function() {
            throw new Error("Base SchemaType class does not implement a `cast()` function");
          }, S.set = function(t3, e3) {
            this.hasOwnProperty("defaultOptions") || (this.defaultOptions = Object.assign({}, this.defaultOptions)), this.defaultOptions[t3] = e3;
          }, S.get = function(t3) {
            this.getters = this.hasOwnProperty("getters") ? this.getters : [], this.getters.push(t3);
          }, S.prototype.default = function(t3) {
            if (1 === arguments.length) {
              if (void 0 === t3)
                return void (this.defaultValue = void 0);
              if (null != t3 && t3.instanceOfSchema)
                throw new o("Cannot set default value of path `" + this.path + "` to a mongoose Schema instance.");
              return this.defaultValue = t3, this.defaultValue;
            }
            return arguments.length > 1 && (this.defaultValue = Array.prototype.slice.call(arguments)), this.defaultValue;
          }, S.prototype.index = function(t3) {
            return this._index = t3, y.expires(this._index), this;
          }, S.prototype.unique = function(t3, e3) {
            if (false === this._index) {
              if (!t3)
                return;
              throw new Error('Path "' + this.path + '" may not have `index` set to false and `unique` set to true');
            }
            return this.options.hasOwnProperty("index") || false !== t3 ? (null == this._index || true === this._index ? this._index = {} : "string" == typeof this._index && (this._index = { type: this._index }), this._index.unique = !!t3, "string" == typeof e3 && (this._duplicateKeyErrorMessage = e3), this) : this;
          }, S.prototype.text = function(t3) {
            if (false === this._index) {
              if (!t3)
                return this;
              throw new Error('Path "' + this.path + '" may not have `index` set to false and `text` set to true');
            }
            return this.options.hasOwnProperty("index") || false !== t3 ? (null === this._index || void 0 === this._index || "boolean" == typeof this._index ? this._index = {} : "string" == typeof this._index && (this._index = { type: this._index }), this._index.text = t3, this) : this;
          }, S.prototype.sparse = function(t3) {
            if (false === this._index) {
              if (!t3)
                return this;
              throw new Error('Path "' + this.path + '" may not have `index` set to false and `sparse` set to true');
            }
            return this.options.hasOwnProperty("index") || false !== t3 ? (null == this._index || "boolean" == typeof this._index ? this._index = {} : "string" == typeof this._index && (this._index = { type: this._index }), this._index.sparse = t3, this) : this;
          }, S.prototype.immutable = function(t3) {
            return this.$immutable = t3, f(this), this;
          }, S.prototype.transform = function(t3) {
            return this.options.transform = t3, this;
          }, S.prototype.set = function(t3) {
            if ("function" != typeof t3)
              throw new TypeError("A setter must be a function.");
            return this.setters.push(t3), this;
          }, S.prototype.get = function(t3) {
            if ("function" != typeof t3)
              throw new TypeError("A getter must be a function.");
            return this.getters.push(t3), this;
          }, S.prototype.validateAll = function(t3) {
            for (var e3 = 0; e3 < t3.length; e3++)
              this.validate(t3[e3]);
            return this;
          }, S.prototype.validate = function(t3, e3, r3) {
            var n2, a2, s2, u2;
            if ("function" == typeof t3 || t3 && "RegExp" === y.getFunctionName(t3.constructor))
              return "function" == typeof e3 ? (n2 = { validator: t3, message: e3 }).type = r3 || "user defined" : e3 instanceof Object && !r3 ? ((n2 = h(e3) ? Object.assign({}, e3) : c(e3)).message || (n2.message = n2.msg), n2.validator = t3, n2.type = n2.type || "user defined") : (null == e3 && (e3 = o.messages.general.default), r3 || (r3 = "user defined"), n2 = { message: e3, type: r3, validator: t3 }), this.validators.push(n2), this;
            for (a2 = 0, s2 = arguments.length; a2 < s2; a2++) {
              if (u2 = arguments[a2], !y.isPOJO(u2)) {
                var f2 = "Invalid validator. Received (" + i(u2) + ") " + u2 + ". See https://mongoosejs.com/docs/api/schematype.html#SchemaType.prototype.validate()";
                throw new Error(f2);
              }
              this.validate(u2.validator, u2);
            }
            return this;
          }, S.prototype.required = function(t3, e3) {
            var r3 = {};
            if (arguments.length > 0 && null == t3)
              return this.validators = this.validators.filter(function(t4) {
                return t4.validator !== this.requiredValidator;
              }, this), this.isRequired = false, delete this.originalRequiredValue, this;
            if ("object" === i(t3) && (e3 = (r3 = t3).message || e3, t3 = t3.isRequired), false === t3)
              return this.validators = this.validators.filter(function(t4) {
                return t4.validator !== this.requiredValidator;
              }, this), this.isRequired = false, delete this.originalRequiredValue, this;
            var n2 = this;
            this.isRequired = true, this.requiredValidator = function(e4) {
              var r4 = this && this.$__ && this.$__.cachedRequired;
              if (null != r4 && !this.$__isSelected(n2.path) && !this[m](n2.path))
                return true;
              if (null != r4 && n2.path in r4) {
                var i2 = !r4[n2.path] || n2.checkRequired(e4, this);
                return delete r4[n2.path], i2;
              }
              return "function" == typeof t3 && !t3.apply(this) || n2.checkRequired(e4, this);
            }, this.originalRequiredValue = t3, "string" == typeof t3 && (e3 = t3, t3 = void 0);
            var a2 = e3 || o.messages.general.required;
            return this.validators.unshift(Object.assign({}, r3, { validator: this.requiredValidator, message: a2, type: "required" })), this;
          }, S.prototype.ref = function(t3) {
            return this.options.ref = t3, this;
          }, S.prototype.getDefault = function(t3, e3, r3) {
            var n2;
            if (null != (n2 = "function" == typeof this.defaultValue ? this.defaultValue === Date.now || this.defaultValue === Array || "objectid" === this.defaultValue.name.toLowerCase() ? this.defaultValue.call(t3) : this.defaultValue.call(t3, t3) : this.defaultValue)) {
              if ("object" !== i(n2) || this.options && this.options.shared || (n2 = c(n2)), r3 && r3.skipCast)
                return this._applySetters(n2, t3);
              var o2 = this.applySetters(n2, t3, e3, void 0, w);
              return o2 && !Array.isArray(o2) && o2.$isSingleNested && (o2.$__parent = t3), o2;
            }
            return n2;
          }, S.prototype._applySetters = function(t3, e3, r3, n2, i2) {
            var o2 = t3;
            if (r3)
              return o2;
            for (var a2 = this.setters, s2 = a2.length - 1; s2 >= 0; s2--)
              o2 = a2[s2].call(e3, o2, n2, this, i2);
            return o2;
          }, S.prototype._castNullish = function(t3) {
            return t3;
          }, S.prototype.applySetters = function(t3, e3, r3, n2, i2) {
            var o2 = this._applySetters(t3, e3, r3, n2, i2);
            return null == o2 ? this._castNullish(o2) : o2 = this.cast(o2, e3, r3, n2, i2);
          }, S.prototype.applyGetters = function(t3, e3) {
            var r3 = t3, n2 = this.getters, i2 = n2.length;
            if (0 === i2)
              return r3;
            for (var o2 = 0; o2 < i2; ++o2)
              r3 = n2[o2].call(e3, r3, this);
            return r3;
          }, S.prototype.select = function(t3) {
            return this.selected = !!t3, this;
          }, S.prototype.doValidate = function(t3, e3, r3, n2) {
            var o2 = this, a2 = false, s2 = this.path;
            if ("function" != typeof e3)
              throw new TypeError("Must pass callback function to doValidate(), got ".concat(i(e3)));
            var u2 = this.validators.filter(function(t4) {
              return "object" === i(t4) && null !== t4;
            }), f2 = u2.length;
            if (!f2)
              return e3(null);
            for (var l2 = function() {
              if (a2)
                return 0;
              var e4, i2 = u2[d2], f3 = i2.validator, l3 = h(i2) ? Object.assign({}, i2) : c(i2);
              if (l3.path = n2 && n2.path ? n2.path : s2, l3.fullPath = o2.$fullPath, l3.value = t3, f3 instanceof RegExp)
                return m2(f3.test(t3), l3, r3), 1;
              if ("function" != typeof f3)
                return 1;
              if (void 0 === t3 && f3 !== o2.requiredValidator)
                return m2(true, l3, r3), 1;
              try {
                e4 = l3.propsParameter ? f3.call(r3, t3, l3) : f3.call(r3, t3);
              } catch (t4) {
                e4 = false, l3.reason = t4, t4.message && (l3.message = t4.message);
              }
              null != e4 && "function" == typeof e4.then ? e4.then(function(t4) {
                m2(t4, l3, r3);
              }, function(t4) {
                l3.reason = t4, l3.message = t4.message, m2(e4 = false, l3, r3);
              }) : m2(e4, l3, r3);
            }, d2 = 0, y2 = u2.length; d2 < y2 && 0 !== l2(); ++d2)
              ;
            function m2(t4, r4, n3) {
              if (!a2)
                if (void 0 === t4 || t4)
                  --f2 <= 0 && p(function() {
                    e3(null);
                  });
                else {
                  var i2 = r4.ErrorConstructor || _;
                  (a2 = new i2(r4, n3))[b] = true, p(function() {
                    e3(a2);
                  });
                }
            }
          }, S.prototype.doValidateSync = function(t3, e3, r3) {
            var n2 = this.path;
            if (!this.validators.length)
              return null;
            var o2 = this.validators;
            if (void 0 === t3) {
              if (0 === this.validators.length || "required" !== this.validators[0].type)
                return null;
              o2 = [this.validators[0]];
            }
            var a2 = null, s2 = 0, u2 = o2.length;
            for (s2 = 0; s2 < u2; ++s2) {
              var f2 = o2[s2];
              if (null !== f2 && "object" === i(f2)) {
                var p2 = f2.validator, d2 = h(f2) ? Object.assign({}, f2) : c(f2);
                d2.path = r3 && r3.path ? r3.path : n2, d2.fullPath = this.$fullPath, d2.value = t3;
                var y2 = false;
                if (!l(p2)) {
                  if (p2 instanceof RegExp)
                    a2 = O(p2.test(t3), d2);
                  else if ("function" == typeof p2) {
                    try {
                      y2 = d2.propsParameter ? p2.call(e3, t3, d2) : p2.call(e3, t3);
                    } catch (t4) {
                      y2 = false, d2.reason = t4;
                    }
                    if ((null == y2 || "function" != typeof y2.then) && (a2 = O(y2, d2)))
                      break;
                  }
                }
              }
            }
            return a2;
          }, S._isRef = function(t3, e3, r3, i2) {
            var o2 = i2 && t3.options && (t3.options.ref || t3.options.refPath);
            if (!o2 && r3 && null != r3.$__) {
              var a2 = r3.$__fullPath(t3.path, true), s2 = r3.ownerDocument();
              o2 = null != a2 && s2.$populated(a2) || r3.$populated(t3.path);
            }
            return !!o2 && (null == e3 || !(n.isBuffer(e3) || "Binary" === e3._bsontype || !y.isObject(e3)) || i2);
          }, S.prototype._castRef = function(t3, e3, r3, o2) {
            if (null == t3)
              return t3;
            if (null != t3.$__)
              return t3.$__.wasPopulated = t3.$__.wasPopulated || { value: t3._doc._id }, t3;
            if (n.isBuffer(t3) || !y.isObject(t3)) {
              if (r3)
                return t3;
              throw new g(this.instance, t3, this.path, null, this);
            }
            var a2, s2, u2, c2 = e3.$__fullPath(this.path, true), f2 = e3.ownerDocument().$populated(c2, true), l2 = t3;
            if (!(e3.$__.populated && e3.$__.populated[c2] && e3.$__.populated[c2].options && e3.$__.populated[c2].options.options && e3.$__.populated[c2].options.options.lean)) {
              var h2 = f2 ? f2.options[v] : e3.constructor.db.model(this.options.ref);
              (l2 = h2.hydrate(t3, null, o2)).$__.wasPopulated = { value: l2._doc._id, options: (a2 = {}, s2 = v, u2 = h2, (s2 = function(t4) {
                var e4 = function(t5) {
                  if ("object" != i(t5) || !t5)
                    return t5;
                  var e5 = t5[Symbol.toPrimitive];
                  if (void 0 !== e5) {
                    var r4 = e5.call(t5, "string");
                    if ("object" != i(r4))
                      return r4;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return String(t5);
                }(t4);
                return "symbol" == i(e4) ? e4 : e4 + "";
              }(s2)) in a2 ? Object.defineProperty(a2, s2, { value: u2, enumerable: true, configurable: true, writable: true }) : a2[s2] = u2, a2) };
            }
            return l2;
          }, S.prototype.$conditionalHandlers = { $all: function(t3, e3) {
            var r3 = this;
            return Array.isArray(t3) ? t3.map(function(t4) {
              return r3.castForQuery(null, t4, e3);
            }) : [this.castForQuery(null, t3, e3)];
          }, $eq: j, $in: $, $ne: j, $nin: $, $exists: s, $type: u }, S.prototype.castForQuery = function(t3, e3, r3) {
            var n2;
            if (null != t3) {
              if (!(n2 = this.$conditionalHandlers[t3]))
                throw new Error("Can't use " + t3);
              return n2.call(this, e3, r3);
            }
            try {
              return this.applySetters(e3, r3);
            } catch (t4) {
              throw t4 instanceof g && t4.path === this.path && null != this.$fullPath && (t4.path = this.$fullPath), t4;
            }
          }, S.checkRequired = function(t3) {
            return 0 !== arguments.length && (this._checkRequired = t3), this._checkRequired;
          }, S.prototype.checkRequired = function(t3) {
            return null != t3;
          }, S.prototype.clone = function() {
            var t3 = Object.assign({}, this.options), e3 = new this.constructor(this.path, t3, this.instance);
            return e3.validators = this.validators.slice(), void 0 !== this.requiredValidator && (e3.requiredValidator = this.requiredValidator), void 0 !== this.defaultValue && (e3.defaultValue = this.defaultValue), void 0 !== this.$immutable && void 0 === this.options.immutable && (e3.$immutable = this.$immutable, f(e3)), void 0 !== this._index && (e3._index = this._index), void 0 !== this.selected && (e3.selected = this.selected), void 0 !== this.isRequired && (e3.isRequired = this.isRequired), void 0 !== this.originalRequiredValue && (e3.originalRequiredValue = this.originalRequiredValue), e3.getters = this.getters.slice(), e3.setters = this.setters.slice(), e3;
          }, S.prototype.getEmbeddedSchemaType = function() {
            return this.$embeddedSchemaType;
          }, S.prototype._duplicateKeyErrorMessage = null, S.prototype.toJSONSchema = function() {
            throw new Error("Converting unsupported SchemaType to JSON Schema: " + this.instance);
          }, t2.exports = e2 = S, e2.CastError = g, e2.ValidatorError = _;
        }, 6511: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function o(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function a(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? o(Object(r3), true).forEach(function(e4) {
                s(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : o(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function s(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          r2(8768);
          var u = t2.exports = function() {
          };
          u.ctor = function() {
            var t3 = Array.prototype.slice.call(arguments), e3 = function() {
              u.apply(this, arguments), this.paths = {}, this.states = {};
            };
            return (e3.prototype = new u()).constructor = e3, e3.prototype.stateNames = t3, t3.forEach(function(t4) {
              e3.prototype[t4] = function(e4) {
                this._changeState(e4, t4);
              };
            }), e3;
          }, u.prototype._changeState = function(t3, e3) {
            var r3 = this.paths[t3];
            if (r3 !== e3) {
              var n2 = this.states[r3];
              n2 && delete n2[t3], this.paths[t3] = e3, this.states[e3] = this.states[e3] || {}, this.states[e3][t3] = true;
            }
          }, u.prototype.clear = function(t3) {
            if (null != this.states[t3])
              for (var e3, r3 = Object.keys(this.states[t3]), n2 = r3.length; n2--; )
                e3 = r3[n2], delete this.states[t3][e3], delete this.paths[e3];
          }, u.prototype.clearPath = function(t3) {
            var e3 = this.paths[t3];
            e3 && (delete this.paths[t3], delete this.states[e3][t3]);
          }, u.prototype.getStatePaths = function(t3) {
            return null != this.states[t3] ? this.states[t3] : {};
          }, u.prototype.some = function() {
            var t3 = this, e3 = arguments.length ? arguments : this.stateNames;
            return Array.prototype.some.call(e3, function(e4) {
              return null != t3.states[e4] && Object.keys(t3.states[e4]).length;
            });
          }, u.prototype._iter = function(t3) {
            return function() {
              var e3 = Array.prototype.slice.call(arguments), r3 = e3.pop();
              e3.length || (e3 = this.stateNames);
              var n2 = this;
              return e3.reduce(function(t4, e4) {
                return null == n2.states[e4] ? t4 : t4.concat(Object.keys(n2.states[e4]));
              }, [])[t3](function(t4, e4, n3) {
                return r3(t4, e4, n3);
              });
            };
          }, u.prototype.forEach = function() {
            return this.forEach = this._iter("forEach"), this.forEach.apply(this, arguments);
          }, u.prototype.map = function() {
            return this.map = this._iter("map"), this.map.apply(this, arguments);
          }, u.prototype.clone = function() {
            var t3 = new this.constructor();
            t3.paths = a({}, this.paths);
            var e3, r3 = function(t4, e4) {
              var r4 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (!r4) {
                if (Array.isArray(t4) || (r4 = function(t5, e5) {
                  if (t5) {
                    if ("string" == typeof t5)
                      return i(t5, e5);
                    var r5 = {}.toString.call(t5).slice(8, -1);
                    return "Object" === r5 && t5.constructor && (r5 = t5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(t5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? i(t5, e5) : void 0;
                  }
                }(t4)) || e4 && t4 && "number" == typeof t4.length) {
                  r4 && (t4 = r4);
                  var n3 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return n3 >= t4.length ? { done: true } : { done: false, value: t4[n3++] };
                  }, e: function(t5) {
                    throw t5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s2 = true, u2 = false;
              return { s: function() {
                r4 = r4.call(t4);
              }, n: function() {
                var t5 = r4.next();
                return s2 = t5.done, t5;
              }, e: function(t5) {
                u2 = true, a2 = t5;
              }, f: function() {
                try {
                  s2 || null == r4.return || r4.return();
                } finally {
                  if (u2)
                    throw a2;
                }
              } };
            }(this.stateNames);
            try {
              for (r3.s(); !(e3 = r3.n()).done; ) {
                var n2 = e3.value;
                n2 in this.states && (t3.states[n2] = null == this.states[n2] ? this.states[n2] : a({}, this.states[n2]));
              }
            } catch (t4) {
              r3.e(t4);
            } finally {
              r3.f();
            }
            return t3;
          };
        }, 7557: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var o = r2(2400), a = r2(8920), s = r2(7930).arrayAtomicsSymbol, u = r2(7930).arrayAtomicsBackupSymbol, c = r2(7930).arrayParentSymbol, f = r2(7930).arrayPathSymbol, l = r2(7930).arraySchemaSymbol, h = Array.prototype.push, p = /^\d+$/;
          t2.exports = function(t3, e3, r3, n2) {
            var d;
            if (Array.isArray(t3)) {
              var y = t3.length;
              if (0 === y)
                d = new Array();
              else if (1 === y)
                (d = new Array(1))[0] = t3[0];
              else if (y < 1e4)
                d = new Array(), h.apply(d, t3);
              else {
                d = new Array();
                for (var b = 0; b < y; ++b)
                  h.call(d, t3[b]);
              }
            } else
              d = [];
            var m = i(i(i(i(i(i(i(i({}, s, {}), u, void 0), f, e3), l, n2), c, void 0), "isMongooseArray", true), "isMongooseArrayProxy", true), "__array", d);
            t3 && null != t3[s] && (m[s] = t3[s]), null != r3 && r3 instanceof o && (m[c] = r3, m[l] = n2 || r3.schema.path(e3));
            var v = new Proxy(d, { get: function(t4, e4) {
              return m.hasOwnProperty(e4) ? m[e4] : a.hasOwnProperty(e4) ? a[e4] : n2 && n2.virtuals && n2.virtuals.hasOwnProperty(e4) ? n2.virtuals[e4].applyGetters(void 0, t4) : "string" == typeof e4 && p.test(e4) && null != (null == n2 ? void 0 : n2.$embeddedSchemaType) ? n2.$embeddedSchemaType.applyGetters(d[e4], r3) : d[e4];
            }, set: function(t4, e4, r4) {
              return "string" == typeof e4 && p.test(e4) ? a.set.call(v, e4, r4, false) : m.hasOwnProperty(e4) ? m[e4] = r4 : n2 && n2.virtuals && n2.virtuals.hasOwnProperty(e4) ? n2.virtuals[e4].applySetters(r4, t4) : d[e4] = r4, true;
            } });
            return v;
          };
        }, 1243: (t2, e2) => {
          "use strict";
          e2.isMongooseArray = function(t3) {
            return Array.isArray(t3) && t3.isMongooseArray;
          };
        }, 8920: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3) {
            return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, i(t3);
          }
          function o(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = a(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, o2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw o2;
              }
            } };
          }
          function a(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return s(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? s(t3, e3) : void 0;
            }
          }
          function s(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var u = r2(2400), c = r2(6547), f = r2(8213), l = r2(4473), h = r2(4450), p = r2(3303)._, d = r2(5678), y = r2(8768), b = r2(3305), m = r2(7930).arrayAtomicsSymbol, v = r2(7930).arrayParentSymbol, g = r2(7930).arrayPathSymbol, _ = r2(7930).arraySchemaSymbol, w = r2(7930).populateModelSymbol, S = Symbol("mongoose#Array#sliced"), O = Array.prototype.push, j = { $__getAtomics: function() {
            var t3 = [], e3 = Object.keys(this[m] || {}), r3 = e3.length, n2 = Object.assign({}, p, { _isNested: true });
            if (0 === r3)
              return t3[0] = ["$set", this.toObject(n2)], t3;
            for (; r3--; ) {
              var i2 = e3[r3], o2 = this[m][i2];
              y.isMongooseObject(o2) ? o2 = o2.toObject(n2) : Array.isArray(o2) ? o2 = this.toObject.call(o2, n2) : null != o2 && Array.isArray(o2.$each) ? o2.$each = this.toObject.call(o2.$each, n2) : null != o2 && "function" == typeof o2.valueOf && (o2 = o2.valueOf()), "$addToSet" === i2 && (o2 = { $each: o2 }), t3.push([i2, o2]);
            }
            return t3;
          }, $atomics: function() {
            return this[m];
          }, $parent: function() {
            return this[v];
          }, $path: function() {
            return this[g];
          }, $shift: function() {
            this._registerAtomic("$pop", -1), this._markModified();
            var t3 = this.__array;
            if (!t3._shifted)
              return t3._shifted = true, [].shift.call(t3);
          }, $pop: function() {
            if (this._registerAtomic("$pop", 1), this._markModified(), !this._popped)
              return this._popped = true, [].pop.call(this);
          }, $schema: function() {
            return this[_];
          }, _cast: function(t3) {
            var e3, r3 = false, i2 = this[v];
            if (i2 && (r3 = i2.$populated(this[g], true)), r3 && null != t3) {
              if (null == (e3 = r3.options[w]))
                throw new f("No populated model found for path `" + this[g] + "`. This is likely a bug in Mongoose, please report an issue on github.com/Automattic/mongoose.");
              return (n.isBuffer(t3) || b(t3, "ObjectId") || !y.isObject(t3)) && (t3 = { _id: t3 }), t3.schema && t3.schema.discriminatorMapping && void 0 !== t3.schema.discriminatorMapping.key || (t3 = new e3(t3)), this[_].caster.applySetters(t3, i2, true);
            }
            return this[_].caster.applySetters(t3, i2, false);
          }, _mapCast: function(t3, e3) {
            return this._cast(t3, this.length + e3);
          }, _markModified: function(t3) {
            var e3, r3 = this[v];
            if (r3) {
              if (e3 = this[g], arguments.length && (e3 = e3 + "." + t3), null != e3 && e3.endsWith(".$"))
                return this;
              r3.markModified(e3, 0 !== arguments.length ? t3 : r3);
            }
            return this;
          }, _registerAtomic: function(t3, e3) {
            if (!this[S]) {
              if ("$set" === t3)
                return this[m] = { $set: e3 }, l(this[v], this[g]), this._markModified(), this;
              var r3, n2 = this[m];
              if ("$pop" === t3 && !("$pop" in n2)) {
                var i2 = this;
                this[v].once("save", function() {
                  i2._popped = i2._shifted = null;
                });
              }
              if (n2.$set || Object.keys(n2).length && !(t3 in n2))
                return this[m] = { $set: this }, this;
              if ("$pullAll" === t3 || "$addToSet" === t3)
                n2[t3] || (n2[t3] = []), n2[t3] = n2[t3].concat(e3);
              else if ("$pullDocs" === t3) {
                var u2 = n2.$pull || (n2.$pull = {});
                e3[0] instanceof c ? (r3 = u2.$or || (u2.$or = []), Array.prototype.push.apply(r3, e3.map(function(t4) {
                  return t4.toObject({ transform: function(e4, r4) {
                    return null == t4 || null == t4.$__ || Object.keys(t4.$__.activePaths.getStatePaths("default")).forEach(function(t5) {
                      d.unset(t5, r4), $(r4, t5);
                    }), r4;
                  }, virtuals: false });
                }))) : (r3 = u2._id || (u2._id = { $in: [] })).$in = r3.$in.concat(e3);
              } else if ("$push" === t3)
                if (n2.$push = n2.$push || { $each: [] }, null != e3 && y.hasUserDefinedProperty(e3, "$each"))
                  n2.$push = e3;
                else if (1 === e3.length)
                  n2.$push.$each.push(e3[0]);
                else if (e3.length < 1e4) {
                  var f2;
                  (f2 = n2.$push.$each).push.apply(f2, function(t4) {
                    if (Array.isArray(t4))
                      return s(t4);
                  }(_2 = e3) || function(t4) {
                    if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                      return Array.from(t4);
                  }(_2) || a(_2) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }());
                } else {
                  var h2, p2 = o(e3);
                  try {
                    for (p2.s(); !(h2 = p2.n()).done; ) {
                      var b2 = h2.value;
                      n2.$push.$each.push(b2);
                    }
                  } catch (t4) {
                    p2.e(t4);
                  } finally {
                    p2.f();
                  }
                }
              else
                n2[t3] = e3;
              return this;
            }
            var _2;
          }, addToSet: function() {
            E(this, arguments), A(this, arguments);
            var t3 = [].map.call(arguments, this._mapCast, this), e3 = [], r3 = "";
            t3[0] instanceof c ? r3 = "doc" : t3[0] instanceof Date ? r3 = "date" : b(t3[0], "ObjectId") && (r3 = "ObjectId");
            var n2 = y.isMongooseArray(t3) ? t3.__array : t3, i2 = y.isMongooseArray(this) ? this.__array : this;
            return n2.forEach(function(t4) {
              var n3, o2 = +t4;
              switch (r3) {
                case "doc":
                  n3 = this.some(function(e4) {
                    return e4.equals(t4);
                  });
                  break;
                case "date":
                  n3 = this.some(function(t5) {
                    return +t5 === o2;
                  });
                  break;
                case "ObjectId":
                  n3 = this.find(function(e4) {
                    return e4.toString() === t4.toString();
                  });
                  break;
                default:
                  n3 = ~this.indexOf(t4);
              }
              n3 || (this._markModified(), i2.push(t4), this._registerAtomic("$addToSet", t4), [].push.call(e3, t4));
            }, this), e3;
          }, hasAtomics: function() {
            return y.isPOJO(this[m]) ? Object.keys(this[m]).length : 0;
          }, includes: function(t3, e3) {
            return -1 !== this.indexOf(t3, e3);
          }, indexOf: function(t3, e3) {
            b(t3, "ObjectId") && (t3 = t3.toString()), e3 = null == e3 ? 0 : e3;
            for (var r3 = this.length, n2 = e3; n2 < r3; ++n2)
              if (t3 == this[n2])
                return n2;
            return -1;
          }, inspect: function() {
            return JSON.stringify(this);
          }, nonAtomicPush: function() {
            var t3 = [].map.call(arguments, this._mapCast, this);
            this._markModified();
            var e3 = [].push.apply(this, t3);
            return this._registerAtomic("$set", this), e3;
          }, pop: function() {
            this._markModified();
            var t3 = [].pop.call(this);
            return this._registerAtomic("$set", this), t3;
          }, pull: function() {
            var t3 = this, e3 = [].map.call(arguments, function(e4, r4) {
              return t3._cast(e4, r4, { defaults: false });
            }, this), r3 = this[v].get(this[g]);
            y.isMongooseArray(r3) && (r3 = r3.__array);
            var n2, i2 = r3.length;
            for (this._markModified(); i2--; )
              (n2 = r3[i2]) instanceof u ? e3.some(function(t4) {
                return n2.equals(t4);
              }) && r3.splice(i2, 1) : ~this.indexOf.call(e3, n2) && r3.splice(i2, 1);
            return e3[0] instanceof c ? this._registerAtomic("$pullDocs", e3.map(function(t4) {
              var e4 = t4.$__getValue("_id");
              return void 0 === e4 || t4.$isDefault("_id") ? t4 : e4;
            })) : this._registerAtomic("$pullAll", e3), l(this[v], this[g]) > 0 && this._registerAtomic("$set", this), this;
          }, push: function() {
            var t3, e3 = arguments, r3 = e3, n2 = null != e3[0] && y.hasUserDefinedProperty(e3[0], "$each"), i2 = y.isMongooseArray(this) ? this.__array : this;
            if (n2 && (r3 = e3[0], e3 = e3[0].$each), null == this[_])
              return O.apply(this, e3);
            E(this, e3), A(this, e3), e3 = [].map.call(e3, this._mapCast, this);
            var o2 = this[m];
            return this._markModified(), n2 ? (r3.$each = e3, 0 !== (o2.$push && o2.$push.$each && o2.$push.$each.length || 0) && o2.$push.$position != r3.$position ? (null != r3.$position ? ([].splice.apply(i2, [r3.$position, 0].concat(e3)), t3 = i2.length) : t3 = [].push.apply(i2, e3), this._registerAtomic("$set", this)) : null != r3.$position ? ([].splice.apply(i2, [r3.$position, 0].concat(e3)), t3 = this.length) : t3 = [].push.apply(i2, e3)) : (r3 = e3, t3 = O.apply(i2, e3)), this._registerAtomic("$push", r3), t3;
          }, remove: function() {
            return this.pull.apply(this, arguments);
          }, set: function(t3, e3, r3) {
            var n2 = this.__array;
            if (r3)
              return n2[t3] = e3, this;
            var i2 = j._cast.call(this, e3, t3);
            return j._markModified.call(this, t3), n2[t3] = i2, this;
          }, shift: function() {
            var t3 = y.isMongooseArray(this) ? this.__array : this;
            this._markModified();
            var e3 = [].shift.call(t3);
            return this._registerAtomic("$set", this), e3;
          }, sort: function() {
            var t3 = y.isMongooseArray(this) ? this.__array : this, e3 = [].sort.apply(t3, arguments);
            return this._registerAtomic("$set", this), e3;
          }, splice: function() {
            var t3, e3 = y.isMongooseArray(this) ? this.__array : this;
            if (this._markModified(), E(this, Array.prototype.slice.call(arguments, 2)), arguments.length) {
              var r3;
              if (null == this[_])
                r3 = arguments;
              else {
                r3 = [];
                for (var n2 = 0; n2 < arguments.length; ++n2)
                  r3[n2] = n2 < 2 ? arguments[n2] : this._cast(arguments[n2], arguments[0] + (n2 - 2));
              }
              t3 = [].splice.apply(e3, r3), this._registerAtomic("$set", this);
            }
            return t3;
          }, toBSON: function() {
            return this.toObject(p);
          }, toObject: function(t3) {
            var e3 = y.isMongooseArray(this) ? this.__array : this;
            return t3 && t3.depopulate ? ((t3 = h(t3))._isNested = true, [].concat(e3).map(function(e4) {
              return e4 instanceof u ? e4.toObject(t3) : e4;
            })) : [].concat(e3);
          }, $toObject: function() {
            return this.constructor.prototype.toObject.apply(this, arguments);
          }, unshift: function() {
            var t3;
            E(this, arguments), t3 = null == this[_] ? arguments : [].map.call(arguments, this._cast, this);
            var e3 = y.isMongooseArray(this) ? this.__array : this;
            return this._markModified(), [].unshift.apply(e3, t3), this._registerAtomic("$set", this), this.length;
          } };
          function $(t3, e3, r3) {
            if ("string" == typeof e3) {
              if (-1 === e3.indexOf("."))
                return;
              e3 = d.stringToParts(e3);
            }
            (r3 = r3 || 0) >= e3.length || null != t3 && "object" === i(t3) && ($(t3[e3[0]], e3, r3 + 1), null != t3[e3[0]] && "object" === i(t3[e3[0]]) && 0 === Object.keys(t3[e3[0]]).length && delete t3[e3[0]]);
          }
          function E(t3, e3) {
            var r3, n2, a2, s2 = null == t3 ? null : t3[_] && t3[_].caster && t3[_].caster.options && t3[_].caster.options.ref || null;
            0 === t3.length && 0 !== e3.length && function(t4, e4) {
              if (!e4)
                return false;
              var r4, n3 = o(t4);
              try {
                for (n3.s(); !(r4 = n3.n()).done; ) {
                  var i2 = r4.value;
                  if (null == i2)
                    return false;
                  var a3 = i2.constructor;
                  if (!(i2 instanceof u) || a3.modelName !== e4 && a3.baseModelName !== e4)
                    return false;
                }
              } catch (t5) {
                n3.e(t5);
              } finally {
                n3.f();
              }
              return true;
            }(e3, s2) && t3[v].$populated(t3[g], [], (r3 = {}, n2 = w, a2 = e3[0].constructor, (n2 = function(t4) {
              var e4 = function(t5) {
                if ("object" != i(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != i(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == i(e4) ? e4 : e4 + "";
            }(n2)) in r3 ? Object.defineProperty(r3, n2, { value: a2, enumerable: true, configurable: true, writable: true }) : r3[n2] = a2, r3));
          }
          function A(t3, e3) {
            var r3 = null == t3 ? null : t3[_] && t3[_].caster && t3[_].caster.options && t3[_].caster.options.ref || null, a2 = t3[v], s2 = t3[g];
            if (r3 && a2.populated(s2)) {
              var u2, c2 = o(e3);
              try {
                for (c2.s(); !(u2 = c2.n()).done; ) {
                  var f2 = u2.value;
                  if (null != f2 && ("object" !== i(f2) || f2 instanceof String || f2 instanceof Number || f2 instanceof n || y.isMongooseType(f2))) {
                    a2.depopulate(s2);
                    break;
                  }
                }
              } catch (t4) {
                c2.e(t4);
              } finally {
                c2.f();
              }
            }
          }
          for (var P = function() {
            var t3 = k[x];
            if (null == Array.prototype[t3])
              return 1;
            j[t3] = function() {
              var e3 = y.isMongooseArray(this) ? this.__array : this, r3 = [].concat(e3);
              return r3[t3].apply(r3, arguments);
            };
          }, x = 0, k = ["filter", "flat", "flatMap", "map", "slice"]; x < k.length; x++)
            P();
          t2.exports = j;
        }, 6547: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function i(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != o(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != o(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == o(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function o(t3) {
            return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, o(t3);
          }
          var a = r2(3550).EventEmitter, s = r2(9380), u = r2(8768), c = r2(7930).documentArrayParent;
          function f(t3, e3, r3, a2, f2) {
            var l2;
            u.isMongooseDocumentArray(e3) ? (this.__parentArray = e3, this[c] = e3.$parent()) : (this.__parentArray = void 0, this[c] = void 0), this.$setIndex(f2), this.$__parent = this[c], "object" === o(r3) && null != r3 ? (l2 = function(t4) {
              for (var e4 = 1; e4 < arguments.length; e4++) {
                var r4 = null != arguments[e4] ? arguments[e4] : {};
                e4 % 2 ? n(Object(r4), true).forEach(function(e5) {
                  i(t4, e5, r4[e5]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t4, Object.getOwnPropertyDescriptors(r4)) : n(Object(r4)).forEach(function(e5) {
                  Object.defineProperty(t4, e5, Object.getOwnPropertyDescriptor(r4, e5));
                });
              }
              return t4;
            }({ isNew: true }, r3), r3 = void 0) : l2 = { isNew: true }, s.call(this, t3, a2, this[c], r3, l2);
          }
          for (var l in f.prototype = Object.create(s.prototype), f.prototype.constructor = f, Object.defineProperty(f.prototype, "$isSingleNested", { configurable: false, writable: false, value: false }), Object.defineProperty(f.prototype, "$isDocumentArrayElement", { configurable: false, writable: false, value: true }), a.prototype)
            f[l] = a.prototype[l];
          f.prototype.$setIndex = function(t3) {
            if (this.__index = t3, null != this.$__ && null != this.$__.validationError)
              for (var e3 = 0, r3 = Object.keys(this.$__.validationError.errors); e3 < r3.length; e3++) {
                var n2 = r3[e3];
                this.invalidate(n2, this.$__.validationError.errors[n2]);
              }
          }, f.prototype.populate = function() {
            throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.arr[0].populate("path")`, use `doc.populate("arr.0.path")`');
          }, f.prototype.$__removeFromParent = function() {
            var t3 = this._doc._id;
            if (!t3)
              throw new Error("For your own good, Mongoose does not know how to remove an ArraySubdocument that has no _id");
            this.__parentArray.pull({ _id: t3 });
          }, f.prototype.$__fullPath = function(t3, e3) {
            return null == this.__index ? null : (this.$__.fullPath || this.ownerDocument(), e3 ? t3 ? this.$__.fullPath + "." + t3 : this.$__.fullPath : t3 ? this.$__.fullPath + "." + this.__index + "." + t3 : this.$__.fullPath + "." + this.__index);
          }, f.prototype.$__pathRelativeToParent = function(t3, e3) {
            return null != this.__index && this.__parentArray && this.__parentArray.$path ? e3 ? null == t3 ? this.__parentArray.$path() : this.__parentArray.$path() + "." + t3 : null == t3 ? this.__parentArray.$path() + "." + this.__index : this.__parentArray.$path() + "." + this.__index + "." + t3 : null;
          }, f.prototype.$parent = function() {
            return this[c];
          }, f.prototype.parentArray = function() {
            return this.__parentArray;
          }, t2.exports = f;
        }, 6365: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer, i = r2(3633).Binary, o = r2(8768);
          function a(t3, e3, r3) {
            var i2, s2, c, f, l = t3;
            return null == t3 && (l = 0), Array.isArray(e3) ? (s2 = e3[0], c = e3[1]) : i2 = e3, f = "number" == typeof l || l instanceof Number ? n.alloc(l) : n.from(l, i2, r3), o.decorate(f, a.mixin), f.isMongooseBuffer = true, f[a.pathSymbol] = s2, f[u] = c, f._subtype = 0, f;
          }
          var s = Symbol.for("mongoose#Buffer#_path"), u = Symbol.for("mongoose#Buffer#_parent");
          a.pathSymbol = s, a.mixin = { _subtype: void 0, _markModified: function() {
            var t3 = this[u];
            return t3 && t3.markModified(this[a.pathSymbol]), this;
          }, write: function() {
            var t3 = n.prototype.write.apply(this, arguments);
            return t3 > 0 && this._markModified(), t3;
          }, copy: function(t3) {
            var e3 = n.prototype.copy.apply(this, arguments);
            return t3 && t3.isMongooseBuffer && t3._markModified(), e3;
          } }, o.each(["writeUInt8", "writeUInt16", "writeUInt32", "writeInt8", "writeInt16", "writeInt32", "writeFloat", "writeDouble", "fill", "utf8Write", "binaryWrite", "asciiWrite", "set", "writeUInt16LE", "writeUInt16BE", "writeUInt32LE", "writeUInt32BE", "writeInt16LE", "writeInt16BE", "writeInt32LE", "writeInt32BE", "writeFloatLE", "writeFloatBE", "writeDoubleLE", "writeDoubleBE"], function(t3) {
            n.prototype[t3] && (a.mixin[t3] = function() {
              var e3 = n.prototype[t3].apply(this, arguments);
              return this._markModified(), e3;
            });
          }), a.mixin.toObject = function(t3) {
            var e3 = "number" == typeof t3 ? t3 : this._subtype || 0;
            return new i(n.from(this), e3);
          }, a.mixin.$toObject = a.mixin.toObject, a.mixin.toBSON = function() {
            return new i(this, this._subtype || 0);
          }, a.mixin.equals = function(t3) {
            if (!n.isBuffer(t3))
              return false;
            if (this.length !== t3.length)
              return false;
            for (var e3 = 0; e3 < this.length; ++e3)
              if (this[e3] !== t3[e3])
                return false;
            return true;
          }, a.mixin.subtype = function(t3) {
            if ("number" != typeof t3)
              throw new TypeError("Invalid subtype. Expected a number");
            this._subtype !== t3 && this._markModified(), this._subtype = t3;
          }, a.Binary = i, t2.exports = a;
        }, 9639: (t2, e2, r2) => {
          "use strict";
          t2.exports = r2(3633).Decimal128;
        }, 4878: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != n(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != n(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == n(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          var o = r2(8920), a = r2(4859), s = r2(2400), u = r2(7930).arrayAtomicsSymbol, c = r2(7930).arrayAtomicsBackupSymbol, f = r2(7930).arrayParentSymbol, l = r2(7930).arrayPathSymbol, h = r2(7930).arraySchemaSymbol, p = Array.prototype.push, d = /^\d+$/;
          t2.exports = function(t3, e3, r3, n2) {
            var y = [], b = i(i(i(i(i({}, u, {}), c, void 0), l, e3), h, void 0), f, void 0);
            if (Array.isArray(t3) && (t3[l] === e3 && t3[f] === r3 && (b[u] = Object.assign({}, t3[u])), t3.forEach(function(t4) {
              p.call(y, t4);
            })), b[l] = e3, b.__array = y, r3 && r3 instanceof s)
              for (b[f] = r3, b[h] = r3.$__schema.path(e3); null != b[h] && b[h].$isMongooseArray && !b[h].$isMongooseDocumentArray; )
                b[h] = b[h].casterConstructor;
            var m = new Proxy(y, { get: function(t4, e4) {
              return "isMongooseArray" === e4 || "isMongooseArrayProxy" === e4 || "isMongooseDocumentArray" === e4 || "isMongooseDocumentArrayProxy" === e4 || (b.hasOwnProperty(e4) ? b[e4] : a.hasOwnProperty(e4) ? a[e4] : n2 && n2.virtuals && n2.virtuals.hasOwnProperty(e4) ? n2.virtuals[e4].applyGetters(void 0, t4) : o.hasOwnProperty(e4) ? o[e4] : y[e4]);
            }, set: function(t4, e4, r4) {
              return "string" == typeof e4 && d.test(e4) ? a.set.call(m, e4, r4, false) : b.hasOwnProperty(e4) ? b[e4] = r4 : n2 && n2.virtuals && n2.virtuals.hasOwnProperty(e4) ? n2.virtuals[e4].applySetters(r4, t4) : y[e4] = r4, true;
            } });
            return m;
          };
        }, 1347: (t2, e2) => {
          "use strict";
          e2.isMongooseDocumentArray = function(t3) {
            return Array.isArray(t3) && t3.isMongooseDocumentArray;
          };
        }, 4859: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return o(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? o(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function o(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var a = r2(8920), s = r2(2400), u = r2(863), c = r2(8677), f = r2(3303)._, l = r2(8768), h = r2(3305), p = r2(7930).arrayParentSymbol, d = r2(7930).arrayPathSymbol, y = r2(7930).arraySchemaSymbol, b = r2(7930).documentArrayParent, m = Array.prototype.toString, v = { toBSON: function() {
            return this.toObject(f);
          }, toString: function() {
            return m.call(this.__array.map(function(t3) {
              return null != t3 && null != t3.$__ ? t3.toString() : t3;
            }));
          }, getArrayParent: function() {
            return this[p];
          }, _cast: function(t3, e3, r3) {
            if (null == this[y])
              return t3;
            var i2 = this[y].casterConstructor;
            if ((i2.$isMongooseDocumentArray ? l.isMongooseDocumentArray(t3) : t3 instanceof i2) || t3 && t3.constructor && t3.constructor.baseCasterConstructor === i2)
              return t3[b] && t3.__parentArray || (t3[b] = this[p], t3.__parentArray = this), t3.$setIndex(e3), t3;
            if (null == t3)
              return null;
            if ((n.isBuffer(t3) || h(t3, "ObjectId") || !l.isObject(t3)) && (t3 = { _id: t3 }), t3 && i2.discriminators && i2.schema && i2.schema.options && i2.schema.options.discriminatorKey)
              if ("string" == typeof t3[i2.schema.options.discriminatorKey] && i2.discriminators[t3[i2.schema.options.discriminatorKey]])
                i2 = i2.discriminators[t3[i2.schema.options.discriminatorKey]];
              else {
                var o2 = c(i2.discriminators, t3[i2.schema.options.discriminatorKey]);
                o2 && (i2 = o2);
              }
            if (i2.$isMongooseDocumentArray)
              return i2.cast(t3, this, void 0, void 0, e3);
            var a2 = new i2(t3, this, r3, void 0, e3);
            return a2.isNew = true, a2;
          }, id: function(t3) {
            var e3, r3, n2;
            try {
              e3 = u(t3).toString();
            } catch (t4) {
              e3 = null;
            }
            var o2, a2 = i(this);
            try {
              for (a2.s(); !(o2 = a2.n()).done; ) {
                var c2 = o2.value;
                if (c2 && null != (n2 = c2.get("_id"))) {
                  if (n2 instanceof s) {
                    if (r3 || (r3 = String(t3)), r3 == n2._id)
                      return c2;
                  } else if (h(t3, "ObjectId") || h(n2, "ObjectId")) {
                    if (e3 == n2)
                      return c2;
                  } else if (t3 == n2 || l.deepEqual(t3, n2))
                    return c2;
                }
              }
            } catch (t4) {
              a2.e(t4);
            } finally {
              a2.f();
            }
            return null;
          }, toObject: function(t3) {
            return [].concat(this.map(function(e3) {
              return null == e3 ? null : "function" != typeof e3.toObject ? e3 : e3.toObject(t3);
            }));
          }, $toObject: function() {
            return this.constructor.prototype.toObject.apply(this, arguments);
          }, push: function() {
            var t3 = a.push.apply(this, arguments);
            return g(this), t3;
          }, pull: function() {
            var t3 = a.pull.apply(this, arguments);
            return g(this), t3;
          }, shift: function() {
            var t3 = a.shift.apply(this, arguments);
            return g(this), t3;
          }, splice: function() {
            var t3 = a.splice.apply(this, arguments);
            return g(this), t3;
          }, inspect: function() {
            return this.toObject();
          }, create: function(t3) {
            var e3 = this[y].casterConstructor;
            if (t3 && e3.discriminators && e3.schema && e3.schema.options && e3.schema.options.discriminatorKey)
              if ("string" == typeof t3[e3.schema.options.discriminatorKey] && e3.discriminators[t3[e3.schema.options.discriminatorKey]])
                e3 = e3.discriminators[t3[e3.schema.options.discriminatorKey]];
              else {
                var r3 = c(e3.discriminators, t3[e3.schema.options.discriminatorKey]);
                r3 && (e3 = r3);
              }
            return new e3(t3, this);
          }, notify: function(t3) {
            var e3 = this;
            return function r3(n2, i2) {
              for (var o2 = (i2 = i2 || e3).length; o2--; )
                null != i2[o2] && ("save" === t3 && (n2 = e3[o2]), l.isMongooseArray(i2[o2]) ? r3(n2, i2[o2]) : i2[o2] && i2[o2].emit(t3, n2));
            };
          }, set: function(t3, e3, r3) {
            var n2 = this.__array;
            if (r3)
              return n2[t3] = e3, this;
            var i2 = v._cast.call(this, e3, t3);
            return v._markModified.call(this, t3), n2[t3] = i2, this;
          }, _markModified: function(t3, e3) {
            var r3, n2 = this[p];
            if (n2) {
              if (r3 = this[d], arguments.length && (r3 = null != e3 ? r3 + "." + t3.__index + "." + e3 : r3 + "." + t3), null != r3 && r3.endsWith(".$"))
                return this;
              n2.markModified(r3, 0 !== arguments.length ? t3 : n2);
            }
            return this;
          } };
          function g(t3) {
            var e3 = t3[p];
            if (e3 && null != e3.$__.populated) {
              var r3, n2 = i(Object.keys(e3.$__.populated).filter(function(e4) {
                return e4.startsWith(t3[d] + ".");
              }));
              try {
                var o2 = function() {
                  var n3 = r3.value, i2 = n3.slice((t3[d] + ".").length);
                  if (!Array.isArray(e3.$__.populated[n3].value))
                    return 1;
                  e3.$__.populated[n3].value = t3.map(function(t4) {
                    return t4.$populated(i2);
                  });
                };
                for (n2.s(); !(r3 = n2.n()).done; )
                  o2();
              } catch (t4) {
                n2.e(t4);
              } finally {
                n2.f();
              }
            }
          }
          t2.exports = v;
        }, 9600: (t2, e2, r2) => {
          "use strict";
          e2.Array = r2(7557), e2.Buffer = r2(6365), e2.Document = e2.Embedded = r2(6547), e2.DocumentArray = r2(4878), e2.Decimal128 = r2(9639), e2.ObjectId = r2(5549), e2.Map = r2(2081), e2.Subdocument = r2(9380), e2.UUID = r2(1344);
        }, 2081: (t2, e2, r2) => {
          "use strict";
          function n(t3) {
            return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, n(t3);
          }
          function i(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return o(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? o(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function o(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function a(t3, e3) {
            for (var r3 = 0; r3 < e3.length; r3++) {
              var n2 = e3[r3];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(t3, s(n2.key), n2);
            }
          }
          function s(t3) {
            var e3 = function(t4) {
              if ("object" != n(t4) || !t4)
                return t4;
              var e4 = t4[Symbol.toPrimitive];
              if (void 0 !== e4) {
                var r3 = e4.call(t4, "string");
                if ("object" != n(r3))
                  return r3;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return String(t4);
            }(t3);
            return "symbol" == n(e3) ? e3 : e3 + "";
          }
          function u(t3, e3, r3, n2) {
            var i2 = c(p(1 & n2 ? t3.prototype : t3), e3, r3);
            return 2 & n2 && "function" == typeof i2 ? function(t4) {
              return i2.apply(r3, t4);
            } : i2;
          }
          function c() {
            return c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(t3, e3, r3) {
              var n2 = function(t4, e4) {
                for (; !{}.hasOwnProperty.call(t4, e4) && null !== (t4 = p(t4)); )
                  ;
                return t4;
              }(t3, e3);
              if (n2) {
                var i2 = Object.getOwnPropertyDescriptor(n2, e3);
                return i2.get ? i2.get.call(arguments.length < 3 ? t3 : r3) : i2.value;
              }
            }, c.apply(null, arguments);
          }
          function f(t3) {
            var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return f = function(t4) {
              if (null === t4 || !function(t5) {
                try {
                  return -1 !== Function.toString.call(t5).indexOf("[native code]");
                } catch (e4) {
                  return "function" == typeof t5;
                }
              }(t4))
                return t4;
              if ("function" != typeof t4)
                throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== e3) {
                if (e3.has(t4))
                  return e3.get(t4);
                e3.set(t4, r3);
              }
              function r3() {
                return function(t5, e4, r4) {
                  if (l())
                    return Reflect.construct.apply(null, arguments);
                  var n2 = [null];
                  n2.push.apply(n2, e4);
                  var i2 = new (t5.bind.apply(t5, n2))();
                  return r4 && h(i2, r4.prototype), i2;
                }(t4, arguments, p(this).constructor);
              }
              return r3.prototype = Object.create(t4.prototype, { constructor: { value: r3, enumerable: false, writable: true, configurable: true } }), h(r3, t4);
            }, f(t3);
          }
          function l() {
            try {
              var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
            } catch (t4) {
            }
            return (l = function() {
              return !!t3;
            })();
          }
          function h(t3, e3) {
            return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
              return t4.__proto__ = e4, t4;
            }, h(t3, e3);
          }
          function p(t3) {
            return p = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
              return t4.__proto__ || Object.getPrototypeOf(t4);
            }, p(t3);
          }
          var d = r2(5022), y = r2(8213), b = r2(4450), m = r2(8768).deepEqual, v = r2(5879), g = r2(3216), _ = r2(7352), w = r2(2793), S = r2(3305), O = r2(4473), j = r2(7930).populateModelSymbol, $ = function(t3) {
            function e3(t4, r4, i2, o3) {
              var a2;
              return function(t5, e4) {
                if (!(t5 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), "Object" === v(t4) && (t4 = Object.keys(t4).reduce(function(e4, r5) {
                return e4.concat([[r5, t4[r5]]]);
              }, [])), (a2 = function(t5, e4, r5) {
                return e4 = p(e4), function(t6, e5) {
                  if (e5 && ("object" == n(e5) || "function" == typeof e5))
                    return e5;
                  if (void 0 !== e5)
                    throw new TypeError("Derived constructors may only return object or undefined");
                  return function(t7) {
                    if (void 0 === t7)
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t7;
                  }(t6);
                }(t5, l() ? Reflect.construct(e4, r5 || [], p(t5).constructor) : e4.apply(t5, r5));
              }(this, e3, [t4])).$__parent = null != i2 && null != i2.$__ ? i2 : null, a2.$__path = r4, a2.$__schemaType = null == o3 ? new d(r4) : o3, a2.$__runDeferred(), a2;
            }
            return function(t4, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e4 && h(t4, e4);
            }(e3, t3), r3 = e3, o2 = [{ key: "$init", value: function(t4, r4) {
              E(t4), u(e3, "set", this, 3)([t4, r4]), null != r4 && r4.$isSingleNested && (r4.$basePath = this.$__path + "." + t4);
            } }, { key: "$__set", value: function(t4, r4) {
              u(e3, "set", this, 3)([t4, r4]);
            } }, { key: "get", value: function(t4, r4) {
              return S(t4, "ObjectId") && (t4 = t4.toString()), false === (r4 = r4 || {}).getters ? u(e3, "get", this, 3)([t4]) : this.$__schemaType.applyGetters(u(e3, "get", this, 3)([t4]), this.$__parent);
            } }, { key: "set", value: function(t4, r4) {
              if (S(t4, "ObjectId") && (t4 = t4.toString()), E(t4), r4 = g(r4), null == this.$__schemaType)
                return this.$__deferred = this.$__deferred || [], void this.$__deferred.push({ key: t4, value: r4 });
              var n2, i2 = this.$__parent, o3 = null != i2 && i2.$__ && i2.$__.populated ? i2.$populated(f2.call(this), true) || i2.$populated(this.$__path, true) : null, a2 = this.get(t4);
              if (null != o3) {
                if (this.$__schemaType.$isSingleNested)
                  throw new y("Cannot manually populate single nested subdoc underneath Map " + 'at path "'.concat(this.$__path, '". Try using an array instead of a Map.'));
                Array.isArray(r4) && this.$__schemaType.$isMongooseArray ? r4 = r4.map(function(t5) {
                  return null == t5.$__ && (t5 = new o3.options[j](t5)), t5.$__.wasPopulated = { value: t5._doc._id }, t5;
                }) : null != r4 && (null == r4.$__ && (r4 = new o3.options[j](r4)), r4.$__.wasPopulated = { value: r4._doc._id });
              } else
                try {
                  var s2 = this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested ? { path: f2.call(this) } : null;
                  r4 = this.$__schemaType.applySetters(r4, this.$__parent, false, this.get(t4), s2);
                } catch (t5) {
                  if (null != this.$__parent && null != this.$__parent.$__)
                    return void this.$__parent.invalidate(f2.call(this), t5);
                  throw t5;
                }
              if (u(e3, "set", this, 3)([t4, r4]), null != i2 && null != i2.$__ && !m(r4, a2)) {
                var c2 = f2.call(this);
                i2.markModified(c2), (this.$__schemaType.$isMongooseDocumentArray || this.$__schemaType.$isSingleNested) && O(i2, c2);
              }
              function f2() {
                return n2 || (n2 = this.$__path + "." + t4);
              }
            } }, { key: "clear", value: function() {
              u(e3, "clear", this, 3)([]);
              var t4 = this.$__parent;
              null != t4 && t4.markModified(this.$__path);
            } }, { key: "delete", value: function(t4) {
              return S(t4, "ObjectId") && (t4 = t4.toString()), this.set(t4, void 0), u(e3, "delete", this, 3)([t4]);
            } }, { key: "toBSON", value: function() {
              return new Map(this);
            } }, { key: "toObject", value: function(t4) {
              if (t4 && t4.flattenMaps) {
                var e4, r4 = {}, n2 = i(this.keys());
                try {
                  for (n2.s(); !(e4 = n2.n()).done; ) {
                    var o3 = e4.value;
                    r4[o3] = b(this.get(o3), t4);
                  }
                } catch (t5) {
                  n2.e(t5);
                } finally {
                  n2.f();
                }
                return r4;
              }
              return new Map(this);
            } }, { key: "$toObject", value: function() {
              return this.constructor.prototype.toObject.apply(this, arguments);
            } }, { key: "toJSON", value: function(t4) {
              if ("boolean" != typeof (t4 && t4.flattenMaps) || t4.flattenMaps) {
                var e4, r4 = {}, n2 = i(this.keys());
                try {
                  for (n2.s(); !(e4 = n2.n()).done; ) {
                    var o3 = e4.value;
                    r4[o3] = b(this.get(o3), t4);
                  }
                } catch (t5) {
                  n2.e(t5);
                } finally {
                  n2.f();
                }
                return r4;
              }
              return new Map(this);
            } }, { key: "inspect", value: function() {
              return new Map(this);
            } }, { key: "$__runDeferred", value: function() {
              if (this.$__deferred) {
                var t4, e4 = i(this.$__deferred);
                try {
                  for (e4.s(); !(t4 = e4.n()).done; ) {
                    var r4 = t4.value;
                    this.set(r4.key, r4.value);
                  }
                } catch (t5) {
                  e4.e(t5);
                } finally {
                  e4.f();
                }
                this.$__deferred = null;
              }
            } }], o2 && a(r3.prototype, o2), Object.defineProperty(r3, "prototype", { writable: false }), r3;
            var r3, o2;
          }(f(Map));
          function E(t3) {
            var e3 = n(t3);
            if ("string" !== e3)
              throw new TypeError("Mongoose maps only support string keys, got ".concat(e3));
            if (t3.startsWith("$"))
              throw new Error('Mongoose maps do not support keys that start with "$", got "'.concat(t3, '"'));
            if (t3.includes("."))
              throw new Error('Mongoose maps do not support keys that contain ".", got "'.concat(t3, '"'));
            if (w.has(t3))
              throw new Error('Mongoose maps do not support reserved key name "'.concat(t3, '"'));
          }
          _.inspect.custom && Object.defineProperty($.prototype, _.inspect.custom, { enumerable: false, writable: false, configurable: false, value: $.prototype.inspect }), Object.defineProperty($.prototype, "$__set", { enumerable: false, writable: true, configurable: false }), Object.defineProperty($.prototype, "$__parent", { enumerable: false, writable: true, configurable: false }), Object.defineProperty($.prototype, "$__path", { enumerable: false, writable: true, configurable: false }), Object.defineProperty($.prototype, "$__schemaType", { enumerable: false, writable: true, configurable: false }), Object.defineProperty($.prototype, "$isMongooseMap", { enumerable: false, writable: false, configurable: false, value: true }), Object.defineProperty($.prototype, "$__deferredCalls", { enumerable: false, writable: false, configurable: false, value: true }), t2.exports = $;
        }, 5549: (t2, e2, r2) => {
          "use strict";
          var n = r2(3633).ObjectId, i = r2(7930).objectIdSymbol;
          Object.defineProperty(n.prototype, "_id", { enumerable: false, configurable: true, get: function() {
            return this;
          } }), n.prototype.hasOwnProperty("valueOf") || (n.prototype.valueOf = function() {
            return this.toString();
          }), n.prototype[i] = true, t2.exports = n;
        }, 9380: (t2, e2, r2) => {
          "use strict";
          function n() {
            n = function() {
              return e3;
            };
            var t3, e3 = {}, r3 = Object.prototype, i2 = r3.hasOwnProperty, a2 = Object.defineProperty || function(t4, e4, r4) {
              t4[e4] = r4.value;
            }, s2 = "function" == typeof Symbol ? Symbol : {}, u2 = s2.iterator || "@@iterator", c2 = s2.asyncIterator || "@@asyncIterator", f2 = s2.toStringTag || "@@toStringTag";
            function l2(t4, e4, r4) {
              return Object.defineProperty(t4, e4, { value: r4, enumerable: true, configurable: true, writable: true }), t4[e4];
            }
            try {
              l2({}, "");
            } catch (t4) {
              l2 = function(t5, e4, r4) {
                return t5[e4] = r4;
              };
            }
            function h(t4, e4, r4, n2) {
              var i3 = e4 && e4.prototype instanceof g ? e4 : g, o2 = Object.create(i3.prototype), s3 = new T(n2 || []);
              return a2(o2, "_invoke", { value: P(t4, r4, s3) }), o2;
            }
            function p(t4, e4, r4) {
              try {
                return { type: "normal", arg: t4.call(e4, r4) };
              } catch (t5) {
                return { type: "throw", arg: t5 };
              }
            }
            e3.wrap = h;
            var d = "suspendedStart", y = "suspendedYield", b = "executing", m = "completed", v = {};
            function g() {
            }
            function _() {
            }
            function w() {
            }
            var S = {};
            l2(S, u2, function() {
              return this;
            });
            var O = Object.getPrototypeOf, j = O && O(O(B([])));
            j && j !== r3 && i2.call(j, u2) && (S = j);
            var $ = w.prototype = g.prototype = Object.create(S);
            function E(t4) {
              ["next", "throw", "return"].forEach(function(e4) {
                l2(t4, e4, function(t5) {
                  return this._invoke(e4, t5);
                });
              });
            }
            function A(t4, e4) {
              function r4(n3, a3, s3, u3) {
                var c3 = p(t4[n3], t4, a3);
                if ("throw" !== c3.type) {
                  var f3 = c3.arg, l3 = f3.value;
                  return l3 && "object" == o(l3) && i2.call(l3, "__await") ? e4.resolve(l3.__await).then(function(t5) {
                    r4("next", t5, s3, u3);
                  }, function(t5) {
                    r4("throw", t5, s3, u3);
                  }) : e4.resolve(l3).then(function(t5) {
                    f3.value = t5, s3(f3);
                  }, function(t5) {
                    return r4("throw", t5, s3, u3);
                  });
                }
                u3(c3.arg);
              }
              var n2;
              a2(this, "_invoke", { value: function(t5, i3) {
                function o2() {
                  return new e4(function(e5, n3) {
                    r4(t5, i3, e5, n3);
                  });
                }
                return n2 = n2 ? n2.then(o2, o2) : o2();
              } });
            }
            function P(e4, r4, n2) {
              var i3 = d;
              return function(o2, a3) {
                if (i3 === b)
                  throw Error("Generator is already running");
                if (i3 === m) {
                  if ("throw" === o2)
                    throw a3;
                  return { value: t3, done: true };
                }
                for (n2.method = o2, n2.arg = a3; ; ) {
                  var s3 = n2.delegate;
                  if (s3) {
                    var u3 = x(s3, n2);
                    if (u3) {
                      if (u3 === v)
                        continue;
                      return u3;
                    }
                  }
                  if ("next" === n2.method)
                    n2.sent = n2._sent = n2.arg;
                  else if ("throw" === n2.method) {
                    if (i3 === d)
                      throw i3 = m, n2.arg;
                    n2.dispatchException(n2.arg);
                  } else
                    "return" === n2.method && n2.abrupt("return", n2.arg);
                  i3 = b;
                  var c3 = p(e4, r4, n2);
                  if ("normal" === c3.type) {
                    if (i3 = n2.done ? m : y, c3.arg === v)
                      continue;
                    return { value: c3.arg, done: n2.done };
                  }
                  "throw" === c3.type && (i3 = m, n2.method = "throw", n2.arg = c3.arg);
                }
              };
            }
            function x(e4, r4) {
              var n2 = r4.method, i3 = e4.iterator[n2];
              if (i3 === t3)
                return r4.delegate = null, "throw" === n2 && e4.iterator.return && (r4.method = "return", r4.arg = t3, x(e4, r4), "throw" === r4.method) || "return" !== n2 && (r4.method = "throw", r4.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), v;
              var o2 = p(i3, e4.iterator, r4.arg);
              if ("throw" === o2.type)
                return r4.method = "throw", r4.arg = o2.arg, r4.delegate = null, v;
              var a3 = o2.arg;
              return a3 ? a3.done ? (r4[e4.resultName] = a3.value, r4.next = e4.nextLoc, "return" !== r4.method && (r4.method = "next", r4.arg = t3), r4.delegate = null, v) : a3 : (r4.method = "throw", r4.arg = new TypeError("iterator result is not an object"), r4.delegate = null, v);
            }
            function k(t4) {
              var e4 = { tryLoc: t4[0] };
              1 in t4 && (e4.catchLoc = t4[1]), 2 in t4 && (e4.finallyLoc = t4[2], e4.afterLoc = t4[3]), this.tryEntries.push(e4);
            }
            function M(t4) {
              var e4 = t4.completion || {};
              e4.type = "normal", delete e4.arg, t4.completion = e4;
            }
            function T(t4) {
              this.tryEntries = [{ tryLoc: "root" }], t4.forEach(k, this), this.reset(true);
            }
            function B(e4) {
              if (e4 || "" === e4) {
                var r4 = e4[u2];
                if (r4)
                  return r4.call(e4);
                if ("function" == typeof e4.next)
                  return e4;
                if (!isNaN(e4.length)) {
                  var n2 = -1, a3 = function r5() {
                    for (; ++n2 < e4.length; )
                      if (i2.call(e4, n2))
                        return r5.value = e4[n2], r5.done = false, r5;
                    return r5.value = t3, r5.done = true, r5;
                  };
                  return a3.next = a3;
                }
              }
              throw new TypeError(o(e4) + " is not iterable");
            }
            return _.prototype = w, a2($, "constructor", { value: w, configurable: true }), a2(w, "constructor", { value: _, configurable: true }), _.displayName = l2(w, f2, "GeneratorFunction"), e3.isGeneratorFunction = function(t4) {
              var e4 = "function" == typeof t4 && t4.constructor;
              return !!e4 && (e4 === _ || "GeneratorFunction" === (e4.displayName || e4.name));
            }, e3.mark = function(t4) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(t4, w) : (t4.__proto__ = w, l2(t4, f2, "GeneratorFunction")), t4.prototype = Object.create($), t4;
            }, e3.awrap = function(t4) {
              return { __await: t4 };
            }, E(A.prototype), l2(A.prototype, c2, function() {
              return this;
            }), e3.AsyncIterator = A, e3.async = function(t4, r4, n2, i3, o2) {
              void 0 === o2 && (o2 = Promise);
              var a3 = new A(h(t4, r4, n2, i3), o2);
              return e3.isGeneratorFunction(r4) ? a3 : a3.next().then(function(t5) {
                return t5.done ? t5.value : a3.next();
              });
            }, E($), l2($, f2, "Generator"), l2($, u2, function() {
              return this;
            }), l2($, "toString", function() {
              return "[object Generator]";
            }), e3.keys = function(t4) {
              var e4 = Object(t4), r4 = [];
              for (var n2 in e4)
                r4.push(n2);
              return r4.reverse(), function t5() {
                for (; r4.length; ) {
                  var n3 = r4.pop();
                  if (n3 in e4)
                    return t5.value = n3, t5.done = false, t5;
                }
                return t5.done = true, t5;
              };
            }, e3.values = B, T.prototype = { constructor: T, reset: function(e4) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(M), !e4)
                for (var r4 in this)
                  "t" === r4.charAt(0) && i2.call(this, r4) && !isNaN(+r4.slice(1)) && (this[r4] = t3);
            }, stop: function() {
              this.done = true;
              var t4 = this.tryEntries[0].completion;
              if ("throw" === t4.type)
                throw t4.arg;
              return this.rval;
            }, dispatchException: function(e4) {
              if (this.done)
                throw e4;
              var r4 = this;
              function n2(n3, i3) {
                return s3.type = "throw", s3.arg = e4, r4.next = n3, i3 && (r4.method = "next", r4.arg = t3), !!i3;
              }
              for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
                var a3 = this.tryEntries[o2], s3 = a3.completion;
                if ("root" === a3.tryLoc)
                  return n2("end");
                if (a3.tryLoc <= this.prev) {
                  var u3 = i2.call(a3, "catchLoc"), c3 = i2.call(a3, "finallyLoc");
                  if (u3 && c3) {
                    if (this.prev < a3.catchLoc)
                      return n2(a3.catchLoc, true);
                    if (this.prev < a3.finallyLoc)
                      return n2(a3.finallyLoc);
                  } else if (u3) {
                    if (this.prev < a3.catchLoc)
                      return n2(a3.catchLoc, true);
                  } else {
                    if (!c3)
                      throw Error("try statement without catch or finally");
                    if (this.prev < a3.finallyLoc)
                      return n2(a3.finallyLoc);
                  }
                }
              }
            }, abrupt: function(t4, e4) {
              for (var r4 = this.tryEntries.length - 1; r4 >= 0; --r4) {
                var n2 = this.tryEntries[r4];
                if (n2.tryLoc <= this.prev && i2.call(n2, "finallyLoc") && this.prev < n2.finallyLoc) {
                  var o2 = n2;
                  break;
                }
              }
              o2 && ("break" === t4 || "continue" === t4) && o2.tryLoc <= e4 && e4 <= o2.finallyLoc && (o2 = null);
              var a3 = o2 ? o2.completion : {};
              return a3.type = t4, a3.arg = e4, o2 ? (this.method = "next", this.next = o2.finallyLoc, v) : this.complete(a3);
            }, complete: function(t4, e4) {
              if ("throw" === t4.type)
                throw t4.arg;
              return "break" === t4.type || "continue" === t4.type ? this.next = t4.arg : "return" === t4.type ? (this.rval = this.arg = t4.arg, this.method = "return", this.next = "end") : "normal" === t4.type && e4 && (this.next = e4), v;
            }, finish: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.finallyLoc === t4)
                  return this.complete(r4.completion, r4.afterLoc), M(r4), v;
              }
            }, catch: function(t4) {
              for (var e4 = this.tryEntries.length - 1; e4 >= 0; --e4) {
                var r4 = this.tryEntries[e4];
                if (r4.tryLoc === t4) {
                  var n2 = r4.completion;
                  if ("throw" === n2.type) {
                    var i3 = n2.arg;
                    M(r4);
                  }
                  return i3;
                }
              }
              throw Error("illegal catch attempt");
            }, delegateYield: function(e4, r4, n2) {
              return this.delegate = { iterator: B(e4), resultName: r4, nextLoc: n2 }, "next" === this.method && (this.arg = t3), v;
            } }, e3;
          }
          function i(t3, e3, r3, n2, i2, o2, a2) {
            try {
              var s2 = t3[o2](a2), u2 = s2.value;
            } catch (t4) {
              return void r3(t4);
            }
            s2.done ? e3(u2) : Promise.resolve(u2).then(n2, i2);
          }
          function o(t3) {
            return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, o(t3);
          }
          var a = r2(2400), s = r2(2746), u = r2(3303)._, c = r2(7352), f = r2(8768);
          function l(t3, e3, r3, n2, i2) {
            if ("object" === o(n2) && null != n2 && null == i2 && (i2 = n2, n2 = void 0), null != r3) {
              var s2 = { isNew: r3.isNew };
              "defaults" in r3.$__ && (s2.defaults = r3.$__.defaults), i2 = Object.assign(s2, i2);
            }
            null != i2 && null != i2.path && (this.$basePath = i2.path), a.call(this, t3, e3, n2, i2), delete this.$__.priorDoc;
          }
          t2.exports = l, l.prototype = Object.create(a.prototype), Object.defineProperty(l.prototype, "$isSubdocument", { configurable: false, writable: false, value: true }), Object.defineProperty(l.prototype, "$isSingleNested", { configurable: false, writable: false, value: true }), l.prototype.toBSON = function() {
            return this.toObject(u);
          }, l.prototype.save = function() {
            var t3, e3 = (t3 = n().mark(function t4(e4) {
              var r3 = this;
              return n().wrap(function(t5) {
                for (; ; )
                  switch (t5.prev = t5.next) {
                    case 0:
                      return (e4 = e4 || {}).suppressWarning || f.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."), t5.abrupt("return", new Promise(function(t6, e5) {
                        r3.$__save(function(n2) {
                          if (null != n2)
                            return e5(n2);
                          t6(r3);
                        });
                      }));
                    case 3:
                    case "end":
                      return t5.stop();
                  }
              }, t4);
            }), function() {
              var e4 = this, r3 = arguments;
              return new Promise(function(n2, o2) {
                var a2 = t3.apply(e4, r3);
                function s2(t4) {
                  i(a2, n2, o2, s2, u2, "next", t4);
                }
                function u2(t4) {
                  i(a2, n2, o2, s2, u2, "throw", t4);
                }
                s2(void 0);
              });
            });
            return function(t4) {
              return e3.apply(this, arguments);
            };
          }(), l.prototype.$__fullPath = function(t3) {
            return this.$__.fullPath || this.ownerDocument(), t3 ? this.$__.fullPath + "." + t3 : this.$__.fullPath;
          }, l.prototype.$__pathRelativeToParent = function(t3) {
            return null == t3 ? this.$basePath : [this.$basePath, t3].join(".");
          }, l.prototype.$__save = function(t3) {
            var e3 = this;
            return s(function() {
              return t3(null, e3);
            });
          }, l.prototype.$isValid = function(t3) {
            var e3 = this.$parent(), r3 = this.$__pathRelativeToParent(t3);
            return null != e3 && null != r3 ? e3.$isValid(r3) : a.prototype.$isValid.call(this, t3);
          }, l.prototype.markModified = function(t3) {
            a.prototype.markModified.call(this, t3);
            var e3 = this.$parent(), r3 = this.$__pathRelativeToParent(t3);
            if (null != e3 && null != r3) {
              var n2 = this.$__pathRelativeToParent().replace(/\.$/, "");
              e3.isDirectModified(n2) || this.isNew || this.$__parent.markModified(r3, this);
            }
          }, l.prototype.isModified = function(t3, e3, r3) {
            var n2 = this, i2 = this.$parent();
            return null != i2 ? (Array.isArray(t3) || "string" == typeof t3 ? t3 = (t3 = Array.isArray(t3) ? t3 : t3.split(" ")).map(function(t4) {
              return n2.$__pathRelativeToParent(t4);
            }).filter(function(t4) {
              return null != t4;
            }) : t3 || (t3 = this.$__pathRelativeToParent()), i2.$isModified(t3, e3, r3)) : a.prototype.isModified.call(this, t3, e3, r3);
          }, l.prototype.$markValid = function(t3) {
            a.prototype.$markValid.call(this, t3);
            var e3 = this.$parent(), r3 = this.$__pathRelativeToParent(t3);
            null != e3 && null != r3 && e3.$markValid(r3);
          }, l.prototype.invalidate = function(t3, e3, r3) {
            a.prototype.invalidate.call(this, t3, e3, r3);
            var n2 = this.$parent(), i2 = this.$__pathRelativeToParent(t3);
            if (null != n2 && null != i2)
              n2.invalidate(i2, e3, r3);
            else if ("cast" === e3.kind || "CastError" === e3.name || null == i2)
              throw e3;
            return this.ownerDocument().$__.validationError;
          }, l.prototype.$ignore = function(t3) {
            a.prototype.$ignore.call(this, t3);
            var e3 = this.$parent(), r3 = this.$__pathRelativeToParent(t3);
            null != e3 && null != r3 && e3.$ignore(r3);
          }, l.prototype.ownerDocument = function() {
            if (this.$__.ownerDocument)
              return this.$__.ownerDocument;
            for (var t3 = this, e3 = [], r3 = /* @__PURE__ */ new Set([t3]); "function" == typeof t3.$__pathRelativeToParent; ) {
              e3.unshift(t3.$__pathRelativeToParent(void 0, true));
              var n2 = t3.$parent();
              if (null == n2)
                break;
              if (t3 = n2, r3.has(t3))
                throw new Error("Infinite subdocument loop: subdoc with _id " + t3._id + " is a parent of itself");
              r3.add(t3);
            }
            return this.$__.fullPath = e3.join("."), this.$__.ownerDocument = t3, this.$__.ownerDocument;
          }, l.prototype.$__fullPathWithIndexes = function() {
            for (var t3 = this, e3 = [], r3 = /* @__PURE__ */ new Set([t3]); "function" == typeof t3.$__pathRelativeToParent; ) {
              e3.unshift(t3.$__pathRelativeToParent(void 0, false));
              var n2 = t3.$parent();
              if (null == n2)
                break;
              if (t3 = n2, r3.has(t3))
                throw new Error("Infinite subdocument loop: subdoc with _id " + t3._id + " is a parent of itself");
              r3.add(t3);
            }
            return e3.join(".");
          }, l.prototype.parent = function() {
            return this.$__parent;
          }, l.prototype.$parent = l.prototype.parent, l.prototype.$__deleteOne = function(t3) {
            if (null != t3)
              return t3(null, this);
          }, l.prototype.$__removeFromParent = function() {
            this.$__parent.set(this.$basePath, null);
          }, l.prototype.deleteOne = function(t3, e3) {
            if ("function" == typeof t3 && (e3 = t3, t3 = null), function(t4) {
              var e4 = t4.ownerDocument();
              function r4() {
                e4.$removeListener("save", r4), e4.$removeListener("deleteOne", r4), t4.emit("deleteOne", t4), t4.constructor.emit("deleteOne", t4);
              }
              e4.$on("save", r4), e4.$on("deleteOne", r4);
            }(this), !t3 || !t3.noop) {
              this.$__removeFromParent();
              var r3 = this.ownerDocument();
              r3.$__.removedSubdocs = r3.$__.removedSubdocs || [], r3.$__.removedSubdocs.push(this);
            }
            return this.$__deleteOne(e3);
          }, l.prototype.populate = function() {
            throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.nested.populate("path")`, use `doc.populate("nested.path")`');
          }, l.prototype.inspect = function() {
            return this.toObject();
          }, c.inspect.custom && (l.prototype[c.inspect.custom] = l.prototype.inspect);
        }, 1344: (t2, e2, r2) => {
          "use strict";
          t2.exports = r2(3633).UUID;
        }, 8768: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          function i(t3, e3) {
            var r3 = Object.keys(t3);
            if (Object.getOwnPropertySymbols) {
              var n2 = Object.getOwnPropertySymbols(t3);
              e3 && (n2 = n2.filter(function(e4) {
                return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
              })), r3.push.apply(r3, n2);
            }
            return r3;
          }
          function o(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var r3 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? i(Object(r3), true).forEach(function(e4) {
                a(t3, e4, r3[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r3)) : i(Object(r3)).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r3, e4));
              });
            }
            return t3;
          }
          function a(t3, e3, r3) {
            return (e3 = function(t4) {
              var e4 = function(t5) {
                if ("object" != f(t5) || !t5)
                  return t5;
                var e5 = t5[Symbol.toPrimitive];
                if (void 0 !== e5) {
                  var r4 = e5.call(t5, "string");
                  if ("object" != f(r4))
                    return r4;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return String(t5);
              }(t4);
              return "symbol" == f(e4) ? e4 : e4 + "";
            }(e3)) in t3 ? Object.defineProperty(t3, e3, { value: r3, enumerable: true, configurable: true, writable: true }) : t3[e3] = r3, t3;
          }
          function s(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = u(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, i2 = function() {
                };
                return { s: i2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: i2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o2, a2 = true, s2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return a2 = t4.done, t4;
            }, e: function(t4) {
              s2 = true, o2 = t4;
            }, f: function() {
              try {
                a2 || null == r3.return || r3.return();
              } finally {
                if (s2)
                  throw o2;
              }
            } };
          }
          function u(t3, e3) {
            if (t3) {
              if ("string" == typeof t3)
                return c(t3, e3);
              var r3 = {}.toString.call(t3).slice(8, -1);
              return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? c(t3, e3) : void 0;
            }
          }
          function c(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          function f(t3) {
            return f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
              return typeof t4;
            } : function(t4) {
              return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
            }, f(t3);
          }
          var l, h = r2(3633).UUID, p = r2(354), d = r2(5678), y = r2(5549), b = r2(6948), m = r2(4450), v = r2(2746), g = r2(608), _ = r2(1243), w = r2(1347), S = r2(3305), O = r2(2789), j = r2(9696), $ = r2(2497), E = r2(5268), A = r2(9539), P = r2(2793), x = r2(7291).trustedSymbol;
          e2.specialProperties = P, e2.isMongooseArray = _.isMongooseArray, e2.isMongooseDocumentArray = w.isMongooseDocumentArray, e2.registerMongooseArray = _.registerMongooseArray, e2.registerMongooseDocumentArray = w.registerMongooseDocumentArray;
          var k = /\s/, M = /\s+/;
          e2.toCollectionName = function(t3, e3) {
            if ("system.profile" === t3)
              return t3;
            if ("system.indexes" === t3)
              return t3;
            if ("function" == typeof e3) {
              if ("string" != typeof t3)
                throw new TypeError("Collection name must be a string");
              if (0 === t3.length)
                throw new TypeError("Collection name cannot be empty");
              return e3(t3);
            }
            return t3;
          }, e2.deepEqual = function t3(r3, i2) {
            if (r3 === i2)
              return true;
            if ("object" !== f(r3) || "object" !== f(i2))
              return r3 === i2;
            if (r3 instanceof Date && i2 instanceof Date)
              return r3.getTime() === i2.getTime();
            if (S(r3, "ObjectId") && S(i2, "ObjectId") || S(r3, "Decimal128") && S(i2, "Decimal128"))
              return r3.toString() === i2.toString();
            if (r3 instanceof RegExp && i2 instanceof RegExp)
              return r3.source === i2.source && r3.ignoreCase === i2.ignoreCase && r3.multiline === i2.multiline && r3.global === i2.global && r3.dotAll === i2.dotAll && r3.unicode === i2.unicode && r3.sticky === i2.sticky && r3.hasIndices === i2.hasIndices;
            if (null == r3 || null == i2)
              return false;
            if (r3.prototype !== i2.prototype)
              return false;
            if (r3 instanceof Map || i2 instanceof Map)
              return r3 instanceof Map && i2 instanceof Map && t3(Array.from(r3.keys()), Array.from(i2.keys())) && t3(Array.from(r3.values()), Array.from(i2.values()));
            if (r3 instanceof Number && i2 instanceof Number)
              return r3.valueOf() === i2.valueOf();
            if (n.isBuffer(r3))
              return e2.buffer.areEqual(r3, i2);
            if (Array.isArray(r3) || Array.isArray(i2)) {
              if (!Array.isArray(r3) || !Array.isArray(i2))
                return false;
              var o2 = r3.length;
              if (o2 !== i2.length)
                return false;
              for (var a2 = 0; a2 < o2; ++a2)
                if (!t3(r3[a2], i2[a2]))
                  return false;
              return true;
            }
            null != r3.$__ ? r3 = r3._doc : $(r3) && (r3 = r3.toObject()), null != i2.$__ ? i2 = i2._doc : $(i2) && (i2 = i2.toObject());
            var s2 = Object.keys(r3), u2 = Object.keys(i2), c2 = s2.length;
            if (c2 !== u2.length)
              return false;
            for (var l2 = c2 - 1; l2 >= 0; l2--)
              if (s2[l2] !== u2[l2])
                return false;
            for (var h2 = 0, p2 = s2; h2 < p2.length; h2++) {
              var d2 = p2[h2];
              if (!t3(r3[d2], i2[d2]))
                return false;
            }
            return true;
          }, e2.last = function(t3) {
            if (t3.length > 0)
              return t3[t3.length - 1];
          }, e2.promiseOrCallback = E, e2.cloneArrays = function(t3) {
            return Array.isArray(t3) ? t3.map(function(t4) {
              return e2.cloneArrays(t4);
            }) : t3;
          }, e2.omit = function(t3, e3) {
            if (null == e3)
              return Object.assign({}, t3);
            Array.isArray(e3) || (e3 = [e3]);
            var r3, n2 = Object.assign({}, t3), i2 = s(e3);
            try {
              for (i2.s(); !(r3 = i2.n()).done; )
                delete n2[r3.value];
            } catch (t4) {
              i2.e(t4);
            } finally {
              i2.f();
            }
            return n2;
          }, e2.merge = function t3(r3, n2, i2, a2) {
            i2 = i2 || {};
            var s2, f2, l2 = Object.keys(n2), h2 = 0, p2 = l2.length;
            n2[x] && (r3[x] = n2[x]), a2 = a2 || "";
            for (var d2 = i2.omitNested || {}; h2 < p2; )
              if (s2 = l2[h2++], !(i2.omit && i2.omit[s2] || d2[a2] || P.has(s2)))
                if (null == r3[s2])
                  O(n2[s2]) ? r3[s2] = o({}, n2[s2]) : Array.isArray(n2[s2]) ? r3[s2] = function(t4) {
                    if (Array.isArray(t4))
                      return c(t4);
                  }(f2 = n2[s2]) || function(t4) {
                    if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
                      return Array.from(t4);
                  }(f2) || u(f2) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }() : r3[s2] = n2[s2];
                else if (e2.isObject(n2[s2])) {
                  if (e2.isObject(r3[s2]) || (r3[s2] = {}), null != n2[s2]) {
                    if (i2.isDiscriminatorSchemaMerge && n2[s2].$isSingleNested && r3[s2].$isMongooseDocumentArray || n2[s2].$isMongooseDocumentArray && r3[s2].$isSingleNested)
                      continue;
                    if (n2[s2].instanceOfSchema) {
                      r3[s2].instanceOfSchema ? A(r3[s2], n2[s2].clone(), i2.isDiscriminatorSchemaMerge) : r3[s2] = n2[s2].clone();
                      continue;
                    }
                    if (S(n2[s2], "ObjectId")) {
                      r3[s2] = new y(n2[s2]);
                      continue;
                    }
                  }
                  t3(r3[s2], n2[s2], i2, a2 ? a2 + "." + s2 : s2);
                } else
                  i2.overwrite && (r3[s2] = n2[s2]);
            return r3;
          }, e2.toObject = function t3(n2) {
            var i2;
            if (l || (l = r2(2400)), null == n2)
              return n2;
            if (n2 instanceof l)
              return n2.toObject();
            if (Array.isArray(n2)) {
              i2 = [];
              var o2, a2 = s(n2);
              try {
                for (a2.s(); !(o2 = a2.n()).done; ) {
                  var u2 = o2.value;
                  i2.push(t3(u2));
                }
              } catch (t4) {
                a2.e(t4);
              } finally {
                a2.f();
              }
              return i2;
            }
            if (e2.isPOJO(n2)) {
              i2 = {}, n2[x] && (i2[x] = n2[x]);
              for (var c2 = 0, f2 = Object.keys(n2); c2 < f2.length; c2++) {
                var h2 = f2[c2];
                P.has(h2) || (i2[h2] = t3(n2[h2]));
              }
              return i2;
            }
            return n2;
          }, e2.isObject = g, e2.isPOJO = r2(2789), e2.isNonBuiltinObject = function(t3) {
            return !("object" !== f(t3) || e2.isNativeObject(t3) || e2.isMongooseType(t3) || t3 instanceof h || null == t3);
          }, e2.isNativeObject = function(t3) {
            return Array.isArray(t3) || t3 instanceof Date || t3 instanceof Boolean || t3 instanceof Number || t3 instanceof String;
          }, e2.isEmptyObject = function(t3) {
            return null != t3 && "object" === f(t3) && 0 === Object.keys(t3).length;
          }, e2.hasKey = function(t3, r3) {
            for (var n2 = 0, i2 = Object.keys(t3); n2 < i2.length; n2++) {
              var o2 = i2[n2];
              if (o2 === r3)
                return true;
              if (e2.isPOJO(t3[o2]) && e2.hasKey(t3[o2], r3))
                return true;
            }
            return false;
          }, e2.tick = function(t3) {
            if ("function" == typeof t3)
              return function() {
                try {
                  t3.apply(this, arguments);
                } catch (t4) {
                  v(function() {
                    throw t4;
                  });
                }
              };
          }, e2.isMongooseType = function(t3) {
            return S(t3, "ObjectId") || S(t3, "Decimal128") || t3 instanceof n;
          }, e2.isMongooseObject = $, e2.expires = function(t3) {
            t3 && "Object" === t3.constructor.name && "expires" in t3 && (t3.expireAfterSeconds = "string" != typeof t3.expires ? t3.expires : Math.round(p(t3.expires) / 1e3), delete t3.expires);
          }, e2.populate = function(t3, r3, n2, i2, o2, a2, u2, c2) {
            var l2, h2 = null;
            if (1 === arguments.length) {
              if (t3 instanceof b)
                return t3._docs = {}, t3._childDocs = [], [t3];
              if (Array.isArray(t3)) {
                var p2 = (l2 = [], t3.forEach(function(t4) {
                  k.test(t4.path) ? t4.path.split(M).forEach(function(e3) {
                    var r4 = Object.assign({}, t4);
                    r4.path = e3, l2.push(r4);
                  }) : l2.push(t4);
                }), l2);
                return p2.map(function(t4) {
                  return e2.populate(t4)[0];
                });
              }
              h2 = e2.isObject(t3) ? Object.assign({}, t3) : { path: t3 };
            } else
              h2 = "object" === f(n2) ? { path: t3, select: r3, match: n2, options: i2 } : { path: t3, select: r3, model: n2, match: i2, options: o2, populate: a2, justOne: u2, count: c2 };
            if ("string" != typeof h2.path)
              throw new TypeError("utils.populate: invalid path. Expected string. Got typeof `" + f(t3) + "`");
            return function(t4) {
              if (Array.isArray(t4.populate)) {
                var r4 = [];
                t4.populate.forEach(function(t5) {
                  if (k.test(t5.path)) {
                    var n4 = Object.assign({}, t5);
                    n4.path.split(M).forEach(function(t6) {
                      n4.path = t6, r4.push(e2.populate(n4)[0]);
                    });
                  } else
                    r4.push(e2.populate(t5)[0]);
                }), t4.populate = e2.populate(r4);
              } else
                null != t4.populate && "object" === f(t4.populate) && (t4.populate = e2.populate(t4.populate));
              var n3 = [], i3 = k.test(t4.path) ? t4.path.split(M) : [t4.path];
              null != t4.options && (t4.options = m(t4.options));
              var o3, a3 = s(i3);
              try {
                for (a3.s(); !(o3 = a3.n()).done; ) {
                  var u3 = o3.value;
                  n3.push(new b(Object.assign({}, t4, { path: u3 })));
                }
              } catch (t5) {
                a3.e(t5);
              } finally {
                a3.f();
              }
              return n3;
            }(h2);
          }, e2.getValue = function(t3, e3, r3) {
            return d.get(t3, e3, B, r3);
          };
          var T = Object.freeze({ getters: false });
          function B(t3, e3) {
            if ("$*" === e3 && t3 instanceof Map)
              return t3;
            var r3 = (null == t3 ? void 0 : t3._doc) || t3;
            return null != r3 && r3.isMongooseArrayProxy && (r3 = r3.__array), r3 instanceof Map ? r3.get(e3, T) : r3[e3];
          }
          e2.setValue = function(t3, e3, r3, n2, i2) {
            d.set(t3, e3, r3, "_doc", n2, i2);
          }, e2.object = {}, e2.object.vals = function(t3) {
            for (var e3 = Object.keys(t3), r3 = e3.length, n2 = []; r3--; )
              n2.push(t3[e3[r3]]);
            return n2;
          };
          var I = Object.prototype.hasOwnProperty;
          e2.object.hasOwnProperty = function(t3, e3) {
            return I.call(t3, e3);
          }, e2.isNullOrUndefined = function(t3) {
            return null == t3;
          }, e2.array = {}, e2.array.flatten = function t3(e3, r3, n2) {
            return n2 || (n2 = []), e3.forEach(function(e4) {
              Array.isArray(e4) ? t3(e4, r3, n2) : r3 && !r3(e4) || n2.push(e4);
            }), n2;
          };
          var R = Object.prototype.hasOwnProperty;
          e2.hasUserDefinedProperty = function(t3, r3) {
            if (null == t3)
              return false;
            if (Array.isArray(r3)) {
              var n2, i2 = s(r3);
              try {
                for (i2.s(); !(n2 = i2.n()).done; ) {
                  var o2 = n2.value;
                  if (e2.hasUserDefinedProperty(t3, o2))
                    return true;
                }
              } catch (t4) {
                i2.e(t4);
              } finally {
                i2.f();
              }
              return false;
            }
            if (R.call(t3, r3))
              return true;
            if ("object" === f(t3) && r3 in t3) {
              var a2 = t3[r3];
              return a2 !== Object.prototype[r3] && a2 !== Array.prototype[r3];
            }
            return false;
          };
          var N = Math.pow(2, 32) - 1;
          e2.isArrayIndex = function(t3) {
            return "number" == typeof t3 ? t3 >= 0 && t3 <= N : "string" == typeof t3 && !!/^\d+$/.test(t3) && (t3 = +t3) >= 0 && t3 <= N;
          }, e2.array.unique = function(t3) {
            var e3, r3 = /* @__PURE__ */ new Set(), n2 = /* @__PURE__ */ new Set(), i2 = [], o2 = s(t3);
            try {
              for (o2.s(); !(e3 = o2.n()).done; ) {
                var a2 = e3.value;
                if ("number" == typeof a2 || "string" == typeof a2 || null == a2) {
                  if (r3.has(a2))
                    continue;
                  i2.push(a2), r3.add(a2);
                } else if (S(a2, "ObjectId")) {
                  if (n2.has(a2.toString()))
                    continue;
                  i2.push(a2), n2.add(a2.toString());
                } else
                  i2.push(a2);
              }
            } catch (t4) {
              o2.e(t4);
            } finally {
              o2.f();
            }
            return i2;
          }, e2.buffer = {}, e2.buffer.areEqual = function(t3, e3) {
            if (!n.isBuffer(t3))
              return false;
            if (!n.isBuffer(e3))
              return false;
            if (t3.length !== e3.length)
              return false;
            for (var r3 = 0, i2 = t3.length; r3 < i2; ++r3)
              if (t3[r3] !== e3[r3])
                return false;
            return true;
          }, e2.getFunctionName = j, e2.decorate = function(t3, e3) {
            for (var r3 in e3)
              P.has(r3) || (t3[r3] = e3[r3]);
          }, e2.mergeClone = function(t3, r3) {
            $(r3) && (r3 = r3.toObject({ transform: false, virtuals: false, depopulate: true, getters: false, flattenDecimals: false }));
            for (var i2, o2 = Object.keys(r3), a2 = o2.length, s2 = 0; s2 < a2; )
              if (i2 = o2[s2++], !P.has(i2))
                if (void 0 === t3[i2])
                  t3[i2] = m(r3[i2], { transform: false, virtuals: false, depopulate: true, getters: false, flattenDecimals: false });
                else {
                  var u2 = r3[i2];
                  if (null == u2 || !u2.valueOf || u2 instanceof Date || (u2 = u2.valueOf()), e2.isObject(u2)) {
                    var c2 = u2;
                    $(u2) && !u2.isMongooseBuffer && (c2 = c2.toObject({ transform: false, virtuals: false, depopulate: true, getters: false, flattenDecimals: false })), u2.isMongooseBuffer && (c2 = n.from(c2)), e2.mergeClone(t3[i2], c2);
                  } else
                    t3[i2] = m(u2, { flattenDecimals: false });
                }
          }, e2.each = function(t3, e3) {
            var r3, n2 = s(t3);
            try {
              for (n2.s(); !(r3 = n2.n()).done; )
                e3(r3.value);
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
          }, e2.renameObjKey = function(t3, e3, r3) {
            return Object.keys(t3).reduce(function(n2, i2) {
              return i2 === e3 ? n2[r3] = t3[e3] : n2[i2] = t3[i2], n2;
            }, {});
          }, e2.getOption = function(t3) {
            var e3, r3 = s(Array.prototype.slice.call(arguments, 1));
            try {
              for (r3.s(); !(e3 = r3.n()).done; ) {
                var n2 = e3.value;
                if (null != n2 && null != n2[t3])
                  return n2[t3];
              }
            } catch (t4) {
              r3.e(t4);
            } finally {
              r3.f();
            }
            return null;
          }, e2.noop = function() {
          }, e2.errorToPOJO = function(t3) {
            if (!(t3 instanceof Error))
              throw new Error("`error` must be `instanceof Error`.");
            var e3, r3 = {}, n2 = s(Object.getOwnPropertyNames(t3));
            try {
              for (n2.s(); !(e3 = n2.n()).done; ) {
                var i2 = e3.value;
                r3[i2] = t3[i2];
              }
            } catch (t4) {
              n2.e(t4);
            } finally {
              n2.f();
            }
            return r3;
          }, e2.warn = function(t3) {
            return { env: {} }.emitWarning(t3, { code: "MONGOOSE" });
          }, e2.injectTimestampsOption = function(t3, e3) {
            null != e3 && (t3.timestamps = e3);
          };
        }, 622: (t2, e2, r2) => {
          "use strict";
          function n(t3, e3) {
            var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
            if (!r3) {
              if (Array.isArray(t3) || (r3 = function(t4, e4) {
                if (t4) {
                  if ("string" == typeof t4)
                    return i(t4, e4);
                  var r4 = {}.toString.call(t4).slice(8, -1);
                  return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? i(t4, e4) : void 0;
                }
              }(t3)) || e3 && t3 && "number" == typeof t3.length) {
                r3 && (t3 = r3);
                var n2 = 0, o2 = function() {
                };
                return { s: o2, n: function() {
                  return n2 >= t3.length ? { done: true } : { done: false, value: t3[n2++] };
                }, e: function(t4) {
                  throw t4;
                }, f: o2 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, s2 = true, u2 = false;
            return { s: function() {
              r3 = r3.call(t3);
            }, n: function() {
              var t4 = r3.next();
              return s2 = t4.done, t4;
            }, e: function(t4) {
              u2 = true, a2 = t4;
            }, f: function() {
              try {
                s2 || null == r3.return || r3.return();
              } finally {
                if (u2)
                  throw a2;
              }
            } };
          }
          function i(t3, e3) {
            (null == e3 || e3 > t3.length) && (e3 = t3.length);
            for (var r3 = 0, n2 = Array(e3); r3 < e3; r3++)
              n2[r3] = t3[r3];
            return n2;
          }
          var o = r2(4009), a = r2(8768), s = r2(7930).modelSymbol;
          function u(t3, e3) {
            this.path = e3, this.getters = [], this.setters = [], this.options = Object.assign({}, t3);
          }
          u.prototype._applyDefaultGetters = function() {
            if (!(this.getters.length > 0 || this.setters.length > 0)) {
              var t3 = "$" + this.path;
              this.getters.push(function() {
                return this.$locals[t3];
              }), this.setters.push(function(e3) {
                this.$locals[t3] = e3;
              });
            }
          }, u.prototype.clone = function() {
            var t3 = new u(this.options, this.path);
            return t3.getters = [].concat(this.getters), t3.setters = [].concat(this.setters), t3;
          }, u.prototype.get = function(t3) {
            return this.getters.push(t3), this;
          }, u.prototype.set = function(t3) {
            return this.setters.push(t3), this;
          }, u.prototype.applyGetters = function(t3, e3) {
            a.hasUserDefinedProperty(this.options, ["ref", "refPath"]) && e3.$$populatedVirtuals && e3.$$populatedVirtuals.hasOwnProperty(this.path) && (t3 = e3.$$populatedVirtuals[this.path]);
            var r3, i2 = t3, o2 = n(this.getters);
            try {
              for (o2.s(); !(r3 = o2.n()).done; )
                i2 = r3.value.call(e3, i2, this, e3);
            } catch (t4) {
              o2.e(t4);
            } finally {
              o2.f();
            }
            return i2;
          }, u.prototype.applySetters = function(t3, e3) {
            var r3, i2 = t3, o2 = n(this.setters);
            try {
              for (o2.s(); !(r3 = o2.n()).done; )
                i2 = r3.value.call(e3, i2, this, e3);
            } catch (t4) {
              o2.e(t4);
            } finally {
              o2.f();
            }
            return i2;
          }, u.prototype._getModelNamesForPopulate = function(t3) {
            if (this.options.refPath)
              return o(this.options.refPath, t3, this.path);
            var e3;
            return null == (e3 = "function" != typeof this.options.ref || this.options.ref[s] ? this.options.ref : this.options.ref.call(t3, t3)) || Array.isArray(e3) ? e3 : [e3];
          }, t2.exports = u;
        }, 3426: (t2, e2, r2) => {
          "use strict";
          var n = r2(2653), i = "undefined" == typeof globalThis ? r2.g : globalThis;
          t2.exports = function() {
            for (var t3 = [], e3 = 0; e3 < n.length; e3++)
              "function" == typeof i[n[e3]] && (t3[t3.length] = n[e3]);
            return t3;
          };
        }, 3633: (t2, e2, r2) => {
          "use strict";
          var n = r2(5832).Buffer;
          const i = (() => {
            const t3 = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array.prototype), Symbol.toStringTag).get;
            return (e3) => t3.call(e3);
          })();
          function o(t3) {
            return "Uint8Array" === i(t3);
          }
          function a(t3) {
            return "object" == typeof t3 && null != t3 && Symbol.toStringTag in t3 && ("ArrayBuffer" === t3[Symbol.toStringTag] || "SharedArrayBuffer" === t3[Symbol.toStringTag]);
          }
          function s(t3) {
            return t3 instanceof RegExp || "[object RegExp]" === Object.prototype.toString.call(t3);
          }
          function u(t3) {
            return "object" == typeof t3 && null != t3 && Symbol.toStringTag in t3 && "Map" === t3[Symbol.toStringTag];
          }
          function c(t3) {
            return t3 instanceof Date || "[object Date]" === Object.prototype.toString.call(t3);
          }
          function f(t3, e3) {
            return JSON.stringify(t3, (t4, e4) => "bigint" == typeof e4 ? { $numberLong: `${e4}` } : u(e4) ? Object.fromEntries(e4) : e4);
          }
          const l = Symbol.for("@@mdb.bson.version"), h = 2147483647, p = -2147483648, d = Math.pow(2, 63) - 1, y = -Math.pow(2, 63), b = Math.pow(2, 53), m = -Math.pow(2, 53), v = Object.freeze({ double: 1, string: 2, object: 3, array: 4, binData: 5, undefined: 6, objectId: 7, bool: 8, date: 9, null: 10, regex: 11, dbPointer: 12, javascript: 13, symbol: 14, javascriptWithScope: 15, int: 16, timestamp: 17, long: 18, decimal: 19, minKey: -1, maxKey: 127 });
          class g extends Error {
            get bsonError() {
              return true;
            }
            get name() {
              return "BSONError";
            }
            constructor(t3, e3) {
              super(t3, e3);
            }
            static isBSONError(t3) {
              return null != t3 && "object" == typeof t3 && "bsonError" in t3 && true === t3.bsonError && "name" in t3 && "message" in t3 && "stack" in t3;
            }
          }
          class _ extends g {
            get name() {
              return "BSONVersionError";
            }
            constructor() {
              super("Unsupported BSON version, bson types must be from bson 6.x.x");
            }
          }
          class w extends g {
            get name() {
              return "BSONRuntimeError";
            }
            constructor(t3) {
              super(t3);
            }
          }
          class S extends g {
            get name() {
              return "BSONOffsetError";
            }
            constructor(t3, e3, r3) {
              super(`${t3}. offset: ${e3}`, r3), this.offset = e3;
            }
          }
          let O, j;
          function $(t3, e3, r3, n2) {
            if (n2) {
              O ??= new TextDecoder("utf8", { fatal: true });
              try {
                return O.decode(t3.subarray(e3, r3));
              } catch (t4) {
                throw new g("Invalid UTF-8 string in BSON document", { cause: t4 });
              }
            }
            return j ??= new TextDecoder("utf8", { fatal: false }), j.decode(t3.subarray(e3, r3));
          }
          function E(t3, e3, r3) {
            if (0 === t3.length)
              return "";
            const n2 = r3 - e3;
            if (0 === n2)
              return "";
            if (n2 > 20)
              return null;
            if (1 === n2 && t3[e3] < 128)
              return String.fromCharCode(t3[e3]);
            if (2 === n2 && t3[e3] < 128 && t3[e3 + 1] < 128)
              return String.fromCharCode(t3[e3]) + String.fromCharCode(t3[e3 + 1]);
            if (3 === n2 && t3[e3] < 128 && t3[e3 + 1] < 128 && t3[e3 + 2] < 128)
              return String.fromCharCode(t3[e3]) + String.fromCharCode(t3[e3 + 1]) + String.fromCharCode(t3[e3 + 2]);
            const i2 = [];
            for (let n3 = e3; n3 < r3; n3++) {
              const e4 = t3[n3];
              if (e4 > 127)
                return null;
              i2.push(e4);
            }
            return String.fromCharCode(...i2);
          }
          function A(t3) {
            return x.fromNumberArray(Array.from({ length: t3 }, () => Math.floor(256 * Math.random())));
          }
          const P = (() => {
            try {
              return r2(8872).po;
            } catch {
              return A;
            }
          })(), x = { toLocalBufferType(t3) {
            if (n.isBuffer(t3))
              return t3;
            if (ArrayBuffer.isView(t3))
              return n.from(t3.buffer, t3.byteOffset, t3.byteLength);
            const e3 = t3?.[Symbol.toStringTag] ?? Object.prototype.toString.call(t3);
            if ("ArrayBuffer" === e3 || "SharedArrayBuffer" === e3 || "[object ArrayBuffer]" === e3 || "[object SharedArrayBuffer]" === e3)
              return n.from(t3);
            throw new g("Cannot create Buffer from the passed potentialBuffer.");
          }, allocate: (t3) => n.alloc(t3), allocateUnsafe: (t3) => n.allocUnsafe(t3), equals: (t3, e3) => x.toLocalBufferType(t3).equals(e3), fromNumberArray: (t3) => n.from(t3), fromBase64: (t3) => n.from(t3, "base64"), toBase64: (t3) => x.toLocalBufferType(t3).toString("base64"), fromISO88591: (t3) => n.from(t3, "binary"), toISO88591: (t3) => x.toLocalBufferType(t3).toString("binary"), fromHex: (t3) => n.from(t3, "hex"), toHex: (t3) => x.toLocalBufferType(t3).toString("hex"), toUTF8(t3, e3, r3, n2) {
            const i2 = r3 - e3 <= 20 ? E(t3, e3, r3) : null;
            if (null != i2)
              return i2;
            const o2 = x.toLocalBufferType(t3).toString("utf8", e3, r3);
            if (n2) {
              for (let n3 = 0; n3 < o2.length; n3++)
                if (65533 === o2.charCodeAt(n3)) {
                  $(t3, e3, r3, true);
                  break;
                }
            }
            return o2;
          }, utf8ByteLength: (t3) => n.byteLength(t3, "utf8"), encodeUTF8Into(t3, e3, r3) {
            const n2 = function(t4, e4, r4) {
              if (0 === e4.length)
                return 0;
              if (e4.length > 25)
                return null;
              if (t4.length - r4 < e4.length)
                return null;
              for (let n3 = 0, i2 = r4; n3 < e4.length; n3++, i2++) {
                const r5 = e4.charCodeAt(n3);
                if (r5 > 127)
                  return null;
                t4[i2] = r5;
              }
              return e4.length;
            }(t3, e3, r3);
            return null != n2 ? n2 : x.toLocalBufferType(t3).write(e3, r3, void 0, "utf8");
          }, randomBytes: P, swap32: (t3) => x.toLocalBufferType(t3).swap32() };
          function k(t3) {
            if (t3 < 0)
              throw new RangeError(`The argument 'byteLength' is invalid. Received ${t3}`);
            return B.fromNumberArray(Array.from({ length: t3 }, () => Math.floor(256 * Math.random())));
          }
          const M = (() => {
            const { crypto: t3 } = globalThis;
            if (null != t3 && "function" == typeof t3.getRandomValues)
              return (e3) => t3.getRandomValues(B.allocate(e3));
            if (function() {
              const { navigator: t4 } = globalThis;
              return "object" == typeof t4 && "ReactNative" === t4.product;
            }()) {
              const { console: t4 } = globalThis;
              t4?.warn?.("BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.");
            }
            return k;
          })(), T = /(\d|[a-f])/i, B = { toLocalBufferType(t3) {
            const e3 = t3?.[Symbol.toStringTag] ?? Object.prototype.toString.call(t3);
            if ("Uint8Array" === e3)
              return t3;
            if (ArrayBuffer.isView(t3))
              return new Uint8Array(t3.buffer.slice(t3.byteOffset, t3.byteOffset + t3.byteLength));
            if ("ArrayBuffer" === e3 || "SharedArrayBuffer" === e3 || "[object ArrayBuffer]" === e3 || "[object SharedArrayBuffer]" === e3)
              return new Uint8Array(t3);
            throw new g("Cannot make a Uint8Array from passed potentialBuffer.");
          }, allocate(t3) {
            if ("number" != typeof t3)
              throw new TypeError(`The "size" argument must be of type number. Received ${String(t3)}`);
            return new Uint8Array(t3);
          }, allocateUnsafe: (t3) => B.allocate(t3), equals(t3, e3) {
            if (t3.byteLength !== e3.byteLength)
              return false;
            for (let r3 = 0; r3 < t3.byteLength; r3++)
              if (t3[r3] !== e3[r3])
                return false;
            return true;
          }, fromNumberArray: (t3) => Uint8Array.from(t3), fromBase64: (t3) => Uint8Array.from(atob(t3), (t4) => t4.charCodeAt(0)), toBase64: (t3) => btoa(B.toISO88591(t3)), fromISO88591: (t3) => Uint8Array.from(t3, (t4) => 255 & t4.charCodeAt(0)), toISO88591: (t3) => Array.from(Uint16Array.from(t3), (t4) => String.fromCharCode(t4)).join(""), fromHex(t3) {
            const e3 = t3.length % 2 == 0 ? t3 : t3.slice(0, t3.length - 1), r3 = [];
            for (let t4 = 0; t4 < e3.length; t4 += 2) {
              const n2 = e3[t4], i2 = e3[t4 + 1];
              if (!T.test(n2))
                break;
              if (!T.test(i2))
                break;
              const o2 = Number.parseInt(`${n2}${i2}`, 16);
              r3.push(o2);
            }
            return Uint8Array.from(r3);
          }, toHex: (t3) => Array.from(t3, (t4) => t4.toString(16).padStart(2, "0")).join(""), toUTF8(t3, e3, r3, n2) {
            const i2 = r3 - e3 <= 20 ? E(t3, e3, r3) : null;
            return null != i2 ? i2 : $(t3, e3, r3, n2);
          }, utf8ByteLength: (t3) => new TextEncoder().encode(t3).byteLength, encodeUTF8Into(t3, e3, r3) {
            const n2 = new TextEncoder().encode(e3);
            return t3.set(n2, r3), n2.byteLength;
          }, randomBytes: M, swap32(t3) {
            if (t3.length % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (let e3 = 0; e3 < t3.length; e3 += 4) {
              const r3 = t3[e3], n2 = t3[e3 + 1], i2 = t3[e3 + 2], o2 = t3[e3 + 3];
              t3[e3] = o2, t3[e3 + 1] = i2, t3[e3 + 2] = n2, t3[e3 + 3] = r3;
            }
            return t3;
          } }, I = "function" == typeof n && true !== n.prototype?._isBuffer ? x : B;
          class R {
            get [l]() {
              return 6;
            }
            [Symbol.for("nodejs.util.inspect.custom")](t3, e3, r3) {
              return this.inspect(t3, e3, r3);
            }
          }
          const N = new Float64Array(1), D = new Uint8Array(N.buffer, 0, 8);
          N[0] = -1;
          const L = 0 === D[7], C = { isBigEndian: L, getNonnegativeInt32LE(t3, e3) {
            if (t3[e3 + 3] > 127)
              throw new RangeError(`Size cannot be negative at offset: ${e3}`);
            return t3[e3] | t3[e3 + 1] << 8 | t3[e3 + 2] << 16 | t3[e3 + 3] << 24;
          }, getInt32LE: (t3, e3) => t3[e3] | t3[e3 + 1] << 8 | t3[e3 + 2] << 16 | t3[e3 + 3] << 24, getUint32LE: (t3, e3) => t3[e3] + 256 * t3[e3 + 1] + 65536 * t3[e3 + 2] + 16777216 * t3[e3 + 3], getUint32BE: (t3, e3) => t3[e3 + 3] + 256 * t3[e3 + 2] + 65536 * t3[e3 + 1] + 16777216 * t3[e3], getBigInt64LE(t3, e3) {
            const r3 = C.getUint32LE(t3, e3), n2 = C.getUint32LE(t3, e3 + 4);
            return (BigInt(n2) << BigInt(32)) + BigInt(r3);
          }, getFloat64LE: L ? (t3, e3) => (D[7] = t3[e3], D[6] = t3[e3 + 1], D[5] = t3[e3 + 2], D[4] = t3[e3 + 3], D[3] = t3[e3 + 4], D[2] = t3[e3 + 5], D[1] = t3[e3 + 6], D[0] = t3[e3 + 7], N[0]) : (t3, e3) => (D[0] = t3[e3], D[1] = t3[e3 + 1], D[2] = t3[e3 + 2], D[3] = t3[e3 + 3], D[4] = t3[e3 + 4], D[5] = t3[e3 + 5], D[6] = t3[e3 + 6], D[7] = t3[e3 + 7], N[0]), setInt32BE: (t3, e3, r3) => (t3[e3 + 3] = r3, r3 >>>= 8, t3[e3 + 2] = r3, r3 >>>= 8, t3[e3 + 1] = r3, r3 >>>= 8, t3[e3] = r3, 4), setInt32LE: (t3, e3, r3) => (t3[e3] = r3, r3 >>>= 8, t3[e3 + 1] = r3, r3 >>>= 8, t3[e3 + 2] = r3, r3 >>>= 8, t3[e3 + 3] = r3, 4), setBigInt64LE(t3, e3, r3) {
            const n2 = BigInt(4294967295);
            let i2 = Number(r3 & n2);
            t3[e3] = i2, i2 >>= 8, t3[e3 + 1] = i2, i2 >>= 8, t3[e3 + 2] = i2, i2 >>= 8, t3[e3 + 3] = i2;
            let o2 = Number(r3 >> BigInt(32) & n2);
            return t3[e3 + 4] = o2, o2 >>= 8, t3[e3 + 5] = o2, o2 >>= 8, t3[e3 + 6] = o2, o2 >>= 8, t3[e3 + 7] = o2, 8;
          }, setFloat64LE: L ? (t3, e3, r3) => (N[0] = r3, t3[e3] = D[7], t3[e3 + 1] = D[6], t3[e3 + 2] = D[5], t3[e3 + 3] = D[4], t3[e3 + 4] = D[3], t3[e3 + 5] = D[2], t3[e3 + 6] = D[1], t3[e3 + 7] = D[0], 8) : (t3, e3, r3) => (N[0] = r3, t3[e3] = D[0], t3[e3 + 1] = D[1], t3[e3 + 2] = D[2], t3[e3 + 3] = D[3], t3[e3 + 4] = D[4], t3[e3 + 5] = D[5], t3[e3 + 6] = D[6], t3[e3 + 7] = D[7], 8) };
          class U extends R {
            get _bsontype() {
              return "Binary";
            }
            constructor(t3, e3) {
              if (super(), null != t3 && "string" == typeof t3 && !ArrayBuffer.isView(t3) && !a(t3) && !Array.isArray(t3))
                throw new g("Binary can only be constructed from Uint8Array or number[]");
              this.sub_type = e3 ?? U.BSON_BINARY_SUBTYPE_DEFAULT, null == t3 ? (this.buffer = I.allocate(U.BUFFER_SIZE), this.position = 0) : (this.buffer = Array.isArray(t3) ? I.fromNumberArray(t3) : I.toLocalBufferType(t3), this.position = this.buffer.byteLength);
            }
            put(t3) {
              if ("string" == typeof t3 && 1 !== t3.length)
                throw new g("only accepts single character String");
              if ("number" != typeof t3 && 1 !== t3.length)
                throw new g("only accepts single character Uint8Array or Array");
              let e3;
              if (e3 = "string" == typeof t3 ? t3.charCodeAt(0) : "number" == typeof t3 ? t3 : t3[0], e3 < 0 || e3 > 255)
                throw new g("only accepts number in a valid unsigned byte range 0-255");
              if (this.buffer.byteLength > this.position)
                this.buffer[this.position++] = e3;
              else {
                const t4 = I.allocate(U.BUFFER_SIZE + this.buffer.length);
                t4.set(this.buffer, 0), this.buffer = t4, this.buffer[this.position++] = e3;
              }
            }
            write(t3, e3) {
              if (e3 = "number" == typeof e3 ? e3 : this.position, this.buffer.byteLength < e3 + t3.length) {
                const e4 = I.allocate(this.buffer.byteLength + t3.length);
                e4.set(this.buffer, 0), this.buffer = e4;
              }
              if (ArrayBuffer.isView(t3))
                this.buffer.set(I.toLocalBufferType(t3), e3), this.position = e3 + t3.byteLength > this.position ? e3 + t3.length : this.position;
              else if ("string" == typeof t3)
                throw new g("input cannot be string");
            }
            read(t3, e3) {
              const r3 = t3 + (e3 = e3 && e3 > 0 ? e3 : this.position);
              return this.buffer.subarray(t3, r3 > this.position ? this.position : r3);
            }
            value() {
              return this.buffer.length === this.position ? this.buffer : this.buffer.subarray(0, this.position);
            }
            length() {
              return this.position;
            }
            toJSON() {
              return I.toBase64(this.buffer.subarray(0, this.position));
            }
            toString(t3) {
              return "hex" === t3 ? I.toHex(this.buffer.subarray(0, this.position)) : "base64" === t3 ? I.toBase64(this.buffer.subarray(0, this.position)) : I.toUTF8(this.buffer, 0, this.position, false);
            }
            toExtendedJSON(t3) {
              t3 = t3 || {}, this.sub_type === U.SUBTYPE_VECTOR && q(this);
              const e3 = I.toBase64(this.buffer), r3 = Number(this.sub_type).toString(16);
              return t3.legacy ? { $binary: e3, $type: 1 === r3.length ? "0" + r3 : r3 } : { $binary: { base64: e3, subType: 1 === r3.length ? "0" + r3 : r3 } };
            }
            toUUID() {
              if (this.sub_type === U.SUBTYPE_UUID)
                return new z(this.buffer.subarray(0, this.position));
              throw new g(`Binary sub_type "${this.sub_type}" is not supported for converting to UUID. Only "${U.SUBTYPE_UUID}" is currently supported.`);
            }
            static createFromHexString(t3, e3) {
              return new U(I.fromHex(t3), e3);
            }
            static createFromBase64(t3, e3) {
              return new U(I.fromBase64(t3), e3);
            }
            static fromExtendedJSON(t3, e3) {
              let r3, n2;
              if (e3 = e3 || {}, "$binary" in t3 ? e3.legacy && "string" == typeof t3.$binary && "$type" in t3 ? (n2 = t3.$type ? parseInt(t3.$type, 16) : 0, r3 = I.fromBase64(t3.$binary)) : "string" != typeof t3.$binary && (n2 = t3.$binary.subType ? parseInt(t3.$binary.subType, 16) : 0, r3 = I.fromBase64(t3.$binary.base64)) : "$uuid" in t3 && (n2 = 4, r3 = z.bytesFromString(t3.$uuid)), !r3)
                throw new g(`Unexpected Binary Extended JSON format ${JSON.stringify(t3)}`);
              return 4 === n2 ? new z(r3) : new U(r3, n2);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `Binary.createFromBase64(${r3(I.toBase64(this.buffer.subarray(0, this.position)), e3)}, ${r3(this.sub_type, e3)})`;
            }
            toInt8Array() {
              if (this.sub_type !== U.SUBTYPE_VECTOR)
                throw new g("Binary sub_type is not Vector");
              if (this.buffer[0] !== U.VECTOR_TYPE.Int8)
                throw new g("Binary datatype field is not Int8");
              return new Int8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
            }
            toFloat32Array() {
              if (this.sub_type !== U.SUBTYPE_VECTOR)
                throw new g("Binary sub_type is not Vector");
              if (this.buffer[0] !== U.VECTOR_TYPE.Float32)
                throw new g("Binary datatype field is not Float32");
              const t3 = new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
              return C.isBigEndian && I.swap32(t3), new Float32Array(t3.buffer);
            }
            toPackedBits() {
              if (this.sub_type !== U.SUBTYPE_VECTOR)
                throw new g("Binary sub_type is not Vector");
              if (this.buffer[0] !== U.VECTOR_TYPE.PackedBit)
                throw new g("Binary datatype field is not packed bit");
              return new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));
            }
            toBits() {
              if (this.sub_type !== U.SUBTYPE_VECTOR)
                throw new g("Binary sub_type is not Vector");
              if (this.buffer[0] !== U.VECTOR_TYPE.PackedBit)
                throw new g("Binary datatype field is not packed bit");
              const t3 = 8 * (this.length() - 2) - this.buffer[1], e3 = new Int8Array(t3);
              for (let t4 = 0; t4 < e3.length; t4++) {
                const r3 = t4 / 8 | 0, n2 = this.buffer[r3 + 2] >> 7 - t4 % 8 & 1;
                e3[t4] = n2;
              }
              return e3;
            }
            static fromInt8Array(t3) {
              const e3 = I.allocate(t3.byteLength + 2);
              e3[0] = U.VECTOR_TYPE.Int8, e3[1] = 0;
              const r3 = new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength);
              return e3.set(r3, 2), new this(e3, this.SUBTYPE_VECTOR);
            }
            static fromFloat32Array(t3) {
              const e3 = I.allocate(t3.byteLength + 2);
              e3[0] = U.VECTOR_TYPE.Float32, e3[1] = 0;
              const r3 = new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength);
              return e3.set(r3, 2), C.isBigEndian && I.swap32(new Uint8Array(e3.buffer, 2)), new this(e3, this.SUBTYPE_VECTOR);
            }
            static fromPackedBits(t3, e3 = 0) {
              const r3 = I.allocate(t3.byteLength + 2);
              return r3[0] = U.VECTOR_TYPE.PackedBit, r3[1] = e3, r3.set(t3, 2), new this(r3, this.SUBTYPE_VECTOR);
            }
            static fromBits(t3) {
              const e3 = t3.length + 7 >>> 3, r3 = new Uint8Array(e3 + 2);
              r3[0] = U.VECTOR_TYPE.PackedBit;
              const n2 = t3.length % 8;
              r3[1] = 0 === n2 ? 0 : 8 - n2;
              for (let e4 = 0; e4 < t3.length; e4++) {
                const n3 = e4 >>> 3, i2 = t3[e4];
                if (0 !== i2 && 1 !== i2)
                  throw new g(`Invalid bit value at ${e4}: must be 0 or 1, found ${t3[e4]}`);
                if (0 === i2)
                  continue;
                const o2 = 7 - e4 % 8;
                r3[n3 + 2] |= i2 << o2;
              }
              return new this(r3, U.SUBTYPE_VECTOR);
            }
          }
          function q(t3) {
            if (t3.sub_type !== U.SUBTYPE_VECTOR)
              return;
            const e3 = t3.position, r3 = t3.buffer[0], n2 = t3.buffer[1];
            if ((r3 === U.VECTOR_TYPE.Float32 || r3 === U.VECTOR_TYPE.Int8) && 0 !== n2)
              throw new g("Invalid Vector: padding must be zero for int8 and float32 vectors");
            if (r3 === U.VECTOR_TYPE.PackedBit && 0 !== n2 && 2 === e3)
              throw new g("Invalid Vector: padding must be zero for packed bit vectors that are empty");
            if (r3 === U.VECTOR_TYPE.PackedBit && n2 > 7)
              throw new g(`Invalid Vector: padding must be a value between 0 and 7. found: ${n2}`);
          }
          U.BSON_BINARY_SUBTYPE_DEFAULT = 0, U.BUFFER_SIZE = 256, U.SUBTYPE_DEFAULT = 0, U.SUBTYPE_FUNCTION = 1, U.SUBTYPE_BYTE_ARRAY = 2, U.SUBTYPE_UUID_OLD = 3, U.SUBTYPE_UUID = 4, U.SUBTYPE_MD5 = 5, U.SUBTYPE_ENCRYPTED = 6, U.SUBTYPE_COLUMN = 7, U.SUBTYPE_SENSITIVE = 8, U.SUBTYPE_VECTOR = 9, U.SUBTYPE_USER_DEFINED = 128, U.VECTOR_TYPE = Object.freeze({ Int8: 3, Float32: 39, PackedBit: 16 });
          const F = /^[0-9A-F]{32}$/i, V = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;
          class z extends U {
            constructor(t3) {
              let e3;
              if (null == t3)
                e3 = z.generate();
              else if (t3 instanceof z)
                e3 = I.toLocalBufferType(new Uint8Array(t3.buffer));
              else if (ArrayBuffer.isView(t3) && 16 === t3.byteLength)
                e3 = I.toLocalBufferType(t3);
              else {
                if ("string" != typeof t3)
                  throw new g("Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).");
                e3 = z.bytesFromString(t3);
              }
              super(e3, 4);
            }
            get id() {
              return this.buffer;
            }
            set id(t3) {
              this.buffer = t3;
            }
            toHexString(t3 = true) {
              return t3 ? [I.toHex(this.buffer.subarray(0, 4)), I.toHex(this.buffer.subarray(4, 6)), I.toHex(this.buffer.subarray(6, 8)), I.toHex(this.buffer.subarray(8, 10)), I.toHex(this.buffer.subarray(10, 16))].join("-") : I.toHex(this.buffer);
            }
            toString(t3) {
              return "hex" === t3 ? I.toHex(this.id) : "base64" === t3 ? I.toBase64(this.id) : this.toHexString();
            }
            toJSON() {
              return this.toHexString();
            }
            equals(t3) {
              if (!t3)
                return false;
              if (t3 instanceof z)
                return I.equals(t3.id, this.id);
              try {
                return I.equals(new z(t3).id, this.id);
              } catch {
                return false;
              }
            }
            toBinary() {
              return new U(this.id, U.SUBTYPE_UUID);
            }
            static generate() {
              const t3 = I.randomBytes(16);
              return t3[6] = 15 & t3[6] | 64, t3[8] = 63 & t3[8] | 128, t3;
            }
            static isValid(t3) {
              return !!t3 && ("string" == typeof t3 ? z.isValidUUIDString(t3) : o(t3) ? 16 === t3.byteLength : "Binary" === t3._bsontype && t3.sub_type === this.SUBTYPE_UUID && 16 === t3.buffer.byteLength);
            }
            static createFromHexString(t3) {
              const e3 = z.bytesFromString(t3);
              return new z(e3);
            }
            static createFromBase64(t3) {
              return new z(I.fromBase64(t3));
            }
            static bytesFromString(t3) {
              if (!z.isValidUUIDString(t3))
                throw new g("UUID string representation must be 32 hex digits or canonical hyphenated representation");
              return I.fromHex(t3.replace(/-/g, ""));
            }
            static isValidUUIDString(t3) {
              return F.test(t3) || V.test(t3);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new UUID(${r3(this.toHexString(), e3)})`;
            }
          }
          class K extends R {
            get _bsontype() {
              return "Code";
            }
            constructor(t3, e3) {
              super(), this.code = t3.toString(), this.scope = e3 ?? null;
            }
            toJSON() {
              return null != this.scope ? { code: this.code, scope: this.scope } : { code: this.code };
            }
            toExtendedJSON() {
              return this.scope ? { $code: this.code, $scope: this.scope } : { $code: this.code };
            }
            static fromExtendedJSON(t3) {
              return new K(t3.$code, t3.$scope);
            }
            inspect(t3, e3, r3) {
              r3 ??= f;
              let n2 = r3(this.code, e3);
              const i2 = n2.includes("\n");
              return null != this.scope && (n2 += `,${i2 ? "\n" : " "}${r3(this.scope, e3)}`), `new Code(${i2 ? "\n" : ""}${n2}${i2 && null === this.scope ? "\n" : ""})`;
            }
          }
          function H(t3) {
            return null != t3 && "object" == typeof t3 && "$id" in t3 && null != t3.$id && "$ref" in t3 && "string" == typeof t3.$ref && (!("$db" in t3) || "$db" in t3 && "string" == typeof t3.$db);
          }
          class W extends R {
            get _bsontype() {
              return "DBRef";
            }
            constructor(t3, e3, r3, n2) {
              super();
              const i2 = t3.split(".");
              2 === i2.length && (r3 = i2.shift(), t3 = i2.shift()), this.collection = t3, this.oid = e3, this.db = r3, this.fields = n2 || {};
            }
            get namespace() {
              return this.collection;
            }
            set namespace(t3) {
              this.collection = t3;
            }
            toJSON() {
              const t3 = Object.assign({ $ref: this.collection, $id: this.oid }, this.fields);
              return null != this.db && (t3.$db = this.db), t3;
            }
            toExtendedJSON(t3) {
              t3 = t3 || {};
              let e3 = { $ref: this.collection, $id: this.oid };
              return t3.legacy || (this.db && (e3.$db = this.db), e3 = Object.assign(e3, this.fields)), e3;
            }
            static fromExtendedJSON(t3) {
              const e3 = Object.assign({}, t3);
              return delete e3.$ref, delete e3.$id, delete e3.$db, new W(t3.$ref, t3.$id, t3.$db, e3);
            }
            inspect(t3, e3, r3) {
              r3 ??= f;
              const n2 = [r3(this.namespace, e3), r3(this.oid, e3), ...this.db ? [r3(this.db, e3)] : [], ...Object.keys(this.fields).length > 0 ? [r3(this.fields, e3)] : []];
              return n2[1] = r3 === f ? `new ObjectId(${n2[1]})` : n2[1], `new DBRef(${n2.join(", ")})`;
            }
          }
          function J(t3) {
            if ("" === t3)
              return t3;
            let e3 = 0;
            const r3 = "-" === t3[e3], n2 = "+" === t3[e3];
            (n2 || r3) && (e3 += 1);
            let i2 = false;
            for (; e3 < t3.length && "0" === t3[e3]; ++e3)
              i2 = true;
            return i2 ? `${r3 ? "-" : ""}${t3.length === e3 ? "0" : t3.slice(e3)}` : n2 ? t3.slice(1) : t3;
          }
          let G;
          try {
            G = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
          } catch {
          }
          const Y = 4294967296, Q = 18446744073709552e3, X = Q / 2, Z = {}, tt = {}, et = /^(\+?0|(\+|-)?[1-9][0-9]*)$/;
          class rt extends R {
            get _bsontype() {
              return "Long";
            }
            get __isLong__() {
              return true;
            }
            constructor(t3 = 0, e3, r3) {
              super();
              const n2 = "boolean" == typeof e3 ? e3 : Boolean(r3), i2 = "number" == typeof e3 ? e3 : 0, o2 = "string" == typeof t3 ? rt.fromString(t3, n2) : "bigint" == typeof t3 ? rt.fromBigInt(t3, n2) : { low: 0 | t3, high: 0 | i2, unsigned: n2 };
              this.low = o2.low, this.high = o2.high, this.unsigned = o2.unsigned;
            }
            static fromBits(t3, e3, r3) {
              return new rt(t3, e3, r3);
            }
            static fromInt(t3, e3) {
              let r3, n2, i2;
              return e3 ? (i2 = 0 <= (t3 >>>= 0) && t3 < 256) && (n2 = tt[t3], n2) ? n2 : (r3 = rt.fromBits(t3, (0 | t3) < 0 ? -1 : 0, true), i2 && (tt[t3] = r3), r3) : (i2 = -128 <= (t3 |= 0) && t3 < 128) && (n2 = Z[t3], n2) ? n2 : (r3 = rt.fromBits(t3, t3 < 0 ? -1 : 0, false), i2 && (Z[t3] = r3), r3);
            }
            static fromNumber(t3, e3) {
              if (isNaN(t3))
                return e3 ? rt.UZERO : rt.ZERO;
              if (e3) {
                if (t3 < 0)
                  return rt.UZERO;
                if (t3 >= Q)
                  return rt.MAX_UNSIGNED_VALUE;
              } else {
                if (t3 <= -X)
                  return rt.MIN_VALUE;
                if (t3 + 1 >= X)
                  return rt.MAX_VALUE;
              }
              return t3 < 0 ? rt.fromNumber(-t3, e3).neg() : rt.fromBits(t3 % Y | 0, t3 / Y | 0, e3);
            }
            static fromBigInt(t3, e3) {
              const r3 = BigInt(4294967295), n2 = BigInt(32);
              return new rt(Number(t3 & r3), Number(t3 >> n2 & r3), e3);
            }
            static _fromString(t3, e3, r3) {
              if (0 === t3.length)
                throw new g("empty string");
              if (r3 < 2 || 36 < r3)
                throw new g("radix");
              let n2;
              if ((n2 = t3.indexOf("-")) > 0)
                throw new g("interior hyphen");
              if (0 === n2)
                return rt._fromString(t3.substring(1), e3, r3).neg();
              const i2 = rt.fromNumber(Math.pow(r3, 8));
              let o2 = rt.ZERO;
              for (let e4 = 0; e4 < t3.length; e4 += 8) {
                const n3 = Math.min(8, t3.length - e4), a2 = parseInt(t3.substring(e4, e4 + n3), r3);
                if (n3 < 8) {
                  const t4 = rt.fromNumber(Math.pow(r3, n3));
                  o2 = o2.mul(t4).add(rt.fromNumber(a2));
                } else
                  o2 = o2.mul(i2), o2 = o2.add(rt.fromNumber(a2));
              }
              return o2.unsigned = e3, o2;
            }
            static fromStringStrict(t3, e3, r3) {
              let n2 = false;
              if ("number" == typeof e3 ? (r3 = e3, e3 = false) : n2 = !!e3, r3 ??= 10, t3.trim() !== t3)
                throw new g(`Input: '${t3}' contains leading and/or trailing whitespace`);
              if (!function(t4, e4) {
                const r4 = "0123456789abcdefghijklmnopqrstuvwxyz".slice(0, e4 = e4 ?? 10);
                return !new RegExp(`[^-+${r4}]`, "i").test(t4) && t4;
              }(t3, r3))
                throw new g(`Input: '${t3}' contains invalid characters for radix: ${r3}`);
              const i2 = J(t3), o2 = rt._fromString(i2, n2, r3);
              if (o2.toString(r3).toLowerCase() !== i2.toLowerCase())
                throw new g(`Input: ${t3} is not representable as ${o2.unsigned ? "an unsigned" : "a signed"} 64-bit Long ${null != r3 ? `with radix: ${r3}` : ""}`);
              return o2;
            }
            static fromString(t3, e3, r3) {
              let n2 = false;
              return "number" == typeof e3 ? (r3 = e3, e3 = false) : n2 = !!e3, r3 ??= 10, "NaN" === t3 && r3 < 24 || ("Infinity" === t3 || "+Infinity" === t3 || "-Infinity" === t3) && r3 < 35 ? rt.ZERO : rt._fromString(t3, n2, r3);
            }
            static fromBytes(t3, e3, r3) {
              return r3 ? rt.fromBytesLE(t3, e3) : rt.fromBytesBE(t3, e3);
            }
            static fromBytesLE(t3, e3) {
              return new rt(t3[0] | t3[1] << 8 | t3[2] << 16 | t3[3] << 24, t3[4] | t3[5] << 8 | t3[6] << 16 | t3[7] << 24, e3);
            }
            static fromBytesBE(t3, e3) {
              return new rt(t3[4] << 24 | t3[5] << 16 | t3[6] << 8 | t3[7], t3[0] << 24 | t3[1] << 16 | t3[2] << 8 | t3[3], e3);
            }
            static isLong(t3) {
              return null != t3 && "object" == typeof t3 && "__isLong__" in t3 && true === t3.__isLong__;
            }
            static fromValue(t3, e3) {
              return "number" == typeof t3 ? rt.fromNumber(t3, e3) : "string" == typeof t3 ? rt.fromString(t3, e3) : rt.fromBits(t3.low, t3.high, "boolean" == typeof e3 ? e3 : t3.unsigned);
            }
            add(t3) {
              rt.isLong(t3) || (t3 = rt.fromValue(t3));
              const e3 = this.high >>> 16, r3 = 65535 & this.high, n2 = this.low >>> 16, i2 = 65535 & this.low, o2 = t3.high >>> 16, a2 = 65535 & t3.high, s2 = t3.low >>> 16;
              let u2 = 0, c2 = 0, f2 = 0, l2 = 0;
              return l2 += i2 + (65535 & t3.low), f2 += l2 >>> 16, l2 &= 65535, f2 += n2 + s2, c2 += f2 >>> 16, f2 &= 65535, c2 += r3 + a2, u2 += c2 >>> 16, c2 &= 65535, u2 += e3 + o2, u2 &= 65535, rt.fromBits(f2 << 16 | l2, u2 << 16 | c2, this.unsigned);
            }
            and(t3) {
              return rt.isLong(t3) || (t3 = rt.fromValue(t3)), rt.fromBits(this.low & t3.low, this.high & t3.high, this.unsigned);
            }
            compare(t3) {
              if (rt.isLong(t3) || (t3 = rt.fromValue(t3)), this.eq(t3))
                return 0;
              const e3 = this.isNegative(), r3 = t3.isNegative();
              return e3 && !r3 ? -1 : !e3 && r3 ? 1 : this.unsigned ? t3.high >>> 0 > this.high >>> 0 || t3.high === this.high && t3.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t3).isNegative() ? -1 : 1;
            }
            comp(t3) {
              return this.compare(t3);
            }
            divide(t3) {
              if (rt.isLong(t3) || (t3 = rt.fromValue(t3)), t3.isZero())
                throw new g("division by zero");
              if (G) {
                if (!this.unsigned && -2147483648 === this.high && -1 === t3.low && -1 === t3.high)
                  return this;
                const e4 = (this.unsigned ? G.div_u : G.div_s)(this.low, this.high, t3.low, t3.high);
                return rt.fromBits(e4, G.get_high(), this.unsigned);
              }
              if (this.isZero())
                return this.unsigned ? rt.UZERO : rt.ZERO;
              let e3, r3, n2;
              if (this.unsigned) {
                if (t3.unsigned || (t3 = t3.toUnsigned()), t3.gt(this))
                  return rt.UZERO;
                if (t3.gt(this.shru(1)))
                  return rt.UONE;
                n2 = rt.UZERO;
              } else {
                if (this.eq(rt.MIN_VALUE))
                  return t3.eq(rt.ONE) || t3.eq(rt.NEG_ONE) ? rt.MIN_VALUE : t3.eq(rt.MIN_VALUE) ? rt.ONE : (e3 = this.shr(1).div(t3).shl(1), e3.eq(rt.ZERO) ? t3.isNegative() ? rt.ONE : rt.NEG_ONE : (r3 = this.sub(t3.mul(e3)), n2 = e3.add(r3.div(t3)), n2));
                if (t3.eq(rt.MIN_VALUE))
                  return this.unsigned ? rt.UZERO : rt.ZERO;
                if (this.isNegative())
                  return t3.isNegative() ? this.neg().div(t3.neg()) : this.neg().div(t3).neg();
                if (t3.isNegative())
                  return this.div(t3.neg()).neg();
                n2 = rt.ZERO;
              }
              for (r3 = this; r3.gte(t3); ) {
                e3 = Math.max(1, Math.floor(r3.toNumber() / t3.toNumber()));
                const i2 = Math.ceil(Math.log(e3) / Math.LN2), o2 = i2 <= 48 ? 1 : Math.pow(2, i2 - 48);
                let a2 = rt.fromNumber(e3), s2 = a2.mul(t3);
                for (; s2.isNegative() || s2.gt(r3); )
                  e3 -= o2, a2 = rt.fromNumber(e3, this.unsigned), s2 = a2.mul(t3);
                a2.isZero() && (a2 = rt.ONE), n2 = n2.add(a2), r3 = r3.sub(s2);
              }
              return n2;
            }
            div(t3) {
              return this.divide(t3);
            }
            equals(t3) {
              return rt.isLong(t3) || (t3 = rt.fromValue(t3)), (this.unsigned === t3.unsigned || this.high >>> 31 != 1 || t3.high >>> 31 != 1) && this.high === t3.high && this.low === t3.low;
            }
            eq(t3) {
              return this.equals(t3);
            }
            getHighBits() {
              return this.high;
            }
            getHighBitsUnsigned() {
              return this.high >>> 0;
            }
            getLowBits() {
              return this.low;
            }
            getLowBitsUnsigned() {
              return this.low >>> 0;
            }
            getNumBitsAbs() {
              if (this.isNegative())
                return this.eq(rt.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
              const t3 = 0 !== this.high ? this.high : this.low;
              let e3;
              for (e3 = 31; e3 > 0 && !(t3 & 1 << e3); e3--)
                ;
              return 0 !== this.high ? e3 + 33 : e3 + 1;
            }
            greaterThan(t3) {
              return this.comp(t3) > 0;
            }
            gt(t3) {
              return this.greaterThan(t3);
            }
            greaterThanOrEqual(t3) {
              return this.comp(t3) >= 0;
            }
            gte(t3) {
              return this.greaterThanOrEqual(t3);
            }
            ge(t3) {
              return this.greaterThanOrEqual(t3);
            }
            isEven() {
              return !(1 & this.low);
            }
            isNegative() {
              return !this.unsigned && this.high < 0;
            }
            isOdd() {
              return !(1 & ~this.low);
            }
            isPositive() {
              return this.unsigned || this.high >= 0;
            }
            isZero() {
              return 0 === this.high && 0 === this.low;
            }
            lessThan(t3) {
              return this.comp(t3) < 0;
            }
            lt(t3) {
              return this.lessThan(t3);
            }
            lessThanOrEqual(t3) {
              return this.comp(t3) <= 0;
            }
            lte(t3) {
              return this.lessThanOrEqual(t3);
            }
            modulo(t3) {
              if (rt.isLong(t3) || (t3 = rt.fromValue(t3)), G) {
                const e3 = (this.unsigned ? G.rem_u : G.rem_s)(this.low, this.high, t3.low, t3.high);
                return rt.fromBits(e3, G.get_high(), this.unsigned);
              }
              return this.sub(this.div(t3).mul(t3));
            }
            mod(t3) {
              return this.modulo(t3);
            }
            rem(t3) {
              return this.modulo(t3);
            }
            multiply(t3) {
              if (this.isZero())
                return rt.ZERO;
              if (rt.isLong(t3) || (t3 = rt.fromValue(t3)), G) {
                const e4 = G.mul(this.low, this.high, t3.low, t3.high);
                return rt.fromBits(e4, G.get_high(), this.unsigned);
              }
              if (t3.isZero())
                return rt.ZERO;
              if (this.eq(rt.MIN_VALUE))
                return t3.isOdd() ? rt.MIN_VALUE : rt.ZERO;
              if (t3.eq(rt.MIN_VALUE))
                return this.isOdd() ? rt.MIN_VALUE : rt.ZERO;
              if (this.isNegative())
                return t3.isNegative() ? this.neg().mul(t3.neg()) : this.neg().mul(t3).neg();
              if (t3.isNegative())
                return this.mul(t3.neg()).neg();
              if (this.lt(rt.TWO_PWR_24) && t3.lt(rt.TWO_PWR_24))
                return rt.fromNumber(this.toNumber() * t3.toNumber(), this.unsigned);
              const e3 = this.high >>> 16, r3 = 65535 & this.high, n2 = this.low >>> 16, i2 = 65535 & this.low, o2 = t3.high >>> 16, a2 = 65535 & t3.high, s2 = t3.low >>> 16, u2 = 65535 & t3.low;
              let c2 = 0, f2 = 0, l2 = 0, h2 = 0;
              return h2 += i2 * u2, l2 += h2 >>> 16, h2 &= 65535, l2 += n2 * u2, f2 += l2 >>> 16, l2 &= 65535, l2 += i2 * s2, f2 += l2 >>> 16, l2 &= 65535, f2 += r3 * u2, c2 += f2 >>> 16, f2 &= 65535, f2 += n2 * s2, c2 += f2 >>> 16, f2 &= 65535, f2 += i2 * a2, c2 += f2 >>> 16, f2 &= 65535, c2 += e3 * u2 + r3 * s2 + n2 * a2 + i2 * o2, c2 &= 65535, rt.fromBits(l2 << 16 | h2, c2 << 16 | f2, this.unsigned);
            }
            mul(t3) {
              return this.multiply(t3);
            }
            negate() {
              return !this.unsigned && this.eq(rt.MIN_VALUE) ? rt.MIN_VALUE : this.not().add(rt.ONE);
            }
            neg() {
              return this.negate();
            }
            not() {
              return rt.fromBits(~this.low, ~this.high, this.unsigned);
            }
            notEquals(t3) {
              return !this.equals(t3);
            }
            neq(t3) {
              return this.notEquals(t3);
            }
            ne(t3) {
              return this.notEquals(t3);
            }
            or(t3) {
              return rt.isLong(t3) || (t3 = rt.fromValue(t3)), rt.fromBits(this.low | t3.low, this.high | t3.high, this.unsigned);
            }
            shiftLeft(t3) {
              return rt.isLong(t3) && (t3 = t3.toInt()), 0 == (t3 &= 63) ? this : t3 < 32 ? rt.fromBits(this.low << t3, this.high << t3 | this.low >>> 32 - t3, this.unsigned) : rt.fromBits(0, this.low << t3 - 32, this.unsigned);
            }
            shl(t3) {
              return this.shiftLeft(t3);
            }
            shiftRight(t3) {
              return rt.isLong(t3) && (t3 = t3.toInt()), 0 == (t3 &= 63) ? this : t3 < 32 ? rt.fromBits(this.low >>> t3 | this.high << 32 - t3, this.high >> t3, this.unsigned) : rt.fromBits(this.high >> t3 - 32, this.high >= 0 ? 0 : -1, this.unsigned);
            }
            shr(t3) {
              return this.shiftRight(t3);
            }
            shiftRightUnsigned(t3) {
              if (rt.isLong(t3) && (t3 = t3.toInt()), 0 == (t3 &= 63))
                return this;
              {
                const e3 = this.high;
                if (t3 < 32) {
                  const r3 = this.low;
                  return rt.fromBits(r3 >>> t3 | e3 << 32 - t3, e3 >>> t3, this.unsigned);
                }
                return 32 === t3 ? rt.fromBits(e3, 0, this.unsigned) : rt.fromBits(e3 >>> t3 - 32, 0, this.unsigned);
              }
            }
            shr_u(t3) {
              return this.shiftRightUnsigned(t3);
            }
            shru(t3) {
              return this.shiftRightUnsigned(t3);
            }
            subtract(t3) {
              return rt.isLong(t3) || (t3 = rt.fromValue(t3)), this.add(t3.neg());
            }
            sub(t3) {
              return this.subtract(t3);
            }
            toInt() {
              return this.unsigned ? this.low >>> 0 : this.low;
            }
            toNumber() {
              return this.unsigned ? (this.high >>> 0) * Y + (this.low >>> 0) : this.high * Y + (this.low >>> 0);
            }
            toBigInt() {
              return BigInt(this.toString());
            }
            toBytes(t3) {
              return t3 ? this.toBytesLE() : this.toBytesBE();
            }
            toBytesLE() {
              const t3 = this.high, e3 = this.low;
              return [255 & e3, e3 >>> 8 & 255, e3 >>> 16 & 255, e3 >>> 24, 255 & t3, t3 >>> 8 & 255, t3 >>> 16 & 255, t3 >>> 24];
            }
            toBytesBE() {
              const t3 = this.high, e3 = this.low;
              return [t3 >>> 24, t3 >>> 16 & 255, t3 >>> 8 & 255, 255 & t3, e3 >>> 24, e3 >>> 16 & 255, e3 >>> 8 & 255, 255 & e3];
            }
            toSigned() {
              return this.unsigned ? rt.fromBits(this.low, this.high, false) : this;
            }
            toString(t3) {
              if ((t3 = t3 || 10) < 2 || 36 < t3)
                throw new g("radix");
              if (this.isZero())
                return "0";
              if (this.isNegative()) {
                if (this.eq(rt.MIN_VALUE)) {
                  const e4 = rt.fromNumber(t3), r4 = this.div(e4), n3 = r4.mul(e4).sub(this);
                  return r4.toString(t3) + n3.toInt().toString(t3);
                }
                return "-" + this.neg().toString(t3);
              }
              const e3 = rt.fromNumber(Math.pow(t3, 6), this.unsigned);
              let r3 = this, n2 = "";
              for (; ; ) {
                const i2 = r3.div(e3);
                let o2 = (r3.sub(i2.mul(e3)).toInt() >>> 0).toString(t3);
                if (r3 = i2, r3.isZero())
                  return o2 + n2;
                for (; o2.length < 6; )
                  o2 = "0" + o2;
                n2 = "" + o2 + n2;
              }
            }
            toUnsigned() {
              return this.unsigned ? this : rt.fromBits(this.low, this.high, true);
            }
            xor(t3) {
              return rt.isLong(t3) || (t3 = rt.fromValue(t3)), rt.fromBits(this.low ^ t3.low, this.high ^ t3.high, this.unsigned);
            }
            eqz() {
              return this.isZero();
            }
            le(t3) {
              return this.lessThanOrEqual(t3);
            }
            toExtendedJSON(t3) {
              return t3 && t3.relaxed ? this.toNumber() : { $numberLong: this.toString() };
            }
            static fromExtendedJSON(t3, e3) {
              const { useBigInt64: r3 = false, relaxed: n2 = true } = { ...e3 };
              if (t3.$numberLong.length > 20)
                throw new g("$numberLong string is too long");
              if (!et.test(t3.$numberLong))
                throw new g(`$numberLong string "${t3.$numberLong}" is in an invalid format`);
              if (r3) {
                const e4 = BigInt(t3.$numberLong);
                return BigInt.asIntN(64, e4);
              }
              const i2 = rt.fromString(t3.$numberLong);
              return n2 ? i2.toNumber() : i2;
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new Long(${r3(this.toString(), e3)}${this.unsigned ? `, ${r3(this.unsigned, e3)}` : ""})`;
            }
          }
          rt.TWO_PWR_24 = rt.fromInt(1 << 24), rt.MAX_UNSIGNED_VALUE = rt.fromBits(-1, -1, true), rt.ZERO = rt.fromInt(0), rt.UZERO = rt.fromInt(0, true), rt.ONE = rt.fromInt(1), rt.UONE = rt.fromInt(1, true), rt.NEG_ONE = rt.fromInt(-1), rt.MAX_VALUE = rt.fromBits(-1, 2147483647, false), rt.MIN_VALUE = rt.fromBits(0, -2147483648, false);
          const nt = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/, it = /^(\+|-)?(Infinity|inf)$/i, ot = /^(\+|-)?NaN$/i, at = 6111, st = -6176, ut = I.fromNumberArray([124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].reverse()), ct = I.fromNumberArray([248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].reverse()), ft = I.fromNumberArray([120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].reverse()), lt = /^([-+])?(\d+)?$/;
          function ht(t3) {
            return !isNaN(parseInt(t3, 10));
          }
          function pt(t3) {
            const e3 = rt.fromNumber(1e9);
            let r3 = rt.fromNumber(0);
            if (!(t3.parts[0] || t3.parts[1] || t3.parts[2] || t3.parts[3]))
              return { quotient: t3, rem: r3 };
            for (let n2 = 0; n2 <= 3; n2++)
              r3 = r3.shiftLeft(32), r3 = r3.add(new rt(t3.parts[n2], 0)), t3.parts[n2] = r3.div(e3).low, r3 = r3.modulo(e3);
            return { quotient: t3, rem: r3 };
          }
          function dt(t3, e3) {
            throw new g(`"${t3}" is not a valid Decimal128 string - ${e3}`);
          }
          class yt extends R {
            get _bsontype() {
              return "Decimal128";
            }
            constructor(t3) {
              if (super(), "string" == typeof t3)
                this.bytes = yt.fromString(t3).bytes;
              else {
                if (!(t3 instanceof Uint8Array || o(t3)))
                  throw new g("Decimal128 must take a Buffer or string");
                if (16 !== t3.byteLength)
                  throw new g("Decimal128 must take a Buffer of 16 bytes");
                this.bytes = t3;
              }
            }
            static fromString(t3) {
              return yt._fromString(t3, { allowRounding: false });
            }
            static fromStringWithRounding(t3) {
              return yt._fromString(t3, { allowRounding: true });
            }
            static _fromString(t3, e3) {
              let r3 = false, n2 = false, i2 = false, o2 = false, a2 = 0, s2 = 0, u2 = 0, c2 = 0, f2 = 0;
              const l2 = [0];
              let h2 = 0, p2 = 0, d2 = 0, y2 = 0, b2 = new rt(0, 0), m2 = new rt(0, 0), v2 = 0, _2 = 0;
              if (t3.length >= 7e3)
                throw new g(t3 + " not a valid Decimal128 string");
              const w2 = t3.match(nt), S2 = t3.match(it), O2 = t3.match(ot);
              if (!w2 && !S2 && !O2 || 0 === t3.length)
                throw new g(t3 + " not a valid Decimal128 string");
              if (w2) {
                const e4 = w2[2], r4 = w2[4], n3 = w2[5], i3 = w2[6];
                r4 && void 0 === i3 && dt(t3, "missing exponent power"), r4 && void 0 === e4 && dt(t3, "missing exponent base"), void 0 === r4 && (n3 || i3) && dt(t3, "missing e before exponent");
              }
              if ("+" !== t3[_2] && "-" !== t3[_2] || (n2 = true, r3 = "-" === t3[_2++]), !ht(t3[_2]) && "." !== t3[_2]) {
                if ("i" === t3[_2] || "I" === t3[_2])
                  return new yt(r3 ? ct : ft);
                if ("N" === t3[_2])
                  return new yt(ut);
              }
              for (; ht(t3[_2]) || "." === t3[_2]; )
                "." !== t3[_2] ? (h2 < 34 && ("0" !== t3[_2] || o2) && (o2 || (f2 = s2), o2 = true, l2[p2++] = parseInt(t3[_2], 10), h2 += 1), o2 && (u2 += 1), i2 && (c2 += 1), s2 += 1, _2 += 1) : (i2 && dt(t3, "contains multiple periods"), i2 = true, _2 += 1);
              if (i2 && !s2)
                throw new g(t3 + " not a valid Decimal128 string");
              if ("e" === t3[_2] || "E" === t3[_2]) {
                const e4 = t3.substr(++_2).match(lt);
                if (!e4 || !e4[2])
                  return new yt(ut);
                y2 = parseInt(e4[0], 10), _2 += e4[0].length;
              }
              if (t3[_2])
                return new yt(ut);
              if (h2) {
                if (d2 = h2 - 1, a2 = u2, 1 !== a2)
                  for (; "0" === t3[f2 + a2 - 1 + Number(n2) + Number(i2)]; )
                    a2 -= 1;
              } else
                l2[0] = 0, u2 = 1, h2 = 1, a2 = 0;
              for (y2 <= c2 && c2 > y2 + 16384 ? y2 = st : y2 -= c2; y2 > at; ) {
                if (d2 += 1, d2 >= 34) {
                  if (0 === a2) {
                    y2 = at;
                    break;
                  }
                  dt(t3, "overflow");
                }
                y2 -= 1;
              }
              if (e3.allowRounding) {
                for (; y2 < st || h2 < u2; ) {
                  if (0 === d2 && a2 < h2) {
                    y2 = st, a2 = 0;
                    break;
                  }
                  if (h2 < u2 ? u2 -= 1 : d2 -= 1, y2 < at)
                    y2 += 1;
                  else {
                    if (l2.join("").match(/^0+$/)) {
                      y2 = at;
                      break;
                    }
                    dt(t3, "overflow");
                  }
                }
                if (d2 + 1 < a2) {
                  let e4 = s2;
                  i2 && (f2 += 1, e4 += 1), n2 && (f2 += 1, e4 += 1);
                  const o3 = parseInt(t3[f2 + d2 + 1], 10);
                  let a3 = 0;
                  if (o3 >= 5 && (a3 = 1, 5 === o3)) {
                    a3 = l2[d2] % 2 == 1 ? 1 : 0;
                    for (let r4 = f2 + d2 + 2; r4 < e4; r4++)
                      if (parseInt(t3[r4], 10)) {
                        a3 = 1;
                        break;
                      }
                  }
                  if (a3) {
                    let t4 = d2;
                    for (; t4 >= 0 && ++l2[t4] > 9; t4--)
                      if (l2[t4] = 0, 0 === t4) {
                        if (!(y2 < at))
                          return new yt(r3 ? ct : ft);
                        y2 += 1, l2[t4] = 1;
                      }
                  }
                }
              } else {
                for (; y2 < st || h2 < u2; ) {
                  if (0 === d2) {
                    if (0 === a2) {
                      y2 = st;
                      break;
                    }
                    dt(t3, "exponent underflow");
                  }
                  h2 < u2 ? ("0" !== t3[u2 - 1 + Number(n2) + Number(i2)] && 0 !== a2 && dt(t3, "inexact rounding"), u2 -= 1) : (0 !== l2[d2] && dt(t3, "inexact rounding"), d2 -= 1), y2 < at ? y2 += 1 : dt(t3, "overflow");
                }
                d2 + 1 < a2 && (i2 && (f2 += 1), n2 && (f2 += 1), 0 !== parseInt(t3[f2 + d2 + 1], 10) && dt(t3, "inexact rounding"));
              }
              if (b2 = rt.fromNumber(0), m2 = rt.fromNumber(0), 0 === a2)
                b2 = rt.fromNumber(0), m2 = rt.fromNumber(0);
              else if (d2 < 17) {
                let t4 = 0;
                for (m2 = rt.fromNumber(l2[t4++]), b2 = new rt(0, 0); t4 <= d2; t4++)
                  m2 = m2.multiply(rt.fromNumber(10)), m2 = m2.add(rt.fromNumber(l2[t4]));
              } else {
                let t4 = 0;
                for (b2 = rt.fromNumber(l2[t4++]); t4 <= d2 - 17; t4++)
                  b2 = b2.multiply(rt.fromNumber(10)), b2 = b2.add(rt.fromNumber(l2[t4]));
                for (m2 = rt.fromNumber(l2[t4++]); t4 <= d2; t4++)
                  m2 = m2.multiply(rt.fromNumber(10)), m2 = m2.add(rt.fromNumber(l2[t4]));
              }
              const j2 = function(t4, e4) {
                if (!t4 && !e4)
                  return { high: rt.fromNumber(0), low: rt.fromNumber(0) };
                const r4 = t4.shiftRightUnsigned(32), n3 = new rt(t4.getLowBits(), 0), i3 = e4.shiftRightUnsigned(32), o3 = new rt(e4.getLowBits(), 0);
                let a3 = r4.multiply(i3), s3 = r4.multiply(o3);
                const u3 = n3.multiply(i3);
                let c3 = n3.multiply(o3);
                return a3 = a3.add(s3.shiftRightUnsigned(32)), s3 = new rt(s3.getLowBits(), 0).add(u3).add(c3.shiftRightUnsigned(32)), a3 = a3.add(s3.shiftRightUnsigned(32)), c3 = s3.shiftLeft(32).add(new rt(c3.getLowBits(), 0)), { high: a3, low: c3 };
              }(b2, rt.fromString("100000000000000000"));
              j2.low = j2.low.add(m2), function(t4, e4) {
                const r4 = t4.high >>> 0, n3 = e4.high >>> 0;
                return r4 < n3 || r4 === n3 && t4.low >>> 0 < e4.low >>> 0;
              }(j2.low, m2) && (j2.high = j2.high.add(rt.fromNumber(1))), v2 = y2 + 6176;
              const $2 = { low: rt.fromNumber(0), high: rt.fromNumber(0) };
              j2.high.shiftRightUnsigned(49).and(rt.fromNumber(1)).equals(rt.fromNumber(1)) ? ($2.high = $2.high.or(rt.fromNumber(3).shiftLeft(61)), $2.high = $2.high.or(rt.fromNumber(v2).and(rt.fromNumber(16383).shiftLeft(47))), $2.high = $2.high.or(j2.high.and(rt.fromNumber(140737488355327)))) : ($2.high = $2.high.or(rt.fromNumber(16383 & v2).shiftLeft(49)), $2.high = $2.high.or(j2.high.and(rt.fromNumber(562949953421311)))), $2.low = j2.low, r3 && ($2.high = $2.high.or(rt.fromString("9223372036854775808")));
              const E2 = I.allocateUnsafe(16);
              return _2 = 0, E2[_2++] = 255 & $2.low.low, E2[_2++] = $2.low.low >> 8 & 255, E2[_2++] = $2.low.low >> 16 & 255, E2[_2++] = $2.low.low >> 24 & 255, E2[_2++] = 255 & $2.low.high, E2[_2++] = $2.low.high >> 8 & 255, E2[_2++] = $2.low.high >> 16 & 255, E2[_2++] = $2.low.high >> 24 & 255, E2[_2++] = 255 & $2.high.low, E2[_2++] = $2.high.low >> 8 & 255, E2[_2++] = $2.high.low >> 16 & 255, E2[_2++] = $2.high.low >> 24 & 255, E2[_2++] = 255 & $2.high.high, E2[_2++] = $2.high.high >> 8 & 255, E2[_2++] = $2.high.high >> 16 & 255, E2[_2++] = $2.high.high >> 24 & 255, new yt(E2);
            }
            toString() {
              let t3, e3 = 0;
              const r3 = new Array(36);
              for (let t4 = 0; t4 < r3.length; t4++)
                r3[t4] = 0;
              let n2, i2, o2, a2 = 0, s2 = false, u2 = { parts: [0, 0, 0, 0] };
              const c2 = [];
              a2 = 0;
              const f2 = this.bytes, l2 = f2[a2++] | f2[a2++] << 8 | f2[a2++] << 16 | f2[a2++] << 24, h2 = f2[a2++] | f2[a2++] << 8 | f2[a2++] << 16 | f2[a2++] << 24, p2 = f2[a2++] | f2[a2++] << 8 | f2[a2++] << 16 | f2[a2++] << 24, d2 = f2[a2++] | f2[a2++] << 8 | f2[a2++] << 16 | f2[a2++] << 24;
              a2 = 0, (new rt(l2, h2), new rt(p2, d2)).lessThan(rt.ZERO) && c2.push("-");
              const y2 = d2 >> 26 & 31;
              if (y2 >> 3 == 3) {
                if (30 === y2)
                  return c2.join("") + "Infinity";
                if (31 === y2)
                  return "NaN";
                t3 = d2 >> 15 & 16383, n2 = 8 + (d2 >> 14 & 1);
              } else
                n2 = d2 >> 14 & 7, t3 = d2 >> 17 & 16383;
              const b2 = t3 - 6176;
              if (u2.parts[0] = (16383 & d2) + ((15 & n2) << 14), u2.parts[1] = p2, u2.parts[2] = h2, u2.parts[3] = l2, 0 === u2.parts[0] && 0 === u2.parts[1] && 0 === u2.parts[2] && 0 === u2.parts[3])
                s2 = true;
              else
                for (o2 = 3; o2 >= 0; o2--) {
                  let t4 = 0;
                  const e4 = pt(u2);
                  if (u2 = e4.quotient, t4 = e4.rem.low, t4)
                    for (i2 = 8; i2 >= 0; i2--)
                      r3[9 * o2 + i2] = t4 % 10, t4 = Math.floor(t4 / 10);
                }
              if (s2)
                e3 = 1, r3[a2] = 0;
              else
                for (e3 = 36; !r3[a2]; )
                  e3 -= 1, a2 += 1;
              const m2 = e3 - 1 + b2;
              if (m2 >= 34 || m2 <= -7 || b2 > 0) {
                if (e3 > 34)
                  return c2.push("0"), b2 > 0 ? c2.push(`E+${b2}`) : b2 < 0 && c2.push(`E${b2}`), c2.join("");
                c2.push(`${r3[a2++]}`), e3 -= 1, e3 && c2.push(".");
                for (let t4 = 0; t4 < e3; t4++)
                  c2.push(`${r3[a2++]}`);
                c2.push("E"), m2 > 0 ? c2.push(`+${m2}`) : c2.push(`${m2}`);
              } else if (b2 >= 0)
                for (let t4 = 0; t4 < e3; t4++)
                  c2.push(`${r3[a2++]}`);
              else {
                let t4 = e3 + b2;
                if (t4 > 0)
                  for (let e4 = 0; e4 < t4; e4++)
                    c2.push(`${r3[a2++]}`);
                else
                  c2.push("0");
                for (c2.push("."); t4++ < 0; )
                  c2.push("0");
                for (let n3 = 0; n3 < e3 - Math.max(t4 - 1, 0); n3++)
                  c2.push(`${r3[a2++]}`);
              }
              return c2.join("");
            }
            toJSON() {
              return { $numberDecimal: this.toString() };
            }
            toExtendedJSON() {
              return { $numberDecimal: this.toString() };
            }
            static fromExtendedJSON(t3) {
              return yt.fromString(t3.$numberDecimal);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new Decimal128(${r3(this.toString(), e3)})`;
            }
          }
          class bt extends R {
            get _bsontype() {
              return "Double";
            }
            constructor(t3) {
              super(), t3 instanceof Number && (t3 = t3.valueOf()), this.value = +t3;
            }
            static fromString(t3) {
              const e3 = Number(t3);
              if ("NaN" === t3)
                return new bt(NaN);
              if ("Infinity" === t3)
                return new bt(1 / 0);
              if ("-Infinity" === t3)
                return new bt(-1 / 0);
              if (!Number.isFinite(e3))
                throw new g(`Input: ${t3} is not representable as a Double`);
              if (t3.trim() !== t3)
                throw new g(`Input: '${t3}' contains whitespace`);
              if ("" === t3)
                throw new g("Input is an empty string");
              if (/[^-0-9.+eE]/.test(t3))
                throw new g(`Input: '${t3}' is not in decimal or exponential notation`);
              return new bt(e3);
            }
            valueOf() {
              return this.value;
            }
            toJSON() {
              return this.value;
            }
            toString(t3) {
              return this.value.toString(t3);
            }
            toExtendedJSON(t3) {
              return t3 && (t3.legacy || t3.relaxed && isFinite(this.value)) ? this.value : Object.is(Math.sign(this.value), -0) ? { $numberDouble: "-0.0" } : { $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString() };
            }
            static fromExtendedJSON(t3, e3) {
              const r3 = parseFloat(t3.$numberDouble);
              return e3 && e3.relaxed ? r3 : new bt(r3);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new Double(${r3(this.value, e3)})`;
            }
          }
          class mt extends R {
            get _bsontype() {
              return "Int32";
            }
            constructor(t3) {
              super(), t3 instanceof Number && (t3 = t3.valueOf()), this.value = 0 | +t3;
            }
            static fromString(t3) {
              const e3 = J(t3), r3 = Number(t3);
              if (h < r3)
                throw new g(`Input: '${t3}' is larger than the maximum value for Int32`);
              if (p > r3)
                throw new g(`Input: '${t3}' is smaller than the minimum value for Int32`);
              if (!Number.isSafeInteger(r3))
                throw new g(`Input: '${t3}' is not a safe integer`);
              if (r3.toString() !== e3)
                throw new g(`Input: '${t3}' is not a valid Int32 string`);
              return new mt(r3);
            }
            valueOf() {
              return this.value;
            }
            toString(t3) {
              return this.value.toString(t3);
            }
            toJSON() {
              return this.value;
            }
            toExtendedJSON(t3) {
              return t3 && (t3.relaxed || t3.legacy) ? this.value : { $numberInt: this.value.toString() };
            }
            static fromExtendedJSON(t3, e3) {
              return e3 && e3.relaxed ? parseInt(t3.$numberInt, 10) : new mt(t3.$numberInt);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new Int32(${r3(this.value, e3)})`;
            }
          }
          class vt extends R {
            get _bsontype() {
              return "MaxKey";
            }
            toExtendedJSON() {
              return { $maxKey: 1 };
            }
            static fromExtendedJSON() {
              return new vt();
            }
            inspect() {
              return "new MaxKey()";
            }
          }
          class gt extends R {
            get _bsontype() {
              return "MinKey";
            }
            toExtendedJSON() {
              return { $minKey: 1 };
            }
            static fromExtendedJSON() {
              return new gt();
            }
            inspect() {
              return "new MinKey()";
            }
          }
          let _t = null;
          const wt = /* @__PURE__ */ new WeakMap();
          class St extends R {
            get _bsontype() {
              return "ObjectId";
            }
            constructor(t3) {
              let e3;
              if (super(), "object" == typeof t3 && t3 && "id" in t3) {
                if ("string" != typeof t3.id && !ArrayBuffer.isView(t3.id))
                  throw new g("Argument passed in must have an id that is of type string or Buffer");
                e3 = "toHexString" in t3 && "function" == typeof t3.toHexString ? I.fromHex(t3.toHexString()) : t3.id;
              } else
                e3 = t3;
              if (null == e3 || "number" == typeof e3)
                this.buffer = St.generate("number" == typeof e3 ? e3 : void 0);
              else if (ArrayBuffer.isView(e3) && 12 === e3.byteLength)
                this.buffer = I.toLocalBufferType(e3);
              else {
                if ("string" != typeof e3)
                  throw new g("Argument passed in does not match the accepted types");
                if (!St.validateHexString(e3))
                  throw new g("input must be a 24 character hex string, 12 byte Uint8Array, or an integer");
                this.buffer = I.fromHex(e3), St.cacheHexString && wt.set(this, e3);
              }
            }
            get id() {
              return this.buffer;
            }
            set id(t3) {
              this.buffer = t3, St.cacheHexString && wt.set(this, I.toHex(t3));
            }
            static validateHexString(t3) {
              if (24 !== t3?.length)
                return false;
              for (let e3 = 0; e3 < 24; e3++) {
                const r3 = t3.charCodeAt(e3);
                if (!(r3 >= 48 && r3 <= 57 || r3 >= 97 && r3 <= 102 || r3 >= 65 && r3 <= 70))
                  return false;
              }
              return true;
            }
            toHexString() {
              if (St.cacheHexString) {
                const t4 = wt.get(this);
                if (t4)
                  return t4;
              }
              const t3 = I.toHex(this.id);
              return St.cacheHexString && wt.set(this, t3), t3;
            }
            static getInc() {
              return St.index = (St.index + 1) % 16777215;
            }
            static generate(t3) {
              "number" != typeof t3 && (t3 = Math.floor(Date.now() / 1e3));
              const e3 = St.getInc(), r3 = I.allocateUnsafe(12);
              return C.setInt32BE(r3, 0, t3), null === _t && (_t = I.randomBytes(5)), r3[4] = _t[0], r3[5] = _t[1], r3[6] = _t[2], r3[7] = _t[3], r3[8] = _t[4], r3[11] = 255 & e3, r3[10] = e3 >> 8 & 255, r3[9] = e3 >> 16 & 255, r3;
            }
            toString(t3) {
              return "base64" === t3 ? I.toBase64(this.id) : this.toHexString();
            }
            toJSON() {
              return this.toHexString();
            }
            static is(t3) {
              return null != t3 && "object" == typeof t3 && "_bsontype" in t3 && "ObjectId" === t3._bsontype;
            }
            equals(t3) {
              if (null == t3)
                return false;
              if (St.is(t3))
                return this.buffer[11] === t3.buffer[11] && I.equals(this.buffer, t3.buffer);
              if ("string" == typeof t3)
                return t3.toLowerCase() === this.toHexString();
              if ("object" == typeof t3 && "function" == typeof t3.toHexString) {
                const e3 = t3.toHexString(), r3 = this.toHexString();
                return "string" == typeof e3 && e3.toLowerCase() === r3;
              }
              return false;
            }
            getTimestamp() {
              const t3 = /* @__PURE__ */ new Date(), e3 = C.getUint32BE(this.buffer, 0);
              return t3.setTime(1e3 * Math.floor(e3)), t3;
            }
            static createPk() {
              return new St();
            }
            serializeInto(t3, e3) {
              return t3[e3] = this.buffer[0], t3[e3 + 1] = this.buffer[1], t3[e3 + 2] = this.buffer[2], t3[e3 + 3] = this.buffer[3], t3[e3 + 4] = this.buffer[4], t3[e3 + 5] = this.buffer[5], t3[e3 + 6] = this.buffer[6], t3[e3 + 7] = this.buffer[7], t3[e3 + 8] = this.buffer[8], t3[e3 + 9] = this.buffer[9], t3[e3 + 10] = this.buffer[10], t3[e3 + 11] = this.buffer[11], 12;
            }
            static createFromTime(t3) {
              const e3 = I.allocate(12);
              for (let t4 = 11; t4 >= 4; t4--)
                e3[t4] = 0;
              return C.setInt32BE(e3, 0, t3), new St(e3);
            }
            static createFromHexString(t3) {
              if (24 !== t3?.length)
                throw new g("hex string must be 24 characters");
              return new St(I.fromHex(t3));
            }
            static createFromBase64(t3) {
              if (16 !== t3?.length)
                throw new g("base64 string must be 16 characters");
              return new St(I.fromBase64(t3));
            }
            static isValid(t3) {
              if (null == t3)
                return false;
              if ("string" == typeof t3)
                return St.validateHexString(t3);
              try {
                return new St(t3), true;
              } catch {
                return false;
              }
            }
            toExtendedJSON() {
              return this.toHexString ? { $oid: this.toHexString() } : { $oid: this.toString("hex") };
            }
            static fromExtendedJSON(t3) {
              return new St(t3.$oid);
            }
            isCached() {
              return St.cacheHexString && wt.has(this);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new ObjectId(${r3(this.toHexString(), e3)})`;
            }
          }
          function Ot(t3, e3, r3) {
            let n2 = 5;
            if (Array.isArray(t3))
              for (let i2 = 0; i2 < t3.length; i2++)
                n2 += jt(i2.toString(), t3[i2], e3, true, r3);
            else {
              "function" == typeof t3?.toBSON && (t3 = t3.toBSON());
              for (const i2 of Object.keys(t3))
                n2 += jt(i2, t3[i2], e3, false, r3);
            }
            return n2;
          }
          function jt(t3, e3, r3 = false, n2 = false, i2 = false) {
            switch ("function" == typeof e3?.toBSON && (e3 = e3.toBSON()), typeof e3) {
              case "string":
                return 1 + I.utf8ByteLength(t3) + 1 + 4 + I.utf8ByteLength(e3) + 1;
              case "number":
                return Math.floor(e3) === e3 && e3 >= m && e3 <= b && e3 >= p && e3 <= h ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 5 : (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 9;
              case "undefined":
                return n2 || !i2 ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 : 0;
              case "boolean":
                return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 2;
              case "object":
                if (null != e3 && "string" == typeof e3._bsontype && 6 !== e3[l])
                  throw new _();
                if (null == e3 || "MinKey" === e3._bsontype || "MaxKey" === e3._bsontype)
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1;
                if ("ObjectId" === e3._bsontype)
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 13;
                if (e3 instanceof Date || c(e3))
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 9;
                if (ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer || a(e3))
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 6 + e3.byteLength;
                if ("Long" === e3._bsontype || "Double" === e3._bsontype || "Timestamp" === e3._bsontype)
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 9;
                if ("Decimal128" === e3._bsontype)
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 17;
                if ("Code" === e3._bsontype)
                  return null != e3.scope && Object.keys(e3.scope).length > 0 ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + 4 + 4 + I.utf8ByteLength(e3.code.toString()) + 1 + Ot(e3.scope, r3, i2) : (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + 4 + I.utf8ByteLength(e3.code.toString()) + 1;
                if ("Binary" === e3._bsontype) {
                  const r4 = e3;
                  return r4.sub_type === U.SUBTYPE_BYTE_ARRAY ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + (r4.position + 1 + 4 + 1 + 4) : (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + (r4.position + 1 + 4 + 1);
                }
                if ("Symbol" === e3._bsontype)
                  return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + I.utf8ByteLength(e3.value) + 4 + 1 + 1;
                if ("DBRef" === e3._bsontype) {
                  const n3 = Object.assign({ $ref: e3.collection, $id: e3.oid }, e3.fields);
                  return null != e3.db && (n3.$db = e3.db), (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + Ot(n3, r3, i2);
                }
                return e3 instanceof RegExp || s(e3) ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + I.utf8ByteLength(e3.source) + 1 + (e3.global ? 1 : 0) + (e3.ignoreCase ? 1 : 0) + (e3.multiline ? 1 : 0) + 1 : "BSONRegExp" === e3._bsontype ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + I.utf8ByteLength(e3.pattern) + 1 + I.utf8ByteLength(e3.options) + 1 : (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + Ot(e3, r3, i2) + 1;
              case "function":
                return r3 ? (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 1 + 4 + I.utf8ByteLength(e3.toString()) + 1 : 0;
              case "bigint":
                return (null != t3 ? I.utf8ByteLength(t3) + 1 : 0) + 9;
              case "symbol":
                return 0;
              default:
                throw new g("Unrecognized JS type: " + typeof e3);
            }
          }
          St.index = Math.floor(16777215 * Math.random());
          class $t extends R {
            get _bsontype() {
              return "BSONRegExp";
            }
            constructor(t3, e3) {
              if (super(), this.pattern = t3, this.options = (e3 ?? "").split("").sort().join(""), -1 !== this.pattern.indexOf("\0"))
                throw new g(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);
              if (-1 !== this.options.indexOf("\0"))
                throw new g(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);
              for (let t4 = 0; t4 < this.options.length; t4++)
                if ("i" !== this.options[t4] && "m" !== this.options[t4] && "x" !== this.options[t4] && "l" !== this.options[t4] && "s" !== this.options[t4] && "u" !== this.options[t4])
                  throw new g(`The regular expression option [${this.options[t4]}] is not supported`);
            }
            static parseOptions(t3) {
              return t3 ? t3.split("").sort().join("") : "";
            }
            toExtendedJSON(t3) {
              return (t3 = t3 || {}).legacy ? { $regex: this.pattern, $options: this.options } : { $regularExpression: { pattern: this.pattern, options: this.options } };
            }
            static fromExtendedJSON(t3) {
              if ("$regex" in t3) {
                if ("string" == typeof t3.$regex)
                  return new $t(t3.$regex, $t.parseOptions(t3.$options));
                if ("BSONRegExp" === t3.$regex._bsontype)
                  return t3;
              }
              if ("$regularExpression" in t3)
                return new $t(t3.$regularExpression.pattern, $t.parseOptions(t3.$regularExpression.options));
              throw new g(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(t3)}`);
            }
            inspect(t3, e3, r3) {
              const n2 = function(t4) {
                if (null != t4 && "object" == typeof t4 && "stylize" in t4 && "function" == typeof t4.stylize)
                  return t4.stylize;
              }(e3) ?? ((t4) => t4);
              return r3 ??= f, `new BSONRegExp(${n2(r3(this.pattern), "regexp")}, ${n2(r3(this.options), "regexp")})`;
            }
          }
          class Et extends R {
            get _bsontype() {
              return "BSONSymbol";
            }
            constructor(t3) {
              super(), this.value = t3;
            }
            valueOf() {
              return this.value;
            }
            toString() {
              return this.value;
            }
            toJSON() {
              return this.value;
            }
            toExtendedJSON() {
              return { $symbol: this.value };
            }
            static fromExtendedJSON(t3) {
              return new Et(t3.$symbol);
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new BSONSymbol(${r3(this.value, e3)})`;
            }
          }
          const At = rt;
          class Pt extends At {
            get _bsontype() {
              return "Timestamp";
            }
            get i() {
              return this.low >>> 0;
            }
            get t() {
              return this.high >>> 0;
            }
            constructor(t3) {
              if (null == t3)
                super(0, 0, true);
              else if ("bigint" == typeof t3)
                super(t3, true);
              else if (rt.isLong(t3))
                super(t3.low, t3.high, true);
              else {
                if ("object" != typeof t3 || !("t" in t3) || !("i" in t3))
                  throw new g("A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }");
                {
                  if ("number" != typeof t3.t && ("object" != typeof t3.t || "Int32" !== t3.t._bsontype))
                    throw new g("Timestamp constructed from { t, i } must provide t as a number");
                  if ("number" != typeof t3.i && ("object" != typeof t3.i || "Int32" !== t3.i._bsontype))
                    throw new g("Timestamp constructed from { t, i } must provide i as a number");
                  const e3 = Number(t3.t), r3 = Number(t3.i);
                  if (e3 < 0 || Number.isNaN(e3))
                    throw new g("Timestamp constructed from { t, i } must provide a positive t");
                  if (r3 < 0 || Number.isNaN(r3))
                    throw new g("Timestamp constructed from { t, i } must provide a positive i");
                  if (e3 > 4294967295)
                    throw new g("Timestamp constructed from { t, i } must provide t equal or less than uint32 max");
                  if (r3 > 4294967295)
                    throw new g("Timestamp constructed from { t, i } must provide i equal or less than uint32 max");
                  super(r3, e3, true);
                }
              }
            }
            toJSON() {
              return { $timestamp: this.toString() };
            }
            static fromInt(t3) {
              return new Pt(rt.fromInt(t3, true));
            }
            static fromNumber(t3) {
              return new Pt(rt.fromNumber(t3, true));
            }
            static fromBits(t3, e3) {
              return new Pt({ i: t3, t: e3 });
            }
            static fromString(t3, e3) {
              return new Pt(rt.fromString(t3, true, e3));
            }
            toExtendedJSON() {
              return { $timestamp: { t: this.t, i: this.i } };
            }
            static fromExtendedJSON(t3) {
              const e3 = rt.isLong(t3.$timestamp.i) ? t3.$timestamp.i.getLowBitsUnsigned() : t3.$timestamp.i, r3 = rt.isLong(t3.$timestamp.t) ? t3.$timestamp.t.getLowBitsUnsigned() : t3.$timestamp.t;
              return new Pt({ t: r3, i: e3 });
            }
            inspect(t3, e3, r3) {
              return r3 ??= f, `new Timestamp({ t: ${r3(this.t, e3)}, i: ${r3(this.i, e3)} })`;
            }
          }
          Pt.MAX_VALUE = rt.MAX_UNSIGNED_VALUE;
          const xt = rt.fromNumber(b), kt = rt.fromNumber(m);
          function Mt(t3, e3, r3) {
            const n2 = (e3 = null == e3 ? {} : e3) && e3.index ? e3.index : 0, i2 = C.getInt32LE(t3, n2);
            if (i2 < 5)
              throw new g(`bson size must be >= 5, is ${i2}`);
            if (e3.allowObjectSmallerThanBufferSize && t3.length < i2)
              throw new g(`buffer length ${t3.length} must be >= bson size ${i2}`);
            if (!e3.allowObjectSmallerThanBufferSize && t3.length !== i2)
              throw new g(`buffer length ${t3.length} must === bson size ${i2}`);
            if (i2 + n2 > t3.byteLength)
              throw new g(`(bson size ${i2} + options.index ${n2} must be <= buffer length ${t3.byteLength})`);
            if (0 !== t3[n2 + i2 - 1])
              throw new g("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
            return Bt(t3, n2, e3, r3);
          }
          const Tt = /^\$ref$|^\$id$|^\$db$/;
          function Bt(t3, e3, r3, n2 = false) {
            const i2 = null == r3.fieldsAsRaw ? null : r3.fieldsAsRaw, o2 = null != r3.raw && r3.raw, a2 = "boolean" == typeof r3.bsonRegExp && r3.bsonRegExp, s2 = r3.promoteBuffers ?? false, u2 = r3.promoteLongs ?? true, c2 = r3.promoteValues ?? true, f2 = r3.useBigInt64 ?? false;
            if (f2 && !c2)
              throw new g("Must either request bigint or Long for int64 deserialization");
            if (f2 && !u2)
              throw new g("Must either request bigint or Long for int64 deserialization");
            let l2, h2, p2 = true;
            const d2 = (null == r3.validation ? { utf8: true } : r3.validation).utf8;
            if ("boolean" == typeof d2)
              l2 = d2;
            else {
              p2 = false;
              const t4 = Object.keys(d2).map(function(t5) {
                return d2[t5];
              });
              if (0 === t4.length)
                throw new g("UTF-8 validation setting cannot be empty");
              if ("boolean" != typeof t4[0])
                throw new g("Invalid UTF-8 validation option, must specify boolean values");
              if (l2 = t4[0], !t4.every((t5) => t5 === l2))
                throw new g("Invalid UTF-8 validation option - keys must be all true or all false");
            }
            if (!p2) {
              h2 = /* @__PURE__ */ new Set();
              for (const t4 of Object.keys(d2))
                h2.add(t4);
            }
            const y2 = e3;
            if (t3.length < 5)
              throw new g("corrupt bson message < 5 bytes long");
            const b2 = C.getInt32LE(t3, e3);
            if (e3 += 4, b2 < 5 || b2 > t3.length)
              throw new g("corrupt bson message");
            const m2 = n2 ? [] : {};
            let v2 = 0, _2 = !n2 && null;
            for (; ; ) {
              const d3 = t3[e3++];
              if (0 === d3)
                break;
              let y3 = e3;
              for (; 0 !== t3[y3] && y3 < t3.length; )
                y3++;
              if (y3 >= t3.byteLength)
                throw new g("Bad BSON Document: illegal CString");
              const b3 = n2 ? v2++ : I.toUTF8(t3, e3, y3, false);
              let w2, S2 = true;
              if (S2 = p2 || h2?.has(b3) ? l2 : !l2, false !== _2 && "$" === b3[0] && (_2 = Tt.test(b3)), e3 = y3 + 1, 2 === d3) {
                const r4 = C.getInt32LE(t3, e3);
                if (e3 += 4, r4 <= 0 || r4 > t3.length - e3 || 0 !== t3[e3 + r4 - 1])
                  throw new g("bad string length in bson");
                w2 = I.toUTF8(t3, e3, e3 + r4 - 1, S2), e3 += r4;
              } else if (7 === d3) {
                const r4 = I.allocateUnsafe(12);
                for (let n3 = 0; n3 < 12; n3++)
                  r4[n3] = t3[e3 + n3];
                w2 = new St(r4), e3 += 12;
              } else if (16 === d3 && false === c2)
                w2 = new mt(C.getInt32LE(t3, e3)), e3 += 4;
              else if (16 === d3)
                w2 = C.getInt32LE(t3, e3), e3 += 4;
              else if (1 === d3)
                w2 = C.getFloat64LE(t3, e3), e3 += 8, false === c2 && (w2 = new bt(w2));
              else if (9 === d3) {
                const r4 = C.getInt32LE(t3, e3), n3 = C.getInt32LE(t3, e3 + 4);
                e3 += 8, w2 = new Date(new rt(r4, n3).toNumber());
              } else if (8 === d3) {
                if (0 !== t3[e3] && 1 !== t3[e3])
                  throw new g("illegal boolean type value");
                w2 = 1 === t3[e3++];
              } else if (3 === d3) {
                const n3 = e3, i3 = C.getInt32LE(t3, e3);
                if (i3 <= 0 || i3 > t3.length - e3)
                  throw new g("bad embedded document length in bson");
                if (o2)
                  w2 = t3.subarray(e3, e3 + i3);
                else {
                  let e4 = r3;
                  p2 || (e4 = { ...r3, validation: { utf8: S2 } }), w2 = Bt(t3, n3, e4, false);
                }
                e3 += i3;
              } else if (4 === d3) {
                const n3 = e3, o3 = C.getInt32LE(t3, e3);
                let a3 = r3;
                const s3 = e3 + o3;
                if (i2 && i2[b3] && (a3 = { ...r3, raw: true }), p2 || (a3 = { ...a3, validation: { utf8: S2 } }), w2 = Bt(t3, n3, a3, true), 0 !== t3[(e3 += o3) - 1])
                  throw new g("invalid array terminator byte");
                if (e3 !== s3)
                  throw new g("corrupted array bson");
              } else if (6 === d3)
                w2 = void 0;
              else if (10 === d3)
                w2 = null;
              else if (18 === d3)
                if (f2)
                  w2 = C.getBigInt64LE(t3, e3), e3 += 8;
                else {
                  const r4 = C.getInt32LE(t3, e3), n3 = C.getInt32LE(t3, e3 + 4);
                  e3 += 8;
                  const i3 = new rt(r4, n3);
                  w2 = u2 && true === c2 && i3.lessThanOrEqual(xt) && i3.greaterThanOrEqual(kt) ? i3.toNumber() : i3;
                }
              else if (19 === d3) {
                const r4 = I.allocateUnsafe(16);
                for (let n3 = 0; n3 < 16; n3++)
                  r4[n3] = t3[e3 + n3];
                e3 += 16, w2 = new yt(r4);
              } else if (5 === d3) {
                let r4 = C.getInt32LE(t3, e3);
                e3 += 4;
                const n3 = r4, i3 = t3[e3++];
                if (r4 < 0)
                  throw new g("Negative binary type element size found");
                if (r4 > t3.byteLength)
                  throw new g("Binary type size larger than document size");
                if (i3 === U.SUBTYPE_BYTE_ARRAY) {
                  if (r4 = C.getInt32LE(t3, e3), e3 += 4, r4 < 0)
                    throw new g("Negative binary type element size found for subtype 0x02");
                  if (r4 > n3 - 4)
                    throw new g("Binary type with subtype 0x02 contains too long binary size");
                  if (r4 < n3 - 4)
                    throw new g("Binary type with subtype 0x02 contains too short binary size");
                }
                s2 && c2 ? w2 = I.toLocalBufferType(t3.subarray(e3, e3 + r4)) : (w2 = new U(t3.subarray(e3, e3 + r4), i3), 4 === i3 && z.isValid(w2) && (w2 = w2.toUUID())), e3 += r4;
              } else if (11 === d3 && false === a2) {
                for (y3 = e3; 0 !== t3[y3] && y3 < t3.length; )
                  y3++;
                if (y3 >= t3.length)
                  throw new g("Bad BSON Document: illegal CString");
                const r4 = I.toUTF8(t3, e3, y3, false);
                for (y3 = e3 = y3 + 1; 0 !== t3[y3] && y3 < t3.length; )
                  y3++;
                if (y3 >= t3.length)
                  throw new g("Bad BSON Document: illegal CString");
                const n3 = I.toUTF8(t3, e3, y3, false);
                e3 = y3 + 1;
                const i3 = new Array(n3.length);
                for (y3 = 0; y3 < n3.length; y3++)
                  switch (n3[y3]) {
                    case "m":
                      i3[y3] = "m";
                      break;
                    case "s":
                      i3[y3] = "g";
                      break;
                    case "i":
                      i3[y3] = "i";
                  }
                w2 = new RegExp(r4, i3.join(""));
              } else if (11 === d3 && true === a2) {
                for (y3 = e3; 0 !== t3[y3] && y3 < t3.length; )
                  y3++;
                if (y3 >= t3.length)
                  throw new g("Bad BSON Document: illegal CString");
                const r4 = I.toUTF8(t3, e3, y3, false);
                for (y3 = e3 = y3 + 1; 0 !== t3[y3] && y3 < t3.length; )
                  y3++;
                if (y3 >= t3.length)
                  throw new g("Bad BSON Document: illegal CString");
                const n3 = I.toUTF8(t3, e3, y3, false);
                e3 = y3 + 1, w2 = new $t(r4, n3);
              } else if (14 === d3) {
                const r4 = C.getInt32LE(t3, e3);
                if (e3 += 4, r4 <= 0 || r4 > t3.length - e3 || 0 !== t3[e3 + r4 - 1])
                  throw new g("bad string length in bson");
                const n3 = I.toUTF8(t3, e3, e3 + r4 - 1, S2);
                w2 = c2 ? n3 : new Et(n3), e3 += r4;
              } else if (17 === d3)
                w2 = new Pt({ i: C.getUint32LE(t3, e3), t: C.getUint32LE(t3, e3 + 4) }), e3 += 8;
              else if (255 === d3)
                w2 = new gt();
              else if (127 === d3)
                w2 = new vt();
              else if (13 === d3) {
                const r4 = C.getInt32LE(t3, e3);
                if (e3 += 4, r4 <= 0 || r4 > t3.length - e3 || 0 !== t3[e3 + r4 - 1])
                  throw new g("bad string length in bson");
                const n3 = I.toUTF8(t3, e3, e3 + r4 - 1, S2);
                w2 = new K(n3), e3 += r4;
              } else if (15 === d3) {
                const n3 = C.getInt32LE(t3, e3);
                if (e3 += 4, n3 < 13)
                  throw new g("code_w_scope total size shorter minimum expected length");
                const i3 = C.getInt32LE(t3, e3);
                if (e3 += 4, i3 <= 0 || i3 > t3.length - e3 || 0 !== t3[e3 + i3 - 1])
                  throw new g("bad string length in bson");
                const o3 = I.toUTF8(t3, e3, e3 + i3 - 1, S2), a3 = e3 += i3, s3 = C.getInt32LE(t3, e3), u3 = Bt(t3, a3, r3, false);
                if (e3 += s3, n3 < 8 + s3 + i3)
                  throw new g("code_w_scope total size is too short, truncating scope");
                if (n3 > 8 + s3 + i3)
                  throw new g("code_w_scope total size is too long, clips outer document");
                w2 = new K(o3, u3);
              } else {
                if (12 !== d3)
                  throw new g(`Detected unknown BSON type ${d3.toString(16)} for fieldname "${b3}"`);
                {
                  const r4 = C.getInt32LE(t3, e3);
                  if (e3 += 4, r4 <= 0 || r4 > t3.length - e3 || 0 !== t3[e3 + r4 - 1])
                    throw new g("bad string length in bson");
                  const n3 = I.toUTF8(t3, e3, e3 + r4 - 1, S2);
                  e3 += r4;
                  const i3 = I.allocateUnsafe(12);
                  for (let r5 = 0; r5 < 12; r5++)
                    i3[r5] = t3[e3 + r5];
                  const o3 = new St(i3);
                  e3 += 12, w2 = new W(n3, o3);
                }
              }
              "__proto__" === b3 ? Object.defineProperty(m2, b3, { value: w2, writable: true, enumerable: true, configurable: true }) : m2[b3] = w2;
            }
            if (b2 !== e3 - y2) {
              if (n2)
                throw new g("corrupt array bson");
              throw new g("corrupt object bson");
            }
            if (!_2)
              return m2;
            if (H(m2)) {
              const t4 = Object.assign({}, m2);
              return delete t4.$ref, delete t4.$id, delete t4.$db, new W(m2.$ref, m2.$id, m2.$db, t4);
            }
            return m2;
          }
          const It = /\x00/, Rt = /* @__PURE__ */ new Set(["$db", "$ref", "$id", "$clusterTime"]);
          function Nt(t3, e3, r3, n2) {
            t3[n2++] = 2, t3[(n2 = n2 + I.encodeUTF8Into(t3, e3, n2) + 1) - 1] = 0;
            const i2 = I.encodeUTF8Into(t3, r3, n2 + 4);
            return C.setInt32LE(t3, n2, i2 + 1), n2 = n2 + 4 + i2, t3[n2++] = 0, n2;
          }
          function Dt(t3, e3, r3, n2) {
            const i2 = !Object.is(r3, -0) && Number.isSafeInteger(r3) && r3 <= h && r3 >= p ? 16 : 1;
            return t3[n2++] = i2, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2 + (16 === i2 ? C.setInt32LE(t3, n2, r3) : C.setFloat64LE(t3, n2, r3));
          }
          function Lt(t3, e3, r3, n2) {
            return t3[n2++] = 18, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2 + C.setBigInt64LE(t3, n2, r3);
          }
          function Ct(t3, e3, r3, n2) {
            return t3[n2++] = 10, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2;
          }
          function Ut(t3, e3, r3, n2) {
            return t3[n2++] = 8, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, t3[n2++] = r3 ? 1 : 0, n2;
          }
          function qt(t3, e3, r3, n2) {
            t3[n2++] = 9, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = rt.fromNumber(r3.getTime()), o2 = i2.getLowBits(), a2 = i2.getHighBits();
            return (n2 += C.setInt32LE(t3, n2, o2)) + C.setInt32LE(t3, n2, a2);
          }
          function Ft(t3, e3, r3, n2) {
            if (t3[n2++] = 11, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, r3.source && null != r3.source.match(It))
              throw new g("value " + r3.source + " must not contain null bytes");
            return n2 += I.encodeUTF8Into(t3, r3.source, n2), t3[n2++] = 0, r3.ignoreCase && (t3[n2++] = 105), r3.global && (t3[n2++] = 115), r3.multiline && (t3[n2++] = 109), t3[n2++] = 0, n2;
          }
          function Vt(t3, e3, r3, n2) {
            if (t3[n2++] = 11, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, null != r3.pattern.match(It))
              throw new g("pattern " + r3.pattern + " must not contain null bytes");
            n2 += I.encodeUTF8Into(t3, r3.pattern, n2), t3[n2++] = 0;
            const i2 = r3.options.split("").sort().join("");
            return n2 += I.encodeUTF8Into(t3, i2, n2), t3[n2++] = 0, n2;
          }
          function zt(t3, e3, r3, n2) {
            return null === r3 ? t3[n2++] = 10 : "MinKey" === r3._bsontype ? t3[n2++] = 255 : t3[n2++] = 127, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2;
          }
          function Kt(t3, e3, r3, n2) {
            return t3[n2++] = 7, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2 + r3.serializeInto(t3, n2);
          }
          function Ht(t3, e3, r3, n2) {
            t3[n2++] = 5, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = r3.length;
            if (n2 += C.setInt32LE(t3, n2, i2), t3[n2++] = 0, i2 <= 16)
              for (let e4 = 0; e4 < i2; e4++)
                t3[n2 + e4] = r3[e4];
            else
              t3.set(r3, n2);
            return n2 + i2;
          }
          function Wt(t3, e3, r3, n2, i2, o2, a2, s2, u2) {
            if (u2.has(r3))
              throw new g("Cannot convert circular structure to BSON");
            u2.add(r3), t3[n2++] = Array.isArray(r3) ? 4 : 3, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const c2 = ne(t3, r3, i2, n2, o2 + 1, a2, s2, u2);
            return u2.delete(r3), c2;
          }
          function Jt(t3, e3, r3, n2) {
            t3[n2++] = 19, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            for (let e4 = 0; e4 < 16; e4++)
              t3[n2 + e4] = r3.bytes[e4];
            return n2 + 16;
          }
          function Gt(t3, e3, r3, n2) {
            t3[n2++] = "Long" === r3._bsontype ? 18 : 17, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = r3.getLowBits(), o2 = r3.getHighBits();
            return (n2 += C.setInt32LE(t3, n2, i2)) + C.setInt32LE(t3, n2, o2);
          }
          function Yt(t3, e3, r3, n2) {
            return r3 = r3.valueOf(), t3[n2++] = 16, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2 + C.setInt32LE(t3, n2, r3);
          }
          function Qt(t3, e3, r3, n2) {
            return t3[n2++] = 1, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0, n2 + C.setFloat64LE(t3, n2, r3.value);
          }
          function Xt(t3, e3, r3, n2) {
            t3[n2++] = 13, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = r3.toString(), o2 = I.encodeUTF8Into(t3, i2, n2 + 4) + 1;
            return C.setInt32LE(t3, n2, o2), n2 = n2 + 4 + o2 - 1, t3[n2++] = 0, n2;
          }
          function Zt(t3, e3, r3, n2, i2 = false, o2 = 0, a2 = false, s2 = true, u2) {
            if (r3.scope && "object" == typeof r3.scope) {
              t3[n2++] = 15, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
              let c2 = n2;
              const f2 = r3.code;
              n2 += 4;
              const l2 = I.encodeUTF8Into(t3, f2, n2 + 4) + 1;
              C.setInt32LE(t3, n2, l2), t3[n2 + 4 + l2 - 1] = 0, n2 = n2 + l2 + 4;
              const h2 = ne(t3, r3.scope, i2, n2, o2 + 1, a2, s2, u2);
              n2 = h2 - 1;
              const p2 = h2 - c2;
              c2 += C.setInt32LE(t3, c2, p2), t3[n2++] = 0;
            } else {
              t3[n2++] = 13, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
              const i3 = r3.code.toString(), o3 = I.encodeUTF8Into(t3, i3, n2 + 4) + 1;
              C.setInt32LE(t3, n2, o3), n2 = n2 + 4 + o3 - 1, t3[n2++] = 0;
            }
            return n2;
          }
          function te(t3, e3, r3, n2) {
            t3[n2++] = 5, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = r3.buffer;
            let o2 = r3.position;
            if (r3.sub_type === U.SUBTYPE_BYTE_ARRAY && (o2 += 4), n2 += C.setInt32LE(t3, n2, o2), t3[n2++] = r3.sub_type, r3.sub_type === U.SUBTYPE_BYTE_ARRAY && (o2 -= 4, n2 += C.setInt32LE(t3, n2, o2)), r3.sub_type === U.SUBTYPE_VECTOR && q(r3), o2 <= 16)
              for (let e4 = 0; e4 < o2; e4++)
                t3[n2 + e4] = i2[e4];
            else
              t3.set(i2, n2);
            return n2 + r3.position;
          }
          function ee(t3, e3, r3, n2) {
            t3[n2++] = 14, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            const i2 = I.encodeUTF8Into(t3, r3.value, n2 + 4) + 1;
            return C.setInt32LE(t3, n2, i2), n2 = n2 + 4 + i2 - 1, t3[n2++] = 0, n2;
          }
          function re(t3, e3, r3, n2, i2, o2, a2) {
            t3[n2++] = 3, n2 += I.encodeUTF8Into(t3, e3, n2), t3[n2++] = 0;
            let s2 = n2, u2 = { $ref: r3.collection || r3.namespace, $id: r3.oid };
            null != r3.db && (u2.$db = r3.db), u2 = Object.assign(u2, r3.fields);
            const c2 = ne(t3, u2, false, n2, i2 + 1, o2, true, a2), f2 = c2 - s2;
            return s2 += C.setInt32LE(t3, n2, f2), c2;
          }
          function ne(t3, e3, r3, n2, i2, f2, h2, p2) {
            if (null == p2) {
              if (null == e3)
                return t3[0] = 5, t3[1] = 0, t3[2] = 0, t3[3] = 0, t3[4] = 0, 5;
              if (Array.isArray(e3))
                throw new g("serialize does not support an array as the root input");
              if ("object" != typeof e3)
                throw new g("serialize does not support non-object as the root input");
              if ("_bsontype" in e3 && "string" == typeof e3._bsontype)
                throw new g("BSON types cannot be serialized as a document");
              if (c(e3) || s(e3) || o(e3) || a(e3))
                throw new g("date, regexp, typedarray, and arraybuffer cannot be BSON documents");
              p2 = /* @__PURE__ */ new Set();
            }
            p2.add(e3);
            let d2 = n2 + 4;
            if (Array.isArray(e3))
              for (let n3 = 0; n3 < e3.length; n3++) {
                const a2 = `${n3}`;
                let u2 = e3[n3];
                "function" == typeof u2?.toBSON && (u2 = u2.toBSON());
                const y3 = typeof u2;
                if (void 0 === u2)
                  d2 = Ct(t3, a2, 0, d2);
                else if (null === u2)
                  d2 = Ct(t3, a2, 0, d2);
                else if ("string" === y3)
                  d2 = Nt(t3, a2, u2, d2);
                else if ("number" === y3)
                  d2 = Dt(t3, a2, u2, d2);
                else if ("bigint" === y3)
                  d2 = Lt(t3, a2, u2, d2);
                else if ("boolean" === y3)
                  d2 = Ut(t3, a2, u2, d2);
                else if ("object" === y3 && null == u2._bsontype)
                  d2 = u2 instanceof Date || c(u2) ? qt(t3, a2, u2, d2) : u2 instanceof Uint8Array || o(u2) ? Ht(t3, a2, u2, d2) : u2 instanceof RegExp || s(u2) ? Ft(t3, a2, u2, d2) : Wt(t3, a2, u2, d2, r3, i2, f2, h2, p2);
                else if ("object" === y3) {
                  if (6 !== u2[l])
                    throw new _();
                  if ("ObjectId" === u2._bsontype)
                    d2 = Kt(t3, a2, u2, d2);
                  else if ("Decimal128" === u2._bsontype)
                    d2 = Jt(t3, a2, u2, d2);
                  else if ("Long" === u2._bsontype || "Timestamp" === u2._bsontype)
                    d2 = Gt(t3, a2, u2, d2);
                  else if ("Double" === u2._bsontype)
                    d2 = Qt(t3, a2, u2, d2);
                  else if ("Code" === u2._bsontype)
                    d2 = Zt(t3, a2, u2, d2, r3, i2, f2, h2, p2);
                  else if ("Binary" === u2._bsontype)
                    d2 = te(t3, a2, u2, d2);
                  else if ("BSONSymbol" === u2._bsontype)
                    d2 = ee(t3, a2, u2, d2);
                  else if ("DBRef" === u2._bsontype)
                    d2 = re(t3, a2, u2, d2, i2, f2, p2);
                  else if ("BSONRegExp" === u2._bsontype)
                    d2 = Vt(t3, a2, u2, d2);
                  else if ("Int32" === u2._bsontype)
                    d2 = Yt(t3, a2, u2, d2);
                  else if ("MinKey" === u2._bsontype || "MaxKey" === u2._bsontype)
                    d2 = zt(t3, a2, u2, d2);
                  else if (void 0 !== u2._bsontype)
                    throw new g(`Unrecognized or invalid _bsontype: ${String(u2._bsontype)}`);
                } else
                  "function" === y3 && f2 && (d2 = Xt(t3, a2, u2, d2));
              }
            else if (e3 instanceof Map || u(e3)) {
              const n3 = e3.entries();
              let a2 = false;
              for (; !a2; ) {
                const e4 = n3.next();
                if (a2 = !!e4.done, a2)
                  continue;
                const u2 = e4.value[0];
                let y3 = e4.value[1];
                "function" == typeof y3?.toBSON && (y3 = y3.toBSON());
                const b2 = typeof y3;
                if ("string" == typeof u2 && !Rt.has(u2)) {
                  if (null != u2.match(It))
                    throw new g("key " + u2 + " must not contain null bytes");
                  if (r3) {
                    if ("$" === u2[0])
                      throw new g("key " + u2 + " must not start with '$'");
                    if (u2.includes("."))
                      throw new g("key " + u2 + " must not contain '.'");
                  }
                }
                if (void 0 === y3)
                  false === h2 && (d2 = Ct(t3, u2, 0, d2));
                else if (null === y3)
                  d2 = Ct(t3, u2, 0, d2);
                else if ("string" === b2)
                  d2 = Nt(t3, u2, y3, d2);
                else if ("number" === b2)
                  d2 = Dt(t3, u2, y3, d2);
                else if ("bigint" === b2)
                  d2 = Lt(t3, u2, y3, d2);
                else if ("boolean" === b2)
                  d2 = Ut(t3, u2, y3, d2);
                else if ("object" === b2 && null == y3._bsontype)
                  d2 = y3 instanceof Date || c(y3) ? qt(t3, u2, y3, d2) : y3 instanceof Uint8Array || o(y3) ? Ht(t3, u2, y3, d2) : y3 instanceof RegExp || s(y3) ? Ft(t3, u2, y3, d2) : Wt(t3, u2, y3, d2, r3, i2, f2, h2, p2);
                else if ("object" === b2) {
                  if (6 !== y3[l])
                    throw new _();
                  if ("ObjectId" === y3._bsontype)
                    d2 = Kt(t3, u2, y3, d2);
                  else if ("Decimal128" === y3._bsontype)
                    d2 = Jt(t3, u2, y3, d2);
                  else if ("Long" === y3._bsontype || "Timestamp" === y3._bsontype)
                    d2 = Gt(t3, u2, y3, d2);
                  else if ("Double" === y3._bsontype)
                    d2 = Qt(t3, u2, y3, d2);
                  else if ("Code" === y3._bsontype)
                    d2 = Zt(t3, u2, y3, d2, r3, i2, f2, h2, p2);
                  else if ("Binary" === y3._bsontype)
                    d2 = te(t3, u2, y3, d2);
                  else if ("BSONSymbol" === y3._bsontype)
                    d2 = ee(t3, u2, y3, d2);
                  else if ("DBRef" === y3._bsontype)
                    d2 = re(t3, u2, y3, d2, i2, f2, p2);
                  else if ("BSONRegExp" === y3._bsontype)
                    d2 = Vt(t3, u2, y3, d2);
                  else if ("Int32" === y3._bsontype)
                    d2 = Yt(t3, u2, y3, d2);
                  else if ("MinKey" === y3._bsontype || "MaxKey" === y3._bsontype)
                    d2 = zt(t3, u2, y3, d2);
                  else if (void 0 !== y3._bsontype)
                    throw new g(`Unrecognized or invalid _bsontype: ${String(y3._bsontype)}`);
                } else
                  "function" === b2 && f2 && (d2 = Xt(t3, u2, y3, d2));
              }
            } else {
              if ("function" == typeof e3?.toBSON && null != (e3 = e3.toBSON()) && "object" != typeof e3)
                throw new g("toBSON function did not return an object");
              for (const n3 of Object.keys(e3)) {
                let a2 = e3[n3];
                "function" == typeof a2?.toBSON && (a2 = a2.toBSON());
                const u2 = typeof a2;
                if ("string" == typeof n3 && !Rt.has(n3)) {
                  if (null != n3.match(It))
                    throw new g("key " + n3 + " must not contain null bytes");
                  if (r3) {
                    if ("$" === n3[0])
                      throw new g("key " + n3 + " must not start with '$'");
                    if (n3.includes("."))
                      throw new g("key " + n3 + " must not contain '.'");
                  }
                }
                if (void 0 === a2)
                  false === h2 && (d2 = Ct(t3, n3, 0, d2));
                else if (null === a2)
                  d2 = Ct(t3, n3, 0, d2);
                else if ("string" === u2)
                  d2 = Nt(t3, n3, a2, d2);
                else if ("number" === u2)
                  d2 = Dt(t3, n3, a2, d2);
                else if ("bigint" === u2)
                  d2 = Lt(t3, n3, a2, d2);
                else if ("boolean" === u2)
                  d2 = Ut(t3, n3, a2, d2);
                else if ("object" === u2 && null == a2._bsontype)
                  d2 = a2 instanceof Date || c(a2) ? qt(t3, n3, a2, d2) : a2 instanceof Uint8Array || o(a2) ? Ht(t3, n3, a2, d2) : a2 instanceof RegExp || s(a2) ? Ft(t3, n3, a2, d2) : Wt(t3, n3, a2, d2, r3, i2, f2, h2, p2);
                else if ("object" === u2) {
                  if (6 !== a2[l])
                    throw new _();
                  if ("ObjectId" === a2._bsontype)
                    d2 = Kt(t3, n3, a2, d2);
                  else if ("Decimal128" === a2._bsontype)
                    d2 = Jt(t3, n3, a2, d2);
                  else if ("Long" === a2._bsontype || "Timestamp" === a2._bsontype)
                    d2 = Gt(t3, n3, a2, d2);
                  else if ("Double" === a2._bsontype)
                    d2 = Qt(t3, n3, a2, d2);
                  else if ("Code" === a2._bsontype)
                    d2 = Zt(t3, n3, a2, d2, r3, i2, f2, h2, p2);
                  else if ("Binary" === a2._bsontype)
                    d2 = te(t3, n3, a2, d2);
                  else if ("BSONSymbol" === a2._bsontype)
                    d2 = ee(t3, n3, a2, d2);
                  else if ("DBRef" === a2._bsontype)
                    d2 = re(t3, n3, a2, d2, i2, f2, p2);
                  else if ("BSONRegExp" === a2._bsontype)
                    d2 = Vt(t3, n3, a2, d2);
                  else if ("Int32" === a2._bsontype)
                    d2 = Yt(t3, n3, a2, d2);
                  else if ("MinKey" === a2._bsontype || "MaxKey" === a2._bsontype)
                    d2 = zt(t3, n3, a2, d2);
                  else if (void 0 !== a2._bsontype)
                    throw new g(`Unrecognized or invalid _bsontype: ${String(a2._bsontype)}`);
                } else
                  "function" === u2 && f2 && (d2 = Xt(t3, n3, a2, d2));
              }
            }
            p2.delete(e3), t3[d2++] = 0;
            const y2 = d2 - n2;
            return n2 += C.setInt32LE(t3, n2, y2), d2;
          }
          const ie = { $oid: St, $binary: U, $uuid: U, $symbol: Et, $numberInt: mt, $numberDecimal: yt, $numberDouble: bt, $numberLong: rt, $minKey: gt, $maxKey: vt, $regex: $t, $regularExpression: $t, $timestamp: Pt };
          function oe(t3, e3 = {}) {
            if ("number" == typeof t3) {
              const r4 = t3 <= h && t3 >= p, n2 = t3 <= d && t3 >= y;
              if (e3.relaxed || e3.legacy)
                return t3;
              if (Number.isInteger(t3) && !Object.is(t3, -0)) {
                if (r4)
                  return new mt(t3);
                if (n2)
                  return e3.useBigInt64 ? BigInt(t3) : rt.fromNumber(t3);
              }
              return new bt(t3);
            }
            if (null == t3 || "object" != typeof t3)
              return t3;
            if (t3.$undefined)
              return null;
            const r3 = Object.keys(t3).filter((e4) => e4.startsWith("$") && null != t3[e4]);
            for (let n2 = 0; n2 < r3.length; n2++) {
              const i2 = ie[r3[n2]];
              if (i2)
                return i2.fromExtendedJSON(t3, e3);
            }
            if (null != t3.$date) {
              const r4 = t3.$date, n2 = /* @__PURE__ */ new Date();
              if (e3.legacy)
                if ("number" == typeof r4)
                  n2.setTime(r4);
                else if ("string" == typeof r4)
                  n2.setTime(Date.parse(r4));
                else {
                  if ("bigint" != typeof r4)
                    throw new w("Unrecognized type for EJSON date: " + typeof r4);
                  n2.setTime(Number(r4));
                }
              else if ("string" == typeof r4)
                n2.setTime(Date.parse(r4));
              else if (rt.isLong(r4))
                n2.setTime(r4.toNumber());
              else if ("number" == typeof r4 && e3.relaxed)
                n2.setTime(r4);
              else {
                if ("bigint" != typeof r4)
                  throw new w("Unrecognized type for EJSON date: " + typeof r4);
                n2.setTime(Number(r4));
              }
              return n2;
            }
            if (null != t3.$code) {
              const e4 = Object.assign({}, t3);
              return t3.$scope && (e4.$scope = oe(t3.$scope)), K.fromExtendedJSON(t3);
            }
            if (H(t3) || t3.$dbPointer) {
              const e4 = t3.$ref ? t3 : t3.$dbPointer;
              if (e4 instanceof W)
                return e4;
              const r4 = Object.keys(e4).filter((t4) => t4.startsWith("$"));
              let n2 = true;
              if (r4.forEach((t4) => {
                -1 === ["$ref", "$id", "$db"].indexOf(t4) && (n2 = false);
              }), n2)
                return W.fromExtendedJSON(e4);
            }
            return t3;
          }
          function ae(t3) {
            const e3 = t3.toISOString();
            return 0 !== t3.getUTCMilliseconds() ? e3 : e3.slice(0, -5) + "Z";
          }
          function se(t3, e3) {
            if (t3 instanceof Map || u(t3)) {
              const r3 = /* @__PURE__ */ Object.create(null);
              for (const [e4, n2] of t3) {
                if ("string" != typeof e4)
                  throw new g("Can only serialize maps with string keys");
                r3[e4] = n2;
              }
              return se(r3, e3);
            }
            if (("object" == typeof t3 || "function" == typeof t3) && null !== t3) {
              const r3 = e3.seenObjects.findIndex((e4) => e4.obj === t3);
              if (-1 !== r3) {
                const t4 = e3.seenObjects.map((t5) => t5.propertyName), n2 = t4.slice(0, r3).map((t5) => `${t5} -> `).join(""), i2 = t4[r3], o2 = " -> " + t4.slice(r3 + 1, t4.length - 1).map((t5) => `${t5} -> `).join(""), a2 = t4[t4.length - 1], s2 = " ".repeat(n2.length + i2.length / 2), u2 = "-".repeat(o2.length + (i2.length + a2.length) / 2 - 1);
                throw new g(`Converting circular structure to EJSON:
    ${n2}${i2}${o2}${a2}
    ${s2}\\${u2}/`);
              }
              e3.seenObjects[e3.seenObjects.length - 1].obj = t3;
            }
            if (Array.isArray(t3))
              return function(t4, e4) {
                return t4.map((t5, r3) => {
                  e4.seenObjects.push({ propertyName: `index ${r3}`, obj: null });
                  try {
                    return se(t5, e4);
                  } finally {
                    e4.seenObjects.pop();
                  }
                });
              }(t3, e3);
            if (void 0 === t3)
              return null;
            if (t3 instanceof Date || c(t3)) {
              const r3 = t3.getTime(), n2 = r3 > -1 && r3 < 2534023188e5;
              return e3.legacy ? e3.relaxed && n2 ? { $date: t3.getTime() } : { $date: ae(t3) } : e3.relaxed && n2 ? { $date: ae(t3) } : { $date: { $numberLong: t3.getTime().toString() } };
            }
            if (!("number" != typeof t3 || e3.relaxed && isFinite(t3))) {
              if (Number.isInteger(t3) && !Object.is(t3, -0)) {
                if (t3 >= p && t3 <= h)
                  return { $numberInt: t3.toString() };
                if (t3 >= y && t3 <= d)
                  return { $numberLong: t3.toString() };
              }
              return { $numberDouble: Object.is(t3, -0) ? "-0.0" : t3.toString() };
            }
            if ("bigint" == typeof t3)
              return e3.relaxed ? Number(BigInt.asIntN(64, t3)) : { $numberLong: BigInt.asIntN(64, t3).toString() };
            if (t3 instanceof RegExp || s(t3)) {
              let r3 = t3.flags;
              if (void 0 === r3) {
                const e4 = t3.toString().match(/[gimuy]*$/);
                e4 && (r3 = e4[0]);
              }
              return new $t(t3.source, r3).toExtendedJSON(e3);
            }
            return null != t3 && "object" == typeof t3 ? function(t4, e4) {
              if (null == t4 || "object" != typeof t4)
                throw new g("not an object instance");
              const r3 = t4._bsontype;
              if (void 0 === r3) {
                const r4 = {};
                for (const n2 of Object.keys(t4)) {
                  e4.seenObjects.push({ propertyName: n2, obj: null });
                  try {
                    const i2 = se(t4[n2], e4);
                    "__proto__" === n2 ? Object.defineProperty(r4, n2, { value: i2, writable: true, enumerable: true, configurable: true }) : r4[n2] = i2;
                  } finally {
                    e4.seenObjects.pop();
                  }
                }
                return r4;
              }
              if (null != t4 && "object" == typeof t4 && "string" == typeof t4._bsontype && 6 !== t4[l])
                throw new _();
              if (function(t5) {
                return null != t5 && "object" == typeof t5 && "_bsontype" in t5 && "string" == typeof t5._bsontype;
              }(t4)) {
                let n2 = t4;
                if ("function" != typeof n2.toExtendedJSON) {
                  const e5 = ue[t4._bsontype];
                  if (!e5)
                    throw new g("Unrecognized or invalid _bsontype: " + t4._bsontype);
                  n2 = e5(n2);
                }
                return "Code" === r3 && n2.scope ? n2 = new K(n2.code, se(n2.scope, e4)) : "DBRef" === r3 && n2.oid && (n2 = new W(se(n2.collection, e4), se(n2.oid, e4), se(n2.db, e4), se(n2.fields, e4))), n2.toExtendedJSON(e4);
              }
              throw new g("_bsontype must be a string, but was: " + typeof r3);
            }(t3, e3) : t3;
          }
          const ue = { Binary: (t3) => new U(t3.value(), t3.sub_type), Code: (t3) => new K(t3.code, t3.scope), DBRef: (t3) => new W(t3.collection || t3.namespace, t3.oid, t3.db, t3.fields), Decimal128: (t3) => new yt(t3.bytes), Double: (t3) => new bt(t3.value), Int32: (t3) => new mt(t3.value), Long: (t3) => rt.fromBits(null != t3.low ? t3.low : t3.low_, null != t3.low ? t3.high : t3.high_, null != t3.low ? t3.unsigned : t3.unsigned_), MaxKey: () => new vt(), MinKey: () => new gt(), ObjectId: (t3) => new St(t3), BSONRegExp: (t3) => new $t(t3.pattern, t3.options), BSONSymbol: (t3) => new Et(t3.value), Timestamp: (t3) => Pt.fromBits(t3.low, t3.high) };
          function ce(t3, e3) {
            const r3 = { useBigInt64: e3?.useBigInt64 ?? false, relaxed: e3?.relaxed ?? true, legacy: e3?.legacy ?? false };
            return JSON.parse(t3, (t4, e4) => {
              if (-1 !== t4.indexOf("\0"))
                throw new g(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(t4)}`);
              return oe(e4, r3);
            });
          }
          function fe(t3, e3, r3, n2) {
            null != r3 && "object" == typeof r3 && (n2 = r3, r3 = 0), null == e3 || "object" != typeof e3 || Array.isArray(e3) || (n2 = e3, e3 = void 0, r3 = 0);
            const i2 = se(t3, Object.assign({ relaxed: true, legacy: false }, n2, { seenObjects: [{ propertyName: "(root)", obj: null }] }));
            return JSON.stringify(i2, e3, r3);
          }
          const le = /* @__PURE__ */ Object.create(null);
          function he(t3, e3) {
            try {
              return C.getNonnegativeInt32LE(t3, e3);
            } catch (t4) {
              throw new S("BSON size cannot be negative", e3, { cause: t4 });
            }
          }
          function pe(t3, e3) {
            let r3 = e3;
            for (; 0 !== t3[r3]; r3++)
              ;
            if (r3 === t3.length - 1)
              throw new S("Null terminator not found", e3);
            return r3;
          }
          le.parse = ce, le.stringify = fe, le.serialize = function(t3, e3) {
            return e3 = e3 || {}, JSON.parse(fe(t3, e3));
          }, le.deserialize = function(t3, e3) {
            return e3 = e3 || {}, ce(JSON.stringify(t3), e3);
          }, Object.freeze(le);
          const de = /* @__PURE__ */ Object.create(null);
          de.parseToElements = function(t3, e3 = 0) {
            if (e3 ??= 0, t3.length < 5)
              throw new S(`Input must be at least 5 bytes, got ${t3.length} bytes`, e3);
            const r3 = he(t3, e3);
            if (r3 > t3.length - e3)
              throw new S(`Parsed documentSize (${r3} bytes) does not match input length (${t3.length} bytes)`, e3);
            if (0 !== t3[e3 + r3 - 1])
              throw new S("BSON documents must end in 0x00", e3 + r3);
            const n2 = [];
            let i2 = e3 + 4;
            for (; i2 <= r3 + e3; ) {
              const o2 = t3[i2];
              if (i2 += 1, 0 === o2) {
                if (i2 - e3 !== r3)
                  throw new S("Invalid 0x00 type byte", i2);
                break;
              }
              const a2 = i2, s2 = pe(t3, i2) - a2;
              let u2;
              if (i2 += s2 + 1, 1 === o2 || 18 === o2 || 9 === o2 || 17 === o2)
                u2 = 8;
              else if (16 === o2)
                u2 = 4;
              else if (7 === o2)
                u2 = 12;
              else if (19 === o2)
                u2 = 16;
              else if (8 === o2)
                u2 = 1;
              else if (10 === o2 || 6 === o2 || 127 === o2 || 255 === o2)
                u2 = 0;
              else if (11 === o2)
                u2 = pe(t3, pe(t3, i2) + 1) + 1 - i2;
              else if (3 === o2 || 4 === o2 || 15 === o2)
                u2 = he(t3, i2);
              else {
                if (2 !== o2 && 5 !== o2 && 12 !== o2 && 13 !== o2 && 14 !== o2)
                  throw new S(`Invalid 0x${o2.toString(16).padStart(2, "0")} type byte`, i2);
                u2 = he(t3, i2) + 4, 5 === o2 && (u2 += 1), 12 === o2 && (u2 += 12);
              }
              if (u2 > r3)
                throw new S("value reports length larger than document", i2);
              n2.push([o2, a2, s2, i2, u2]), i2 += u2;
            }
            return n2;
          }, de.ByteUtils = I, de.NumberUtils = C, Object.freeze(de);
          const ye = 17825792;
          let be = I.allocate(ye);
          function me(t3) {
            be.length < t3 && (be = I.allocate(t3));
          }
          function ve(t3, e3 = {}) {
            const r3 = "boolean" == typeof e3.checkKeys && e3.checkKeys, n2 = "boolean" == typeof e3.serializeFunctions && e3.serializeFunctions, i2 = "boolean" != typeof e3.ignoreUndefined || e3.ignoreUndefined, o2 = "number" == typeof e3.minInternalBufferSize ? e3.minInternalBufferSize : ye;
            be.length < o2 && (be = I.allocate(o2));
            const a2 = ne(be, t3, r3, 0, 0, n2, i2, null), s2 = I.allocateUnsafe(a2);
            return s2.set(be.subarray(0, a2), 0), s2;
          }
          function ge(t3, e3, r3 = {}) {
            const n2 = "boolean" == typeof r3.checkKeys && r3.checkKeys, i2 = "boolean" == typeof r3.serializeFunctions && r3.serializeFunctions, o2 = "boolean" != typeof r3.ignoreUndefined || r3.ignoreUndefined, a2 = "number" == typeof r3.index ? r3.index : 0, s2 = ne(be, t3, n2, 0, 0, i2, o2, null);
            return e3.set(be.subarray(0, s2), a2), a2 + s2 - 1;
          }
          function _e(t3, e3 = {}) {
            return Mt(I.toLocalBufferType(t3), e3);
          }
          function we(t3, e3 = {}) {
            return Ot(t3, "boolean" == typeof (e3 = e3 || {}).serializeFunctions && e3.serializeFunctions, "boolean" != typeof e3.ignoreUndefined || e3.ignoreUndefined);
          }
          function Se(t3, e3, r3, n2, i2, o2) {
            const a2 = Object.assign({ allowObjectSmallerThanBufferSize: true, index: 0 }, o2), s2 = I.toLocalBufferType(t3);
            let u2 = e3;
            for (let t4 = 0; t4 < r3; t4++) {
              const e4 = C.getInt32LE(s2, u2);
              a2.index = u2, n2[i2 + t4] = Mt(s2, a2), u2 += e4;
            }
            return u2;
          }
          var Oe = Object.freeze({ __proto__: null, BSONError: g, BSONOffsetError: S, BSONRegExp: $t, BSONRuntimeError: w, BSONSymbol: Et, BSONType: v, BSONValue: R, BSONVersionError: _, Binary: U, Code: K, DBRef: W, Decimal128: yt, Double: bt, EJSON: le, Int32: mt, Long: rt, MaxKey: vt, MinKey: gt, ObjectId: St, Timestamp: Pt, UUID: z, calculateObjectSize: we, deserialize: _e, deserializeStream: Se, onDemand: de, serialize: ve, serializeWithBufferAndIndex: ge, setInternalBufferSize: me });
          e2.BSON = Oe, e2.BSONError = g, e2.BSONOffsetError = S, e2.BSONRegExp = $t, e2.BSONRuntimeError = w, e2.BSONSymbol = Et, e2.BSONType = v, e2.BSONValue = R, e2.BSONVersionError = _, e2.Binary = U, e2.Code = K, e2.DBRef = W, e2.Decimal128 = yt, e2.Double = bt, e2.EJSON = le, e2.Int32 = mt, e2.Long = rt, e2.MaxKey = vt, e2.MinKey = gt, e2.ObjectId = St, e2.Timestamp = Pt, e2.UUID = z, e2.calculateObjectSize = we, e2.deserialize = _e, e2.deserializeStream = Se, e2.onDemand = de, e2.serialize = ve, e2.serializeWithBufferAndIndex = ge, e2.setInternalBufferSize = me;
        }, 3219: (t2) => {
          "use strict";
          t2.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
        }, 2951: (t2) => {
          "use strict";
          t2.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
        }, 4589: (t2) => {
          "use strict";
          t2.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
        }, 3241: (t2) => {
          "use strict";
          t2.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
        }, 1636: (t2) => {
          "use strict";
          t2.exports = { rE: "6.6.1" };
        }, 5579: (t2) => {
          "use strict";
          t2.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
        } }, e = {};
        function r(n) {
          var i = e[n];
          if (void 0 !== i)
            return i.exports;
          var o = e[n] = { id: n, loaded: false, exports: {} };
          return t[n].call(o.exports, o, o.exports, r), o.loaded = true, o.exports;
        }
        return r.g = function() {
          if ("object" == typeof globalThis)
            return globalThis;
          try {
            return this || new Function("return this")();
          } catch (t2) {
            if ("object" == typeof window)
              return window;
          }
        }(), r.nmd = (t2) => (t2.paths = [], t2.children || (t2.children = []), t2), r(4829);
      })());
    }
  });

  // node_modules/@xyflow/react/dist/esm/index.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var import_react2 = __toESM(require_react());

  // node_modules/classcat/index.js
  function cc(names) {
    if (typeof names === "string" || typeof names === "number")
      return "" + names;
    let out = "";
    if (Array.isArray(names)) {
      for (let i = 0, tmp; i < names.length; i++) {
        if ((tmp = cc(names[i])) !== "") {
          out += (out && " ") + tmp;
        }
      }
    } else {
      for (let k in names) {
        if (names[k])
          out += (out && " ") + k;
      }
    }
    return out;
  }

  // node_modules/d3-dispatch/src/dispatch.js
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
      if (arguments.length < 2) {
        while (++i < n)
          if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
            return t;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type)
          _[t] = set(_[t], typename.name, callback);
        else if (callback == null)
          for (t in _)
            _[t] = set(_[t], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy = {}, _ = this._;
      for (var t in _)
        copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function(type, that) {
      if ((n = arguments.length - 2) > 0)
        for (var args = new Array(n), i = 0, n, t; i < n; ++i)
          args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (t = this._[type], i = 0, n = t.length; i < n; ++i)
        t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
        t[i].value.apply(that, args);
    }
  };
  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }
  function set(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null)
      type.push({ name, value: callback });
    return type;
  }
  var dispatch_default = dispatch;

  // node_modules/d3-selection/src/namespaces.js
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix3 = name += "", i = prefix3.indexOf(":");
    if (i >= 0 && (prefix3 = name.slice(0, i)) !== "xmlns")
      name = name.slice(i + 1);
    return namespaces_default.hasOwnProperty(prefix3) ? { space: namespaces_default[prefix3], local: name } : name;
  }

  // node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  // node_modules/d3-selection/src/selection/select.js
  function select_default(select) {
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/array.js
  function array(x) {
    return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
  }

  // node_modules/d3-selection/src/selectorAll.js
  function empty() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    if (typeof select === "function")
      select = arrayAll(select);
    else
      select = selectorAll_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          subgroups.push(select.call(node, node.__data__, i, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectChild.js
  var find = Array.prototype.find;
  function childFind(match) {
    return function() {
      return find.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/selectChildren.js
  var filter = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update2) {
    return new Array(update2.length);
  }

  // node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  // node_modules/d3-selection/src/constant.js
  function constant_default(x) {
    return function() {
      return x;
    };
  }

  // node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter2, update2, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    for (; i < dataLength; ++i) {
      if (node = group[i]) {
        node.__data__ = data[i];
        update2[i] = node;
      } else {
        enter2[i] = new EnterNode(parent, data[i]);
      }
    }
    for (; i < groupLength; ++i) {
      if (node = group[i]) {
        exit[i] = node;
      }
    }
  }
  function bindKey(parent, group, enter2, update2, exit, data, key) {
    var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i) {
      if (node = group[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent, data[i], i, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update2[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter2[i] = new EnterNode(parent, data[i]);
      }
    }
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m = groups.length, update2 = new Array(m), enter2 = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter2[j] = new Array(dataLength), updateGroup = update2[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update2 = new Selection(update2, parents);
    update2._enter = enter2;
    update2._exit = exit;
    return update2;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }

  // node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter2 = this.enter(), update2 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter2 = onenter(enter2);
      if (enter2)
        enter2 = enter2.selection();
    } else {
      enter2 = enter2.append(onenter + "");
    }
    if (onupdate != null) {
      update2 = onupdate(update2);
      if (update2)
        update2 = update2.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter2 && update2 ? enter2.merge(update2).order() : update2;
  }

  // node_modules/d3-selection/src/selection/merge.js
  function merge_default(context4) {
    var selection2 = context4.selection ? context4.selection() : context4;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
  }

  // node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    if (!compare)
      compare = ascending;
    function compareNode(a, b) {
      return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }
    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  // node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }

  // node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node)
          return node;
      }
    }
    return null;
  }

  // node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size = 0;
    for (const node of this)
      ++size;
    return size;
  }

  // node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }

  // node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i])
          callback.call(node, node.__data__, i, group);
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name, value) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }

  // node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }

  // node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }
  function styleFunction(name, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v, priority);
    };
  }
  function style_default(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  // node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }
  function propertyFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        delete this[name];
      else
        this[name] = v;
    };
  }
  function property_default(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }

  // node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name) {
      var i = this._names.indexOf(name);
      if (i < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i = this._names.indexOf(name);
      if (i >= 0) {
        this._names.splice(i, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.add(names[i]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.remove(names[i]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i = -1, n = names.length;
      while (++i < n)
        if (!list.contains(names[i]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }

  // node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }

  // node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }

  // node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // node_modules/d3-selection/src/selection/append.js
  function append_default(name) {
    var create3 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create3.apply(this, arguments));
    });
  }

  // node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create3 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create3.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  // node_modules/d3-selection/src/selection/remove.js
  function remove() {
    var parent = this.parentNode;
    if (parent)
      parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove);
  }

  // node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // node_modules/d3-selection/src/selection/datum.js
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }

  // node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
      return { type: t, name };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on[++i] = o;
        }
      }
      if (++i)
        on.length = i;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o, listener = contextListener(value);
      if (on)
        for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o];
      else
        on.push(o);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd : onRemove;
    for (i = 0; i < n; ++i)
      this.each(on(typenames[i], value, options));
    return this;
  }

  // node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }
  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
  }

  // node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i])
          yield node;
      }
    }
  }

  // node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;

  // node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }

  // node_modules/d3-selection/src/sourceEvent.js
  function sourceEvent_default(event) {
    let sourceEvent;
    while (sourceEvent = event.sourceEvent)
      event = sourceEvent;
    return event;
  }

  // node_modules/d3-selection/src/pointer.js
  function pointer_default(event, node) {
    event = sourceEvent_default(event);
    if (node === void 0)
      node = event.currentTarget;
    if (node) {
      var svg = node.ownerSVGElement || node;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [point.x, point.y];
      }
      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }

  // node_modules/d3-drag/src/noevent.js
  var nonpassive = { passive: false };
  var nonpassivecapture = { capture: true, passive: false };
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/d3-drag/src/nodrag.js
  function nodrag_default(view) {
    var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
    if ("onselectstart" in root2) {
      selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
    } else {
      root2.__noselect = root2.style.MozUserSelect;
      root2.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
    if (noclick) {
      selection2.on("click.drag", noevent_default, nonpassivecapture);
      setTimeout(function() {
        selection2.on("click.drag", null);
      }, 0);
    }
    if ("onselectstart" in root2) {
      selection2.on("selectstart.drag", null);
    } else {
      root2.style.MozUserSelect = root2.__noselect;
      delete root2.__noselect;
    }
  }

  // node_modules/d3-drag/src/constant.js
  var constant_default2 = (x) => () => x;

  // node_modules/d3-drag/src/event.js
  function DragEvent(type, {
    sourceEvent,
    subject,
    target,
    identifier,
    active,
    x,
    y,
    dx,
    dy,
    dispatch: dispatch2
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      subject: { value: subject, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      identifier: { value: identifier, enumerable: true, configurable: true },
      active: { value: active, enumerable: true, configurable: true },
      x: { value: x, enumerable: true, configurable: true },
      y: { value: y, enumerable: true, configurable: true },
      dx: { value: dx, enumerable: true, configurable: true },
      dy: { value: dy, enumerable: true, configurable: true },
      _: { value: dispatch2 }
    });
  }
  DragEvent.prototype.on = function() {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
  };

  // node_modules/d3-drag/src/drag.js
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d) {
    return d == null ? { x: event.x, y: event.y } : d;
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection2) {
      selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
      if (touchending || !filter2.call(this, event, d))
        return;
      var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
      if (!gesture)
        return;
      select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      nodrag_default(event.view);
      nopropagation(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }
    function mousemoved(event) {
      noevent_default(event);
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default2(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent_default(event);
      gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
      if (!filter2.call(this, event, d))
        return;
      var touches = event.changedTouches, c = container.call(this, event, d), n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
          nopropagation(event);
          gesture("start", event, touches[i]);
        }
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent_default(event);
          gesture("drag", event, touches[i]);
        }
      }
    }
    function touchended(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, 500);
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation(event);
          gesture("end", event, touches[i]);
        }
      }
    }
    function beforestart(that, container2, event, d, identifier, touch) {
      var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
      if ((s = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier,
        active,
        x: p[0],
        y: p[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch2
      }), d)) == null)
        return;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return function gesture(type, event2, touch2) {
        var p0 = p, n;
        switch (type) {
          case "start":
            gestures[identifier] = gesture, n = active++;
            break;
          case "end":
            delete gestures[identifier], --active;
          case "drag":
            p = pointer_default(touch2 || event2, container2), n = active;
            break;
        }
        dispatch2.call(
          type,
          that,
          new DragEvent(type, {
            sourceEvent: event2,
            subject: s,
            target: drag,
            identifier,
            active: n,
            x: p[0] + dx,
            y: p[1] + dy,
            dx: p[0] - p0[0],
            dy: p[1] - p0[1],
            dispatch: dispatch2
          }),
          d
        );
      };
    }
    drag.filter = function(_) {
      return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default2(!!_), drag) : filter2;
    };
    drag.container = function(_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant_default2(_), drag) : container;
    };
    drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default2(_), drag) : subject;
    };
    drag.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default2(!!_), drag) : touchable;
    };
    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };
    drag.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
  }

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r, g, b, a) {
    if (a <= 0)
      r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s, l, a) {
    if (a <= 0)
      h = s = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s = NaN;
    else if (s <= 0)
      h = NaN;
    return new Hsl(h, s, l, a);
  }
  function hslConvert(o) {
    if (o instanceof Hsl)
      return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Hsl();
    if (o instanceof Hsl)
      return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
    if (s) {
      if (r === max2)
        h = (g - b) / s + (g < b) * 6;
      else if (g === max2)
        h = (b - r) / s + 2;
      else
        h = (r - g) / s + 4;
      s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
        hsl2rgb(h, m1, m2),
        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a = clampa(this.opacity);
      return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/d3-interpolate/src/basis.js
  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  var constant_default3 = (x) => () => x;

  // node_modules/d3-interpolate/src/color.js
  function linear(a, d) {
    return function(t) {
      return a + t * d;
    };
  }
  function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
      return Math.pow(a + t * b, y);
    };
  }
  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
      return b - a ? exponential(a, b, y) : constant_default3(isNaN(a) ? b : a);
    };
  }
  function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : constant_default3(isNaN(a) ? b : a);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y) {
    var color2 = gamma(y);
    function rgb2(start4, end3) {
      var r = color2((start4 = rgb(start4)).r, (end3 = rgb(end3)).r), g = color2(start4.g, end3.g), b = color2(start4.b, end3.b), opacity = nogamma(start4.opacity, end3.opacity);
      return function(t) {
        start4.r = r(t);
        start4.g = g(t);
        start4.b = b(t);
        start4.opacity = opacity(t);
        return start4 + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
      for (i = 0; i < n; ++i) {
        color2 = rgb(colors[i]);
        r[i] = color2.r || 0;
        g[i] = color2.g || 0;
        b[i] = color2.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color2.opacity = 1;
      return function(t) {
        color2.r = r(t);
        color2.g = g(t);
        color2.b = b(t);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // node_modules/d3-interpolate/src/number.js
  function number_default(a, b) {
    return a = +a, b = +b, function(t) {
      return a * (1 - t) + b * t;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero(b) {
    return function() {
      return b;
    };
  }
  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i])
          s[i] += bs;
        else
          s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i])
          s[i] += bm;
        else
          s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({ i, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2)
        s[(o = q[i2]).i] = o.x(t);
      return s.join("");
    });
  }

  // node_modules/d3-interpolate/src/transform/decompose.js
  var degrees = 180 / Math.PI;
  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b))
      a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d)
      c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d))
      c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c)
      a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }

  // node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  // node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse3, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180)
          b += 360;
        else if (b - a > 180)
          a += 360;
        q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a, b) });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }
    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a, b) });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a, b) {
      var s = [], q = [];
      a = parse3(a), b = parse3(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n)
          s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // node_modules/d3-interpolate/src/zoom.js
  var epsilon2 = 1e-12;
  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  var zoom_default = function zoomRho(rho, rho2, rho4) {
    function zoom(p0, p1) {
      var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
      if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho;
        i = function(t) {
          return [
            ux0 + t * dx,
            uy0 + t * dy,
            w0 * Math.exp(rho * t * S)
          ];
        };
      } else {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function(t) {
          var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [
            ux0 + u * dx,
            uy0 + u * dy,
            w0 * coshr0 / cosh(rho * s + r0)
          ];
        };
      }
      i.duration = S * 1e3 * rho / Math.SQRT2;
      return i;
    }
    zoom.rho = function(_) {
      var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
      return zoomRho(_1, _2, _4);
    };
    return zoom;
  }(Math.SQRT2, 2, 4);

  // node_modules/d3-timer/src/timer.js
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0)
        t._call.call(void 0, e);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart((elapsed) => {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  // node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name, id2, index2, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id2 in schedules)
      return;
    create(node, id2, {
      name,
      index: index2,
      // For context during callback.
      group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set2(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get2(node, id2) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id2]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id2, self2) {
    var schedules = node.__transition, tween;
    schedules[id2] = self2;
    self2.timer = timer(schedule, 0, self2.time);
    function schedule(elapsed) {
      self2.state = SCHEDULED;
      self2.timer.restart(start4, self2.delay, self2.time);
      if (self2.delay <= elapsed)
        start4(elapsed - self2.delay);
    }
    function start4(elapsed) {
      var i, j, n, o;
      if (self2.state !== SCHEDULED)
        return stop();
      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self2.name)
          continue;
        if (o.state === STARTED)
          return timeout_default(start4);
        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        } else if (+i < id2) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      }
      timeout_default(function() {
        if (self2.state === STARTED) {
          self2.state = RUNNING;
          self2.timer.restart(tick, self2.delay, self2.time);
          tick(elapsed);
        }
      });
      self2.state = STARTING;
      self2.on.call("start", node, node.__data__, self2.index, self2.group);
      if (self2.state !== STARTING)
        return;
      self2.state = STARTED;
      tween = new Array(n = self2.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
      while (++i < n) {
        tween[i].call(node, t);
      }
      if (self2.state === ENDING) {
        self2.on.call("end", node, node.__data__, self2.index, self2.group);
        stop();
      }
    }
    function stop() {
      self2.state = ENDED;
      self2.timer.stop();
      delete schedules[id2];
      for (var i in schedules)
        return;
      delete node.__transition;
    }
  }

  // node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name) {
    var schedules = node.__transition, schedule, active, empty3 = true, i;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) {
        empty3 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }
    if (empty3)
      delete node.__transition;
  }

  // node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }

  // node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id2, name) {
    var tween0, tween1;
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id2, name, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value) {
    var id2 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get2(this.node(), id2).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
  }
  function tweenValue(transition2, name, value) {
    var id2 = transition2._id;
    transition2.each(function() {
      var schedule = set2(this, id2);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
      return get2(node, id2).value[name];
    };
  }

  // node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a, b) {
    var c;
    return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c = color(b)) ? (b = c, rgb_default) : string_default)(a, b);
  }

  // node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name, value) {
    var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
  }

  // node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name, i) {
    return function(t) {
      this.setAttribute(name, i.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolateNS(fullname, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolate(name, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  // node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id2, value) {
    return function() {
      init(this, id2).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id2, value) {
    return value = +value, function() {
      init(this, id2).delay = value;
    };
  }
  function delay_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
  }

  // node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id2, value) {
    return function() {
      set2(this, id2).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id2, value) {
    return value = +value, function() {
      set2(this, id2).duration = value;
    };
  }
  function duration_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
  }

  // node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id2, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set2(this, id2).ease = value;
    };
  }
  function ease_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
  }

  // node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id2, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set2(this, id2).ease = v;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }

  // node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/on.js
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0)
        t = t.slice(0, i);
      return !t || t === "start";
    });
  }
  function onFunction(id2, name, listener) {
    var on0, on1, sit = start(name) ? init : set2;
    return function() {
      var schedule = sit(this, id2), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id2 = this._id;
    return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
  }

  // node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id2) {
    return function() {
      var parent = this.parentNode;
      for (var i in this.__transition)
        if (+i !== id2)
          return;
      if (parent)
        parent.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // node_modules/d3-transition/src/transition/select.js
  function select_default3(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id2);
  }

  // node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default2(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
            if (child = children2[k]) {
              schedule_default(child, name, id2, k, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name, id2);
  }

  // node_modules/d3-transition/src/transition/selection.js
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // node_modules/d3-transition/src/transition/style.js
  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id2, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
    return function() {
      var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
  }

  // node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name, i, priority) {
    return function(t) {
      this.style.setProperty(name, i.call(this, t), priority);
    };
  }
  function styleTween(name, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t = (i0 = i) && styleInterpolate(name, i, priority);
      return t;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  // node_modules/d3-transition/src/transition/text.js
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }

  // node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && textInterpolate(i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }

  // node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          var inherit2 = get2(node, id0);
          schedule_default(node, name, id1, i, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }

  // node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id2 = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end3 = { value: function() {
        if (--size === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set2(this, id2), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end3);
        }
        schedule.on = on1;
      });
      if (size === 0)
        resolve();
    });
  }

  // node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups, parents, name, id2) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id2;
  }
  function transition(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };

  // node_modules/d3-ease/src/cubic.js
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  // node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id2) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id2])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id2} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id2, timing;
    if (name instanceof Transition) {
      id2 = name._id, name = name._name;
    } else {
      id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
        }
      }
    }
    return new Transition(groups, this._parents, name, id2);
  }

  // node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // node_modules/d3-zoom/src/constant.js
  var constant_default4 = (x) => () => x;

  // node_modules/d3-zoom/src/event.js
  function ZoomEvent(type, {
    sourceEvent,
    target,
    transform: transform2,
    dispatch: dispatch2
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      transform: { value: transform2, enumerable: true, configurable: true },
      _: { value: dispatch2 }
    });
  }

  // node_modules/d3-zoom/src/transform.js
  function Transform(k, x, y) {
    this.k = k;
    this.x = x;
    this.y = y;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k) {
      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function(x, y) {
      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
    },
    apply: function(point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y];
    },
    applyX: function(x) {
      return x * this.k + this.x;
    },
    applyY: function(y) {
      return y * this.k + this.y;
    },
    invert: function(location) {
      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
    },
    invertX: function(x) {
      return (x - this.x) / this.k;
    },
    invertY: function(y) {
      return (y - this.y) / this.k;
    },
    rescaleX: function(x) {
      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
    },
    rescaleY: function(y) {
      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity2 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity2;
    return node.__zoom;
  }

  // node_modules/d3-zoom/src/noevent.js
  function nopropagation2(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/d3-zoom/src/zoom.js
  function defaultFilter2(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
  }
  function defaultExtent() {
    var e = this;
    if (e instanceof SVGElement) {
      e = e.ownerSVGElement || e;
      if (e.hasAttribute("viewBox")) {
        e = e.viewBox.baseVal;
        return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
      }
      return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
    }
    return [[0, 0], [e.clientWidth, e.clientHeight]];
  }
  function defaultTransform() {
    return this.__zoom || identity2;
  }
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
  }
  function defaultTouchable2() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(transform2, extent, translateExtent) {
    var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
    return transform2.translate(
      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
    );
  }
  function zoom_default2() {
    var filter2 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta2 = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection2) {
      selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform2, point, event) {
      var selection2 = collection.selection ? collection.selection() : collection;
      selection2.property("__zoom", defaultTransform);
      if (collection !== selection2) {
        schedule(collection, transform2, point, event);
      } else {
        selection2.interrupt().each(function() {
          gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
        });
      }
    };
    zoom.scaleBy = function(selection2, k, p, event) {
      zoom.scaleTo(selection2, function() {
        var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return k0 * k1;
      }, p, event);
    };
    zoom.scaleTo = function(selection2, k, p, event) {
      zoom.transform(selection2, function() {
        var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
      }, p, event);
    };
    zoom.translateBy = function(selection2, x, y, event) {
      zoom.transform(selection2, function() {
        return constrain(this.__zoom.translate(
          typeof x === "function" ? x.apply(this, arguments) : x,
          typeof y === "function" ? y.apply(this, arguments) : y
        ), extent.apply(this, arguments), translateExtent);
      }, null, event);
    };
    zoom.translateTo = function(selection2, x, y, p, event) {
      zoom.transform(selection2, function() {
        var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
        return constrain(identity2.translate(p0[0], p0[1]).scale(t.k).translate(
          typeof x === "function" ? -x.apply(this, arguments) : -x,
          typeof y === "function" ? -y.apply(this, arguments) : -y
        ), e, translateExtent);
      }, p, event);
    };
    function scale(transform2, k) {
      k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
      return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
    }
    function translate(transform2, p0, p1) {
      var x = p0[0] - p1[0] * transform2.k, y = p0[1] - p1[1] * transform2.k;
      return x === transform2.x && y === transform2.y ? transform2 : new Transform(transform2.k, x, y);
    }
    function centroid(extent2) {
      return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
    }
    function schedule(transition2, transform2, point, event) {
      transition2.on("start.zoom", function() {
        gesture(this, arguments).event(event).start();
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).event(event).end();
      }).tween("zoom", function() {
        var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
        return function(t) {
          if (t === 1)
            t = b;
          else {
            var l = i(t), k = w / l[2];
            t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
          g.zoom(null, t);
        };
      });
    }
    function gesture(that, args, clean2) {
      return !clean2 && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.active = 0;
      this.sourceEvent = null;
      this.extent = extent.apply(that, args);
      this.taps = 0;
    }
    Gesture.prototype = {
      event: function(event) {
        if (event)
          this.sourceEvent = event;
        return this;
      },
      start: function() {
        if (++this.active === 1) {
          this.that.__zooming = this;
          this.emit("start");
        }
        return this;
      },
      zoom: function(key, transform2) {
        if (this.mouse && key !== "mouse")
          this.mouse[1] = transform2.invert(this.mouse[0]);
        if (this.touch0 && key !== "touch")
          this.touch0[1] = transform2.invert(this.touch0[0]);
        if (this.touch1 && key !== "touch")
          this.touch1[1] = transform2.invert(this.touch1[0]);
        this.that.__zoom = transform2;
        this.emit("zoom");
        return this;
      },
      end: function() {
        if (--this.active === 0) {
          delete this.that.__zooming;
          this.emit("end");
        }
        return this;
      },
      emit: function(type) {
        var d = select_default2(this.that).datum();
        listeners.call(
          type,
          this.that,
          new ZoomEvent(type, {
            sourceEvent: this.sourceEvent,
            target: zoom,
            type,
            transform: this.that.__zoom,
            dispatch: listeners
          }),
          d
        );
      }
    };
    function wheeled(event, ...args) {
      if (!filter2.apply(this, arguments))
        return;
      var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta2.apply(this, arguments)))), p = pointer_default(event);
      if (g.wheel) {
        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
          g.mouse[1] = t.invert(g.mouse[0] = p);
        }
        clearTimeout(g.wheel);
      } else if (t.k === k)
        return;
      else {
        g.mouse = [p, t.invert(p)];
        interrupt_default(this);
        g.start();
      }
      noevent_default2(event);
      g.wheel = setTimeout(wheelidled, wheelDelay);
      g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
      function wheelidled() {
        g.wheel = null;
        g.end();
      }
    }
    function mousedowned(event, ...args) {
      if (touchending || !filter2.apply(this, arguments))
        return;
      var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
      nodrag_default(event.view);
      nopropagation2(event);
      g.mouse = [p, this.__zoom.invert(p)];
      interrupt_default(this);
      g.start();
      function mousemoved(event2) {
        noevent_default2(event2);
        if (!g.moved) {
          var dx = event2.clientX - x0, dy = event2.clientY - y0;
          g.moved = dx * dx + dy * dy > clickDistance2;
        }
        g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
      }
      function mouseupped(event2) {
        v.on("mousemove.zoom mouseup.zoom", null);
        yesdrag(event2.view, g.moved);
        noevent_default2(event2);
        g.event(event2).end();
      }
    }
    function dblclicked(event, ...args) {
      if (!filter2.apply(this, arguments))
        return;
      var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
      noevent_default2(event);
      if (duration > 0)
        select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
      else
        select_default2(this).call(zoom.transform, t1, p0, event);
    }
    function touchstarted(event, ...args) {
      if (!filter2.apply(this, arguments))
        return;
      var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
      nopropagation2(event);
      for (i = 0; i < n; ++i) {
        t = touches[i], p = pointer_default(t, this);
        p = [p, this.__zoom.invert(p), t.identifier];
        if (!g.touch0)
          g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
        else if (!g.touch1 && g.touch0[2] !== p[2])
          g.touch1 = p, g.taps = 0;
      }
      if (touchstarting)
        touchstarting = clearTimeout(touchstarting);
      if (started) {
        if (g.taps < 2)
          touchfirst = p[0], touchstarting = setTimeout(function() {
            touchstarting = null;
          }, touchDelay);
        interrupt_default(this);
        g.start();
      }
    }
    function touchmoved(event, ...args) {
      if (!this.__zooming)
        return;
      var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
      noevent_default2(event);
      for (i = 0; i < n; ++i) {
        t = touches[i], p = pointer_default(t, this);
        if (g.touch0 && g.touch0[2] === t.identifier)
          g.touch0[0] = p;
        else if (g.touch1 && g.touch1[2] === t.identifier)
          g.touch1[0] = p;
      }
      t = g.that.__zoom;
      if (g.touch1) {
        var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale(t, Math.sqrt(dp / dl));
        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      } else if (g.touch0)
        p = g.touch0[0], l = g.touch0[1];
      else
        return;
      g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
    }
    function touchended(event, ...args) {
      if (!this.__zooming)
        return;
      var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
      nopropagation2(event);
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, touchDelay);
      for (i = 0; i < n; ++i) {
        t = touches[i];
        if (g.touch0 && g.touch0[2] === t.identifier)
          delete g.touch0;
        else if (g.touch1 && g.touch1[2] === t.identifier)
          delete g.touch1;
      }
      if (g.touch1 && !g.touch0)
        g.touch0 = g.touch1, delete g.touch1;
      if (g.touch0)
        g.touch0[1] = this.__zoom.invert(g.touch0[0]);
      else {
        g.end();
        if (g.taps === 2) {
          t = pointer_default(t, this);
          if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
            var p = select_default2(this).on("dblclick.zoom");
            if (p)
              p.apply(this, arguments);
          }
        }
      }
    }
    zoom.wheelDelta = function(_) {
      return arguments.length ? (wheelDelta2 = typeof _ === "function" ? _ : constant_default4(+_), zoom) : wheelDelta2;
    };
    zoom.filter = function(_) {
      return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default4(!!_), zoom) : filter2;
    };
    zoom.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default4(!!_), zoom) : touchable;
    };
    zoom.extent = function(_) {
      return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
    };
    zoom.scaleExtent = function(_) {
      return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    };
    zoom.translateExtent = function(_) {
      return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    };
    zoom.constrain = function(_) {
      return arguments.length ? (constrain = _, zoom) : constrain;
    };
    zoom.duration = function(_) {
      return arguments.length ? (duration = +_, zoom) : duration;
    };
    zoom.interpolate = function(_) {
      return arguments.length ? (interpolate = _, zoom) : interpolate;
    };
    zoom.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? zoom : value;
    };
    zoom.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
    };
    zoom.tapDistance = function(_) {
      return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
    };
    return zoom;
  }

  // node_modules/@xyflow/system/dist/esm/index.js
  var errorMessages = {
    error001: () => "[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001",
    error002: () => "It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.",
    error003: (nodeType) => `Node type "${nodeType}" not found. Using fallback type "default".`,
    error004: () => "The React Flow parent container needs a width and a height to render the graph.",
    error005: () => "Only child nodes can use a parent extent.",
    error006: () => "Can't create edge. An edge needs a source and a target.",
    error007: (id2) => `The old edge with id=${id2} does not exist.`,
    error009: (type) => `Marker type "${type}" doesn't exist.`,
    error008: (handleType, { id: id2, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: "${handleType === "source" ? sourceHandle : targetHandle}", edge id: ${id2}.`,
    error010: () => "Handle: No node id found. Make sure to only use a Handle inside a custom Node.",
    error011: (edgeType) => `Edge type "${edgeType}" not found. Using fallback type "default".`,
    error012: (id2) => `Node with id "${id2}" does not exist, it may have been removed. This can happen when a node is deleted before the "onNodeClick" handler is called.`,
    error013: (lib = "react") => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,
    error014: () => "useNodeConnections: No node ID found. Call useNodeConnections inside a custom Node or provide a node ID."
  };
  var infiniteExtent = [
    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],
    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]
  ];
  var elementSelectionKeys = ["Enter", " ", "Escape"];
  var ConnectionMode;
  (function(ConnectionMode2) {
    ConnectionMode2["Strict"] = "strict";
    ConnectionMode2["Loose"] = "loose";
  })(ConnectionMode || (ConnectionMode = {}));
  var PanOnScrollMode;
  (function(PanOnScrollMode2) {
    PanOnScrollMode2["Free"] = "free";
    PanOnScrollMode2["Vertical"] = "vertical";
    PanOnScrollMode2["Horizontal"] = "horizontal";
  })(PanOnScrollMode || (PanOnScrollMode = {}));
  var SelectionMode;
  (function(SelectionMode2) {
    SelectionMode2["Partial"] = "partial";
    SelectionMode2["Full"] = "full";
  })(SelectionMode || (SelectionMode = {}));
  var initialConnection = {
    inProgress: false,
    isValid: null,
    from: null,
    fromHandle: null,
    fromPosition: null,
    fromNode: null,
    to: null,
    toHandle: null,
    toPosition: null,
    toNode: null
  };
  var ConnectionLineType;
  (function(ConnectionLineType2) {
    ConnectionLineType2["Bezier"] = "default";
    ConnectionLineType2["Straight"] = "straight";
    ConnectionLineType2["Step"] = "step";
    ConnectionLineType2["SmoothStep"] = "smoothstep";
    ConnectionLineType2["SimpleBezier"] = "simplebezier";
  })(ConnectionLineType || (ConnectionLineType = {}));
  var MarkerType;
  (function(MarkerType2) {
    MarkerType2["Arrow"] = "arrow";
    MarkerType2["ArrowClosed"] = "arrowclosed";
  })(MarkerType || (MarkerType = {}));
  var Position;
  (function(Position2) {
    Position2["Left"] = "left";
    Position2["Top"] = "top";
    Position2["Right"] = "right";
    Position2["Bottom"] = "bottom";
  })(Position || (Position = {}));
  var oppositePosition = {
    [Position.Left]: Position.Right,
    [Position.Right]: Position.Left,
    [Position.Top]: Position.Bottom,
    [Position.Bottom]: Position.Top
  };
  function getConnectionStatus(isValid) {
    return isValid === null ? null : isValid ? "valid" : "invalid";
  }
  var isEdgeBase = (element) => "id" in element && "source" in element && "target" in element;
  var isNodeBase = (element) => "id" in element && "position" in element && !("source" in element) && !("target" in element);
  var isInternalNodeBase = (element) => "id" in element && "internals" in element && !("source" in element) && !("target" in element);
  var getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {
    const { width, height } = getNodeDimensions(node);
    const origin2 = node.origin ?? nodeOrigin;
    const offsetX = width * origin2[0];
    const offsetY = height * origin2[1];
    return {
      x: node.position.x - offsetX,
      y: node.position.y - offsetY
    };
  };
  var getNodesBounds = (nodes, params = { nodeOrigin: [0, 0], nodeLookup: void 0 }) => {
    if (!params.nodeLookup) {
      console.warn("Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.");
    }
    if (nodes.length === 0) {
      return { x: 0, y: 0, width: 0, height: 0 };
    }
    const box = nodes.reduce((currBox, nodeOrId) => {
      const isId = typeof nodeOrId === "string";
      let currentNode = !params.nodeLookup && !isId ? nodeOrId : void 0;
      if (params.nodeLookup) {
        currentNode = isId ? params.nodeLookup.get(nodeOrId) : !isInternalNodeBase(nodeOrId) ? params.nodeLookup.get(nodeOrId.id) : nodeOrId;
      }
      const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };
      return getBoundsOfBoxes(currBox, nodeBox);
    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });
    return boxToRect(box);
  };
  var getInternalNodesBounds = (nodeLookup, params = {}) => {
    if (nodeLookup.size === 0) {
      return { x: 0, y: 0, width: 0, height: 0 };
    }
    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };
    nodeLookup.forEach((node) => {
      if (params.filter === void 0 || params.filter(node)) {
        const nodeBox = nodeToBox(node);
        box = getBoundsOfBoxes(box, nodeBox);
      }
    });
    return boxToRect(box);
  };
  var getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, excludeNonSelectableNodes = false) => {
    const paneRect = {
      ...pointToRendererPoint(rect, [tx, ty, tScale]),
      width: rect.width / tScale,
      height: rect.height / tScale
    };
    const visibleNodes = [];
    for (const node of nodes.values()) {
      const { measured, selectable = true, hidden = false } = node;
      if (excludeNonSelectableNodes && !selectable || hidden) {
        continue;
      }
      const width = measured.width ?? node.width ?? node.initialWidth ?? null;
      const height = measured.height ?? node.height ?? node.initialHeight ?? null;
      const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));
      const area = (width ?? 0) * (height ?? 0);
      const partiallyVisible = partially && overlappingArea > 0;
      const forceInitialRender = !node.internals.handleBounds;
      const isVisible2 = forceInitialRender || partiallyVisible || overlappingArea >= area;
      if (isVisible2 || node.dragging) {
        visibleNodes.push(node);
      }
    }
    return visibleNodes;
  };
  var getConnectedEdges = (nodes, edges) => {
    const nodeIds = /* @__PURE__ */ new Set();
    nodes.forEach((node) => {
      nodeIds.add(node.id);
    });
    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));
  };
  function getFitViewNodes(nodeLookup, options) {
    const fitViewNodes = /* @__PURE__ */ new Map();
    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;
    nodeLookup.forEach((n) => {
      const isVisible2 = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);
      if (isVisible2 && (!optionNodeIds || optionNodeIds.has(n.id))) {
        fitViewNodes.set(n.id, n);
      }
    });
    return fitViewNodes;
  }
  async function fitView({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {
    if (nodes.size === 0) {
      return Promise.resolve(false);
    }
    const bounds = getInternalNodesBounds(nodes);
    const viewport2 = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);
    await panZoom.setViewport(viewport2, { duration: options?.duration });
    return Promise.resolve(true);
  }
  function calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError }) {
    const node = nodeLookup.get(nodeId);
    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : void 0;
    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };
    const origin2 = node.origin ?? nodeOrigin;
    let extent = nodeExtent;
    if (node.extent === "parent" && !node.expandParent) {
      if (!parentNode) {
        onError?.("005", errorMessages["error005"]());
      } else {
        const parentWidth = parentNode.measured.width;
        const parentHeight = parentNode.measured.height;
        if (parentWidth && parentHeight) {
          extent = [
            [parentX, parentY],
            [parentX + parentWidth, parentY + parentHeight]
          ];
        }
      }
    } else if (parentNode && isCoordinateExtent(node.extent)) {
      extent = [
        [node.extent[0][0] + parentX, node.extent[0][1] + parentY],
        [node.extent[1][0] + parentX, node.extent[1][1] + parentY]
      ];
    }
    const positionAbsolute = isCoordinateExtent(extent) ? clampPosition(nextPosition, extent, node.measured) : nextPosition;
    return {
      position: {
        x: positionAbsolute.x - parentX + node.measured.width * origin2[0],
        y: positionAbsolute.y - parentY + node.measured.height * origin2[1]
      },
      positionAbsolute
    };
  }
  async function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete }) {
    const nodeIds = new Set(nodesToRemove.map((node) => node.id));
    const matchingNodes = [];
    for (const node of nodes) {
      if (node.deletable === false) {
        continue;
      }
      const isIncluded = nodeIds.has(node.id);
      const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);
      if (isIncluded || parentHit) {
        matchingNodes.push(node);
      }
    }
    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));
    const deletableEdges = edges.filter((edge) => edge.deletable !== false);
    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);
    const matchingEdges = connectedEdges;
    for (const edge of deletableEdges) {
      const isIncluded = edgeIds.has(edge.id);
      if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {
        matchingEdges.push(edge);
      }
    }
    if (!onBeforeDelete) {
      return {
        edges: matchingEdges,
        nodes: matchingNodes
      };
    }
    const onBeforeDeleteResult = await onBeforeDelete({
      nodes: matchingNodes,
      edges: matchingEdges
    });
    if (typeof onBeforeDeleteResult === "boolean") {
      return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };
    }
    return onBeforeDeleteResult;
  }
  var clamp = (val, min2 = 0, max2 = 1) => Math.min(Math.max(val, min2), max2);
  var clampPosition = (position2 = { x: 0, y: 0 }, extent, dimensions) => ({
    x: clamp(position2.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),
    y: clamp(position2.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0))
  });
  function clampPositionToParent(childPosition, childDimensions, parent) {
    const { width: parentWidth, height: parentHeight } = getNodeDimensions(parent);
    const { x: parentX, y: parentY } = parent.internals.positionAbsolute;
    return clampPosition(childPosition, [
      [parentX, parentY],
      [parentX + parentWidth, parentY + parentHeight]
    ], childDimensions);
  }
  var calcAutoPanVelocity = (value, min2, max2) => {
    if (value < min2) {
      return clamp(Math.abs(value - min2), 1, min2) / min2;
    } else if (value > max2) {
      return -clamp(Math.abs(value - max2), 1, min2) / min2;
    }
    return 0;
  };
  var calcAutoPan = (pos, bounds, speed = 15, distance3 = 40) => {
    const xMovement = calcAutoPanVelocity(pos.x, distance3, bounds.width - distance3) * speed;
    const yMovement = calcAutoPanVelocity(pos.y, distance3, bounds.height - distance3) * speed;
    return [xMovement, yMovement];
  };
  var getBoundsOfBoxes = (box1, box2) => ({
    x: Math.min(box1.x, box2.x),
    y: Math.min(box1.y, box2.y),
    x2: Math.max(box1.x2, box2.x2),
    y2: Math.max(box1.y2, box2.y2)
  });
  var rectToBox = ({ x, y, width, height }) => ({
    x,
    y,
    x2: x + width,
    y2: y + height
  });
  var boxToRect = ({ x, y, x2, y2 }) => ({
    x,
    y,
    width: x2 - x,
    height: y2 - y
  });
  var nodeToRect = (node, nodeOrigin = [0, 0]) => {
    const { x, y } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);
    return {
      x,
      y,
      width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,
      height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0
    };
  };
  var nodeToBox = (node, nodeOrigin = [0, 0]) => {
    const { x, y } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);
    return {
      x,
      y,
      x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),
      y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)
    };
  };
  var getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));
  var getOverlappingArea = (rectA, rectB) => {
    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));
    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));
    return Math.ceil(xOverlap * yOverlap);
  };
  var isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);
  var isNumeric = (n) => !isNaN(n) && isFinite(n);
  var devWarn = (id2, message) => {
    if (true) {
      console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id2}`);
    }
  };
  var snapPosition = (position2, snapGrid = [1, 1]) => {
    return {
      x: snapGrid[0] * Math.round(position2.x / snapGrid[0]),
      y: snapGrid[1] * Math.round(position2.y / snapGrid[1])
    };
  };
  var pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {
    const position2 = {
      x: (x - tx) / tScale,
      y: (y - ty) / tScale
    };
    return snapToGrid ? snapPosition(position2, snapGrid) : position2;
  };
  var rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {
    return {
      x: x * tScale + tx,
      y: y * tScale + ty
    };
  };
  var getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {
    const xZoom = width / (bounds.width * (1 + padding));
    const yZoom = height / (bounds.height * (1 + padding));
    const zoom = Math.min(xZoom, yZoom);
    const clampedZoom = clamp(zoom, minZoom, maxZoom);
    const boundsCenterX = bounds.x + bounds.width / 2;
    const boundsCenterY = bounds.y + bounds.height / 2;
    const x = width / 2 - boundsCenterX * clampedZoom;
    const y = height / 2 - boundsCenterY * clampedZoom;
    return { x, y, zoom: clampedZoom };
  };
  var isMacOs = () => typeof navigator !== "undefined" && navigator?.userAgent?.indexOf("Mac") >= 0;
  function isCoordinateExtent(extent) {
    return extent !== void 0 && extent !== "parent";
  }
  function getNodeDimensions(node) {
    return {
      width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,
      height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0
    };
  }
  function nodeHasDimensions(node) {
    return (node.measured?.width ?? node.width ?? node.initialWidth) !== void 0 && (node.measured?.height ?? node.height ?? node.initialHeight) !== void 0;
  }
  function evaluateAbsolutePosition(position2, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {
    const positionAbsolute = { ...position2 };
    const parent = nodeLookup.get(parentId);
    if (parent) {
      const origin2 = parent.origin || nodeOrigin;
      positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin2[0];
      positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin2[1];
    }
    return positionAbsolute;
  }
  function areSetsEqual(a, b) {
    if (a.size !== b.size) {
      return false;
    }
    for (const item of a) {
      if (!b.has(item)) {
        return false;
      }
    }
    return true;
  }
  function getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform: transform2, containerBounds }) {
    const { x, y } = getEventPosition(event);
    const pointerPos = pointToRendererPoint({ x: x - (containerBounds?.left ?? 0), y: y - (containerBounds?.top ?? 0) }, transform2);
    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;
    return {
      xSnapped,
      ySnapped,
      ...pointerPos
    };
  }
  var getDimensions = (node) => ({
    width: node.offsetWidth,
    height: node.offsetHeight
  });
  var getHostForElement = (element) => element?.getRootNode?.() || window?.document;
  var inputTags = ["INPUT", "SELECT", "TEXTAREA"];
  function isInputDOMNode(event) {
    const target = event.composedPath?.()?.[0] || event.target;
    if (target?.nodeType !== 1)
      return false;
    const isInput = inputTags.includes(target.nodeName) || target.hasAttribute("contenteditable");
    return isInput || !!target.closest(".nokey");
  }
  var isMouseEvent = (event) => "clientX" in event;
  var getEventPosition = (event, bounds) => {
    const isMouse = isMouseEvent(event);
    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;
    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;
    return {
      x: evtX - (bounds?.left ?? 0),
      y: evtY - (bounds?.top ?? 0)
    };
  };
  var getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {
    const handles = nodeElement.querySelectorAll(`.${type}`);
    if (!handles || !handles.length) {
      return null;
    }
    return Array.from(handles).map((handle) => {
      const handleBounds = handle.getBoundingClientRect();
      return {
        id: handle.getAttribute("data-handleid"),
        type,
        nodeId,
        position: handle.getAttribute("data-handlepos"),
        x: (handleBounds.left - nodeBounds.left) / zoom,
        y: (handleBounds.top - nodeBounds.top) / zoom,
        ...getDimensions(handle)
      };
    });
  };
  function getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY }) {
    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;
    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;
    const offsetX = Math.abs(centerX - sourceX);
    const offsetY = Math.abs(centerY - sourceY);
    return [centerX, centerY, offsetX, offsetY];
  }
  function calculateControlOffset(distance3, curvature) {
    if (distance3 >= 0) {
      return 0.5 * distance3;
    }
    return curvature * 25 * Math.sqrt(-distance3);
  }
  function getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {
    switch (pos) {
      case Position.Left:
        return [x1 - calculateControlOffset(x1 - x2, c), y1];
      case Position.Right:
        return [x1 + calculateControlOffset(x2 - x1, c), y1];
      case Position.Top:
        return [x1, y1 - calculateControlOffset(y1 - y2, c)];
      case Position.Bottom:
        return [x1, y1 + calculateControlOffset(y2 - y1, c)];
    }
  }
  function getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25 }) {
    const [sourceControlX, sourceControlY] = getControlWithCurvature({
      pos: sourcePosition,
      x1: sourceX,
      y1: sourceY,
      x2: targetX,
      y2: targetY,
      c: curvature
    });
    const [targetControlX, targetControlY] = getControlWithCurvature({
      pos: targetPosition,
      x1: targetX,
      y1: targetY,
      x2: sourceX,
      y2: sourceY,
      c: curvature
    });
    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY,
      sourceControlX,
      sourceControlY,
      targetControlX,
      targetControlY
    });
    return [
      `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,
      labelX,
      labelY,
      offsetX,
      offsetY
    ];
  }
  function getEdgeCenter({ sourceX, sourceY, targetX, targetY }) {
    const xOffset = Math.abs(targetX - sourceX) / 2;
    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;
    const yOffset = Math.abs(targetY - sourceY) / 2;
    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;
    return [centerX, centerY, xOffset, yOffset];
  }
  function getElevatedEdgeZIndex({ sourceNode, targetNode, selected: selected2 = false, zIndex = 0, elevateOnSelect = false }) {
    if (!elevateOnSelect) {
      return zIndex;
    }
    const edgeOrConnectedNodeSelected = selected2 || targetNode.selected || sourceNode.selected;
    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1e3);
    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);
  }
  function isEdgeVisible({ sourceNode, targetNode, width, height, transform: transform2 }) {
    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));
    if (edgeBox.x === edgeBox.x2) {
      edgeBox.x2 += 1;
    }
    if (edgeBox.y === edgeBox.y2) {
      edgeBox.y2 += 1;
    }
    const viewRect = {
      x: -transform2[0] / transform2[2],
      y: -transform2[1] / transform2[2],
      width: width / transform2[2],
      height: height / transform2[2]
    };
    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;
  }
  var getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ""}-${target}${targetHandle || ""}`;
  var connectionExists = (edge, edges) => {
    return edges.some((el) => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));
  };
  var addEdge = (edgeParams, edges) => {
    if (!edgeParams.source || !edgeParams.target) {
      devWarn("006", errorMessages["error006"]());
      return edges;
    }
    let edge;
    if (isEdgeBase(edgeParams)) {
      edge = { ...edgeParams };
    } else {
      edge = {
        ...edgeParams,
        id: getEdgeId(edgeParams)
      };
    }
    if (connectionExists(edge, edges)) {
      return edges;
    }
    if (edge.sourceHandle === null) {
      delete edge.sourceHandle;
    }
    if (edge.targetHandle === null) {
      delete edge.targetHandle;
    }
    return edges.concat(edge);
  };
  function getStraightPath({ sourceX, sourceY, targetX, targetY }) {
    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY
    });
    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];
  }
  var handleDirections = {
    [Position.Left]: { x: -1, y: 0 },
    [Position.Right]: { x: 1, y: 0 },
    [Position.Top]: { x: 0, y: -1 },
    [Position.Bottom]: { x: 0, y: 1 }
  };
  var getDirection = ({ source, sourcePosition = Position.Bottom, target }) => {
    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {
      return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };
    }
    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };
  };
  var distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
  function getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset: offset4 }) {
    const sourceDir = handleDirections[sourcePosition];
    const targetDir = handleDirections[targetPosition];
    const sourceGapped = { x: source.x + sourceDir.x * offset4, y: source.y + sourceDir.y * offset4 };
    const targetGapped = { x: target.x + targetDir.x * offset4, y: target.y + targetDir.y * offset4 };
    const dir = getDirection({
      source: sourceGapped,
      sourcePosition,
      target: targetGapped
    });
    const dirAccessor = dir.x !== 0 ? "x" : "y";
    const currDir = dir[dirAccessor];
    let points = [];
    let centerX, centerY;
    const sourceGapOffset = { x: 0, y: 0 };
    const targetGapOffset = { x: 0, y: 0 };
    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({
      sourceX: source.x,
      sourceY: source.y,
      targetX: target.x,
      targetY: target.y
    });
    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {
      centerX = center.x ?? defaultCenterX;
      centerY = center.y ?? defaultCenterY;
      const verticalSplit = [
        { x: centerX, y: sourceGapped.y },
        { x: centerX, y: targetGapped.y }
      ];
      const horizontalSplit = [
        { x: sourceGapped.x, y: centerY },
        { x: targetGapped.x, y: centerY }
      ];
      if (sourceDir[dirAccessor] === currDir) {
        points = dirAccessor === "x" ? verticalSplit : horizontalSplit;
      } else {
        points = dirAccessor === "x" ? horizontalSplit : verticalSplit;
      }
    } else {
      const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];
      const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];
      if (dirAccessor === "x") {
        points = sourceDir.x === currDir ? targetSource : sourceTarget;
      } else {
        points = sourceDir.y === currDir ? sourceTarget : targetSource;
      }
      if (sourcePosition === targetPosition) {
        const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);
        if (diff <= offset4) {
          const gapOffset = Math.min(offset4 - 1, offset4 - diff);
          if (sourceDir[dirAccessor] === currDir) {
            sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;
          } else {
            targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;
          }
        }
      }
      if (sourcePosition !== targetPosition) {
        const dirAccessorOpposite = dirAccessor === "x" ? "y" : "x";
        const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];
        const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];
        const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];
        const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);
        if (flipSourceTarget) {
          points = dirAccessor === "x" ? sourceTarget : targetSource;
        }
      }
      const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };
      const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };
      const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));
      const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));
      if (maxXDistance >= maxYDistance) {
        centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;
        centerY = points[0].y;
      } else {
        centerX = points[0].x;
        centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;
      }
    }
    const pathPoints = [
      source,
      { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },
      ...points,
      { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },
      target
    ];
    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];
  }
  function getBend(a, b, c, size) {
    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);
    const { x, y } = b;
    if (a.x === x && x === c.x || a.y === y && y === c.y) {
      return `L${x} ${y}`;
    }
    if (a.y === y) {
      const xDir2 = a.x < c.x ? -1 : 1;
      const yDir2 = a.y < c.y ? 1 : -1;
      return `L ${x + bendSize * xDir2},${y}Q ${x},${y} ${x},${y + bendSize * yDir2}`;
    }
    const xDir = a.x < c.x ? 1 : -1;
    const yDir = a.y < c.y ? -1 : 1;
    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;
  }
  function getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset: offset4 = 20 }) {
    const [points, labelX, labelY, offsetX, offsetY] = getPoints({
      source: { x: sourceX, y: sourceY },
      sourcePosition,
      target: { x: targetX, y: targetY },
      targetPosition,
      center: { x: centerX, y: centerY },
      offset: offset4
    });
    const path = points.reduce((res, p, i) => {
      let segment = "";
      if (i > 0 && i < points.length - 1) {
        segment = getBend(points[i - 1], p, points[i + 1], borderRadius);
      } else {
        segment = `${i === 0 ? "M" : "L"}${p.x} ${p.y}`;
      }
      res += segment;
      return res;
    }, "");
    return [path, labelX, labelY, offsetX, offsetY];
  }
  function isNodeInitialized(node) {
    return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);
  }
  function getEdgePosition(params) {
    const { sourceNode, targetNode } = params;
    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {
      return null;
    }
    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);
    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);
    const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);
    const targetHandle = getHandle$1(
      // when connection type is loose we can define all handles as sources and connect source -> source
      params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []),
      params.targetHandle
    );
    if (!sourceHandle || !targetHandle) {
      params.onError?.("008", errorMessages["error008"](!sourceHandle ? "source" : "target", {
        id: params.id,
        sourceHandle: params.sourceHandle,
        targetHandle: params.targetHandle
      }));
      return null;
    }
    const sourcePosition = sourceHandle?.position || Position.Bottom;
    const targetPosition = targetHandle?.position || Position.Top;
    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);
    const target = getHandlePosition(targetNode, targetHandle, targetPosition);
    return {
      sourceX: source.x,
      sourceY: source.y,
      targetX: target.x,
      targetY: target.y,
      sourcePosition,
      targetPosition
    };
  }
  function toHandleBounds(handles) {
    if (!handles) {
      return null;
    }
    const source = [];
    const target = [];
    for (const handle of handles) {
      handle.width = handle.width ?? 1;
      handle.height = handle.height ?? 1;
      if (handle.type === "source") {
        source.push(handle);
      } else if (handle.type === "target") {
        target.push(handle);
      }
    }
    return {
      source,
      target
    };
  }
  function getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {
    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;
    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;
    const { width, height } = handle ?? getNodeDimensions(node);
    if (center) {
      return { x: x + width / 2, y: y + height / 2 };
    }
    const position2 = handle?.position ?? fallbackPosition;
    switch (position2) {
      case Position.Top:
        return { x: x + width / 2, y };
      case Position.Right:
        return { x: x + width, y: y + height / 2 };
      case Position.Bottom:
        return { x: x + width / 2, y: y + height };
      case Position.Left:
        return { x, y: y + height / 2 };
    }
  }
  function getHandle$1(bounds, handleId) {
    if (!bounds) {
      return null;
    }
    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;
  }
  function getMarkerId(marker, id2) {
    if (!marker) {
      return "";
    }
    if (typeof marker === "string") {
      return marker;
    }
    const idPrefix = id2 ? `${id2}__` : "";
    return `${idPrefix}${Object.keys(marker).sort().map((key) => `${key}=${marker[key]}`).join("&")}`;
  }
  function createMarkerIds(edges, { id: id2, defaultColor, defaultMarkerStart, defaultMarkerEnd }) {
    const ids = /* @__PURE__ */ new Set();
    return edges.reduce((markers, edge) => {
      [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {
        if (marker && typeof marker === "object") {
          const markerId = getMarkerId(marker, id2);
          if (!ids.has(markerId)) {
            markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });
            ids.add(markerId);
          }
        }
      });
      return markers;
    }, []).sort((a, b) => a.id.localeCompare(b.id));
  }
  var defaultOptions = {
    nodeOrigin: [0, 0],
    nodeExtent: infiniteExtent,
    elevateNodesOnSelect: true,
    defaults: {}
  };
  var adoptUserNodesDefaultOptions = {
    ...defaultOptions,
    checkEquality: true
  };
  function mergeObjects(base, incoming) {
    const result = { ...base };
    for (const key in incoming) {
      if (incoming[key] !== void 0) {
        result[key] = incoming[key];
      }
    }
    return result;
  }
  function updateAbsolutePositions(nodeLookup, parentLookup, options) {
    const _options = mergeObjects(defaultOptions, options);
    for (const node of nodeLookup.values()) {
      if (node.parentId) {
        updateChildNode(node, nodeLookup, parentLookup, _options);
      } else {
        const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);
        const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;
        const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));
        node.internals.positionAbsolute = clampedPosition;
      }
    }
  }
  function adoptUserNodes(nodes, nodeLookup, parentLookup, options) {
    const _options = mergeObjects(adoptUserNodesDefaultOptions, options);
    const tmpLookup = new Map(nodeLookup);
    const selectedNodeZ = _options?.elevateNodesOnSelect ? 1e3 : 0;
    nodeLookup.clear();
    parentLookup.clear();
    for (const userNode of nodes) {
      let internalNode = tmpLookup.get(userNode.id);
      if (_options.checkEquality && userNode === internalNode?.internals.userNode) {
        nodeLookup.set(userNode.id, internalNode);
      } else {
        const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);
        const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;
        const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));
        internalNode = {
          ..._options.defaults,
          ...userNode,
          measured: {
            width: userNode.measured?.width,
            height: userNode.measured?.height
          },
          internals: {
            positionAbsolute: clampedPosition,
            // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured
            handleBounds: !userNode.measured ? void 0 : internalNode?.internals.handleBounds,
            z: calculateZ(userNode, selectedNodeZ),
            userNode
          }
        };
        nodeLookup.set(userNode.id, internalNode);
      }
      if (userNode.parentId) {
        updateChildNode(internalNode, nodeLookup, parentLookup, options);
      }
    }
  }
  function updateParentLookup(node, parentLookup) {
    if (!node.parentId) {
      return;
    }
    const childNodes = parentLookup.get(node.parentId);
    if (childNodes) {
      childNodes.set(node.id, node);
    } else {
      parentLookup.set(node.parentId, /* @__PURE__ */ new Map([[node.id, node]]));
    }
  }
  function updateChildNode(node, nodeLookup, parentLookup, options) {
    const { elevateNodesOnSelect, nodeOrigin, nodeExtent } = mergeObjects(defaultOptions, options);
    const parentId = node.parentId;
    const parentNode = nodeLookup.get(parentId);
    if (!parentNode) {
      console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);
      return;
    }
    updateParentLookup(node, parentLookup);
    const selectedNodeZ = elevateNodesOnSelect ? 1e3 : 0;
    const { x, y, z } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);
    const { positionAbsolute } = node.internals;
    const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;
    if (positionChanged || z !== node.internals.z) {
      nodeLookup.set(node.id, {
        ...node,
        internals: {
          ...node.internals,
          positionAbsolute: positionChanged ? { x, y } : positionAbsolute,
          z
        }
      });
    }
  }
  function calculateZ(node, selectedNodeZ) {
    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);
  }
  function calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {
    const { x: parentX, y: parentY } = parentNode.internals.positionAbsolute;
    const childDimensions = getNodeDimensions(childNode);
    const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);
    const clampedPosition = isCoordinateExtent(childNode.extent) ? clampPosition(positionWithOrigin, childNode.extent, childDimensions) : positionWithOrigin;
    let absolutePosition = clampPosition({ x: parentX + clampedPosition.x, y: parentY + clampedPosition.y }, nodeExtent, childDimensions);
    if (childNode.extent === "parent") {
      absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);
    }
    const childZ = calculateZ(childNode, selectedNodeZ);
    const parentZ = parentNode.internals.z ?? 0;
    return {
      x: absolutePosition.x,
      y: absolutePosition.y,
      z: parentZ > childZ ? parentZ : childZ
    };
  }
  function handleExpandParent(children2, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {
    const changes = [];
    const parentExpansions = /* @__PURE__ */ new Map();
    for (const child of children2) {
      const parent = nodeLookup.get(child.parentId);
      if (!parent) {
        continue;
      }
      const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);
      const expandedRect = getBoundsOfRects(parentRect, child.rect);
      parentExpansions.set(child.parentId, { expandedRect, parent });
    }
    if (parentExpansions.size > 0) {
      parentExpansions.forEach(({ expandedRect, parent }, parentId) => {
        const positionAbsolute = parent.internals.positionAbsolute;
        const dimensions = getNodeDimensions(parent);
        const origin2 = parent.origin ?? nodeOrigin;
        const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;
        const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;
        const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));
        const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));
        const widthChange = (newWidth - dimensions.width) * origin2[0];
        const heightChange = (newHeight - dimensions.height) * origin2[1];
        if (xChange > 0 || yChange > 0 || widthChange || heightChange) {
          changes.push({
            id: parentId,
            type: "position",
            position: {
              x: parent.position.x - xChange + widthChange,
              y: parent.position.y - yChange + heightChange
            }
          });
          parentLookup.get(parentId)?.forEach((childNode) => {
            if (!children2.some((child) => child.id === childNode.id)) {
              changes.push({
                id: childNode.id,
                type: "position",
                position: {
                  x: childNode.position.x + xChange,
                  y: childNode.position.y + yChange
                }
              });
            }
          });
        }
        if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {
          changes.push({
            id: parentId,
            type: "dimensions",
            setAttributes: true,
            dimensions: {
              width: newWidth + (xChange ? origin2[0] * xChange - widthChange : 0),
              height: newHeight + (yChange ? origin2[1] * yChange - heightChange : 0)
            }
          });
        }
      });
    }
    return changes;
  }
  function updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {
    const viewportNode = domNode?.querySelector(".xyflow__viewport");
    let updatedInternals = false;
    if (!viewportNode) {
      return { changes: [], updatedInternals };
    }
    const changes = [];
    const style5 = window.getComputedStyle(viewportNode);
    const { m22: zoom } = new window.DOMMatrixReadOnly(style5.transform);
    const parentExpandChildren = [];
    for (const update2 of updates.values()) {
      const node = nodeLookup.get(update2.id);
      if (!node) {
        continue;
      }
      if (node.hidden) {
        nodeLookup.set(node.id, {
          ...node,
          internals: {
            ...node.internals,
            handleBounds: void 0
          }
        });
        updatedInternals = true;
        continue;
      }
      const dimensions = getDimensions(update2.nodeElement);
      const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;
      const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update2.force));
      if (doUpdate) {
        const nodeBounds = update2.nodeElement.getBoundingClientRect();
        const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;
        let { positionAbsolute } = node.internals;
        if (node.parentId && node.extent === "parent") {
          positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));
        } else if (extent) {
          positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);
        }
        const newNode = {
          ...node,
          measured: dimensions,
          internals: {
            ...node.internals,
            positionAbsolute,
            handleBounds: {
              source: getHandleBounds("source", update2.nodeElement, nodeBounds, zoom, node.id),
              target: getHandleBounds("target", update2.nodeElement, nodeBounds, zoom, node.id)
            }
          }
        };
        nodeLookup.set(node.id, newNode);
        if (node.parentId) {
          updateChildNode(newNode, nodeLookup, parentLookup, { nodeOrigin });
        }
        updatedInternals = true;
        if (dimensionChanged) {
          changes.push({
            id: node.id,
            type: "dimensions",
            dimensions
          });
          if (node.expandParent && node.parentId) {
            parentExpandChildren.push({
              id: node.id,
              parentId: node.parentId,
              rect: nodeToRect(newNode, nodeOrigin)
            });
          }
        }
      }
    }
    if (parentExpandChildren.length > 0) {
      const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);
      changes.push(...parentExpandChanges);
    }
    return { changes, updatedInternals };
  }
  async function panBy({ delta, panZoom, transform: transform2, translateExtent, width, height }) {
    if (!panZoom || !delta.x && !delta.y) {
      return Promise.resolve(false);
    }
    const nextViewport = await panZoom.setViewportConstrained({
      x: transform2[0] + delta.x,
      y: transform2[1] + delta.y,
      zoom: transform2[2]
    }, [
      [0, 0],
      [width, height]
    ], translateExtent);
    const transformChanged = !!nextViewport && (nextViewport.x !== transform2[0] || nextViewport.y !== transform2[1] || nextViewport.k !== transform2[2]);
    return Promise.resolve(transformChanged);
  }
  function addConnectionToLookup(type, connection, connectionKey, connectionLookup, nodeId, handleId) {
    let key = nodeId;
    const nodeMap = connectionLookup.get(key) || /* @__PURE__ */ new Map();
    connectionLookup.set(key, nodeMap.set(connectionKey, connection));
    key = `${nodeId}-${type}`;
    const typeMap = connectionLookup.get(key) || /* @__PURE__ */ new Map();
    connectionLookup.set(key, typeMap.set(connectionKey, connection));
    if (handleId) {
      key = `${nodeId}-${type}-${handleId}`;
      const handleMap = connectionLookup.get(key) || /* @__PURE__ */ new Map();
      connectionLookup.set(key, handleMap.set(connectionKey, connection));
    }
  }
  function updateConnectionLookup(connectionLookup, edgeLookup, edges) {
    connectionLookup.clear();
    edgeLookup.clear();
    for (const edge of edges) {
      const { source: sourceNode, target: targetNode, sourceHandle = null, targetHandle = null } = edge;
      const connection = { edgeId: edge.id, source: sourceNode, target: targetNode, sourceHandle, targetHandle };
      const sourceKey = `${sourceNode}-${sourceHandle}--${targetNode}-${targetHandle}`;
      const targetKey = `${targetNode}-${targetHandle}--${sourceNode}-${sourceHandle}`;
      addConnectionToLookup("source", connection, targetKey, connectionLookup, sourceNode, sourceHandle);
      addConnectionToLookup("target", connection, sourceKey, connectionLookup, targetNode, targetHandle);
      edgeLookup.set(edge.id, edge);
    }
  }
  function isParentSelected(node, nodeLookup) {
    if (!node.parentId) {
      return false;
    }
    const parentNode = nodeLookup.get(node.parentId);
    if (!parentNode) {
      return false;
    }
    if (parentNode.selected) {
      return true;
    }
    return isParentSelected(parentNode, nodeLookup);
  }
  function hasSelector(target, selector, domNode) {
    let current = target;
    do {
      if (current?.matches?.(selector))
        return true;
      if (current === domNode)
        return false;
      current = current?.parentElement;
    } while (current);
    return false;
  }
  function getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {
    const dragItems = /* @__PURE__ */ new Map();
    for (const [id2, node] of nodeLookup) {
      if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === "undefined")) {
        const internalNode = nodeLookup.get(id2);
        if (internalNode) {
          dragItems.set(id2, {
            id: id2,
            position: internalNode.position || { x: 0, y: 0 },
            distance: {
              x: mousePos.x - internalNode.internals.positionAbsolute.x,
              y: mousePos.y - internalNode.internals.positionAbsolute.y
            },
            extent: internalNode.extent,
            parentId: internalNode.parentId,
            origin: internalNode.origin,
            expandParent: internalNode.expandParent,
            internals: {
              positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 }
            },
            measured: {
              width: internalNode.measured.width ?? 0,
              height: internalNode.measured.height ?? 0
            }
          });
        }
      }
    }
    return dragItems;
  }
  function getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true }) {
    const nodesFromDragItems = [];
    for (const [id2, dragItem] of dragItems) {
      const node2 = nodeLookup.get(id2)?.internals.userNode;
      if (node2) {
        nodesFromDragItems.push({
          ...node2,
          position: dragItem.position,
          dragging
        });
      }
    }
    if (!nodeId) {
      return [nodesFromDragItems[0], nodesFromDragItems];
    }
    const node = nodeLookup.get(nodeId)?.internals.userNode;
    return [
      !node ? nodesFromDragItems[0] : {
        ...node,
        position: dragItems.get(nodeId)?.position || node.position,
        dragging
      },
      nodesFromDragItems
    ];
  }
  function XYDrag({ onNodeMouseDown, getStoreItems, onDragStart: onDragStart2, onDrag, onDragStop }) {
    let lastPos = { x: null, y: null };
    let autoPanId = 0;
    let dragItems = /* @__PURE__ */ new Map();
    let autoPanStarted = false;
    let mousePosition = { x: 0, y: 0 };
    let containerBounds = null;
    let dragStarted = false;
    let d3Selection = null;
    let abortDrag = false;
    function update2({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0 }) {
      d3Selection = select_default2(domNode);
      function updateNodes({ x, y }, dragEvent) {
        const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions } = getStoreItems();
        lastPos = { x, y };
        let hasChange = false;
        let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };
        if (dragItems.size > 1 && nodeExtent) {
          const rect = getInternalNodesBounds(dragItems);
          nodesBox = rectToBox(rect);
        }
        for (const [id2, dragItem] of dragItems) {
          if (!nodeLookup.has(id2)) {
            continue;
          }
          let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };
          if (snapToGrid) {
            nextPosition = snapPosition(nextPosition, snapGrid);
          }
          let adjustedNodeExtent = [
            [nodeExtent[0][0], nodeExtent[0][1]],
            [nodeExtent[1][0], nodeExtent[1][1]]
          ];
          if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {
            const { positionAbsolute: positionAbsolute2 } = dragItem.internals;
            const x1 = positionAbsolute2.x - nodesBox.x + nodeExtent[0][0];
            const x2 = positionAbsolute2.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];
            const y1 = positionAbsolute2.y - nodesBox.y + nodeExtent[0][1];
            const y2 = positionAbsolute2.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];
            adjustedNodeExtent = [
              [x1, y1],
              [x2, y2]
            ];
          }
          const { position: position2, positionAbsolute } = calculateNodePosition({
            nodeId: id2,
            nextPosition,
            nodeLookup,
            nodeExtent: adjustedNodeExtent,
            nodeOrigin,
            onError
          });
          hasChange = hasChange || dragItem.position.x !== position2.x || dragItem.position.y !== position2.y;
          dragItem.position = position2;
          dragItem.internals.positionAbsolute = positionAbsolute;
        }
        if (!hasChange) {
          return;
        }
        updateNodePositions(dragItems, true);
        if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {
          const [currentNode, currentNodes] = getEventHandlerParams({
            nodeId,
            dragItems,
            nodeLookup
          });
          onDrag?.(dragEvent, dragItems, currentNode, currentNodes);
          onNodeDrag?.(dragEvent, currentNode, currentNodes);
          if (!nodeId) {
            onSelectionDrag?.(dragEvent, currentNodes);
          }
        }
      }
      async function autoPan() {
        if (!containerBounds) {
          return;
        }
        const { transform: transform2, panBy: panBy2, autoPanSpeed, autoPanOnNodeDrag } = getStoreItems();
        if (!autoPanOnNodeDrag) {
          autoPanStarted = false;
          cancelAnimationFrame(autoPanId);
          return;
        }
        const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);
        if (xMovement !== 0 || yMovement !== 0) {
          lastPos.x = (lastPos.x ?? 0) - xMovement / transform2[2];
          lastPos.y = (lastPos.y ?? 0) - yMovement / transform2[2];
          if (await panBy2({ x: xMovement, y: yMovement })) {
            updateNodes(lastPos, null);
          }
        }
        autoPanId = requestAnimationFrame(autoPan);
      }
      function startDrag(event) {
        const { nodeLookup, multiSelectionActive, nodesDraggable, transform: transform2, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges } = getStoreItems();
        dragStarted = true;
        if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {
          if (!nodeLookup.get(nodeId)?.selected) {
            unselectNodesAndEdges();
          }
        }
        if (isSelectable && selectNodesOnDrag && nodeId) {
          onNodeMouseDown?.(nodeId);
        }
        const pointerPos = getPointerPosition(event.sourceEvent, { transform: transform2, snapGrid, snapToGrid, containerBounds });
        lastPos = pointerPos;
        dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);
        if (dragItems.size > 0 && (onDragStart2 || onNodeDragStart || !nodeId && onSelectionDragStart)) {
          const [currentNode, currentNodes] = getEventHandlerParams({
            nodeId,
            dragItems,
            nodeLookup
          });
          onDragStart2?.(event.sourceEvent, dragItems, currentNode, currentNodes);
          onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);
          if (!nodeId) {
            onSelectionDragStart?.(event.sourceEvent, currentNodes);
          }
        }
      }
      const d3DragInstance = drag_default().clickDistance(nodeClickDistance).on("start", (event) => {
        const { domNode: domNode2, nodeDragThreshold, transform: transform2, snapGrid, snapToGrid } = getStoreItems();
        containerBounds = domNode2?.getBoundingClientRect() || null;
        abortDrag = false;
        if (nodeDragThreshold === 0) {
          startDrag(event);
        }
        const pointerPos = getPointerPosition(event.sourceEvent, { transform: transform2, snapGrid, snapToGrid, containerBounds });
        lastPos = pointerPos;
        mousePosition = getEventPosition(event.sourceEvent, containerBounds);
      }).on("drag", (event) => {
        const { autoPanOnNodeDrag, transform: transform2, snapGrid, snapToGrid, nodeDragThreshold, nodeLookup } = getStoreItems();
        const pointerPos = getPointerPosition(event.sourceEvent, { transform: transform2, snapGrid, snapToGrid, containerBounds });
        if (event.sourceEvent.type === "touchmove" && event.sourceEvent.touches.length > 1 || // if user deletes a node while dragging, we need to abort the drag to prevent errors
        nodeId && !nodeLookup.has(nodeId)) {
          abortDrag = true;
        }
        if (abortDrag) {
          return;
        }
        if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {
          autoPanStarted = true;
          autoPan();
        }
        if (!dragStarted) {
          const x = pointerPos.xSnapped - (lastPos.x ?? 0);
          const y = pointerPos.ySnapped - (lastPos.y ?? 0);
          const distance3 = Math.sqrt(x * x + y * y);
          if (distance3 > nodeDragThreshold) {
            startDrag(event);
          }
        }
        if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {
          mousePosition = getEventPosition(event.sourceEvent, containerBounds);
          updateNodes(pointerPos, event.sourceEvent);
        }
      }).on("end", (event) => {
        if (!dragStarted || abortDrag) {
          return;
        }
        autoPanStarted = false;
        dragStarted = false;
        cancelAnimationFrame(autoPanId);
        if (dragItems.size > 0) {
          const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();
          updateNodePositions(dragItems, false);
          if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {
            const [currentNode, currentNodes] = getEventHandlerParams({
              nodeId,
              dragItems,
              nodeLookup,
              dragging: false
            });
            onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);
            onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);
            if (!nodeId) {
              onSelectionDragStop?.(event.sourceEvent, currentNodes);
            }
          }
        }
      }).filter((event) => {
        const target = event.target;
        const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));
        return isDraggable;
      });
      d3Selection.call(d3DragInstance);
    }
    function destroy() {
      d3Selection?.on(".drag", null);
    }
    return {
      update: update2,
      destroy
    };
  }
  function getNodesWithinDistance(position2, nodeLookup, distance3) {
    const nodes = [];
    const rect = {
      x: position2.x - distance3,
      y: position2.y - distance3,
      width: distance3 * 2,
      height: distance3 * 2
    };
    for (const node of nodeLookup.values()) {
      if (getOverlappingArea(rect, nodeToRect(node)) > 0) {
        nodes.push(node);
      }
    }
    return nodes;
  }
  var ADDITIONAL_DISTANCE = 250;
  function getClosestHandle(position2, connectionRadius, nodeLookup, fromHandle) {
    let closestHandles = [];
    let minDistance = Infinity;
    const closeNodes = getNodesWithinDistance(position2, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);
    for (const node of closeNodes) {
      const allHandles = [...node.internals.handleBounds?.source ?? [], ...node.internals.handleBounds?.target ?? []];
      for (const handle of allHandles) {
        if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {
          continue;
        }
        const { x, y } = getHandlePosition(node, handle, handle.position, true);
        const distance3 = Math.sqrt(Math.pow(x - position2.x, 2) + Math.pow(y - position2.y, 2));
        if (distance3 > connectionRadius) {
          continue;
        }
        if (distance3 < minDistance) {
          closestHandles = [{ ...handle, x, y }];
          minDistance = distance3;
        } else if (distance3 === minDistance) {
          closestHandles.push({ ...handle, x, y });
        }
      }
    }
    if (!closestHandles.length) {
      return null;
    }
    if (closestHandles.length > 1) {
      const oppositeHandleType = fromHandle.type === "source" ? "target" : "source";
      return closestHandles.find((handle) => handle.type === oppositeHandleType) ?? closestHandles[0];
    }
    return closestHandles[0];
  }
  function getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {
    const node = nodeLookup.get(nodeId);
    if (!node) {
      return null;
    }
    const handles = connectionMode === "strict" ? node.internals.handleBounds?.[handleType] : [...node.internals.handleBounds?.source ?? [], ...node.internals.handleBounds?.target ?? []];
    const handle = (handleId ? handles?.find((h) => h.id === handleId) : handles?.[0]) ?? null;
    return handle && withAbsolutePosition ? { ...handle, ...getHandlePosition(node, handle, handle.position, true) } : handle;
  }
  function getHandleType(edgeUpdaterType, handleDomNode) {
    if (edgeUpdaterType) {
      return edgeUpdaterType;
    } else if (handleDomNode?.classList.contains("target")) {
      return "target";
    } else if (handleDomNode?.classList.contains("source")) {
      return "source";
    }
    return null;
  }
  function isConnectionValid(isInsideConnectionRadius, isHandleValid) {
    let isValid = null;
    if (isHandleValid) {
      isValid = true;
    } else if (isInsideConnectionRadius && !isHandleValid) {
      isValid = false;
    }
    return isValid;
  }
  var alwaysValid = () => true;
  function onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy: panBy2, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed }) {
    const doc = getHostForElement(event.target);
    let autoPanId = 0;
    let closestHandle;
    const { x, y } = getEventPosition(event);
    const clickedHandle = doc?.elementFromPoint(x, y);
    const handleType = getHandleType(edgeUpdaterType, clickedHandle);
    const containerBounds = domNode?.getBoundingClientRect();
    if (!containerBounds || !handleType) {
      return;
    }
    const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);
    if (!fromHandleInternal) {
      return;
    }
    let position2 = getEventPosition(event, containerBounds);
    let autoPanStarted = false;
    let connection = null;
    let isValid = false;
    let handleDomNode = null;
    function autoPan() {
      if (!autoPanOnConnect || !containerBounds) {
        return;
      }
      const [x2, y2] = calcAutoPan(position2, containerBounds, autoPanSpeed);
      panBy2({ x: x2, y: y2 });
      autoPanId = requestAnimationFrame(autoPan);
    }
    const fromHandle = {
      ...fromHandleInternal,
      nodeId,
      type: handleType,
      position: fromHandleInternal.position
    };
    const fromNodeInternal = nodeLookup.get(nodeId);
    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);
    const newConnection = {
      inProgress: true,
      isValid: null,
      from,
      fromHandle,
      fromPosition: fromHandle.position,
      fromNode: fromNodeInternal,
      to: position2,
      toHandle: null,
      toPosition: oppositePosition[fromHandle.position],
      toNode: null
    };
    updateConnection(newConnection);
    let previousConnection = newConnection;
    onConnectStart?.(event, { nodeId, handleId, handleType });
    function onPointerMove(event2) {
      if (!getFromHandle() || !fromHandle) {
        onPointerUp(event2);
        return;
      }
      const transform2 = getTransform();
      position2 = getEventPosition(event2, containerBounds);
      closestHandle = getClosestHandle(pointToRendererPoint(position2, transform2, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);
      if (!autoPanStarted) {
        autoPan();
        autoPanStarted = true;
      }
      const result = isValidHandle(event2, {
        handle: closestHandle,
        connectionMode,
        fromNodeId: nodeId,
        fromHandleId: handleId,
        fromType: isTarget ? "target" : "source",
        isValidConnection,
        doc,
        lib,
        flowId,
        nodeLookup
      });
      handleDomNode = result.handleDomNode;
      connection = result.connection;
      isValid = isConnectionValid(!!closestHandle, result.isValid);
      const newConnection2 = {
        // from stays the same
        ...previousConnection,
        isValid,
        to: closestHandle && isValid ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform2) : position2,
        toHandle: result.toHandle,
        toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],
        toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null
      };
      if (isValid && closestHandle && previousConnection.toHandle && newConnection2.toHandle && previousConnection.toHandle.type === newConnection2.toHandle.type && previousConnection.toHandle.nodeId === newConnection2.toHandle.nodeId && previousConnection.toHandle.id === newConnection2.toHandle.id && previousConnection.to.x === newConnection2.to.x && previousConnection.to.y === newConnection2.to.y) {
        return;
      }
      updateConnection(newConnection2);
      previousConnection = newConnection2;
    }
    function onPointerUp(event2) {
      if ((closestHandle || handleDomNode) && connection && isValid) {
        onConnect?.(connection);
      }
      const { inProgress, ...connectionState } = previousConnection;
      const finalConnectionState = {
        ...connectionState,
        toPosition: previousConnection.toHandle ? previousConnection.toPosition : null
      };
      onConnectEnd?.(event2, finalConnectionState);
      if (edgeUpdaterType) {
        onReconnectEnd?.(event2, finalConnectionState);
      }
      cancelConnection();
      cancelAnimationFrame(autoPanId);
      autoPanStarted = false;
      isValid = false;
      connection = null;
      handleDomNode = null;
      doc.removeEventListener("mousemove", onPointerMove);
      doc.removeEventListener("mouseup", onPointerUp);
      doc.removeEventListener("touchmove", onPointerMove);
      doc.removeEventListener("touchend", onPointerUp);
    }
    doc.addEventListener("mousemove", onPointerMove);
    doc.addEventListener("mouseup", onPointerUp);
    doc.addEventListener("touchmove", onPointerMove);
    doc.addEventListener("touchend", onPointerUp);
  }
  function isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, nodeLookup }) {
    const isTarget = fromType === "target";
    const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id="${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}"]`) : null;
    const { x, y } = getEventPosition(event);
    const handleBelow = doc.elementFromPoint(x, y);
    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;
    const result = {
      handleDomNode: handleToCheck,
      isValid: false,
      connection: null,
      toHandle: null
    };
    if (handleToCheck) {
      const handleType = getHandleType(void 0, handleToCheck);
      const handleNodeId = handleToCheck.getAttribute("data-nodeid");
      const handleId = handleToCheck.getAttribute("data-handleid");
      const connectable = handleToCheck.classList.contains("connectable");
      const connectableEnd = handleToCheck.classList.contains("connectableend");
      if (!handleNodeId || !handleType) {
        return result;
      }
      const connection = {
        source: isTarget ? handleNodeId : fromNodeId,
        sourceHandle: isTarget ? handleId : fromHandleId,
        target: isTarget ? fromNodeId : handleNodeId,
        targetHandle: isTarget ? fromHandleId : handleId
      };
      result.connection = connection;
      const isConnectable = connectable && connectableEnd;
      const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === "source" || !isTarget && handleType === "target" : handleNodeId !== fromNodeId || handleId !== fromHandleId);
      result.isValid = isValid && isValidConnection(connection);
      result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);
    }
    return result;
  }
  var XYHandle = {
    onPointerDown,
    isValid: isValidHandle
  };
  function XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {
    const selection2 = select_default2(domNode);
    function update2({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false }) {
      const zoomHandler = (event) => {
        const transform2 = getTransform();
        if (event.sourceEvent.type !== "wheel" || !panZoom) {
          return;
        }
        const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 2e-3) * zoomStep;
        const nextZoom = transform2[2] * Math.pow(2, pinchDelta);
        panZoom.scaleTo(nextZoom);
      };
      let panStart = [0, 0];
      const panStartHandler = (event) => {
        if (event.sourceEvent.type === "mousedown" || event.sourceEvent.type === "touchstart") {
          panStart = [
            event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,
            event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY
          ];
        }
      };
      const panHandler = (event) => {
        const transform2 = getTransform();
        if (event.sourceEvent.type !== "mousemove" && event.sourceEvent.type !== "touchmove" || !panZoom) {
          return;
        }
        const panCurrent = [
          event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,
          event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY
        ];
        const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];
        panStart = panCurrent;
        const moveScale = getViewScale() * Math.max(transform2[2], Math.log(transform2[2])) * (inversePan ? -1 : 1);
        const position2 = {
          x: transform2[0] - panDelta[0] * moveScale,
          y: transform2[1] - panDelta[1] * moveScale
        };
        const extent = [
          [0, 0],
          [width, height]
        ];
        panZoom.setViewportConstrained({
          x: position2.x,
          y: position2.y,
          zoom: transform2[2]
        }, extent, translateExtent);
      };
      const zoomAndPanHandler = zoom_default2().on("start", panStartHandler).on("zoom", pannable ? panHandler : null).on("zoom.wheel", zoomable ? zoomHandler : null);
      selection2.call(zoomAndPanHandler, {});
    }
    function destroy() {
      selection2.on("zoom", null);
    }
    return {
      update: update2,
      destroy,
      pointer: pointer_default
    };
  }
  var viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;
  var transformToViewport = (transform2) => ({
    x: transform2.x,
    y: transform2.y,
    zoom: transform2.k
  });
  var viewportToTransform = ({ x, y, zoom }) => identity2.translate(x, y).scale(zoom);
  var isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);
  var isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);
  var getD3Transition = (selection2, duration = 0, onEnd = () => {
  }) => {
    const hasDuration = typeof duration === "number" && duration > 0;
    if (!hasDuration) {
      onEnd();
    }
    return hasDuration ? selection2.transition().duration(duration).on("end", onEnd) : selection2;
  };
  var wheelDelta = (event) => {
    const factor = event.ctrlKey && isMacOs() ? 10 : 1;
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * factor;
  };
  function createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd }) {
    return (event) => {
      if (isWrappedWithClass(event, noWheelClassName)) {
        return false;
      }
      event.preventDefault();
      event.stopImmediatePropagation();
      const currentZoom = d3Selection.property("__zoom").k || 1;
      if (event.ctrlKey && zoomOnPinch) {
        const point = pointer_default(event);
        const pinchDelta = wheelDelta(event);
        const zoom = currentZoom * Math.pow(2, pinchDelta);
        d3Zoom.scaleTo(d3Selection, zoom, point, event);
        return;
      }
      const deltaNormalize = event.deltaMode === 1 ? 20 : 1;
      let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;
      let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;
      if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {
        deltaX = event.deltaY * deltaNormalize;
        deltaY = 0;
      }
      d3Zoom.translateBy(
        d3Selection,
        -(deltaX / currentZoom) * panOnScrollSpeed,
        -(deltaY / currentZoom) * panOnScrollSpeed,
        // @ts-ignore
        { internal: true }
      );
      const nextViewport = transformToViewport(d3Selection.property("__zoom"));
      clearTimeout(zoomPanValues.panScrollTimeout);
      if (!zoomPanValues.isPanScrolling) {
        zoomPanValues.isPanScrolling = true;
        onPanZoomStart?.(event, nextViewport);
      }
      if (zoomPanValues.isPanScrolling) {
        onPanZoom?.(event, nextViewport);
        zoomPanValues.panScrollTimeout = setTimeout(() => {
          onPanZoomEnd?.(event, nextViewport);
          zoomPanValues.isPanScrolling = false;
        }, 150);
      }
    };
  }
  function createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {
    return function(event, d) {
      const preventZoom = !preventScrolling && event.type === "wheel" && !event.ctrlKey;
      if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {
        return null;
      }
      event.preventDefault();
      d3ZoomHandler.call(this, event, d);
    };
  }
  function createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {
    return (event) => {
      if (event.sourceEvent?.internal) {
        return;
      }
      const viewport2 = transformToViewport(event.transform);
      zoomPanValues.mouseButton = event.sourceEvent?.button || 0;
      zoomPanValues.isZoomingOrPanning = true;
      zoomPanValues.prevViewport = viewport2;
      if (event.sourceEvent?.type === "mousedown") {
        onDraggingChange(true);
      }
      if (onPanZoomStart) {
        onPanZoomStart?.(event.sourceEvent, viewport2);
      }
    };
  }
  function createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom }) {
    return (event) => {
      zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));
      if (!event.sourceEvent?.sync) {
        onTransformChange([event.transform.x, event.transform.y, event.transform.k]);
      }
      if (onPanZoom && !event.sourceEvent?.internal) {
        onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));
      }
    };
  }
  function createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu }) {
    return (event) => {
      if (event.sourceEvent?.internal) {
        return;
      }
      zoomPanValues.isZoomingOrPanning = false;
      if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {
        onPaneContextMenu(event.sourceEvent);
      }
      zoomPanValues.usedRightMouseButton = false;
      onDraggingChange(false);
      if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {
        const viewport2 = transformToViewport(event.transform);
        zoomPanValues.prevViewport = viewport2;
        clearTimeout(zoomPanValues.timerId);
        zoomPanValues.timerId = setTimeout(
          () => {
            onPanZoomEnd?.(event.sourceEvent, viewport2);
          },
          // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll
          panOnScroll ? 150 : 0
        );
      }
    };
  }
  function createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib }) {
    return (event) => {
      const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;
      const pinchZoom = zoomOnPinch && event.ctrlKey;
      if (event.button === 1 && event.type === "mousedown" && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {
        return true;
      }
      if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {
        return false;
      }
      if (userSelectionActive) {
        return false;
      }
      if (isWrappedWithClass(event, noWheelClassName) && event.type === "wheel") {
        return false;
      }
      if (isWrappedWithClass(event, noPanClassName) && (event.type !== "wheel" || panOnScroll && event.type === "wheel" && !zoomActivationKeyPressed)) {
        return false;
      }
      if (!zoomOnPinch && event.ctrlKey && event.type === "wheel") {
        return false;
      }
      if (!zoomOnPinch && event.type === "touchstart" && event.touches?.length > 1) {
        event.preventDefault();
        return false;
      }
      if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === "wheel") {
        return false;
      }
      if (!panOnDrag && (event.type === "mousedown" || event.type === "touchstart")) {
        return false;
      }
      if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === "mousedown") {
        return false;
      }
      const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;
      return (!event.ctrlKey || event.type === "wheel") && buttonAllowed;
    };
  }
  function XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport: viewport2, onPanZoom, onPanZoomStart, onPanZoomEnd, onDraggingChange }) {
    const zoomPanValues = {
      isZoomingOrPanning: false,
      usedRightMouseButton: false,
      prevViewport: { x: 0, y: 0, zoom: 0 },
      mouseButton: 0,
      timerId: void 0,
      panScrollTimeout: void 0,
      isPanScrolling: false
    };
    const bbox = domNode.getBoundingClientRect();
    const d3ZoomInstance = zoom_default2().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);
    const d3Selection = select_default2(domNode).call(d3ZoomInstance);
    setViewportConstrained({
      x: viewport2.x,
      y: viewport2.y,
      zoom: clamp(viewport2.zoom, minZoom, maxZoom)
    }, [
      [0, 0],
      [bbox.width, bbox.height]
    ], translateExtent);
    const d3ZoomHandler = d3Selection.on("wheel.zoom");
    const d3DblClickZoomHandler = d3Selection.on("dblclick.zoom");
    d3ZoomInstance.wheelDelta(wheelDelta);
    function setTransform(transform2, options) {
      if (d3Selection) {
        return new Promise((resolve) => {
          d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform2);
        });
      }
      return Promise.resolve(false);
    }
    function update2({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, onTransformChange }) {
      if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {
        destroy();
      }
      const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;
      const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({
        zoomPanValues,
        noWheelClassName,
        d3Selection,
        d3Zoom: d3ZoomInstance,
        panOnScrollMode,
        panOnScrollSpeed,
        zoomOnPinch,
        onPanZoomStart,
        onPanZoom,
        onPanZoomEnd
      }) : createZoomOnScrollHandler({
        noWheelClassName,
        preventScrolling,
        d3ZoomHandler
      });
      d3Selection.on("wheel.zoom", wheelHandler, { passive: false });
      if (!userSelectionActive) {
        const startHandler = createPanZoomStartHandler({
          zoomPanValues,
          onDraggingChange,
          onPanZoomStart
        });
        d3ZoomInstance.on("start", startHandler);
        const panZoomHandler = createPanZoomHandler({
          zoomPanValues,
          panOnDrag,
          onPaneContextMenu: !!onPaneContextMenu,
          onPanZoom,
          onTransformChange
        });
        d3ZoomInstance.on("zoom", panZoomHandler);
        const panZoomEndHandler = createPanZoomEndHandler({
          zoomPanValues,
          panOnDrag,
          panOnScroll,
          onPaneContextMenu,
          onPanZoomEnd,
          onDraggingChange
        });
        d3ZoomInstance.on("end", panZoomEndHandler);
      }
      const filter2 = createFilter({
        zoomActivationKeyPressed,
        panOnDrag,
        zoomOnScroll,
        panOnScroll,
        zoomOnDoubleClick,
        zoomOnPinch,
        userSelectionActive,
        noPanClassName,
        noWheelClassName,
        lib
      });
      d3ZoomInstance.filter(filter2);
      if (zoomOnDoubleClick) {
        d3Selection.on("dblclick.zoom", d3DblClickZoomHandler);
      } else {
        d3Selection.on("dblclick.zoom", null);
      }
    }
    function destroy() {
      d3ZoomInstance.on("zoom", null);
    }
    async function setViewportConstrained(viewport3, extent, translateExtent2) {
      const nextTransform = viewportToTransform(viewport3);
      const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent2);
      if (contrainedTransform) {
        await setTransform(contrainedTransform);
      }
      return new Promise((resolve) => resolve(contrainedTransform));
    }
    async function setViewport(viewport3, options) {
      const nextTransform = viewportToTransform(viewport3);
      await setTransform(nextTransform, options);
      return new Promise((resolve) => resolve(nextTransform));
    }
    function syncViewport(viewport3) {
      if (d3Selection) {
        const nextTransform = viewportToTransform(viewport3);
        const currentTransform = d3Selection.property("__zoom");
        if (currentTransform.k !== viewport3.zoom || currentTransform.x !== viewport3.x || currentTransform.y !== viewport3.y) {
          d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });
        }
      }
    }
    function getViewport2() {
      const transform2 = d3Selection ? transform(d3Selection.node()) : { x: 0, y: 0, k: 1 };
      return { x: transform2.x, y: transform2.y, zoom: transform2.k };
    }
    function scaleTo(zoom, options) {
      if (d3Selection) {
        return new Promise((resolve) => {
          d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);
        });
      }
      return Promise.resolve(false);
    }
    function scaleBy(factor, options) {
      if (d3Selection) {
        return new Promise((resolve) => {
          d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);
        });
      }
      return Promise.resolve(false);
    }
    function setScaleExtent(scaleExtent) {
      d3ZoomInstance?.scaleExtent(scaleExtent);
    }
    function setTranslateExtent(translateExtent2) {
      d3ZoomInstance?.translateExtent(translateExtent2);
    }
    function setClickDistance(distance3) {
      const validDistance = !isNumeric(distance3) || distance3 < 0 ? 0 : distance3;
      d3ZoomInstance?.clickDistance(validDistance);
    }
    return {
      update: update2,
      destroy,
      setViewport,
      setViewportConstrained,
      getViewport: getViewport2,
      scaleTo,
      scaleBy,
      setScaleExtent,
      setTranslateExtent,
      syncViewport,
      setClickDistance
    };
  }
  var ResizeControlVariant;
  (function(ResizeControlVariant2) {
    ResizeControlVariant2["Line"] = "line";
    ResizeControlVariant2["Handle"] = "handle";
  })(ResizeControlVariant || (ResizeControlVariant = {}));
  function getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY }) {
    const deltaWidth = width - prevWidth;
    const deltaHeight = height - prevHeight;
    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];
    if (deltaWidth && affectsX) {
      direction[0] = direction[0] * -1;
    }
    if (deltaHeight && affectsY) {
      direction[1] = direction[1] * -1;
    }
    return direction;
  }
  function getControlDirection(controlPosition) {
    const isHorizontal = controlPosition.includes("right") || controlPosition.includes("left");
    const isVertical = controlPosition.includes("bottom") || controlPosition.includes("top");
    const affectsX = controlPosition.includes("left");
    const affectsY = controlPosition.includes("top");
    return {
      isHorizontal,
      isVertical,
      affectsX,
      affectsY
    };
  }
  function getLowerExtentClamp(lowerExtent, lowerBound) {
    return Math.max(0, lowerBound - lowerExtent);
  }
  function getUpperExtentClamp(upperExtent, upperBound) {
    return Math.max(0, upperExtent - upperBound);
  }
  function getSizeClamp(size, minSize, maxSize) {
    return Math.max(0, minSize - size, size - maxSize);
  }
  function xor(a, b) {
    return a ? !b : b;
  }
  function getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {
    let { affectsX, affectsY } = controlDirection;
    const { isHorizontal, isVertical } = controlDirection;
    const isDiagonal = isHorizontal && isVertical;
    const { xSnapped, ySnapped } = pointerPosition;
    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;
    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;
    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);
    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);
    const newWidth = startWidth + (affectsX ? -distX : distX);
    const newHeight = startHeight + (affectsY ? -distY : distY);
    const originOffsetX = -nodeOrigin[0] * startWidth;
    const originOffsetY = -nodeOrigin[1] * startHeight;
    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);
    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);
    if (extent) {
      let xExtentClamp = 0;
      let yExtentClamp = 0;
      if (affectsX && distX < 0) {
        xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);
      } else if (!affectsX && distX > 0) {
        xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);
      }
      if (affectsY && distY < 0) {
        yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);
      } else if (!affectsY && distY > 0) {
        yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);
      }
      clampX = Math.max(clampX, xExtentClamp);
      clampY = Math.max(clampY, yExtentClamp);
    }
    if (childExtent) {
      let xExtentClamp = 0;
      let yExtentClamp = 0;
      if (affectsX && distX > 0) {
        xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);
      } else if (!affectsX && distX < 0) {
        xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);
      }
      if (affectsY && distY > 0) {
        yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);
      } else if (!affectsY && distY < 0) {
        yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);
      }
      clampX = Math.max(clampX, xExtentClamp);
      clampY = Math.max(clampY, yExtentClamp);
    }
    if (keepAspectRatio) {
      if (isHorizontal) {
        const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;
        clampX = Math.max(clampX, aspectHeightClamp);
        if (extent) {
          let aspectExtentClamp = 0;
          if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {
            aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;
          } else {
            aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;
          }
          clampX = Math.max(clampX, aspectExtentClamp);
        }
        if (childExtent) {
          let aspectExtentClamp = 0;
          if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {
            aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;
          } else {
            aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;
          }
          clampX = Math.max(clampX, aspectExtentClamp);
        }
      }
      if (isVertical) {
        const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;
        clampY = Math.max(clampY, aspectWidthClamp);
        if (extent) {
          let aspectExtentClamp = 0;
          if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {
            aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;
          } else {
            aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;
          }
          clampY = Math.max(clampY, aspectExtentClamp);
        }
        if (childExtent) {
          let aspectExtentClamp = 0;
          if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {
            aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;
          } else {
            aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;
          }
          clampY = Math.max(clampY, aspectExtentClamp);
        }
      }
    }
    distY = distY + (distY < 0 ? clampY : -clampY);
    distX = distX + (distX < 0 ? clampX : -clampX);
    if (keepAspectRatio) {
      if (isDiagonal) {
        if (newWidth > newHeight * aspectRatio) {
          distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;
        } else {
          distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;
        }
      } else {
        if (isHorizontal) {
          distY = distX / aspectRatio;
          affectsY = affectsX;
        } else {
          distX = distY * aspectRatio;
          affectsX = affectsY;
        }
      }
    }
    const x = affectsX ? startX + distX : startX;
    const y = affectsY ? startY + distY : startY;
    return {
      width: startWidth + (affectsX ? -distX : distX),
      height: startHeight + (affectsY ? -distY : distY),
      x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,
      y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y
    };
  }
  var initPrevValues = { width: 0, height: 0, x: 0, y: 0 };
  var initStartValues = {
    ...initPrevValues,
    pointerX: 0,
    pointerY: 0,
    aspectRatio: 1
  };
  function nodeToParentExtent(node) {
    return [
      [0, 0],
      [node.measured.width, node.measured.height]
    ];
  }
  function nodeToChildExtent(child, parent, nodeOrigin) {
    const x = parent.position.x + child.position.x;
    const y = parent.position.y + child.position.y;
    const width = child.measured.width ?? 0;
    const height = child.measured.height ?? 0;
    const originOffsetX = nodeOrigin[0] * width;
    const originOffsetY = nodeOrigin[1] * height;
    return [
      [x - originOffsetX, y - originOffsetY],
      [x + width - originOffsetX, y + height - originOffsetY]
    ];
  }
  function XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {
    const selection2 = select_default2(domNode);
    function update2({ controlPosition, boundaries, keepAspectRatio, onResizeStart, onResize, onResizeEnd, shouldResize }) {
      let prevValues = { ...initPrevValues };
      let startValues = { ...initStartValues };
      const controlDirection = getControlDirection(controlPosition);
      let node = void 0;
      let containerBounds = null;
      let childNodes = [];
      let parentNode = void 0;
      let parentExtent = void 0;
      let childExtent = void 0;
      const dragHandler = drag_default().on("start", (event) => {
        const { nodeLookup, transform: transform2, snapGrid, snapToGrid, nodeOrigin, paneDomNode } = getStoreItems();
        node = nodeLookup.get(nodeId);
        if (!node) {
          return;
        }
        containerBounds = paneDomNode?.getBoundingClientRect() ?? null;
        const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, {
          transform: transform2,
          snapGrid,
          snapToGrid,
          containerBounds
        });
        prevValues = {
          width: node.measured.width ?? 0,
          height: node.measured.height ?? 0,
          x: node.position.x ?? 0,
          y: node.position.y ?? 0
        };
        startValues = {
          ...prevValues,
          pointerX: xSnapped,
          pointerY: ySnapped,
          aspectRatio: prevValues.width / prevValues.height
        };
        parentNode = void 0;
        if (node.parentId && (node.extent === "parent" || node.expandParent)) {
          parentNode = nodeLookup.get(node.parentId);
          parentExtent = parentNode && node.extent === "parent" ? nodeToParentExtent(parentNode) : void 0;
        }
        childNodes = [];
        childExtent = void 0;
        for (const [childId, child] of nodeLookup) {
          if (child.parentId === nodeId) {
            childNodes.push({
              id: childId,
              position: { ...child.position },
              extent: child.extent
            });
            if (child.extent === "parent" || child.expandParent) {
              const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);
              if (childExtent) {
                childExtent = [
                  [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],
                  [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]
                ];
              } else {
                childExtent = extent;
              }
            }
          }
        }
        onResizeStart?.(event, { ...prevValues });
      }).on("drag", (event) => {
        const { transform: transform2, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();
        const pointerPosition = getPointerPosition(event.sourceEvent, {
          transform: transform2,
          snapGrid,
          snapToGrid,
          containerBounds
        });
        const childChanges = [];
        if (!node) {
          return;
        }
        const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;
        const change = {};
        const nodeOrigin = node.origin ?? storeNodeOrigin;
        const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);
        const isWidthChange = width !== prevWidth;
        const isHeightChange = height !== prevHeight;
        const isXPosChange = x !== prevX && isWidthChange;
        const isYPosChange = y !== prevY && isHeightChange;
        if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {
          return;
        }
        if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {
          change.x = isXPosChange ? x : prevValues.x;
          change.y = isYPosChange ? y : prevValues.y;
          prevValues.x = change.x;
          prevValues.y = change.y;
          if (childNodes.length > 0) {
            const xChange = x - prevX;
            const yChange = y - prevY;
            for (const childNode of childNodes) {
              childNode.position = {
                x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),
                y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)
              };
              childChanges.push(childNode);
            }
          }
        }
        if (isWidthChange || isHeightChange) {
          change.width = isWidthChange ? width : prevValues.width;
          change.height = isHeightChange ? height : prevValues.height;
          prevValues.width = change.width;
          prevValues.height = change.height;
        }
        if (parentNode && node.expandParent) {
          const xLimit = nodeOrigin[0] * (change.width ?? 0);
          if (change.x && change.x < xLimit) {
            prevValues.x = xLimit;
            startValues.x = startValues.x - (change.x - xLimit);
          }
          const yLimit = nodeOrigin[1] * (change.height ?? 0);
          if (change.y && change.y < yLimit) {
            prevValues.y = yLimit;
            startValues.y = startValues.y - (change.y - yLimit);
          }
        }
        const direction = getResizeDirection({
          width: prevValues.width,
          prevWidth,
          height: prevValues.height,
          prevHeight,
          affectsX: controlDirection.affectsX,
          affectsY: controlDirection.affectsY
        });
        const nextValues = { ...prevValues, direction };
        const callResize = shouldResize?.(event, nextValues);
        if (callResize === false) {
          return;
        }
        onResize?.(event, nextValues);
        onChange(change, childChanges);
      }).on("end", (event) => {
        onResizeEnd?.(event, { ...prevValues });
        onEnd?.();
      });
      selection2.call(dragHandler);
    }
    function destroy() {
      selection2.on(".drag", null);
    }
    return {
      update: update2,
      destroy
    };
  }

  // node_modules/zustand/esm/traditional.mjs
  var import_react = __toESM(require_react(), 1);
  var import_with_selector = __toESM(require_with_selector(), 1);

  // node_modules/zustand/esm/vanilla.mjs
  var import_meta = {};
  var createStoreImpl = (createState) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace2) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace2 != null ? replace2 : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    };
    const getState = () => state;
    const getInitialState2 = () => initialState;
    const subscribe = (listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    };
    const destroy = () => {
      if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
        console.warn(
          "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
        );
      }
      listeners.clear();
    };
    const api = { setState, getState, getInitialState: getInitialState2, subscribe, destroy };
    const initialState = state = createState(setState, getState, api);
    return api;
  };
  var createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

  // node_modules/zustand/esm/traditional.mjs
  var { useDebugValue } = import_react.default;
  var { useSyncExternalStoreWithSelector } = import_with_selector.default;
  var identity3 = (arg) => arg;
  function useStoreWithEqualityFn(api, selector = identity3, equalityFn) {
    const slice = useSyncExternalStoreWithSelector(
      api.subscribe,
      api.getState,
      api.getServerState || api.getInitialState,
      selector,
      equalityFn
    );
    useDebugValue(slice);
    return slice;
  }
  var createWithEqualityFnImpl = (createState, defaultEqualityFn) => {
    const api = createStore(createState);
    const useBoundStoreWithEqualityFn = (selector, equalityFn = defaultEqualityFn) => useStoreWithEqualityFn(api, selector, equalityFn);
    Object.assign(useBoundStoreWithEqualityFn, api);
    return useBoundStoreWithEqualityFn;
  };
  var createWithEqualityFn = (createState, defaultEqualityFn) => createState ? createWithEqualityFnImpl(createState, defaultEqualityFn) : createWithEqualityFnImpl;

  // node_modules/zustand/esm/shallow.mjs
  function shallow$1(objA, objB) {
    if (Object.is(objA, objB)) {
      return true;
    }
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    if (objA instanceof Map && objB instanceof Map) {
      if (objA.size !== objB.size)
        return false;
      for (const [key, value] of objA) {
        if (!Object.is(value, objB.get(key))) {
          return false;
        }
      }
      return true;
    }
    if (objA instanceof Set && objB instanceof Set) {
      if (objA.size !== objB.size)
        return false;
      for (const value of objA) {
        if (!objB.has(value)) {
          return false;
        }
      }
      return true;
    }
    const keysA = Object.keys(objA);
    if (keysA.length !== Object.keys(objB).length) {
      return false;
    }
    for (const keyA of keysA) {
      if (!Object.prototype.hasOwnProperty.call(objB, keyA) || !Object.is(objA[keyA], objB[keyA])) {
        return false;
      }
    }
    return true;
  }

  // node_modules/@xyflow/react/dist/esm/index.js
  var import_react_dom = __toESM(require_react_dom());
  "use client";
  var StoreContext = (0, import_react2.createContext)(null);
  var Provider$1 = StoreContext.Provider;
  var zustandErrorMessage = errorMessages["error001"]();
  function useStore(selector, equalityFn) {
    const store = (0, import_react2.useContext)(StoreContext);
    if (store === null) {
      throw new Error(zustandErrorMessage);
    }
    return useStoreWithEqualityFn(store, selector, equalityFn);
  }
  function useStoreApi() {
    const store = (0, import_react2.useContext)(StoreContext);
    if (store === null) {
      throw new Error(zustandErrorMessage);
    }
    return (0, import_react2.useMemo)(() => ({
      getState: store.getState,
      setState: store.setState,
      subscribe: store.subscribe
    }), [store]);
  }
  var style = { display: "none" };
  var ariaLiveStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0px, 0px, 0px, 0px)",
    clipPath: "inset(100%)"
  };
  var ARIA_NODE_DESC_KEY = "react-flow__node-desc";
  var ARIA_EDGE_DESC_KEY = "react-flow__edge-desc";
  var ARIA_LIVE_MESSAGE = "react-flow__aria-live";
  var selector$o = (s) => s.ariaLiveMessage;
  function AriaLiveMessage({ rfId }) {
    const ariaLiveMessage = useStore(selector$o);
    return (0, import_jsx_runtime.jsx)("div", { id: `${ARIA_LIVE_MESSAGE}-${rfId}`, "aria-live": "assertive", "aria-atomic": "true", style: ariaLiveStyle, children: ariaLiveMessage });
  }
  function A11yDescriptions({ rfId, disableKeyboardA11y }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsxs)("div", { id: `${ARIA_NODE_DESC_KEY}-${rfId}`, style, children: ["Press enter or space to select a node.", !disableKeyboardA11y && "You can then use the arrow keys to move the node around.", " Press delete to remove it and escape to cancel.", " "] }), (0, import_jsx_runtime.jsx)("div", { id: `${ARIA_EDGE_DESC_KEY}-${rfId}`, style, children: "Press enter or space to select an edge. You can then press delete to remove it or escape to cancel." }), !disableKeyboardA11y && (0, import_jsx_runtime.jsx)(AriaLiveMessage, { rfId })] });
  }
  var selector$n = (s) => s.userSelectionActive ? "none" : "all";
  var Panel = (0, import_react2.forwardRef)(({ position: position2 = "top-left", children: children2, className, style: style5, ...rest }, ref2) => {
    const pointerEvents = useStore(selector$n);
    const positionClasses = `${position2}`.split("-");
    return (0, import_jsx_runtime.jsx)("div", { className: cc(["react-flow__panel", className, ...positionClasses]), style: { ...style5, pointerEvents }, ref: ref2, ...rest, children: children2 });
  });
  Panel.displayName = "Panel";
  function Attribution({ proOptions, position: position2 = "bottom-right" }) {
    if (proOptions?.hideAttribution) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)(Panel, { position: position2, className: "react-flow__attribution", "data-message": "Please only hide this attribution when you are subscribed to React Flow Pro: https://pro.reactflow.dev", children: (0, import_jsx_runtime.jsx)("a", { href: "https://reactflow.dev", target: "_blank", rel: "noopener noreferrer", "aria-label": "React Flow attribution", children: "React Flow" }) });
  }
  var selector$m = (s) => {
    const selectedNodes = [];
    const selectedEdges = [];
    for (const [, node] of s.nodeLookup) {
      if (node.selected) {
        selectedNodes.push(node.internals.userNode);
      }
    }
    for (const [, edge] of s.edgeLookup) {
      if (edge.selected) {
        selectedEdges.push(edge);
      }
    }
    return { selectedNodes, selectedEdges };
  };
  var selectId = (obj) => obj.id;
  function areEqual(a, b) {
    return shallow$1(a.selectedNodes.map(selectId), b.selectedNodes.map(selectId)) && shallow$1(a.selectedEdges.map(selectId), b.selectedEdges.map(selectId));
  }
  function SelectionListenerInner({ onSelectionChange }) {
    const store = useStoreApi();
    const { selectedNodes, selectedEdges } = useStore(selector$m, areEqual);
    (0, import_react2.useEffect)(() => {
      const params = { nodes: selectedNodes, edges: selectedEdges };
      onSelectionChange?.(params);
      store.getState().onSelectionChangeHandlers.forEach((fn2) => fn2(params));
    }, [selectedNodes, selectedEdges, onSelectionChange]);
    return null;
  }
  var changeSelector = (s) => !!s.onSelectionChangeHandlers;
  function SelectionListener({ onSelectionChange }) {
    const storeHasSelectionChangeHandlers = useStore(changeSelector);
    if (onSelectionChange || storeHasSelectionChangeHandlers) {
      return (0, import_jsx_runtime.jsx)(SelectionListenerInner, { onSelectionChange });
    }
    return null;
  }
  var defaultNodeOrigin = [0, 0];
  var defaultViewport = { x: 0, y: 0, zoom: 1 };
  var reactFlowFieldsToTrack = [
    "nodes",
    "edges",
    "defaultNodes",
    "defaultEdges",
    "onConnect",
    "onConnectStart",
    "onConnectEnd",
    "onClickConnectStart",
    "onClickConnectEnd",
    "nodesDraggable",
    "nodesConnectable",
    "nodesFocusable",
    "edgesFocusable",
    "edgesReconnectable",
    "elevateNodesOnSelect",
    "elevateEdgesOnSelect",
    "minZoom",
    "maxZoom",
    "nodeExtent",
    "onNodesChange",
    "onEdgesChange",
    "elementsSelectable",
    "connectionMode",
    "snapGrid",
    "snapToGrid",
    "translateExtent",
    "connectOnClick",
    "defaultEdgeOptions",
    "fitView",
    "fitViewOptions",
    "onNodesDelete",
    "onEdgesDelete",
    "onDelete",
    "onNodeDrag",
    "onNodeDragStart",
    "onNodeDragStop",
    "onSelectionDrag",
    "onSelectionDragStart",
    "onSelectionDragStop",
    "onMoveStart",
    "onMove",
    "onMoveEnd",
    "noPanClassName",
    "nodeOrigin",
    "autoPanOnConnect",
    "autoPanOnNodeDrag",
    "onError",
    "connectionRadius",
    "isValidConnection",
    "selectNodesOnDrag",
    "nodeDragThreshold",
    "onBeforeDelete",
    "debug",
    "autoPanSpeed",
    "paneClickDistance"
  ];
  var fieldsToTrack = [...reactFlowFieldsToTrack, "rfId"];
  var selector$l = (s) => ({
    setNodes: s.setNodes,
    setEdges: s.setEdges,
    setMinZoom: s.setMinZoom,
    setMaxZoom: s.setMaxZoom,
    setTranslateExtent: s.setTranslateExtent,
    setNodeExtent: s.setNodeExtent,
    reset: s.reset,
    setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,
    setPaneClickDistance: s.setPaneClickDistance
  });
  var initPrevValues2 = {
    /*
     * these are values that are also passed directly to other components
     * than the StoreUpdater. We can reduce the number of setStore calls
     * by setting the same values here as prev fields.
     */
    translateExtent: infiniteExtent,
    nodeOrigin: defaultNodeOrigin,
    minZoom: 0.5,
    maxZoom: 2,
    elementsSelectable: true,
    noPanClassName: "nopan",
    rfId: "1",
    paneClickDistance: 0
  };
  function StoreUpdater(props) {
    const { setNodes, setEdges, setMinZoom, setMaxZoom, setTranslateExtent, setNodeExtent, reset, setDefaultNodesAndEdges, setPaneClickDistance } = useStore(selector$l, shallow$1);
    const store = useStoreApi();
    (0, import_react2.useEffect)(() => {
      setDefaultNodesAndEdges(props.defaultNodes, props.defaultEdges);
      return () => {
        previousFields.current = initPrevValues2;
        reset();
      };
    }, []);
    const previousFields = (0, import_react2.useRef)(initPrevValues2);
    (0, import_react2.useEffect)(
      () => {
        for (const fieldName of fieldsToTrack) {
          const fieldValue = props[fieldName];
          const previousFieldValue = previousFields.current[fieldName];
          if (fieldValue === previousFieldValue)
            continue;
          if (typeof props[fieldName] === "undefined")
            continue;
          if (fieldName === "nodes")
            setNodes(fieldValue);
          else if (fieldName === "edges")
            setEdges(fieldValue);
          else if (fieldName === "minZoom")
            setMinZoom(fieldValue);
          else if (fieldName === "maxZoom")
            setMaxZoom(fieldValue);
          else if (fieldName === "translateExtent")
            setTranslateExtent(fieldValue);
          else if (fieldName === "nodeExtent")
            setNodeExtent(fieldValue);
          else if (fieldName === "paneClickDistance")
            setPaneClickDistance(fieldValue);
          else if (fieldName === "fitView")
            store.setState({ fitViewOnInit: fieldValue });
          else if (fieldName === "fitViewOptions")
            store.setState({ fitViewOnInitOptions: fieldValue });
          else
            store.setState({ [fieldName]: fieldValue });
        }
        previousFields.current = props;
      },
      // Only re-run the effect if one of the fields we track changes
      fieldsToTrack.map((fieldName) => props[fieldName])
    );
    return null;
  }
  function getMediaQuery() {
    if (typeof window === "undefined" || !window.matchMedia) {
      return null;
    }
    return window.matchMedia("(prefers-color-scheme: dark)");
  }
  function useColorModeClass(colorMode) {
    const [colorModeClass, setColorModeClass] = (0, import_react2.useState)(colorMode === "system" ? null : colorMode);
    (0, import_react2.useEffect)(() => {
      if (colorMode !== "system") {
        setColorModeClass(colorMode);
        return;
      }
      const mediaQuery = getMediaQuery();
      const updateColorModeClass = () => setColorModeClass(mediaQuery?.matches ? "dark" : "light");
      updateColorModeClass();
      mediaQuery?.addEventListener("change", updateColorModeClass);
      return () => {
        mediaQuery?.removeEventListener("change", updateColorModeClass);
      };
    }, [colorMode]);
    return colorModeClass !== null ? colorModeClass : getMediaQuery()?.matches ? "dark" : "light";
  }
  var defaultDoc = typeof document !== "undefined" ? document : null;
  function useKeyPress(keyCode = null, options = { target: defaultDoc, actInsideInputWithModifier: true }) {
    const [keyPressed, setKeyPressed] = (0, import_react2.useState)(false);
    const modifierPressed = (0, import_react2.useRef)(false);
    const pressedKeys = (0, import_react2.useRef)(/* @__PURE__ */ new Set([]));
    const [keyCodes, keysToWatch] = (0, import_react2.useMemo)(() => {
      if (keyCode !== null) {
        const keyCodeArr = Array.isArray(keyCode) ? keyCode : [keyCode];
        const keys = keyCodeArr.filter((kc) => typeof kc === "string").map((kc) => kc.replace("+", "\n").replace("\n\n", "\n+").split("\n"));
        const keysFlat = keys.reduce((res, item) => res.concat(...item), []);
        return [keys, keysFlat];
      }
      return [[], []];
    }, [keyCode]);
    (0, import_react2.useEffect)(() => {
      const target = options?.target || defaultDoc;
      if (keyCode !== null) {
        const downHandler = (event) => {
          modifierPressed.current = event.ctrlKey || event.metaKey || event.shiftKey;
          const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);
          if (preventAction) {
            return false;
          }
          const keyOrCode = useKeyOrCode(event.code, keysToWatch);
          pressedKeys.current.add(event[keyOrCode]);
          if (isMatchingKey(keyCodes, pressedKeys.current, false)) {
            event.preventDefault();
            setKeyPressed(true);
          }
        };
        const upHandler = (event) => {
          const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);
          if (preventAction) {
            return false;
          }
          const keyOrCode = useKeyOrCode(event.code, keysToWatch);
          if (isMatchingKey(keyCodes, pressedKeys.current, true)) {
            setKeyPressed(false);
            pressedKeys.current.clear();
          } else {
            pressedKeys.current.delete(event[keyOrCode]);
          }
          if (event.key === "Meta") {
            pressedKeys.current.clear();
          }
          modifierPressed.current = false;
        };
        const resetHandler = () => {
          pressedKeys.current.clear();
          setKeyPressed(false);
        };
        target?.addEventListener("keydown", downHandler);
        target?.addEventListener("keyup", upHandler);
        window.addEventListener("blur", resetHandler);
        window.addEventListener("contextmenu", resetHandler);
        return () => {
          target?.removeEventListener("keydown", downHandler);
          target?.removeEventListener("keyup", upHandler);
          window.removeEventListener("blur", resetHandler);
          window.removeEventListener("contextmenu", resetHandler);
        };
      }
    }, [keyCode, setKeyPressed]);
    return keyPressed;
  }
  function isMatchingKey(keyCodes, pressedKeys, isUp) {
    return keyCodes.filter((keys) => isUp || keys.length === pressedKeys.size).some((keys) => keys.every((k) => pressedKeys.has(k)));
  }
  function useKeyOrCode(eventCode, keysToWatch) {
    return keysToWatch.includes(eventCode) ? "code" : "key";
  }
  var useViewportHelper = () => {
    const store = useStoreApi();
    return (0, import_react2.useMemo)(() => {
      return {
        zoomIn: (options) => {
          const { panZoom } = store.getState();
          return panZoom ? panZoom.scaleBy(1.2, { duration: options?.duration }) : Promise.resolve(false);
        },
        zoomOut: (options) => {
          const { panZoom } = store.getState();
          return panZoom ? panZoom.scaleBy(1 / 1.2, { duration: options?.duration }) : Promise.resolve(false);
        },
        zoomTo: (zoomLevel, options) => {
          const { panZoom } = store.getState();
          return panZoom ? panZoom.scaleTo(zoomLevel, { duration: options?.duration }) : Promise.resolve(false);
        },
        getZoom: () => store.getState().transform[2],
        setViewport: async (viewport2, options) => {
          const { transform: [tX, tY, tZoom], panZoom } = store.getState();
          if (!panZoom) {
            return Promise.resolve(false);
          }
          await panZoom.setViewport({
            x: viewport2.x ?? tX,
            y: viewport2.y ?? tY,
            zoom: viewport2.zoom ?? tZoom
          }, { duration: options?.duration });
          return Promise.resolve(true);
        },
        getViewport: () => {
          const [x, y, zoom] = store.getState().transform;
          return { x, y, zoom };
        },
        fitView: (options) => {
          const { nodeLookup, minZoom, maxZoom, panZoom, domNode } = store.getState();
          if (!panZoom || !domNode) {
            return Promise.resolve(false);
          }
          const fitViewNodes = getFitViewNodes(nodeLookup, options);
          const { width, height } = getDimensions(domNode);
          return fitView({
            nodes: fitViewNodes,
            width,
            height,
            minZoom,
            maxZoom,
            panZoom
          }, options);
        },
        setCenter: async (x, y, options) => {
          const { width, height, maxZoom, panZoom } = store.getState();
          const nextZoom = typeof options?.zoom !== "undefined" ? options.zoom : maxZoom;
          const centerX = width / 2 - x * nextZoom;
          const centerY = height / 2 - y * nextZoom;
          if (!panZoom) {
            return Promise.resolve(false);
          }
          await panZoom.setViewport({
            x: centerX,
            y: centerY,
            zoom: nextZoom
          }, { duration: options?.duration });
          return Promise.resolve(true);
        },
        fitBounds: async (bounds, options) => {
          const { width, height, minZoom, maxZoom, panZoom } = store.getState();
          const viewport2 = getViewportForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? 0.1);
          if (!panZoom) {
            return Promise.resolve(false);
          }
          await panZoom.setViewport(viewport2, { duration: options?.duration });
          return Promise.resolve(true);
        },
        screenToFlowPosition: (clientPosition, options = {}) => {
          const { transform: transform2, snapGrid, snapToGrid, domNode } = store.getState();
          if (!domNode) {
            return clientPosition;
          }
          const { x: domX, y: domY } = domNode.getBoundingClientRect();
          const correctedPosition = {
            x: clientPosition.x - domX,
            y: clientPosition.y - domY
          };
          const _snapGrid = options.snapGrid ?? snapGrid;
          const _snapToGrid = options.snapToGrid ?? snapToGrid;
          return pointToRendererPoint(correctedPosition, transform2, _snapToGrid, _snapGrid);
        },
        flowToScreenPosition: (flowPosition) => {
          const { transform: transform2, domNode } = store.getState();
          if (!domNode) {
            return flowPosition;
          }
          const { x: domX, y: domY } = domNode.getBoundingClientRect();
          const rendererPosition = rendererPointToPoint(flowPosition, transform2);
          return {
            x: rendererPosition.x + domX,
            y: rendererPosition.y + domY
          };
        }
      };
    }, []);
  };
  function applyChanges(changes, elements) {
    const updatedElements = [];
    const changesMap = /* @__PURE__ */ new Map();
    const addItemChanges = [];
    for (const change of changes) {
      if (change.type === "add") {
        addItemChanges.push(change);
        continue;
      } else if (change.type === "remove" || change.type === "replace") {
        changesMap.set(change.id, [change]);
      } else {
        const elementChanges = changesMap.get(change.id);
        if (elementChanges) {
          elementChanges.push(change);
        } else {
          changesMap.set(change.id, [change]);
        }
      }
    }
    for (const element of elements) {
      const changes2 = changesMap.get(element.id);
      if (!changes2) {
        updatedElements.push(element);
        continue;
      }
      if (changes2[0].type === "remove") {
        continue;
      }
      if (changes2[0].type === "replace") {
        updatedElements.push({ ...changes2[0].item });
        continue;
      }
      const updatedElement = { ...element };
      for (const change of changes2) {
        applyChange(change, updatedElement);
      }
      updatedElements.push(updatedElement);
    }
    if (addItemChanges.length) {
      addItemChanges.forEach((change) => {
        if (change.index !== void 0) {
          updatedElements.splice(change.index, 0, { ...change.item });
        } else {
          updatedElements.push({ ...change.item });
        }
      });
    }
    return updatedElements;
  }
  function applyChange(change, element) {
    switch (change.type) {
      case "select": {
        element.selected = change.selected;
        break;
      }
      case "position": {
        if (typeof change.position !== "undefined") {
          element.position = change.position;
        }
        if (typeof change.dragging !== "undefined") {
          element.dragging = change.dragging;
        }
        break;
      }
      case "dimensions": {
        if (typeof change.dimensions !== "undefined") {
          element.measured ??= {};
          element.measured.width = change.dimensions.width;
          element.measured.height = change.dimensions.height;
          if (change.setAttributes) {
            element.width = change.dimensions.width;
            element.height = change.dimensions.height;
          }
        }
        if (typeof change.resizing === "boolean") {
          element.resizing = change.resizing;
        }
        break;
      }
    }
  }
  function applyNodeChanges(changes, nodes) {
    return applyChanges(changes, nodes);
  }
  function applyEdgeChanges(changes, edges) {
    return applyChanges(changes, edges);
  }
  function createSelectionChange(id2, selected2) {
    return {
      id: id2,
      type: "select",
      selected: selected2
    };
  }
  function getSelectionChanges(items, selectedIds = /* @__PURE__ */ new Set(), mutateItem = false) {
    const changes = [];
    for (const [id2, item] of items) {
      const willBeSelected = selectedIds.has(id2);
      if (!(item.selected === void 0 && !willBeSelected) && item.selected !== willBeSelected) {
        if (mutateItem) {
          item.selected = willBeSelected;
        }
        changes.push(createSelectionChange(item.id, willBeSelected));
      }
    }
    return changes;
  }
  function getElementsDiffChanges({ items = [], lookup }) {
    const changes = [];
    const itemsLookup = new Map(items.map((item) => [item.id, item]));
    for (const [index2, item] of items.entries()) {
      const lookupItem = lookup.get(item.id);
      const storeItem = lookupItem?.internals?.userNode ?? lookupItem;
      if (storeItem !== void 0 && storeItem !== item) {
        changes.push({ id: item.id, item, type: "replace" });
      }
      if (storeItem === void 0) {
        changes.push({ item, type: "add", index: index2 });
      }
    }
    for (const [id2] of lookup) {
      const nextNode = itemsLookup.get(id2);
      if (nextNode === void 0) {
        changes.push({ id: id2, type: "remove" });
      }
    }
    return changes;
  }
  function elementToRemoveChange(item) {
    return {
      id: item.id,
      type: "remove"
    };
  }
  var isNode = (element) => isNodeBase(element);
  var isEdge = (element) => isEdgeBase(element);
  function fixedForwardRef(render) {
    return (0, import_react2.forwardRef)(render);
  }
  var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
  function useQueue(runQueue) {
    const [serial, setSerial] = (0, import_react2.useState)(BigInt(0));
    const [queue] = (0, import_react2.useState)(() => createQueue(() => setSerial((n) => n + BigInt(1))));
    useIsomorphicLayoutEffect(() => {
      const queueItems = queue.get();
      if (queueItems.length) {
        runQueue(queueItems);
        queue.reset();
      }
    }, [serial]);
    return queue;
  }
  function createQueue(cb) {
    let queue = [];
    return {
      get: () => queue,
      reset: () => {
        queue = [];
      },
      push: (item) => {
        queue.push(item);
        cb();
      }
    };
  }
  var BatchContext = (0, import_react2.createContext)(null);
  function BatchProvider({ children: children2 }) {
    const store = useStoreApi();
    const nodeQueueHandler = (0, import_react2.useCallback)((queueItems) => {
      const { nodes = [], setNodes, hasDefaultNodes, onNodesChange, nodeLookup } = store.getState();
      let next = nodes;
      for (const payload of queueItems) {
        next = typeof payload === "function" ? payload(next) : payload;
      }
      if (hasDefaultNodes) {
        setNodes(next);
      } else if (onNodesChange) {
        onNodesChange(getElementsDiffChanges({
          items: next,
          lookup: nodeLookup
        }));
      }
    }, []);
    const nodeQueue = useQueue(nodeQueueHandler);
    const edgeQueueHandler = (0, import_react2.useCallback)((queueItems) => {
      const { edges = [], setEdges, hasDefaultEdges, onEdgesChange, edgeLookup } = store.getState();
      let next = edges;
      for (const payload of queueItems) {
        next = typeof payload === "function" ? payload(next) : payload;
      }
      if (hasDefaultEdges) {
        setEdges(next);
      } else if (onEdgesChange) {
        onEdgesChange(getElementsDiffChanges({
          items: next,
          lookup: edgeLookup
        }));
      }
    }, []);
    const edgeQueue = useQueue(edgeQueueHandler);
    const value = (0, import_react2.useMemo)(() => ({ nodeQueue, edgeQueue }), []);
    return (0, import_jsx_runtime.jsx)(BatchContext.Provider, { value, children: children2 });
  }
  function useBatchContext() {
    const batchContext = (0, import_react2.useContext)(BatchContext);
    if (!batchContext) {
      throw new Error("useBatchContext must be used within a BatchProvider");
    }
    return batchContext;
  }
  var selector$k = (s) => !!s.panZoom;
  function useReactFlow() {
    const viewportHelper = useViewportHelper();
    const store = useStoreApi();
    const batchContext = useBatchContext();
    const viewportInitialized = useStore(selector$k);
    const generalHelper = (0, import_react2.useMemo)(() => {
      const getInternalNode = (id2) => store.getState().nodeLookup.get(id2);
      const setNodes = (payload) => {
        batchContext.nodeQueue.push(payload);
      };
      const setEdges = (payload) => {
        batchContext.edgeQueue.push(payload);
      };
      const getNodeRect = (node) => {
        const { nodeLookup, nodeOrigin } = store.getState();
        const nodeToUse = isNode(node) ? node : nodeLookup.get(node.id);
        const position2 = nodeToUse.parentId ? evaluateAbsolutePosition(nodeToUse.position, nodeToUse.measured, nodeToUse.parentId, nodeLookup, nodeOrigin) : nodeToUse.position;
        const nodeWithPosition = {
          ...nodeToUse,
          position: position2,
          width: nodeToUse.measured?.width ?? nodeToUse.width,
          height: nodeToUse.measured?.height ?? nodeToUse.height
        };
        return nodeToRect(nodeWithPosition);
      };
      const updateNode = (id2, nodeUpdate, options = { replace: false }) => {
        setNodes((prevNodes) => prevNodes.map((node) => {
          if (node.id === id2) {
            const nextNode = typeof nodeUpdate === "function" ? nodeUpdate(node) : nodeUpdate;
            return options.replace && isNode(nextNode) ? nextNode : { ...node, ...nextNode };
          }
          return node;
        }));
      };
      const updateEdge = (id2, edgeUpdate, options = { replace: false }) => {
        setEdges((prevEdges) => prevEdges.map((edge) => {
          if (edge.id === id2) {
            const nextEdge = typeof edgeUpdate === "function" ? edgeUpdate(edge) : edgeUpdate;
            return options.replace && isEdge(nextEdge) ? nextEdge : { ...edge, ...nextEdge };
          }
          return edge;
        }));
      };
      return {
        getNodes: () => store.getState().nodes.map((n) => ({ ...n })),
        getNode: (id2) => getInternalNode(id2)?.internals.userNode,
        getInternalNode,
        getEdges: () => {
          const { edges = [] } = store.getState();
          return edges.map((e) => ({ ...e }));
        },
        getEdge: (id2) => store.getState().edgeLookup.get(id2),
        setNodes,
        setEdges,
        addNodes: (payload) => {
          const newNodes = Array.isArray(payload) ? payload : [payload];
          batchContext.nodeQueue.push((nodes) => [...nodes, ...newNodes]);
        },
        addEdges: (payload) => {
          const newEdges = Array.isArray(payload) ? payload : [payload];
          batchContext.edgeQueue.push((edges) => [...edges, ...newEdges]);
        },
        toObject: () => {
          const { nodes = [], edges = [], transform: transform2 } = store.getState();
          const [x, y, zoom] = transform2;
          return {
            nodes: nodes.map((n) => ({ ...n })),
            edges: edges.map((e) => ({ ...e })),
            viewport: {
              x,
              y,
              zoom
            }
          };
        },
        deleteElements: async ({ nodes: nodesToRemove = [], edges: edgesToRemove = [] }) => {
          const { nodes, edges, onNodesDelete, onEdgesDelete, triggerNodeChanges, triggerEdgeChanges, onDelete, onBeforeDelete } = store.getState();
          const { nodes: matchingNodes, edges: matchingEdges } = await getElementsToRemove({
            nodesToRemove,
            edgesToRemove,
            nodes,
            edges,
            onBeforeDelete
          });
          const hasMatchingEdges = matchingEdges.length > 0;
          const hasMatchingNodes = matchingNodes.length > 0;
          if (hasMatchingEdges) {
            const edgeChanges = matchingEdges.map(elementToRemoveChange);
            onEdgesDelete?.(matchingEdges);
            triggerEdgeChanges(edgeChanges);
          }
          if (hasMatchingNodes) {
            const nodeChanges = matchingNodes.map(elementToRemoveChange);
            onNodesDelete?.(matchingNodes);
            triggerNodeChanges(nodeChanges);
          }
          if (hasMatchingNodes || hasMatchingEdges) {
            onDelete?.({ nodes: matchingNodes, edges: matchingEdges });
          }
          return { deletedNodes: matchingNodes, deletedEdges: matchingEdges };
        },
        getIntersectingNodes: (nodeOrRect, partially = true, nodes) => {
          const isRect = isRectObject(nodeOrRect);
          const nodeRect = isRect ? nodeOrRect : getNodeRect(nodeOrRect);
          const hasNodesOption = nodes !== void 0;
          if (!nodeRect) {
            return [];
          }
          return (nodes || store.getState().nodes).filter((n) => {
            const internalNode = store.getState().nodeLookup.get(n.id);
            if (internalNode && !isRect && (n.id === nodeOrRect.id || !internalNode.internals.positionAbsolute)) {
              return false;
            }
            const currNodeRect = nodeToRect(hasNodesOption ? n : internalNode);
            const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);
            const partiallyVisible = partially && overlappingArea > 0;
            return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;
          });
        },
        isNodeIntersecting: (nodeOrRect, area, partially = true) => {
          const isRect = isRectObject(nodeOrRect);
          const nodeRect = isRect ? nodeOrRect : getNodeRect(nodeOrRect);
          if (!nodeRect) {
            return false;
          }
          const overlappingArea = getOverlappingArea(nodeRect, area);
          const partiallyVisible = partially && overlappingArea > 0;
          return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;
        },
        updateNode,
        updateNodeData: (id2, dataUpdate, options = { replace: false }) => {
          updateNode(id2, (node) => {
            const nextData = typeof dataUpdate === "function" ? dataUpdate(node) : dataUpdate;
            return options.replace ? { ...node, data: nextData } : { ...node, data: { ...node.data, ...nextData } };
          }, options);
        },
        updateEdge,
        updateEdgeData: (id2, dataUpdate, options = { replace: false }) => {
          updateEdge(id2, (edge) => {
            const nextData = typeof dataUpdate === "function" ? dataUpdate(edge) : dataUpdate;
            return options.replace ? { ...edge, data: nextData } : { ...edge, data: { ...edge.data, ...nextData } };
          }, options);
        },
        getNodesBounds: (nodes) => {
          const { nodeLookup, nodeOrigin } = store.getState();
          return getNodesBounds(nodes, { nodeLookup, nodeOrigin });
        },
        getHandleConnections: ({ type, id: id2, nodeId }) => Array.from(store.getState().connectionLookup.get(`${nodeId}-${type}${id2 ? `-${id2}` : ""}`)?.values() ?? []),
        getNodeConnections: ({ type, handleId, nodeId }) => Array.from(store.getState().connectionLookup.get(`${nodeId}${type ? handleId ? `-${type}-${handleId}` : `-${type}` : ""}`)?.values() ?? [])
      };
    }, []);
    return (0, import_react2.useMemo)(() => {
      return {
        ...generalHelper,
        ...viewportHelper,
        viewportInitialized
      };
    }, [viewportInitialized]);
  }
  var selected = (item) => item.selected;
  var deleteKeyOptions = { actInsideInputWithModifier: false };
  var win$1 = typeof window !== "undefined" ? window : void 0;
  function useGlobalKeyHandler({ deleteKeyCode, multiSelectionKeyCode }) {
    const store = useStoreApi();
    const { deleteElements } = useReactFlow();
    const deleteKeyPressed = useKeyPress(deleteKeyCode, deleteKeyOptions);
    const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode, { target: win$1 });
    (0, import_react2.useEffect)(() => {
      if (deleteKeyPressed) {
        const { edges, nodes } = store.getState();
        deleteElements({ nodes: nodes.filter(selected), edges: edges.filter(selected) });
        store.setState({ nodesSelectionActive: false });
      }
    }, [deleteKeyPressed]);
    (0, import_react2.useEffect)(() => {
      store.setState({ multiSelectionActive: multiSelectionKeyPressed });
    }, [multiSelectionKeyPressed]);
  }
  function useResizeHandler(domNode) {
    const store = useStoreApi();
    (0, import_react2.useEffect)(() => {
      const updateDimensions = () => {
        if (!domNode.current) {
          return false;
        }
        const size = getDimensions(domNode.current);
        if (size.height === 0 || size.width === 0) {
          store.getState().onError?.("004", errorMessages["error004"]());
        }
        store.setState({ width: size.width || 500, height: size.height || 500 });
      };
      if (domNode.current) {
        updateDimensions();
        window.addEventListener("resize", updateDimensions);
        const resizeObserver = new ResizeObserver(() => updateDimensions());
        resizeObserver.observe(domNode.current);
        return () => {
          window.removeEventListener("resize", updateDimensions);
          if (resizeObserver && domNode.current) {
            resizeObserver.unobserve(domNode.current);
          }
        };
      }
    }, []);
  }
  var containerStyle = {
    position: "absolute",
    width: "100%",
    height: "100%",
    top: 0,
    left: 0
  };
  var selector$j = (s) => ({
    userSelectionActive: s.userSelectionActive,
    lib: s.lib
  });
  function ZoomPane({ onPaneContextMenu, zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, panOnDrag = true, defaultViewport: defaultViewport2, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling = true, children: children2, noWheelClassName, noPanClassName, onViewportChange, isControlledViewport, paneClickDistance }) {
    const store = useStoreApi();
    const zoomPane = (0, import_react2.useRef)(null);
    const { userSelectionActive, lib } = useStore(selector$j, shallow$1);
    const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);
    const panZoom = (0, import_react2.useRef)();
    useResizeHandler(zoomPane);
    const onTransformChange = (0, import_react2.useCallback)((transform2) => {
      onViewportChange?.({ x: transform2[0], y: transform2[1], zoom: transform2[2] });
      if (!isControlledViewport) {
        store.setState({ transform: transform2 });
      }
    }, [onViewportChange, isControlledViewport]);
    (0, import_react2.useEffect)(() => {
      if (zoomPane.current) {
        panZoom.current = XYPanZoom({
          domNode: zoomPane.current,
          minZoom,
          maxZoom,
          translateExtent,
          viewport: defaultViewport2,
          paneClickDistance,
          onDraggingChange: (paneDragging) => store.setState({ paneDragging }),
          onPanZoomStart: (event, vp) => {
            const { onViewportChangeStart, onMoveStart } = store.getState();
            onMoveStart?.(event, vp);
            onViewportChangeStart?.(vp);
          },
          onPanZoom: (event, vp) => {
            const { onViewportChange: onViewportChange2, onMove } = store.getState();
            onMove?.(event, vp);
            onViewportChange2?.(vp);
          },
          onPanZoomEnd: (event, vp) => {
            const { onViewportChangeEnd, onMoveEnd } = store.getState();
            onMoveEnd?.(event, vp);
            onViewportChangeEnd?.(vp);
          }
        });
        const { x, y, zoom } = panZoom.current.getViewport();
        store.setState({
          panZoom: panZoom.current,
          transform: [x, y, zoom],
          domNode: zoomPane.current.closest(".react-flow")
        });
        return () => {
          panZoom.current?.destroy();
        };
      }
    }, []);
    (0, import_react2.useEffect)(() => {
      panZoom.current?.update({
        onPaneContextMenu,
        zoomOnScroll,
        zoomOnPinch,
        panOnScroll,
        panOnScrollSpeed,
        panOnScrollMode,
        zoomOnDoubleClick,
        panOnDrag,
        zoomActivationKeyPressed,
        preventScrolling,
        noPanClassName,
        userSelectionActive,
        noWheelClassName,
        lib,
        onTransformChange
      });
    }, [
      onPaneContextMenu,
      zoomOnScroll,
      zoomOnPinch,
      panOnScroll,
      panOnScrollSpeed,
      panOnScrollMode,
      zoomOnDoubleClick,
      panOnDrag,
      zoomActivationKeyPressed,
      preventScrolling,
      noPanClassName,
      userSelectionActive,
      noWheelClassName,
      lib,
      onTransformChange
    ]);
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__renderer", ref: zoomPane, style: containerStyle, children: children2 });
  }
  var selector$i = (s) => ({
    userSelectionActive: s.userSelectionActive,
    userSelectionRect: s.userSelectionRect
  });
  function UserSelection() {
    const { userSelectionActive, userSelectionRect } = useStore(selector$i, shallow$1);
    const isActive2 = userSelectionActive && userSelectionRect;
    if (!isActive2) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__selection react-flow__container", style: {
      width: userSelectionRect.width,
      height: userSelectionRect.height,
      transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`
    } });
  }
  var wrapHandler = (handler, containerRef) => {
    return (event) => {
      if (event.target !== containerRef.current) {
        return;
      }
      handler?.(event);
    };
  };
  var selector$h = (s) => ({
    userSelectionActive: s.userSelectionActive,
    elementsSelectable: s.elementsSelectable,
    dragging: s.paneDragging
  });
  function Pane({ isSelecting, selectionKeyPressed, selectionMode = SelectionMode.Full, panOnDrag, selectionOnDrag, onSelectionStart, onSelectionEnd, onPaneClick, onPaneContextMenu, onPaneScroll, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, children: children2 }) {
    const store = useStoreApi();
    const { userSelectionActive, elementsSelectable, dragging } = useStore(selector$h, shallow$1);
    const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);
    const container = (0, import_react2.useRef)(null);
    const containerBounds = (0, import_react2.useRef)();
    const selectedNodeIds = (0, import_react2.useRef)(/* @__PURE__ */ new Set());
    const selectedEdgeIds = (0, import_react2.useRef)(/* @__PURE__ */ new Set());
    const selectionInProgress = (0, import_react2.useRef)(false);
    const selectionStarted = (0, import_react2.useRef)(false);
    const onClick = (event) => {
      if (selectionInProgress.current) {
        selectionInProgress.current = false;
        return;
      }
      onPaneClick?.(event);
      store.getState().resetSelectedElements();
      store.setState({ nodesSelectionActive: false });
    };
    const onContextMenu = (event) => {
      if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {
        event.preventDefault();
        return;
      }
      onPaneContextMenu?.(event);
    };
    const onWheel = onPaneScroll ? (event) => onPaneScroll(event) : void 0;
    const onPointerDown2 = (event) => {
      const { resetSelectedElements, domNode } = store.getState();
      containerBounds.current = domNode?.getBoundingClientRect();
      if (!elementsSelectable || !isSelecting || event.button !== 0 || event.target !== container.current || !containerBounds.current) {
        return;
      }
      event.target?.setPointerCapture?.(event.pointerId);
      selectionStarted.current = true;
      selectionInProgress.current = false;
      const { x, y } = getEventPosition(event.nativeEvent, containerBounds.current);
      resetSelectedElements();
      store.setState({
        userSelectionRect: {
          width: 0,
          height: 0,
          startX: x,
          startY: y,
          x,
          y
        }
      });
      onSelectionStart?.(event);
    };
    const onPointerMove = (event) => {
      const { userSelectionRect, transform: transform2, nodeLookup, edgeLookup, connectionLookup, triggerNodeChanges, triggerEdgeChanges, defaultEdgeOptions } = store.getState();
      if (!containerBounds.current || !userSelectionRect) {
        return;
      }
      selectionInProgress.current = true;
      const { x: mouseX, y: mouseY } = getEventPosition(event.nativeEvent, containerBounds.current);
      const { startX, startY } = userSelectionRect;
      const nextUserSelectRect = {
        startX,
        startY,
        x: mouseX < startX ? mouseX : startX,
        y: mouseY < startY ? mouseY : startY,
        width: Math.abs(mouseX - startX),
        height: Math.abs(mouseY - startY)
      };
      const prevSelectedNodeIds = selectedNodeIds.current;
      const prevSelectedEdgeIds = selectedEdgeIds.current;
      selectedNodeIds.current = new Set(getNodesInside(nodeLookup, nextUserSelectRect, transform2, selectionMode === SelectionMode.Partial, true).map((node) => node.id));
      selectedEdgeIds.current = /* @__PURE__ */ new Set();
      const edgesSelectable = defaultEdgeOptions?.selectable ?? true;
      for (const nodeId of selectedNodeIds.current) {
        const connections = connectionLookup.get(nodeId);
        if (!connections)
          continue;
        for (const { edgeId } of connections.values()) {
          const edge = edgeLookup.get(edgeId);
          if (edge && (edge.selectable ?? edgesSelectable)) {
            selectedEdgeIds.current.add(edgeId);
          }
        }
      }
      if (!areSetsEqual(prevSelectedNodeIds, selectedNodeIds.current)) {
        const changes = getSelectionChanges(nodeLookup, selectedNodeIds.current, true);
        triggerNodeChanges(changes);
      }
      if (!areSetsEqual(prevSelectedEdgeIds, selectedEdgeIds.current)) {
        const changes = getSelectionChanges(edgeLookup, selectedEdgeIds.current);
        triggerEdgeChanges(changes);
      }
      store.setState({
        userSelectionRect: nextUserSelectRect,
        userSelectionActive: true,
        nodesSelectionActive: false
      });
    };
    const onPointerUp = (event) => {
      if (event.button !== 0 || !selectionStarted.current) {
        return;
      }
      event.target?.releasePointerCapture?.(event.pointerId);
      const { userSelectionRect } = store.getState();
      if (!userSelectionActive && userSelectionRect && event.target === container.current) {
        onClick?.(event);
      }
      store.setState({
        userSelectionActive: false,
        userSelectionRect: null,
        nodesSelectionActive: selectedNodeIds.current.size > 0
      });
      onSelectionEnd?.(event);
      if (selectionKeyPressed || selectionOnDrag) {
        selectionInProgress.current = false;
      }
      selectionStarted.current = false;
    };
    const draggable2 = panOnDrag === true || Array.isArray(panOnDrag) && panOnDrag.includes(0);
    return (0, import_jsx_runtime.jsxs)("div", { className: cc(["react-flow__pane", { draggable: draggable2, dragging, selection: isSelecting }]), onClick: hasActiveSelection ? void 0 : wrapHandler(onClick, container), onContextMenu: wrapHandler(onContextMenu, container), onWheel: wrapHandler(onWheel, container), onPointerEnter: hasActiveSelection ? void 0 : onPaneMouseEnter, onPointerDown: hasActiveSelection ? onPointerDown2 : onPaneMouseMove, onPointerMove: hasActiveSelection ? onPointerMove : onPaneMouseMove, onPointerUp: hasActiveSelection ? onPointerUp : void 0, onPointerLeave: onPaneMouseLeave, ref: container, style: containerStyle, children: [children2, (0, import_jsx_runtime.jsx)(UserSelection, {})] });
  }
  function handleNodeClick({ id: id2, store, unselect = false, nodeRef }) {
    const { addSelectedNodes, unselectNodesAndEdges, multiSelectionActive, nodeLookup, onError } = store.getState();
    const node = nodeLookup.get(id2);
    if (!node) {
      onError?.("012", errorMessages["error012"](id2));
      return;
    }
    store.setState({ nodesSelectionActive: false });
    if (!node.selected) {
      addSelectedNodes([id2]);
    } else if (unselect || node.selected && multiSelectionActive) {
      unselectNodesAndEdges({ nodes: [node], edges: [] });
      requestAnimationFrame(() => nodeRef?.current?.blur());
    }
  }
  function useDrag({ nodeRef, disabled = false, noDragClassName, handleSelector, nodeId, isSelectable, nodeClickDistance }) {
    const store = useStoreApi();
    const [dragging, setDragging] = (0, import_react2.useState)(false);
    const xyDrag = (0, import_react2.useRef)();
    (0, import_react2.useEffect)(() => {
      xyDrag.current = XYDrag({
        getStoreItems: () => store.getState(),
        onNodeMouseDown: (id2) => {
          handleNodeClick({
            id: id2,
            store,
            nodeRef
          });
        },
        onDragStart: () => {
          setDragging(true);
        },
        onDragStop: () => {
          setDragging(false);
        }
      });
    }, []);
    (0, import_react2.useEffect)(() => {
      if (disabled) {
        xyDrag.current?.destroy();
      } else if (nodeRef.current) {
        xyDrag.current?.update({
          noDragClassName,
          handleSelector,
          domNode: nodeRef.current,
          isSelectable,
          nodeId,
          nodeClickDistance
        });
        return () => {
          xyDrag.current?.destroy();
        };
      }
    }, [noDragClassName, handleSelector, disabled, isSelectable, nodeRef, nodeId]);
    return dragging;
  }
  var selectedAndDraggable = (nodesDraggable) => (n) => n.selected && (n.draggable || nodesDraggable && typeof n.draggable === "undefined");
  function useMoveSelectedNodes() {
    const store = useStoreApi();
    const moveSelectedNodes = (0, import_react2.useCallback)((params) => {
      const { nodeExtent, snapToGrid, snapGrid, nodesDraggable, onError, updateNodePositions, nodeLookup, nodeOrigin } = store.getState();
      const nodeUpdates = /* @__PURE__ */ new Map();
      const isSelected = selectedAndDraggable(nodesDraggable);
      const xVelo = snapToGrid ? snapGrid[0] : 5;
      const yVelo = snapToGrid ? snapGrid[1] : 5;
      const xDiff = params.direction.x * xVelo * params.factor;
      const yDiff = params.direction.y * yVelo * params.factor;
      for (const [, node] of nodeLookup) {
        if (!isSelected(node)) {
          continue;
        }
        let nextPosition = {
          x: node.internals.positionAbsolute.x + xDiff,
          y: node.internals.positionAbsolute.y + yDiff
        };
        if (snapToGrid) {
          nextPosition = snapPosition(nextPosition, snapGrid);
        }
        const { position: position2, positionAbsolute } = calculateNodePosition({
          nodeId: node.id,
          nextPosition,
          nodeLookup,
          nodeExtent,
          nodeOrigin,
          onError
        });
        node.position = position2;
        node.internals.positionAbsolute = positionAbsolute;
        nodeUpdates.set(node.id, node);
      }
      updateNodePositions(nodeUpdates);
    }, []);
    return moveSelectedNodes;
  }
  var NodeIdContext = (0, import_react2.createContext)(null);
  var Provider = NodeIdContext.Provider;
  NodeIdContext.Consumer;
  var useNodeId = () => {
    const nodeId = (0, import_react2.useContext)(NodeIdContext);
    return nodeId;
  };
  var selector$g = (s) => ({
    connectOnClick: s.connectOnClick,
    noPanClassName: s.noPanClassName,
    rfId: s.rfId
  });
  var connectingSelector = (nodeId, handleId, type) => (state) => {
    const { connectionClickStartHandle: clickHandle, connectionMode, connection } = state;
    const { fromHandle, toHandle, isValid } = connection;
    const connectingTo = toHandle?.nodeId === nodeId && toHandle?.id === handleId && toHandle?.type === type;
    return {
      connectingFrom: fromHandle?.nodeId === nodeId && fromHandle?.id === handleId && fromHandle?.type === type,
      connectingTo,
      clickConnecting: clickHandle?.nodeId === nodeId && clickHandle?.id === handleId && clickHandle?.type === type,
      isPossibleEndHandle: connectionMode === ConnectionMode.Strict ? fromHandle?.type !== type : nodeId !== fromHandle?.nodeId || handleId !== fromHandle?.id,
      connectionInProcess: !!fromHandle,
      valid: connectingTo && isValid
    };
  };
  function HandleComponent({ type = "source", position: position2 = Position.Top, isValidConnection, isConnectable = true, isConnectableStart = true, isConnectableEnd = true, id: id2, onConnect, children: children2, className, onMouseDown, onTouchStart, ...rest }, ref2) {
    const handleId = id2 || null;
    const isTarget = type === "target";
    const store = useStoreApi();
    const nodeId = useNodeId();
    const { connectOnClick, noPanClassName, rfId } = useStore(selector$g, shallow$1);
    const { connectingFrom, connectingTo, clickConnecting, isPossibleEndHandle, connectionInProcess, valid } = useStore(connectingSelector(nodeId, handleId, type), shallow$1);
    if (!nodeId) {
      store.getState().onError?.("010", errorMessages["error010"]());
    }
    const onConnectExtended = (params) => {
      const { defaultEdgeOptions, onConnect: onConnectAction, hasDefaultEdges } = store.getState();
      const edgeParams = {
        ...defaultEdgeOptions,
        ...params
      };
      if (hasDefaultEdges) {
        const { edges, setEdges } = store.getState();
        setEdges(addEdge(edgeParams, edges));
      }
      onConnectAction?.(edgeParams);
      onConnect?.(edgeParams);
    };
    const onPointerDown2 = (event) => {
      if (!nodeId) {
        return;
      }
      const isMouseTriggered = isMouseEvent(event.nativeEvent);
      if (isConnectableStart && (isMouseTriggered && event.button === 0 || !isMouseTriggered)) {
        const currentStore = store.getState();
        XYHandle.onPointerDown(event.nativeEvent, {
          autoPanOnConnect: currentStore.autoPanOnConnect,
          connectionMode: currentStore.connectionMode,
          connectionRadius: currentStore.connectionRadius,
          domNode: currentStore.domNode,
          nodeLookup: currentStore.nodeLookup,
          lib: currentStore.lib,
          isTarget,
          handleId,
          nodeId,
          flowId: currentStore.rfId,
          panBy: currentStore.panBy,
          cancelConnection: currentStore.cancelConnection,
          onConnectStart: currentStore.onConnectStart,
          onConnectEnd: currentStore.onConnectEnd,
          updateConnection: currentStore.updateConnection,
          onConnect: onConnectExtended,
          isValidConnection: isValidConnection || currentStore.isValidConnection,
          getTransform: () => store.getState().transform,
          getFromHandle: () => store.getState().connection.fromHandle,
          autoPanSpeed: currentStore.autoPanSpeed
        });
      }
      if (isMouseTriggered) {
        onMouseDown?.(event);
      } else {
        onTouchStart?.(event);
      }
    };
    const onClick = (event) => {
      const { onClickConnectStart, onClickConnectEnd, connectionClickStartHandle, connectionMode, isValidConnection: isValidConnectionStore, lib, rfId: flowId, nodeLookup, connection: connectionState } = store.getState();
      if (!nodeId || !connectionClickStartHandle && !isConnectableStart) {
        return;
      }
      if (!connectionClickStartHandle) {
        onClickConnectStart?.(event.nativeEvent, { nodeId, handleId, handleType: type });
        store.setState({ connectionClickStartHandle: { nodeId, type, id: handleId } });
        return;
      }
      const doc = getHostForElement(event.target);
      const isValidConnectionHandler = isValidConnection || isValidConnectionStore;
      const { connection, isValid } = XYHandle.isValid(event.nativeEvent, {
        handle: {
          nodeId,
          id: handleId,
          type
        },
        connectionMode,
        fromNodeId: connectionClickStartHandle.nodeId,
        fromHandleId: connectionClickStartHandle.id || null,
        fromType: connectionClickStartHandle.type,
        isValidConnection: isValidConnectionHandler,
        flowId,
        doc,
        lib,
        nodeLookup
      });
      if (isValid && connection) {
        onConnectExtended(connection);
      }
      const connectionClone = structuredClone(connectionState);
      delete connectionClone.inProgress;
      connectionClone.toPosition = connectionClone.toHandle ? connectionClone.toHandle.position : null;
      onClickConnectEnd?.(event, connectionClone);
      store.setState({ connectionClickStartHandle: null });
    };
    return (0, import_jsx_runtime.jsx)("div", { "data-handleid": handleId, "data-nodeid": nodeId, "data-handlepos": position2, "data-id": `${rfId}-${nodeId}-${handleId}-${type}`, className: cc([
      "react-flow__handle",
      `react-flow__handle-${position2}`,
      "nodrag",
      noPanClassName,
      className,
      {
        source: !isTarget,
        target: isTarget,
        connectable: isConnectable,
        connectablestart: isConnectableStart,
        connectableend: isConnectableEnd,
        clickconnecting: clickConnecting,
        connectingfrom: connectingFrom,
        connectingto: connectingTo,
        valid,
        /*
         * shows where you can start a connection from
         * and where you can end it while connecting
         */
        connectionindicator: isConnectable && (!connectionInProcess || isPossibleEndHandle) && (connectionInProcess ? isConnectableEnd : isConnectableStart)
      }
    ]), onMouseDown: onPointerDown2, onTouchStart: onPointerDown2, onClick: connectOnClick ? onClick : void 0, ref: ref2, ...rest, children: children2 });
  }
  var Handle = (0, import_react2.memo)(fixedForwardRef(HandleComponent));
  function InputNode({ data, isConnectable, sourcePosition = Position.Bottom }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [data?.label, (0, import_jsx_runtime.jsx)(Handle, { type: "source", position: sourcePosition, isConnectable })] });
  }
  function DefaultNode({ data, isConnectable, targetPosition = Position.Top, sourcePosition = Position.Bottom }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(Handle, { type: "target", position: targetPosition, isConnectable }), data?.label, (0, import_jsx_runtime.jsx)(Handle, { type: "source", position: sourcePosition, isConnectable })] });
  }
  function GroupNode() {
    return null;
  }
  function OutputNode({ data, isConnectable, targetPosition = Position.Top }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(Handle, { type: "target", position: targetPosition, isConnectable }), data?.label] });
  }
  var arrowKeyDiffs = {
    ArrowUp: { x: 0, y: -1 },
    ArrowDown: { x: 0, y: 1 },
    ArrowLeft: { x: -1, y: 0 },
    ArrowRight: { x: 1, y: 0 }
  };
  var builtinNodeTypes = {
    input: InputNode,
    default: DefaultNode,
    output: OutputNode,
    group: GroupNode
  };
  function getNodeInlineStyleDimensions(node) {
    if (node.internals.handleBounds === void 0) {
      return {
        width: node.width ?? node.initialWidth ?? node.style?.width,
        height: node.height ?? node.initialHeight ?? node.style?.height
      };
    }
    return {
      width: node.width ?? node.style?.width,
      height: node.height ?? node.style?.height
    };
  }
  var selector$f = (s) => {
    const { width, height, x, y } = getInternalNodesBounds(s.nodeLookup, {
      filter: (node) => !!node.selected
    });
    return {
      width: isNumeric(width) ? width : null,
      height: isNumeric(height) ? height : null,
      userSelectionActive: s.userSelectionActive,
      transformString: `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]}) translate(${x}px,${y}px)`
    };
  };
  function NodesSelection({ onSelectionContextMenu, noPanClassName, disableKeyboardA11y }) {
    const store = useStoreApi();
    const { width, height, transformString, userSelectionActive } = useStore(selector$f, shallow$1);
    const moveSelectedNodes = useMoveSelectedNodes();
    const nodeRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      if (!disableKeyboardA11y) {
        nodeRef.current?.focus({
          preventScroll: true
        });
      }
    }, [disableKeyboardA11y]);
    useDrag({
      nodeRef
    });
    if (userSelectionActive || !width || !height) {
      return null;
    }
    const onContextMenu = onSelectionContextMenu ? (event) => {
      const selectedNodes = store.getState().nodes.filter((n) => n.selected);
      onSelectionContextMenu(event, selectedNodes);
    } : void 0;
    const onKeyDown = (event) => {
      if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
        event.preventDefault();
        moveSelectedNodes({
          direction: arrowKeyDiffs[event.key],
          factor: event.shiftKey ? 4 : 1
        });
      }
    };
    return (0, import_jsx_runtime.jsx)("div", { className: cc(["react-flow__nodesselection", "react-flow__container", noPanClassName]), style: {
      transform: transformString
    }, children: (0, import_jsx_runtime.jsx)("div", { ref: nodeRef, className: "react-flow__nodesselection-rect", onContextMenu, tabIndex: disableKeyboardA11y ? void 0 : -1, onKeyDown: disableKeyboardA11y ? void 0 : onKeyDown, style: {
      width,
      height
    } }) });
  }
  var win = typeof window !== "undefined" ? window : void 0;
  var selector$e = (s) => {
    return { nodesSelectionActive: s.nodesSelectionActive, userSelectionActive: s.userSelectionActive };
  };
  function FlowRendererComponent({ children: children2, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, paneClickDistance, deleteKeyCode, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll: _panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: _panOnDrag, defaultViewport: defaultViewport2, translateExtent, minZoom, maxZoom, preventScrolling, onSelectionContextMenu, noWheelClassName, noPanClassName, disableKeyboardA11y, onViewportChange, isControlledViewport }) {
    const { nodesSelectionActive, userSelectionActive } = useStore(selector$e);
    const selectionKeyPressed = useKeyPress(selectionKeyCode, { target: win });
    const panActivationKeyPressed = useKeyPress(panActivationKeyCode, { target: win });
    const panOnDrag = panActivationKeyPressed || _panOnDrag;
    const panOnScroll = panActivationKeyPressed || _panOnScroll;
    const _selectionOnDrag = selectionOnDrag && panOnDrag !== true;
    const isSelecting = selectionKeyPressed || userSelectionActive || _selectionOnDrag;
    useGlobalKeyHandler({ deleteKeyCode, multiSelectionKeyCode });
    return (0, import_jsx_runtime.jsx)(ZoomPane, { onPaneContextMenu, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: !selectionKeyPressed && panOnDrag, defaultViewport: defaultViewport2, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling, noWheelClassName, noPanClassName, onViewportChange, isControlledViewport, paneClickDistance, children: (0, import_jsx_runtime.jsxs)(Pane, { onSelectionStart, onSelectionEnd, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, panOnDrag, isSelecting: !!isSelecting, selectionMode, selectionKeyPressed, selectionOnDrag: _selectionOnDrag, children: [children2, nodesSelectionActive && (0, import_jsx_runtime.jsx)(NodesSelection, { onSelectionContextMenu, noPanClassName, disableKeyboardA11y })] }) });
  }
  FlowRendererComponent.displayName = "FlowRenderer";
  var FlowRenderer = (0, import_react2.memo)(FlowRendererComponent);
  var selector$d = (onlyRenderVisible) => (s) => {
    return onlyRenderVisible ? getNodesInside(s.nodeLookup, { x: 0, y: 0, width: s.width, height: s.height }, s.transform, true).map((node) => node.id) : Array.from(s.nodeLookup.keys());
  };
  function useVisibleNodeIds(onlyRenderVisible) {
    const nodeIds = useStore((0, import_react2.useCallback)(selector$d(onlyRenderVisible), [onlyRenderVisible]), shallow$1);
    return nodeIds;
  }
  var selector$c = (s) => s.updateNodeInternals;
  function useResizeObserver() {
    const updateNodeInternals2 = useStore(selector$c);
    const [resizeObserver] = (0, import_react2.useState)(() => {
      if (typeof ResizeObserver === "undefined") {
        return null;
      }
      return new ResizeObserver((entries) => {
        const updates = /* @__PURE__ */ new Map();
        entries.forEach((entry) => {
          const id2 = entry.target.getAttribute("data-id");
          updates.set(id2, {
            id: id2,
            nodeElement: entry.target,
            force: true
          });
        });
        updateNodeInternals2(updates);
      });
    });
    (0, import_react2.useEffect)(() => {
      return () => {
        resizeObserver?.disconnect();
      };
    }, [resizeObserver]);
    return resizeObserver;
  }
  function useNodeObserver({ node, nodeType, hasDimensions, resizeObserver }) {
    const store = useStoreApi();
    const nodeRef = (0, import_react2.useRef)(null);
    const observedNode = (0, import_react2.useRef)(null);
    const prevSourcePosition = (0, import_react2.useRef)(node.sourcePosition);
    const prevTargetPosition = (0, import_react2.useRef)(node.targetPosition);
    const prevType = (0, import_react2.useRef)(nodeType);
    const isInitialized = hasDimensions && !!node.internals.handleBounds;
    (0, import_react2.useEffect)(() => {
      if (nodeRef.current && !node.hidden && (!isInitialized || observedNode.current !== nodeRef.current)) {
        if (observedNode.current) {
          resizeObserver?.unobserve(observedNode.current);
        }
        resizeObserver?.observe(nodeRef.current);
        observedNode.current = nodeRef.current;
      }
    }, [isInitialized, node.hidden]);
    (0, import_react2.useEffect)(() => {
      return () => {
        if (observedNode.current) {
          resizeObserver?.unobserve(observedNode.current);
          observedNode.current = null;
        }
      };
    }, []);
    (0, import_react2.useEffect)(() => {
      if (nodeRef.current) {
        const typeChanged = prevType.current !== nodeType;
        const sourcePosChanged = prevSourcePosition.current !== node.sourcePosition;
        const targetPosChanged = prevTargetPosition.current !== node.targetPosition;
        if (typeChanged || sourcePosChanged || targetPosChanged) {
          prevType.current = nodeType;
          prevSourcePosition.current = node.sourcePosition;
          prevTargetPosition.current = node.targetPosition;
          store.getState().updateNodeInternals(/* @__PURE__ */ new Map([[node.id, { id: node.id, nodeElement: nodeRef.current, force: true }]]));
        }
      }
    }, [node.id, nodeType, node.sourcePosition, node.targetPosition]);
    return nodeRef;
  }
  function NodeWrapper({ id: id2, onClick, onMouseEnter, onMouseMove, onMouseLeave, onContextMenu, onDoubleClick, nodesDraggable, elementsSelectable, nodesConnectable, nodesFocusable, resizeObserver, noDragClassName, noPanClassName, disableKeyboardA11y, rfId, nodeTypes, nodeClickDistance, onError }) {
    const { node, internals, isParent } = useStore((s) => {
      const node2 = s.nodeLookup.get(id2);
      const isParent2 = s.parentLookup.has(id2);
      return {
        node: node2,
        internals: node2.internals,
        isParent: isParent2
      };
    }, shallow$1);
    let nodeType = node.type || "default";
    let NodeComponent = nodeTypes?.[nodeType] || builtinNodeTypes[nodeType];
    if (NodeComponent === void 0) {
      onError?.("003", errorMessages["error003"](nodeType));
      nodeType = "default";
      NodeComponent = builtinNodeTypes.default;
    }
    const isDraggable = !!(node.draggable || nodesDraggable && typeof node.draggable === "undefined");
    const isSelectable = !!(node.selectable || elementsSelectable && typeof node.selectable === "undefined");
    const isConnectable = !!(node.connectable || nodesConnectable && typeof node.connectable === "undefined");
    const isFocusable = !!(node.focusable || nodesFocusable && typeof node.focusable === "undefined");
    const store = useStoreApi();
    const hasDimensions = nodeHasDimensions(node);
    const nodeRef = useNodeObserver({ node, nodeType, hasDimensions, resizeObserver });
    const dragging = useDrag({
      nodeRef,
      disabled: node.hidden || !isDraggable,
      noDragClassName,
      handleSelector: node.dragHandle,
      nodeId: id2,
      isSelectable,
      nodeClickDistance
    });
    const moveSelectedNodes = useMoveSelectedNodes();
    if (node.hidden) {
      return null;
    }
    const nodeDimensions = getNodeDimensions(node);
    const inlineDimensions = getNodeInlineStyleDimensions(node);
    const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;
    const onMouseEnterHandler = onMouseEnter ? (event) => onMouseEnter(event, { ...internals.userNode }) : void 0;
    const onMouseMoveHandler = onMouseMove ? (event) => onMouseMove(event, { ...internals.userNode }) : void 0;
    const onMouseLeaveHandler = onMouseLeave ? (event) => onMouseLeave(event, { ...internals.userNode }) : void 0;
    const onContextMenuHandler = onContextMenu ? (event) => onContextMenu(event, { ...internals.userNode }) : void 0;
    const onDoubleClickHandler = onDoubleClick ? (event) => onDoubleClick(event, { ...internals.userNode }) : void 0;
    const onSelectNodeHandler = (event) => {
      const { selectNodesOnDrag, nodeDragThreshold } = store.getState();
      if (isSelectable && (!selectNodesOnDrag || !isDraggable || nodeDragThreshold > 0)) {
        handleNodeClick({
          id: id2,
          store,
          nodeRef
        });
      }
      if (onClick) {
        onClick(event, { ...internals.userNode });
      }
    };
    const onKeyDown = (event) => {
      if (isInputDOMNode(event.nativeEvent) || disableKeyboardA11y) {
        return;
      }
      if (elementSelectionKeys.includes(event.key) && isSelectable) {
        const unselect = event.key === "Escape";
        handleNodeClick({
          id: id2,
          store,
          unselect,
          nodeRef
        });
      } else if (isDraggable && node.selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {
        event.preventDefault();
        store.setState({
          ariaLiveMessage: `Moved selected node ${event.key.replace("Arrow", "").toLowerCase()}. New position, x: ${~~internals.positionAbsolute.x}, y: ${~~internals.positionAbsolute.y}`
        });
        moveSelectedNodes({
          direction: arrowKeyDiffs[event.key],
          factor: event.shiftKey ? 4 : 1
        });
      }
    };
    return (0, import_jsx_runtime.jsx)("div", { className: cc([
      "react-flow__node",
      `react-flow__node-${nodeType}`,
      {
        // this is overwritable by passing `nopan` as a class name
        [noPanClassName]: isDraggable
      },
      node.className,
      {
        selected: node.selected,
        selectable: isSelectable,
        parent: isParent,
        draggable: isDraggable,
        dragging
      }
    ]), ref: nodeRef, style: {
      zIndex: internals.z,
      transform: `translate(${internals.positionAbsolute.x}px,${internals.positionAbsolute.y}px)`,
      pointerEvents: hasPointerEvents ? "all" : "none",
      visibility: hasDimensions ? "visible" : "hidden",
      ...node.style,
      ...inlineDimensions
    }, "data-id": id2, "data-testid": `rf__node-${id2}`, onMouseEnter: onMouseEnterHandler, onMouseMove: onMouseMoveHandler, onMouseLeave: onMouseLeaveHandler, onContextMenu: onContextMenuHandler, onClick: onSelectNodeHandler, onDoubleClick: onDoubleClickHandler, onKeyDown: isFocusable ? onKeyDown : void 0, tabIndex: isFocusable ? 0 : void 0, role: isFocusable ? "button" : void 0, "aria-describedby": disableKeyboardA11y ? void 0 : `${ARIA_NODE_DESC_KEY}-${rfId}`, "aria-label": node.ariaLabel, children: (0, import_jsx_runtime.jsx)(Provider, { value: id2, children: (0, import_jsx_runtime.jsx)(NodeComponent, { id: id2, data: node.data, type: nodeType, positionAbsoluteX: internals.positionAbsolute.x, positionAbsoluteY: internals.positionAbsolute.y, selected: node.selected ?? false, selectable: isSelectable, draggable: isDraggable, deletable: node.deletable ?? true, isConnectable, sourcePosition: node.sourcePosition, targetPosition: node.targetPosition, dragging, dragHandle: node.dragHandle, zIndex: internals.z, parentId: node.parentId, ...nodeDimensions }) }) });
  }
  var selector$b = (s) => ({
    nodesDraggable: s.nodesDraggable,
    nodesConnectable: s.nodesConnectable,
    nodesFocusable: s.nodesFocusable,
    elementsSelectable: s.elementsSelectable,
    onError: s.onError
  });
  function NodeRendererComponent(props) {
    const { nodesDraggable, nodesConnectable, nodesFocusable, elementsSelectable, onError } = useStore(selector$b, shallow$1);
    const nodeIds = useVisibleNodeIds(props.onlyRenderVisibleElements);
    const resizeObserver = useResizeObserver();
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__nodes", style: containerStyle, children: nodeIds.map((nodeId) => {
      return (
        /*
         * The split of responsibilities between NodeRenderer and
         * NodeComponentWrapper may appear weird. However, it’s designed to
         * minimize the cost of updates when individual nodes change.
         *
         * For example, when you’re dragging a single node, that node gets
         * updated multiple times per second. If `NodeRenderer` were to update
         * every time, it would have to re-run the `nodes.map()` loop every
         * time. This gets pricey with hundreds of nodes, especially if every
         * loop cycle does more than just rendering a JSX element!
         *
         * As a result of this choice, we took the following implementation
         * decisions:
         * - NodeRenderer subscribes *only* to node IDs – and therefore
         *   rerender *only* when visible nodes are added or removed.
         * - NodeRenderer performs all operations the result of which can be
         *   shared between nodes (such as creating the `ResizeObserver`
         *   instance, or subscribing to `selector`). This means extra prop
         *   drilling into `NodeComponentWrapper`, but it means we need to run
         *   these operations only once – instead of once per node.
         * - Any operations that you’d normally write inside `nodes.map` are
         *   moved into `NodeComponentWrapper`. This ensures they are
         *   memorized – so if `NodeRenderer` *has* to rerender, it only
         *   needs to regenerate the list of nodes, nothing else.
         */
        (0, import_jsx_runtime.jsx)(NodeWrapper, { id: nodeId, nodeTypes: props.nodeTypes, nodeExtent: props.nodeExtent, onClick: props.onNodeClick, onMouseEnter: props.onNodeMouseEnter, onMouseMove: props.onNodeMouseMove, onMouseLeave: props.onNodeMouseLeave, onContextMenu: props.onNodeContextMenu, onDoubleClick: props.onNodeDoubleClick, noDragClassName: props.noDragClassName, noPanClassName: props.noPanClassName, rfId: props.rfId, disableKeyboardA11y: props.disableKeyboardA11y, resizeObserver, nodesDraggable, nodesConnectable, nodesFocusable, elementsSelectable, nodeClickDistance: props.nodeClickDistance, onError }, nodeId)
      );
    }) });
  }
  NodeRendererComponent.displayName = "NodeRenderer";
  var NodeRenderer = (0, import_react2.memo)(NodeRendererComponent);
  function useVisibleEdgeIds(onlyRenderVisible) {
    const edgeIds = useStore((0, import_react2.useCallback)((s) => {
      if (!onlyRenderVisible) {
        return s.edges.map((edge) => edge.id);
      }
      const visibleEdgeIds = [];
      if (s.width && s.height) {
        for (const edge of s.edges) {
          const sourceNode = s.nodeLookup.get(edge.source);
          const targetNode = s.nodeLookup.get(edge.target);
          if (sourceNode && targetNode && isEdgeVisible({
            sourceNode,
            targetNode,
            width: s.width,
            height: s.height,
            transform: s.transform
          })) {
            visibleEdgeIds.push(edge.id);
          }
        }
      }
      return visibleEdgeIds;
    }, [onlyRenderVisible]), shallow$1);
    return edgeIds;
  }
  var ArrowSymbol = ({ color: color2 = "none", strokeWidth = 1 }) => {
    return (0, import_jsx_runtime.jsx)("polyline", { style: {
      stroke: color2,
      strokeWidth
    }, strokeLinecap: "round", strokeLinejoin: "round", fill: "none", points: "-5,-4 0,0 -5,4" });
  };
  var ArrowClosedSymbol = ({ color: color2 = "none", strokeWidth = 1 }) => {
    return (0, import_jsx_runtime.jsx)("polyline", { style: {
      stroke: color2,
      fill: color2,
      strokeWidth
    }, strokeLinecap: "round", strokeLinejoin: "round", points: "-5,-4 0,0 -5,4 -5,-4" });
  };
  var MarkerSymbols = {
    [MarkerType.Arrow]: ArrowSymbol,
    [MarkerType.ArrowClosed]: ArrowClosedSymbol
  };
  function useMarkerSymbol(type) {
    const store = useStoreApi();
    const symbol = (0, import_react2.useMemo)(() => {
      const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);
      if (!symbolExists) {
        store.getState().onError?.("009", errorMessages["error009"](type));
        return null;
      }
      return MarkerSymbols[type];
    }, [type]);
    return symbol;
  }
  var Marker = ({ id: id2, type, color: color2, width = 12.5, height = 12.5, markerUnits = "strokeWidth", strokeWidth, orient = "auto-start-reverse" }) => {
    const Symbol2 = useMarkerSymbol(type);
    if (!Symbol2) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("marker", { className: "react-flow__arrowhead", id: id2, markerWidth: `${width}`, markerHeight: `${height}`, viewBox: "-10 -10 20 20", markerUnits, orient, refX: "0", refY: "0", children: (0, import_jsx_runtime.jsx)(Symbol2, { color: color2, strokeWidth }) });
  };
  var MarkerDefinitions = ({ defaultColor, rfId }) => {
    const edges = useStore((s) => s.edges);
    const defaultEdgeOptions = useStore((s) => s.defaultEdgeOptions);
    const markers = (0, import_react2.useMemo)(() => {
      const markers2 = createMarkerIds(edges, {
        id: rfId,
        defaultColor,
        defaultMarkerStart: defaultEdgeOptions?.markerStart,
        defaultMarkerEnd: defaultEdgeOptions?.markerEnd
      });
      return markers2;
    }, [edges, defaultEdgeOptions, rfId, defaultColor]);
    if (!markers.length) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("svg", { className: "react-flow__marker", children: (0, import_jsx_runtime.jsx)("defs", { children: markers.map((marker) => (0, import_jsx_runtime.jsx)(Marker, { id: marker.id, type: marker.type, color: marker.color, width: marker.width, height: marker.height, markerUnits: marker.markerUnits, strokeWidth: marker.strokeWidth, orient: marker.orient }, marker.id)) }) });
  };
  MarkerDefinitions.displayName = "MarkerDefinitions";
  var MarkerDefinitions$1 = (0, import_react2.memo)(MarkerDefinitions);
  function EdgeTextComponent({ x, y, label, labelStyle = {}, labelShowBg = true, labelBgStyle = {}, labelBgPadding = [2, 4], labelBgBorderRadius = 2, children: children2, className, ...rest }) {
    const [edgeTextBbox, setEdgeTextBbox] = (0, import_react2.useState)({ x: 1, y: 0, width: 0, height: 0 });
    const edgeTextClasses = cc(["react-flow__edge-textwrapper", className]);
    const edgeTextRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      if (edgeTextRef.current) {
        const textBbox = edgeTextRef.current.getBBox();
        setEdgeTextBbox({
          x: textBbox.x,
          y: textBbox.y,
          width: textBbox.width,
          height: textBbox.height
        });
      }
    }, [label]);
    if (typeof label === "undefined" || !label) {
      return null;
    }
    return (0, import_jsx_runtime.jsxs)("g", { transform: `translate(${x - edgeTextBbox.width / 2} ${y - edgeTextBbox.height / 2})`, className: edgeTextClasses, visibility: edgeTextBbox.width ? "visible" : "hidden", ...rest, children: [labelShowBg && (0, import_jsx_runtime.jsx)("rect", { width: edgeTextBbox.width + 2 * labelBgPadding[0], x: -labelBgPadding[0], y: -labelBgPadding[1], height: edgeTextBbox.height + 2 * labelBgPadding[1], className: "react-flow__edge-textbg", style: labelBgStyle, rx: labelBgBorderRadius, ry: labelBgBorderRadius }), (0, import_jsx_runtime.jsx)("text", { className: "react-flow__edge-text", y: edgeTextBbox.height / 2, dy: "0.3em", ref: edgeTextRef, style: labelStyle, children: label }), children2] });
  }
  EdgeTextComponent.displayName = "EdgeText";
  var EdgeText = (0, import_react2.memo)(EdgeTextComponent);
  function BaseEdge({ path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, interactionWidth = 20, ...props }) {
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)("path", { ...props, d: path, fill: "none", className: cc(["react-flow__edge-path", props.className]) }), interactionWidth && (0, import_jsx_runtime.jsx)("path", { d: path, fill: "none", strokeOpacity: 0, strokeWidth: interactionWidth, className: "react-flow__edge-interaction" }), label && isNumeric(labelX) && isNumeric(labelY) ? (0, import_jsx_runtime.jsx)(EdgeText, { x: labelX, y: labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius }) : null] });
  }
  function getControl({ pos, x1, y1, x2, y2 }) {
    if (pos === Position.Left || pos === Position.Right) {
      return [0.5 * (x1 + x2), y1];
    }
    return [x1, 0.5 * (y1 + y2)];
  }
  function getSimpleBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top }) {
    const [sourceControlX, sourceControlY] = getControl({
      pos: sourcePosition,
      x1: sourceX,
      y1: sourceY,
      x2: targetX,
      y2: targetY
    });
    const [targetControlX, targetControlY] = getControl({
      pos: targetPosition,
      x1: targetX,
      y1: targetY,
      x2: sourceX,
      y2: sourceY
    });
    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({
      sourceX,
      sourceY,
      targetX,
      targetY,
      sourceControlX,
      sourceControlY,
      targetControlX,
      targetControlY
    });
    return [
      `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,
      labelX,
      labelY,
      offsetX,
      offsetY
    ];
  }
  function createSimpleBezierEdge(params) {
    return (0, import_react2.memo)(({ id: id2, sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth }) => {
      const [path, labelX, labelY] = getSimpleBezierPath({
        sourceX,
        sourceY,
        sourcePosition,
        targetX,
        targetY,
        targetPosition
      });
      const _id = params.isInternal ? void 0 : id2;
      return (0, import_jsx_runtime.jsx)(BaseEdge, { id: _id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth });
    });
  }
  var SimpleBezierEdge = createSimpleBezierEdge({ isInternal: false });
  var SimpleBezierEdgeInternal = createSimpleBezierEdge({ isInternal: true });
  SimpleBezierEdge.displayName = "SimpleBezierEdge";
  SimpleBezierEdgeInternal.displayName = "SimpleBezierEdgeInternal";
  function createSmoothStepEdge(params) {
    return (0, import_react2.memo)(({ id: id2, sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, sourcePosition = Position.Bottom, targetPosition = Position.Top, markerEnd, markerStart, pathOptions, interactionWidth }) => {
      const [path, labelX, labelY] = getSmoothStepPath({
        sourceX,
        sourceY,
        sourcePosition,
        targetX,
        targetY,
        targetPosition,
        borderRadius: pathOptions?.borderRadius,
        offset: pathOptions?.offset
      });
      const _id = params.isInternal ? void 0 : id2;
      return (0, import_jsx_runtime.jsx)(BaseEdge, { id: _id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth });
    });
  }
  var SmoothStepEdge = createSmoothStepEdge({ isInternal: false });
  var SmoothStepEdgeInternal = createSmoothStepEdge({ isInternal: true });
  SmoothStepEdge.displayName = "SmoothStepEdge";
  SmoothStepEdgeInternal.displayName = "SmoothStepEdgeInternal";
  function createStepEdge(params) {
    return (0, import_react2.memo)(({ id: id2, ...props }) => {
      const _id = params.isInternal ? void 0 : id2;
      return (0, import_jsx_runtime.jsx)(SmoothStepEdge, { ...props, id: _id, pathOptions: (0, import_react2.useMemo)(() => ({ borderRadius: 0, offset: props.pathOptions?.offset }), [props.pathOptions?.offset]) });
    });
  }
  var StepEdge = createStepEdge({ isInternal: false });
  var StepEdgeInternal = createStepEdge({ isInternal: true });
  StepEdge.displayName = "StepEdge";
  StepEdgeInternal.displayName = "StepEdgeInternal";
  function createStraightEdge(params) {
    return (0, import_react2.memo)(({ id: id2, sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth }) => {
      const [path, labelX, labelY] = getStraightPath({ sourceX, sourceY, targetX, targetY });
      const _id = params.isInternal ? void 0 : id2;
      return (0, import_jsx_runtime.jsx)(BaseEdge, { id: _id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth });
    });
  }
  var StraightEdge = createStraightEdge({ isInternal: false });
  var StraightEdgeInternal = createStraightEdge({ isInternal: true });
  StraightEdge.displayName = "StraightEdge";
  StraightEdgeInternal.displayName = "StraightEdgeInternal";
  function createBezierEdge(params) {
    return (0, import_react2.memo)(({ id: id2, sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, pathOptions, interactionWidth }) => {
      const [path, labelX, labelY] = getBezierPath({
        sourceX,
        sourceY,
        sourcePosition,
        targetX,
        targetY,
        targetPosition,
        curvature: pathOptions?.curvature
      });
      const _id = params.isInternal ? void 0 : id2;
      return (0, import_jsx_runtime.jsx)(BaseEdge, { id: _id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style: style5, markerEnd, markerStart, interactionWidth });
    });
  }
  var BezierEdge = createBezierEdge({ isInternal: false });
  var BezierEdgeInternal = createBezierEdge({ isInternal: true });
  BezierEdge.displayName = "BezierEdge";
  BezierEdgeInternal.displayName = "BezierEdgeInternal";
  var builtinEdgeTypes = {
    default: BezierEdgeInternal,
    straight: StraightEdgeInternal,
    step: StepEdgeInternal,
    smoothstep: SmoothStepEdgeInternal,
    simplebezier: SimpleBezierEdgeInternal
  };
  var nullPosition = {
    sourceX: null,
    sourceY: null,
    targetX: null,
    targetY: null,
    sourcePosition: null,
    targetPosition: null
  };
  var shiftX = (x, shift3, position2) => {
    if (position2 === Position.Left)
      return x - shift3;
    if (position2 === Position.Right)
      return x + shift3;
    return x;
  };
  var shiftY = (y, shift3, position2) => {
    if (position2 === Position.Top)
      return y - shift3;
    if (position2 === Position.Bottom)
      return y + shift3;
    return y;
  };
  var EdgeUpdaterClassName = "react-flow__edgeupdater";
  function EdgeAnchor({ position: position2, centerX, centerY, radius = 10, onMouseDown, onMouseEnter, onMouseOut, type }) {
    return (0, import_jsx_runtime.jsx)("circle", { onMouseDown, onMouseEnter, onMouseOut, className: cc([EdgeUpdaterClassName, `${EdgeUpdaterClassName}-${type}`]), cx: shiftX(centerX, radius, position2), cy: shiftY(centerY, radius, position2), r: radius, stroke: "transparent", fill: "transparent" });
  }
  function EdgeUpdateAnchors({ isReconnectable, reconnectRadius, edge, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, onReconnect, onReconnectStart, onReconnectEnd, setReconnecting, setUpdateHover }) {
    const store = useStoreApi();
    const handleEdgeUpdater = (event, oppositeHandle) => {
      if (event.button !== 0) {
        return;
      }
      const { autoPanOnConnect, domNode, isValidConnection, connectionMode, connectionRadius, lib, onConnectStart, onConnectEnd, cancelConnection, nodeLookup, rfId: flowId, panBy: panBy2, updateConnection } = store.getState();
      const isTarget = oppositeHandle.type === "target";
      setReconnecting(true);
      onReconnectStart?.(event, edge, oppositeHandle.type);
      const _onReconnectEnd = (evt, connectionState) => {
        setReconnecting(false);
        onReconnectEnd?.(evt, edge, oppositeHandle.type, connectionState);
      };
      const onConnectEdge = (connection) => onReconnect?.(edge, connection);
      XYHandle.onPointerDown(event.nativeEvent, {
        autoPanOnConnect,
        connectionMode,
        connectionRadius,
        domNode,
        handleId: oppositeHandle.id,
        nodeId: oppositeHandle.nodeId,
        nodeLookup,
        isTarget,
        edgeUpdaterType: oppositeHandle.type,
        lib,
        flowId,
        cancelConnection,
        panBy: panBy2,
        isValidConnection,
        onConnect: onConnectEdge,
        onConnectStart,
        onConnectEnd,
        onReconnectEnd: _onReconnectEnd,
        updateConnection,
        getTransform: () => store.getState().transform,
        getFromHandle: () => store.getState().connection.fromHandle
      });
    };
    const onReconnectSourceMouseDown = (event) => handleEdgeUpdater(event, { nodeId: edge.target, id: edge.targetHandle ?? null, type: "target" });
    const onReconnectTargetMouseDown = (event) => handleEdgeUpdater(event, { nodeId: edge.source, id: edge.sourceHandle ?? null, type: "source" });
    const onReconnectMouseEnter = () => setUpdateHover(true);
    const onReconnectMouseOut = () => setUpdateHover(false);
    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(isReconnectable === true || isReconnectable === "source") && (0, import_jsx_runtime.jsx)(EdgeAnchor, { position: sourcePosition, centerX: sourceX, centerY: sourceY, radius: reconnectRadius, onMouseDown: onReconnectSourceMouseDown, onMouseEnter: onReconnectMouseEnter, onMouseOut: onReconnectMouseOut, type: "source" }), (isReconnectable === true || isReconnectable === "target") && (0, import_jsx_runtime.jsx)(EdgeAnchor, { position: targetPosition, centerX: targetX, centerY: targetY, radius: reconnectRadius, onMouseDown: onReconnectTargetMouseDown, onMouseEnter: onReconnectMouseEnter, onMouseOut: onReconnectMouseOut, type: "target" })] });
  }
  function EdgeWrapper({ id: id2, edgesFocusable, edgesReconnectable, elementsSelectable, onClick, onDoubleClick, onContextMenu, onMouseEnter, onMouseMove, onMouseLeave, reconnectRadius, onReconnect, onReconnectStart, onReconnectEnd, rfId, edgeTypes, noPanClassName, onError, disableKeyboardA11y }) {
    let edge = useStore((s) => s.edgeLookup.get(id2));
    const defaultEdgeOptions = useStore((s) => s.defaultEdgeOptions);
    edge = defaultEdgeOptions ? { ...defaultEdgeOptions, ...edge } : edge;
    let edgeType = edge.type || "default";
    let EdgeComponent = edgeTypes?.[edgeType] || builtinEdgeTypes[edgeType];
    if (EdgeComponent === void 0) {
      onError?.("011", errorMessages["error011"](edgeType));
      edgeType = "default";
      EdgeComponent = builtinEdgeTypes.default;
    }
    const isFocusable = !!(edge.focusable || edgesFocusable && typeof edge.focusable === "undefined");
    const isReconnectable = typeof onReconnect !== "undefined" && (edge.reconnectable || edgesReconnectable && typeof edge.reconnectable === "undefined");
    const isSelectable = !!(edge.selectable || elementsSelectable && typeof edge.selectable === "undefined");
    const edgeRef = (0, import_react2.useRef)(null);
    const [updateHover, setUpdateHover] = (0, import_react2.useState)(false);
    const [reconnecting, setReconnecting] = (0, import_react2.useState)(false);
    const store = useStoreApi();
    const { zIndex, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition } = useStore((0, import_react2.useCallback)((store2) => {
      const sourceNode = store2.nodeLookup.get(edge.source);
      const targetNode = store2.nodeLookup.get(edge.target);
      if (!sourceNode || !targetNode) {
        return {
          zIndex: edge.zIndex,
          ...nullPosition
        };
      }
      const edgePosition = getEdgePosition({
        id: id2,
        sourceNode,
        targetNode,
        sourceHandle: edge.sourceHandle || null,
        targetHandle: edge.targetHandle || null,
        connectionMode: store2.connectionMode,
        onError
      });
      const zIndex2 = getElevatedEdgeZIndex({
        selected: edge.selected,
        zIndex: edge.zIndex,
        sourceNode,
        targetNode,
        elevateOnSelect: store2.elevateEdgesOnSelect
      });
      return {
        zIndex: zIndex2,
        ...edgePosition || nullPosition
      };
    }, [edge.source, edge.target, edge.sourceHandle, edge.targetHandle, edge.selected, edge.zIndex]), shallow$1);
    const markerStartUrl = (0, import_react2.useMemo)(() => edge.markerStart ? `url('#${getMarkerId(edge.markerStart, rfId)}')` : void 0, [edge.markerStart, rfId]);
    const markerEndUrl = (0, import_react2.useMemo)(() => edge.markerEnd ? `url('#${getMarkerId(edge.markerEnd, rfId)}')` : void 0, [edge.markerEnd, rfId]);
    if (edge.hidden || sourceX === null || sourceY === null || targetX === null || targetY === null) {
      return null;
    }
    const onEdgeClick = (event) => {
      const { addSelectedEdges, unselectNodesAndEdges, multiSelectionActive } = store.getState();
      if (isSelectable) {
        store.setState({ nodesSelectionActive: false });
        if (edge.selected && multiSelectionActive) {
          unselectNodesAndEdges({ nodes: [], edges: [edge] });
          edgeRef.current?.blur();
        } else {
          addSelectedEdges([id2]);
        }
      }
      if (onClick) {
        onClick(event, edge);
      }
    };
    const onEdgeDoubleClick = onDoubleClick ? (event) => {
      onDoubleClick(event, { ...edge });
    } : void 0;
    const onEdgeContextMenu = onContextMenu ? (event) => {
      onContextMenu(event, { ...edge });
    } : void 0;
    const onEdgeMouseEnter = onMouseEnter ? (event) => {
      onMouseEnter(event, { ...edge });
    } : void 0;
    const onEdgeMouseMove = onMouseMove ? (event) => {
      onMouseMove(event, { ...edge });
    } : void 0;
    const onEdgeMouseLeave = onMouseLeave ? (event) => {
      onMouseLeave(event, { ...edge });
    } : void 0;
    const onKeyDown = (event) => {
      if (!disableKeyboardA11y && elementSelectionKeys.includes(event.key) && isSelectable) {
        const { unselectNodesAndEdges, addSelectedEdges } = store.getState();
        const unselect = event.key === "Escape";
        if (unselect) {
          edgeRef.current?.blur();
          unselectNodesAndEdges({ edges: [edge] });
        } else {
          addSelectedEdges([id2]);
        }
      }
    };
    return (0, import_jsx_runtime.jsx)("svg", { style: { zIndex }, children: (0, import_jsx_runtime.jsxs)("g", { className: cc([
      "react-flow__edge",
      `react-flow__edge-${edgeType}`,
      edge.className,
      noPanClassName,
      {
        selected: edge.selected,
        animated: edge.animated,
        inactive: !isSelectable && !onClick,
        updating: updateHover,
        selectable: isSelectable
      }
    ]), onClick: onEdgeClick, onDoubleClick: onEdgeDoubleClick, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onKeyDown: isFocusable ? onKeyDown : void 0, tabIndex: isFocusable ? 0 : void 0, role: isFocusable ? "button" : "img", "data-id": id2, "data-testid": `rf__edge-${id2}`, "aria-label": edge.ariaLabel === null ? void 0 : edge.ariaLabel || `Edge from ${edge.source} to ${edge.target}`, "aria-describedby": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : void 0, ref: edgeRef, children: [!reconnecting && (0, import_jsx_runtime.jsx)(EdgeComponent, { id: id2, source: edge.source, target: edge.target, type: edge.type, selected: edge.selected, animated: edge.animated, selectable: isSelectable, deletable: edge.deletable ?? true, label: edge.label, labelStyle: edge.labelStyle, labelShowBg: edge.labelShowBg, labelBgStyle: edge.labelBgStyle, labelBgPadding: edge.labelBgPadding, labelBgBorderRadius: edge.labelBgBorderRadius, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, data: edge.data, style: edge.style, sourceHandleId: edge.sourceHandle, targetHandleId: edge.targetHandle, markerStart: markerStartUrl, markerEnd: markerEndUrl, pathOptions: "pathOptions" in edge ? edge.pathOptions : void 0, interactionWidth: edge.interactionWidth }), isReconnectable && (0, import_jsx_runtime.jsx)(EdgeUpdateAnchors, { edge, isReconnectable, reconnectRadius, onReconnect, onReconnectStart, onReconnectEnd, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, setUpdateHover, setReconnecting })] }) });
  }
  var selector$a = (s) => ({
    edgesFocusable: s.edgesFocusable,
    edgesReconnectable: s.edgesReconnectable,
    elementsSelectable: s.elementsSelectable,
    connectionMode: s.connectionMode,
    onError: s.onError
  });
  function EdgeRendererComponent({ defaultMarkerColor, onlyRenderVisibleElements, rfId, edgeTypes, noPanClassName, onReconnect, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeClick, reconnectRadius, onEdgeDoubleClick, onReconnectStart, onReconnectEnd, disableKeyboardA11y }) {
    const { edgesFocusable, edgesReconnectable, elementsSelectable, onError } = useStore(selector$a, shallow$1);
    const edgeIds = useVisibleEdgeIds(onlyRenderVisibleElements);
    return (0, import_jsx_runtime.jsxs)("div", { className: "react-flow__edges", children: [(0, import_jsx_runtime.jsx)(MarkerDefinitions$1, { defaultColor: defaultMarkerColor, rfId }), edgeIds.map((id2) => {
      return (0, import_jsx_runtime.jsx)(EdgeWrapper, { id: id2, edgesFocusable, edgesReconnectable, elementsSelectable, noPanClassName, onReconnect, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onClick: onEdgeClick, reconnectRadius, onDoubleClick: onEdgeDoubleClick, onReconnectStart, onReconnectEnd, rfId, onError, edgeTypes, disableKeyboardA11y }, id2);
    })] });
  }
  EdgeRendererComponent.displayName = "EdgeRenderer";
  var EdgeRenderer = (0, import_react2.memo)(EdgeRendererComponent);
  var selector$9 = (s) => `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`;
  function Viewport({ children: children2 }) {
    const transform2 = useStore(selector$9);
    return (0, import_jsx_runtime.jsx)("div", { className: "react-flow__viewport xyflow__viewport react-flow__container", style: { transform: transform2 }, children: children2 });
  }
  function useOnInitHandler(onInit) {
    const rfInstance = useReactFlow();
    const isInitialized = (0, import_react2.useRef)(false);
    (0, import_react2.useEffect)(() => {
      if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {
        setTimeout(() => onInit(rfInstance), 1);
        isInitialized.current = true;
      }
    }, [onInit, rfInstance.viewportInitialized]);
  }
  var selector$8 = (state) => state.panZoom?.syncViewport;
  function useViewportSync(viewport2) {
    const syncViewport = useStore(selector$8);
    const store = useStoreApi();
    (0, import_react2.useEffect)(() => {
      if (viewport2) {
        syncViewport?.(viewport2);
        store.setState({ transform: [viewport2.x, viewport2.y, viewport2.zoom] });
      }
    }, [viewport2, syncViewport]);
    return null;
  }
  function storeSelector$1(s) {
    return s.connection.inProgress ? { ...s.connection, to: pointToRendererPoint(s.connection.to, s.transform) } : { ...s.connection };
  }
  function getSelector(connectionSelector) {
    if (connectionSelector) {
      const combinedSelector = (s) => {
        const connection = storeSelector$1(s);
        return connectionSelector(connection);
      };
      return combinedSelector;
    }
    return storeSelector$1;
  }
  function useConnection(connectionSelector) {
    const combinedSelector = getSelector(connectionSelector);
    return useStore(combinedSelector, shallow$1);
  }
  var selector$7 = (s) => ({
    nodesConnectable: s.nodesConnectable,
    isValid: s.connection.isValid,
    inProgress: s.connection.inProgress,
    width: s.width,
    height: s.height
  });
  function ConnectionLineWrapper({ containerStyle: containerStyle2, style: style5, type, component }) {
    const { nodesConnectable, width, height, isValid, inProgress } = useStore(selector$7, shallow$1);
    const renderConnection = !!(width && nodesConnectable && inProgress);
    if (!renderConnection) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)("svg", { style: containerStyle2, width, height, className: "react-flow__connectionline react-flow__container", children: (0, import_jsx_runtime.jsx)("g", { className: cc(["react-flow__connection", getConnectionStatus(isValid)]), children: (0, import_jsx_runtime.jsx)(ConnectionLine, { style: style5, type, CustomComponent: component, isValid }) }) });
  }
  var ConnectionLine = ({ style: style5, type = ConnectionLineType.Bezier, CustomComponent, isValid }) => {
    const { inProgress, from, fromNode, fromHandle, fromPosition, to, toNode, toHandle, toPosition } = useConnection();
    if (!inProgress) {
      return;
    }
    if (CustomComponent) {
      return (0, import_jsx_runtime.jsx)(CustomComponent, { connectionLineType: type, connectionLineStyle: style5, fromNode, fromHandle, fromX: from.x, fromY: from.y, toX: to.x, toY: to.y, fromPosition, toPosition, connectionStatus: getConnectionStatus(isValid), toNode, toHandle });
    }
    let path = "";
    const pathParams = {
      sourceX: from.x,
      sourceY: from.y,
      sourcePosition: fromPosition,
      targetX: to.x,
      targetY: to.y,
      targetPosition: toPosition
    };
    switch (type) {
      case ConnectionLineType.Bezier:
        [path] = getBezierPath(pathParams);
        break;
      case ConnectionLineType.SimpleBezier:
        [path] = getSimpleBezierPath(pathParams);
        break;
      case ConnectionLineType.Step:
        [path] = getSmoothStepPath({
          ...pathParams,
          borderRadius: 0
        });
        break;
      case ConnectionLineType.SmoothStep:
        [path] = getSmoothStepPath(pathParams);
        break;
      default:
        [path] = getStraightPath(pathParams);
    }
    return (0, import_jsx_runtime.jsx)("path", { d: path, fill: "none", className: "react-flow__connection-path", style: style5 });
  };
  ConnectionLine.displayName = "ConnectionLine";
  var emptyTypes = {};
  function useNodeOrEdgeTypesWarning(nodeOrEdgeTypes = emptyTypes) {
    const typesRef = (0, import_react2.useRef)(nodeOrEdgeTypes);
    const store = useStoreApi();
    (0, import_react2.useEffect)(() => {
      if (true) {
        const usedKeys = /* @__PURE__ */ new Set([...Object.keys(typesRef.current), ...Object.keys(nodeOrEdgeTypes)]);
        for (const key of usedKeys) {
          if (typesRef.current[key] !== nodeOrEdgeTypes[key]) {
            store.getState().onError?.("002", errorMessages["error002"]());
            break;
          }
        }
        typesRef.current = nodeOrEdgeTypes;
      }
    }, [nodeOrEdgeTypes]);
  }
  function useStylesLoadedWarning() {
    const store = useStoreApi();
    const checked = (0, import_react2.useRef)(false);
    (0, import_react2.useEffect)(() => {
      if (true) {
        if (!checked.current) {
          const pane = document.querySelector(".react-flow__pane");
          if (pane && !(window.getComputedStyle(pane).zIndex === "1")) {
            store.getState().onError?.("013", errorMessages["error013"]("react"));
          }
          checked.current = true;
        }
      }
    }, []);
  }
  function GraphViewComponent({ nodeTypes, edgeTypes, onInit, onNodeClick, onEdgeClick, onNodeDoubleClick, onEdgeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, deleteKeyCode, onlyRenderVisibleElements, elementsSelectable, defaultViewport: defaultViewport2, translateExtent, minZoom, maxZoom, preventScrolling, defaultMarkerColor, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, paneClickDistance, nodeClickDistance, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, reconnectRadius, onReconnect, onReconnectStart, onReconnectEnd, noDragClassName, noWheelClassName, noPanClassName, disableKeyboardA11y, nodeExtent, rfId, viewport: viewport2, onViewportChange }) {
    useNodeOrEdgeTypesWarning(nodeTypes);
    useNodeOrEdgeTypesWarning(edgeTypes);
    useStylesLoadedWarning();
    useOnInitHandler(onInit);
    useViewportSync(viewport2);
    return (0, import_jsx_runtime.jsx)(FlowRenderer, { onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, paneClickDistance, deleteKeyCode, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, zoomOnScroll, zoomOnPinch, zoomOnDoubleClick, panOnScroll, panOnScrollSpeed, panOnScrollMode, panOnDrag, defaultViewport: defaultViewport2, translateExtent, minZoom, maxZoom, onSelectionContextMenu, preventScrolling, noDragClassName, noWheelClassName, noPanClassName, disableKeyboardA11y, onViewportChange, isControlledViewport: !!viewport2, children: (0, import_jsx_runtime.jsxs)(Viewport, { children: [(0, import_jsx_runtime.jsx)(EdgeRenderer, { edgeTypes, onEdgeClick, onEdgeDoubleClick, onReconnect, onReconnectStart, onReconnectEnd, onlyRenderVisibleElements, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, reconnectRadius, defaultMarkerColor, noPanClassName, disableKeyboardA11y, rfId }), (0, import_jsx_runtime.jsx)(ConnectionLineWrapper, { style: connectionLineStyle, type: connectionLineType, component: connectionLineComponent, containerStyle: connectionLineContainerStyle }), (0, import_jsx_runtime.jsx)("div", { className: "react-flow__edgelabel-renderer" }), (0, import_jsx_runtime.jsx)(NodeRenderer, { nodeTypes, onNodeClick, onNodeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, nodeClickDistance, onlyRenderVisibleElements, noPanClassName, noDragClassName, disableKeyboardA11y, nodeExtent, rfId }), (0, import_jsx_runtime.jsx)("div", { className: "react-flow__viewport-portal" })] }) });
  }
  GraphViewComponent.displayName = "GraphView";
  var GraphView = (0, import_react2.memo)(GraphViewComponent);
  var getInitialState = ({ nodes, edges, defaultNodes, defaultEdges, width, height, fitView: fitView2, nodeOrigin, nodeExtent } = {}) => {
    const nodeLookup = /* @__PURE__ */ new Map();
    const parentLookup = /* @__PURE__ */ new Map();
    const connectionLookup = /* @__PURE__ */ new Map();
    const edgeLookup = /* @__PURE__ */ new Map();
    const storeEdges = defaultEdges ?? edges ?? [];
    const storeNodes = defaultNodes ?? nodes ?? [];
    const storeNodeOrigin = nodeOrigin ?? [0, 0];
    const storeNodeExtent = nodeExtent ?? infiniteExtent;
    updateConnectionLookup(connectionLookup, edgeLookup, storeEdges);
    adoptUserNodes(storeNodes, nodeLookup, parentLookup, {
      nodeOrigin: storeNodeOrigin,
      nodeExtent: storeNodeExtent,
      elevateNodesOnSelect: false
    });
    let transform2 = [0, 0, 1];
    if (fitView2 && width && height) {
      const bounds = getInternalNodesBounds(nodeLookup, {
        filter: (node) => !!((node.width || node.initialWidth) && (node.height || node.initialHeight))
      });
      const { x, y, zoom } = getViewportForBounds(bounds, width, height, 0.5, 2, 0.1);
      transform2 = [x, y, zoom];
    }
    return {
      rfId: "1",
      width: 0,
      height: 0,
      transform: transform2,
      nodes: storeNodes,
      nodeLookup,
      parentLookup,
      edges: storeEdges,
      edgeLookup,
      connectionLookup,
      onNodesChange: null,
      onEdgesChange: null,
      hasDefaultNodes: defaultNodes !== void 0,
      hasDefaultEdges: defaultEdges !== void 0,
      panZoom: null,
      minZoom: 0.5,
      maxZoom: 2,
      translateExtent: infiniteExtent,
      nodeExtent: storeNodeExtent,
      nodesSelectionActive: false,
      userSelectionActive: false,
      userSelectionRect: null,
      connectionMode: ConnectionMode.Strict,
      domNode: null,
      paneDragging: false,
      noPanClassName: "nopan",
      nodeOrigin: storeNodeOrigin,
      nodeDragThreshold: 1,
      snapGrid: [15, 15],
      snapToGrid: false,
      nodesDraggable: true,
      nodesConnectable: true,
      nodesFocusable: true,
      edgesFocusable: true,
      edgesReconnectable: true,
      elementsSelectable: true,
      elevateNodesOnSelect: true,
      elevateEdgesOnSelect: false,
      fitViewOnInit: false,
      fitViewDone: false,
      fitViewOnInitOptions: void 0,
      selectNodesOnDrag: true,
      multiSelectionActive: false,
      connection: { ...initialConnection },
      connectionClickStartHandle: null,
      connectOnClick: true,
      ariaLiveMessage: "",
      autoPanOnConnect: true,
      autoPanOnNodeDrag: true,
      autoPanSpeed: 15,
      connectionRadius: 20,
      onError: devWarn,
      isValidConnection: void 0,
      onSelectionChangeHandlers: [],
      lib: "react",
      debug: false
    };
  };
  var createStore2 = ({ nodes, edges, defaultNodes, defaultEdges, width, height, fitView: fitView$1, nodeOrigin, nodeExtent }) => createWithEqualityFn((set3, get3) => ({
    ...getInitialState({ nodes, edges, width, height, fitView: fitView$1, nodeOrigin, nodeExtent, defaultNodes, defaultEdges }),
    setNodes: (nodes2) => {
      const { nodeLookup, parentLookup, nodeOrigin: nodeOrigin2, elevateNodesOnSelect } = get3();
      adoptUserNodes(nodes2, nodeLookup, parentLookup, {
        nodeOrigin: nodeOrigin2,
        nodeExtent,
        elevateNodesOnSelect,
        checkEquality: true
      });
      set3({ nodes: nodes2 });
    },
    setEdges: (edges2) => {
      const { connectionLookup, edgeLookup } = get3();
      updateConnectionLookup(connectionLookup, edgeLookup, edges2);
      set3({ edges: edges2 });
    },
    setDefaultNodesAndEdges: (nodes2, edges2) => {
      if (nodes2) {
        const { setNodes } = get3();
        setNodes(nodes2);
        set3({ hasDefaultNodes: true });
      }
      if (edges2) {
        const { setEdges } = get3();
        setEdges(edges2);
        set3({ hasDefaultEdges: true });
      }
    },
    /*
     * Every node gets registerd at a ResizeObserver. Whenever a node
     * changes its dimensions, this function is called to measure the
     * new dimensions and update the nodes.
     */
    updateNodeInternals: (updates, params = { triggerFitView: true }) => {
      const { triggerNodeChanges, nodeLookup, parentLookup, fitViewOnInit, fitViewDone, fitViewOnInitOptions, domNode, nodeOrigin: nodeOrigin2, nodeExtent: nodeExtent2, debug, fitViewSync } = get3();
      const { changes, updatedInternals } = updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin2, nodeExtent2);
      if (!updatedInternals) {
        return;
      }
      updateAbsolutePositions(nodeLookup, parentLookup, { nodeOrigin: nodeOrigin2, nodeExtent: nodeExtent2 });
      if (params.triggerFitView) {
        let nextFitViewDone = fitViewDone;
        if (!fitViewDone && fitViewOnInit) {
          nextFitViewDone = fitViewSync({
            ...fitViewOnInitOptions,
            nodes: fitViewOnInitOptions?.nodes
          });
        }
        set3({ fitViewDone: nextFitViewDone });
      } else {
        set3({});
      }
      if (changes?.length > 0) {
        if (debug) {
          console.log("React Flow: trigger node changes", changes);
        }
        triggerNodeChanges?.(changes);
      }
    },
    updateNodePositions: (nodeDragItems, dragging = false) => {
      const parentExpandChildren = [];
      const changes = [];
      for (const [id2, dragItem] of nodeDragItems) {
        const expandParent = !!(dragItem?.expandParent && dragItem?.parentId && dragItem?.position);
        const change = {
          id: id2,
          type: "position",
          position: expandParent ? {
            x: Math.max(0, dragItem.position.x),
            y: Math.max(0, dragItem.position.y)
          } : dragItem.position,
          dragging
        };
        if (expandParent) {
          parentExpandChildren.push({
            id: id2,
            parentId: dragItem.parentId,
            rect: {
              ...dragItem.internals.positionAbsolute,
              width: dragItem.measured.width,
              height: dragItem.measured.height
            }
          });
        }
        changes.push(change);
      }
      if (parentExpandChildren.length > 0) {
        const { nodeLookup, parentLookup, nodeOrigin: nodeOrigin2 } = get3();
        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin2);
        changes.push(...parentExpandChanges);
      }
      get3().triggerNodeChanges(changes);
    },
    triggerNodeChanges: (changes) => {
      const { onNodesChange, setNodes, nodes: nodes2, hasDefaultNodes, debug } = get3();
      if (changes?.length) {
        if (hasDefaultNodes) {
          const updatedNodes = applyNodeChanges(changes, nodes2);
          setNodes(updatedNodes);
        }
        if (debug) {
          console.log("React Flow: trigger node changes", changes);
        }
        onNodesChange?.(changes);
      }
    },
    triggerEdgeChanges: (changes) => {
      const { onEdgesChange, setEdges, edges: edges2, hasDefaultEdges, debug } = get3();
      if (changes?.length) {
        if (hasDefaultEdges) {
          const updatedEdges = applyEdgeChanges(changes, edges2);
          setEdges(updatedEdges);
        }
        if (debug) {
          console.log("React Flow: trigger edge changes", changes);
        }
        onEdgesChange?.(changes);
      }
    },
    addSelectedNodes: (selectedNodeIds) => {
      const { multiSelectionActive, edgeLookup, nodeLookup, triggerNodeChanges, triggerEdgeChanges } = get3();
      if (multiSelectionActive) {
        const nodeChanges = selectedNodeIds.map((nodeId) => createSelectionChange(nodeId, true));
        triggerNodeChanges(nodeChanges);
        return;
      }
      triggerNodeChanges(getSelectionChanges(nodeLookup, /* @__PURE__ */ new Set([...selectedNodeIds]), true));
      triggerEdgeChanges(getSelectionChanges(edgeLookup));
    },
    addSelectedEdges: (selectedEdgeIds) => {
      const { multiSelectionActive, edgeLookup, nodeLookup, triggerNodeChanges, triggerEdgeChanges } = get3();
      if (multiSelectionActive) {
        const changedEdges = selectedEdgeIds.map((edgeId) => createSelectionChange(edgeId, true));
        triggerEdgeChanges(changedEdges);
        return;
      }
      triggerEdgeChanges(getSelectionChanges(edgeLookup, /* @__PURE__ */ new Set([...selectedEdgeIds])));
      triggerNodeChanges(getSelectionChanges(nodeLookup, /* @__PURE__ */ new Set(), true));
    },
    unselectNodesAndEdges: ({ nodes: nodes2, edges: edges2 } = {}) => {
      const { edges: storeEdges, nodes: storeNodes, nodeLookup, triggerNodeChanges, triggerEdgeChanges } = get3();
      const nodesToUnselect = nodes2 ? nodes2 : storeNodes;
      const edgesToUnselect = edges2 ? edges2 : storeEdges;
      const nodeChanges = nodesToUnselect.map((n) => {
        const internalNode = nodeLookup.get(n.id);
        if (internalNode) {
          internalNode.selected = false;
        }
        return createSelectionChange(n.id, false);
      });
      const edgeChanges = edgesToUnselect.map((edge) => createSelectionChange(edge.id, false));
      triggerNodeChanges(nodeChanges);
      triggerEdgeChanges(edgeChanges);
    },
    setMinZoom: (minZoom) => {
      const { panZoom, maxZoom } = get3();
      panZoom?.setScaleExtent([minZoom, maxZoom]);
      set3({ minZoom });
    },
    setMaxZoom: (maxZoom) => {
      const { panZoom, minZoom } = get3();
      panZoom?.setScaleExtent([minZoom, maxZoom]);
      set3({ maxZoom });
    },
    setTranslateExtent: (translateExtent) => {
      get3().panZoom?.setTranslateExtent(translateExtent);
      set3({ translateExtent });
    },
    setPaneClickDistance: (clickDistance) => {
      get3().panZoom?.setClickDistance(clickDistance);
    },
    resetSelectedElements: () => {
      const { edges: edges2, nodes: nodes2, triggerNodeChanges, triggerEdgeChanges } = get3();
      const nodeChanges = nodes2.reduce((res, node) => node.selected ? [...res, createSelectionChange(node.id, false)] : res, []);
      const edgeChanges = edges2.reduce((res, edge) => edge.selected ? [...res, createSelectionChange(edge.id, false)] : res, []);
      triggerNodeChanges(nodeChanges);
      triggerEdgeChanges(edgeChanges);
    },
    setNodeExtent: (nextNodeExtent) => {
      const { nodes: nodes2, nodeLookup, parentLookup, nodeOrigin: nodeOrigin2, elevateNodesOnSelect, nodeExtent: nodeExtent2 } = get3();
      if (nextNodeExtent[0][0] === nodeExtent2[0][0] && nextNodeExtent[0][1] === nodeExtent2[0][1] && nextNodeExtent[1][0] === nodeExtent2[1][0] && nextNodeExtent[1][1] === nodeExtent2[1][1]) {
        return;
      }
      adoptUserNodes(nodes2, nodeLookup, parentLookup, {
        nodeOrigin: nodeOrigin2,
        nodeExtent: nextNodeExtent,
        elevateNodesOnSelect,
        checkEquality: false
      });
      set3({ nodeExtent: nextNodeExtent });
    },
    panBy: (delta) => {
      const { transform: transform2, width: width2, height: height2, panZoom, translateExtent } = get3();
      return panBy({ delta, panZoom, transform: transform2, translateExtent, width: width2, height: height2 });
    },
    fitView: (options) => {
      const { panZoom, width: width2, height: height2, minZoom, maxZoom, nodeLookup } = get3();
      if (!panZoom) {
        return Promise.resolve(false);
      }
      const fitViewNodes = getFitViewNodes(nodeLookup, options);
      return fitView({
        nodes: fitViewNodes,
        width: width2,
        height: height2,
        panZoom,
        minZoom,
        maxZoom
      }, options);
    },
    /*
     * we can't call an asnychronous function in updateNodeInternals
     * for that we created this sync version of fitView
     */
    fitViewSync: (options) => {
      const { panZoom, width: width2, height: height2, minZoom, maxZoom, nodeLookup } = get3();
      if (!panZoom) {
        return false;
      }
      const fitViewNodes = getFitViewNodes(nodeLookup, options);
      fitView({
        nodes: fitViewNodes,
        width: width2,
        height: height2,
        panZoom,
        minZoom,
        maxZoom
      }, options);
      return fitViewNodes.size > 0;
    },
    cancelConnection: () => {
      set3({
        connection: { ...initialConnection }
      });
    },
    updateConnection: (connection) => {
      set3({ connection });
    },
    reset: () => set3({ ...getInitialState() })
  }), Object.is);
  function ReactFlowProvider({ initialNodes: nodes, initialEdges: edges, defaultNodes, defaultEdges, initialWidth: width, initialHeight: height, fitView: fitView2, nodeOrigin, nodeExtent, children: children2 }) {
    const [store] = (0, import_react2.useState)(() => createStore2({
      nodes,
      edges,
      defaultNodes,
      defaultEdges,
      width,
      height,
      fitView: fitView2,
      nodeOrigin,
      nodeExtent
    }));
    return (0, import_jsx_runtime.jsx)(Provider$1, { value: store, children: (0, import_jsx_runtime.jsx)(BatchProvider, { children: children2 }) });
  }
  function Wrapper({ children: children2, nodes, edges, defaultNodes, defaultEdges, width, height, fitView: fitView2, nodeOrigin, nodeExtent }) {
    const isWrapped = (0, import_react2.useContext)(StoreContext);
    if (isWrapped) {
      return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: children2 });
    }
    return (0, import_jsx_runtime.jsx)(ReactFlowProvider, { initialNodes: nodes, initialEdges: edges, defaultNodes, defaultEdges, initialWidth: width, initialHeight: height, fitView: fitView2, nodeOrigin, nodeExtent, children: children2 });
  }
  var wrapperStyle = {
    width: "100%",
    height: "100%",
    overflow: "hidden",
    position: "relative",
    zIndex: 0
  };
  function ReactFlow({ nodes, edges, defaultNodes, defaultEdges, className, nodeTypes, edgeTypes, onNodeClick, onEdgeClick, onInit, onMove, onMoveStart, onMoveEnd, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, onNodeDragStart, onNodeDrag, onNodeDragStop, onNodesDelete, onEdgesDelete, onDelete, onSelectionChange, onSelectionDragStart, onSelectionDrag, onSelectionDragStop, onSelectionContextMenu, onSelectionStart, onSelectionEnd, onBeforeDelete, connectionMode, connectionLineType = ConnectionLineType.Bezier, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, deleteKeyCode = "Backspace", selectionKeyCode = "Shift", selectionOnDrag = false, selectionMode = SelectionMode.Full, panActivationKeyCode = "Space", multiSelectionKeyCode = isMacOs() ? "Meta" : "Control", zoomActivationKeyCode = isMacOs() ? "Meta" : "Control", snapToGrid, snapGrid, onlyRenderVisibleElements = false, selectNodesOnDrag, nodesDraggable, nodesConnectable, nodesFocusable, nodeOrigin = defaultNodeOrigin, edgesFocusable, edgesReconnectable, elementsSelectable = true, defaultViewport: defaultViewport$1 = defaultViewport, minZoom = 0.5, maxZoom = 2, translateExtent = infiniteExtent, preventScrolling = true, nodeExtent, defaultMarkerColor = "#b1b1b7", zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, panOnDrag = true, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, paneClickDistance = 0, nodeClickDistance = 0, children: children2, onReconnect, onReconnectStart, onReconnectEnd, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, reconnectRadius = 10, onNodesChange, onEdgesChange, noDragClassName = "nodrag", noWheelClassName = "nowheel", noPanClassName = "nopan", fitView: fitView2, fitViewOptions, connectOnClick, attributionPosition, proOptions, defaultEdgeOptions, elevateNodesOnSelect, elevateEdgesOnSelect, disableKeyboardA11y = false, autoPanOnConnect, autoPanOnNodeDrag, autoPanSpeed, connectionRadius, isValidConnection, onError, style: style5, id: id2, nodeDragThreshold, viewport: viewport2, onViewportChange, width, height, colorMode = "light", debug, onScroll, ...rest }, ref2) {
    const rfId = id2 || "1";
    const colorModeClassName = useColorModeClass(colorMode);
    const wrapperOnScroll = (0, import_react2.useCallback)((e) => {
      e.currentTarget.scrollTo({ top: 0, left: 0, behavior: "instant" });
      onScroll?.(e);
    }, [onScroll]);
    return (0, import_jsx_runtime.jsx)("div", { "data-testid": "rf__wrapper", ...rest, onScroll: wrapperOnScroll, style: { ...style5, ...wrapperStyle }, ref: ref2, className: cc(["react-flow", className, colorModeClassName]), id: id2, children: (0, import_jsx_runtime.jsxs)(Wrapper, { nodes, edges, width, height, fitView: fitView2, nodeOrigin, nodeExtent, children: [(0, import_jsx_runtime.jsx)(GraphView, { onInit, onNodeClick, onEdgeClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, nodeTypes, edgeTypes, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, deleteKeyCode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, onlyRenderVisibleElements, defaultViewport: defaultViewport$1, translateExtent, minZoom, maxZoom, preventScrolling, zoomOnScroll, zoomOnPinch, zoomOnDoubleClick, panOnScroll, panOnScrollSpeed, panOnScrollMode, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, paneClickDistance, nodeClickDistance, onSelectionContextMenu, onSelectionStart, onSelectionEnd, onReconnect, onReconnectStart, onReconnectEnd, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, reconnectRadius, defaultMarkerColor, noDragClassName, noWheelClassName, noPanClassName, rfId, disableKeyboardA11y, nodeExtent, viewport: viewport2, onViewportChange }), (0, import_jsx_runtime.jsx)(StoreUpdater, { nodes, edges, defaultNodes, defaultEdges, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, nodesDraggable, nodesConnectable, nodesFocusable, edgesFocusable, edgesReconnectable, elementsSelectable, elevateNodesOnSelect, elevateEdgesOnSelect, minZoom, maxZoom, nodeExtent, onNodesChange, onEdgesChange, snapToGrid, snapGrid, connectionMode, translateExtent, connectOnClick, defaultEdgeOptions, fitView: fitView2, fitViewOptions, onNodesDelete, onEdgesDelete, onDelete, onNodeDragStart, onNodeDrag, onNodeDragStop, onSelectionDrag, onSelectionDragStart, onSelectionDragStop, onMove, onMoveStart, onMoveEnd, noPanClassName, nodeOrigin, rfId, autoPanOnConnect, autoPanOnNodeDrag, autoPanSpeed, onError, connectionRadius, isValidConnection, selectNodesOnDrag, nodeDragThreshold, onBeforeDelete, paneClickDistance, debug }), (0, import_jsx_runtime.jsx)(SelectionListener, { onSelectionChange }), children2, (0, import_jsx_runtime.jsx)(Attribution, { proOptions, position: attributionPosition }), (0, import_jsx_runtime.jsx)(A11yDescriptions, { rfId, disableKeyboardA11y })] }) });
  }
  var index = fixedForwardRef(ReactFlow);
  var error014 = errorMessages["error014"]();
  function LinePattern({ dimensions, lineWidth, variant, className }) {
    return (0, import_jsx_runtime.jsx)("path", { strokeWidth: lineWidth, d: `M${dimensions[0] / 2} 0 V${dimensions[1]} M0 ${dimensions[1] / 2} H${dimensions[0]}`, className: cc(["react-flow__background-pattern", variant, className]) });
  }
  function DotPattern({ radius, className }) {
    return (0, import_jsx_runtime.jsx)("circle", { cx: radius, cy: radius, r: radius, className: cc(["react-flow__background-pattern", "dots", className]) });
  }
  var BackgroundVariant;
  (function(BackgroundVariant2) {
    BackgroundVariant2["Lines"] = "lines";
    BackgroundVariant2["Dots"] = "dots";
    BackgroundVariant2["Cross"] = "cross";
  })(BackgroundVariant || (BackgroundVariant = {}));
  var defaultSize = {
    [BackgroundVariant.Dots]: 1,
    [BackgroundVariant.Lines]: 1,
    [BackgroundVariant.Cross]: 6
  };
  var selector$3 = (s) => ({ transform: s.transform, patternId: `pattern-${s.rfId}` });
  function BackgroundComponent({
    id: id2,
    variant = BackgroundVariant.Dots,
    // only used for dots and cross
    gap = 20,
    // only used for lines and cross
    size,
    lineWidth = 1,
    offset: offset4 = 0,
    color: color2,
    bgColor,
    style: style5,
    className,
    patternClassName
  }) {
    const ref2 = (0, import_react2.useRef)(null);
    const { transform: transform2, patternId } = useStore(selector$3, shallow$1);
    const patternSize = size || defaultSize[variant];
    const isDots = variant === BackgroundVariant.Dots;
    const isCross = variant === BackgroundVariant.Cross;
    const gapXY = Array.isArray(gap) ? gap : [gap, gap];
    const scaledGap = [gapXY[0] * transform2[2] || 1, gapXY[1] * transform2[2] || 1];
    const scaledSize = patternSize * transform2[2];
    const offsetXY = Array.isArray(offset4) ? offset4 : [offset4, offset4];
    const patternDimensions = isCross ? [scaledSize, scaledSize] : scaledGap;
    const scaledOffset = [
      offsetXY[0] * transform2[2] || 1 + patternDimensions[0] / 2,
      offsetXY[1] * transform2[2] || 1 + patternDimensions[1] / 2
    ];
    const _patternId = `${patternId}${id2 ? id2 : ""}`;
    return (0, import_jsx_runtime.jsxs)("svg", { className: cc(["react-flow__background", className]), style: {
      ...style5,
      ...containerStyle,
      "--xy-background-color-props": bgColor,
      "--xy-background-pattern-color-props": color2
    }, ref: ref2, "data-testid": "rf__background", children: [(0, import_jsx_runtime.jsx)("pattern", { id: _patternId, x: transform2[0] % scaledGap[0], y: transform2[1] % scaledGap[1], width: scaledGap[0], height: scaledGap[1], patternUnits: "userSpaceOnUse", patternTransform: `translate(-${scaledOffset[0]},-${scaledOffset[1]})`, children: isDots ? (0, import_jsx_runtime.jsx)(DotPattern, { radius: scaledSize / 2, className: patternClassName }) : (0, import_jsx_runtime.jsx)(LinePattern, { dimensions: patternDimensions, lineWidth, variant, className: patternClassName }) }), (0, import_jsx_runtime.jsx)("rect", { x: "0", y: "0", width: "100%", height: "100%", fill: `url(#${_patternId})` })] });
  }
  BackgroundComponent.displayName = "Background";
  var Background = (0, import_react2.memo)(BackgroundComponent);
  function PlusIcon() {
    return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", children: (0, import_jsx_runtime.jsx)("path", { d: "M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z" }) });
  }
  function MinusIcon() {
    return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 5", children: (0, import_jsx_runtime.jsx)("path", { d: "M0 0h32v4.2H0z" }) });
  }
  function FitViewIcon() {
    return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 30", children: (0, import_jsx_runtime.jsx)("path", { d: "M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94c-.531 0-.939-.4-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z" }) });
  }
  function LockIcon() {
    return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 25 32", children: (0, import_jsx_runtime.jsx)("path", { d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0 8 0 4.571 3.429 4.571 7.619v3.048H3.048A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047zm4.724-13.866H7.467V7.619c0-2.59 2.133-4.724 4.723-4.724 2.591 0 4.724 2.133 4.724 4.724v3.048z" }) });
  }
  function UnlockIcon() {
    return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 25 32", children: (0, import_jsx_runtime.jsx)("path", { d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z" }) });
  }
  function ControlButton({ children: children2, className, ...rest }) {
    return (0, import_jsx_runtime.jsx)("button", { type: "button", className: cc(["react-flow__controls-button", className]), ...rest, children: children2 });
  }
  var selector$2 = (s) => ({
    isInteractive: s.nodesDraggable || s.nodesConnectable || s.elementsSelectable,
    minZoomReached: s.transform[2] <= s.minZoom,
    maxZoomReached: s.transform[2] >= s.maxZoom
  });
  function ControlsComponent({ style: style5, showZoom = true, showFitView = true, showInteractive = true, fitViewOptions, onZoomIn, onZoomOut, onFitView, onInteractiveChange, className, children: children2, position: position2 = "bottom-left", orientation = "vertical", "aria-label": ariaLabel = "React Flow controls" }) {
    const store = useStoreApi();
    const { isInteractive, minZoomReached, maxZoomReached } = useStore(selector$2, shallow$1);
    const { zoomIn, zoomOut, fitView: fitView2 } = useReactFlow();
    const onZoomInHandler = () => {
      zoomIn();
      onZoomIn?.();
    };
    const onZoomOutHandler = () => {
      zoomOut();
      onZoomOut?.();
    };
    const onFitViewHandler = () => {
      fitView2(fitViewOptions);
      onFitView?.();
    };
    const onToggleInteractivity = () => {
      store.setState({
        nodesDraggable: !isInteractive,
        nodesConnectable: !isInteractive,
        elementsSelectable: !isInteractive
      });
      onInteractiveChange?.(!isInteractive);
    };
    const orientationClass = orientation === "horizontal" ? "horizontal" : "vertical";
    return (0, import_jsx_runtime.jsxs)(Panel, { className: cc(["react-flow__controls", orientationClass, className]), position: position2, style: style5, "data-testid": "rf__controls", "aria-label": ariaLabel, children: [showZoom && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(ControlButton, { onClick: onZoomInHandler, className: "react-flow__controls-zoomin", title: "zoom in", "aria-label": "zoom in", disabled: maxZoomReached, children: (0, import_jsx_runtime.jsx)(PlusIcon, {}) }), (0, import_jsx_runtime.jsx)(ControlButton, { onClick: onZoomOutHandler, className: "react-flow__controls-zoomout", title: "zoom out", "aria-label": "zoom out", disabled: minZoomReached, children: (0, import_jsx_runtime.jsx)(MinusIcon, {}) })] }), showFitView && (0, import_jsx_runtime.jsx)(ControlButton, { className: "react-flow__controls-fitview", onClick: onFitViewHandler, title: "fit view", "aria-label": "fit view", children: (0, import_jsx_runtime.jsx)(FitViewIcon, {}) }), showInteractive && (0, import_jsx_runtime.jsx)(ControlButton, { className: "react-flow__controls-interactive", onClick: onToggleInteractivity, title: "toggle interactivity", "aria-label": "toggle interactivity", children: isInteractive ? (0, import_jsx_runtime.jsx)(UnlockIcon, {}) : (0, import_jsx_runtime.jsx)(LockIcon, {}) }), children2] });
  }
  ControlsComponent.displayName = "Controls";
  var Controls = (0, import_react2.memo)(ControlsComponent);
  function MiniMapNodeComponent({ id: id2, x, y, width, height, style: style5, color: color2, strokeColor, strokeWidth, className, borderRadius, shapeRendering, selected: selected2, onClick }) {
    const { background, backgroundColor } = style5 || {};
    const fill = color2 || background || backgroundColor;
    return (0, import_jsx_runtime.jsx)("rect", { className: cc(["react-flow__minimap-node", { selected: selected2 }, className]), x, y, rx: borderRadius, ry: borderRadius, width, height, style: {
      fill,
      stroke: strokeColor,
      strokeWidth
    }, shapeRendering, onClick: onClick ? (event) => onClick(event, id2) : void 0 });
  }
  var MiniMapNode = (0, import_react2.memo)(MiniMapNodeComponent);
  var selectorNodeIds = (s) => s.nodes.map((node) => node.id);
  var getAttrFunction = (func) => func instanceof Function ? func : () => func;
  function MiniMapNodes({
    nodeStrokeColor,
    nodeColor,
    nodeClassName = "",
    nodeBorderRadius = 5,
    nodeStrokeWidth,
    /*
     * We need to rename the prop to be `CapitalCase` so that JSX will render it as
     * a component properly.
     */
    nodeComponent: NodeComponent = MiniMapNode,
    onClick
  }) {
    const nodeIds = useStore(selectorNodeIds, shallow$1);
    const nodeColorFunc = getAttrFunction(nodeColor);
    const nodeStrokeColorFunc = getAttrFunction(nodeStrokeColor);
    const nodeClassNameFunc = getAttrFunction(nodeClassName);
    const shapeRendering = typeof window === "undefined" || !!window.chrome ? "crispEdges" : "geometricPrecision";
    return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: nodeIds.map((nodeId) => (
      /*
       * The split of responsibilities between MiniMapNodes and
       * NodeComponentWrapper may appear weird. However, it’s designed to
       * minimize the cost of updates when individual nodes change.
       *
       * For more details, see a similar commit in `NodeRenderer/index.tsx`.
       */
      (0, import_jsx_runtime.jsx)(NodeComponentWrapper, { id: nodeId, nodeColorFunc, nodeStrokeColorFunc, nodeClassNameFunc, nodeBorderRadius, nodeStrokeWidth, NodeComponent, onClick, shapeRendering }, nodeId)
    )) });
  }
  function NodeComponentWrapperInner({ id: id2, nodeColorFunc, nodeStrokeColorFunc, nodeClassNameFunc, nodeBorderRadius, nodeStrokeWidth, shapeRendering, NodeComponent, onClick }) {
    const { node, x, y, width, height } = useStore((s) => {
      const node2 = s.nodeLookup.get(id2);
      const { x: x2, y: y2 } = node2.internals.positionAbsolute;
      const { width: width2, height: height2 } = getNodeDimensions(node2);
      return {
        node: node2,
        x: x2,
        y: y2,
        width: width2,
        height: height2
      };
    }, shallow$1);
    if (!node || node.hidden || !nodeHasDimensions(node)) {
      return null;
    }
    return (0, import_jsx_runtime.jsx)(NodeComponent, { x, y, width, height, style: node.style, selected: !!node.selected, className: nodeClassNameFunc(node), color: nodeColorFunc(node), borderRadius: nodeBorderRadius, strokeColor: nodeStrokeColorFunc(node), strokeWidth: nodeStrokeWidth, shapeRendering, onClick, id: node.id });
  }
  var NodeComponentWrapper = (0, import_react2.memo)(NodeComponentWrapperInner);
  var MiniMapNodes$1 = (0, import_react2.memo)(MiniMapNodes);
  var defaultWidth = 200;
  var defaultHeight = 150;
  var selector$1 = (s) => {
    const viewBB = {
      x: -s.transform[0] / s.transform[2],
      y: -s.transform[1] / s.transform[2],
      width: s.width / s.transform[2],
      height: s.height / s.transform[2]
    };
    return {
      viewBB,
      boundingRect: s.nodeLookup.size > 0 ? getBoundsOfRects(getInternalNodesBounds(s.nodeLookup), viewBB) : viewBB,
      rfId: s.rfId,
      panZoom: s.panZoom,
      translateExtent: s.translateExtent,
      flowWidth: s.width,
      flowHeight: s.height
    };
  };
  var ARIA_LABEL_KEY = "react-flow__minimap-desc";
  function MiniMapComponent({
    style: style5,
    className,
    nodeStrokeColor,
    nodeColor,
    nodeClassName = "",
    nodeBorderRadius = 5,
    nodeStrokeWidth,
    /*
     * We need to rename the prop to be `CapitalCase` so that JSX will render it as
     * a component properly.
     */
    nodeComponent,
    bgColor,
    maskColor,
    maskStrokeColor,
    maskStrokeWidth,
    position: position2 = "bottom-right",
    onClick,
    onNodeClick,
    pannable = false,
    zoomable = false,
    ariaLabel = "React Flow mini map",
    inversePan,
    zoomStep = 10,
    offsetScale = 5
  }) {
    const store = useStoreApi();
    const svg = (0, import_react2.useRef)(null);
    const { boundingRect, viewBB, rfId, panZoom, translateExtent, flowWidth, flowHeight } = useStore(selector$1, shallow$1);
    const elementWidth = style5?.width ?? defaultWidth;
    const elementHeight = style5?.height ?? defaultHeight;
    const scaledWidth = boundingRect.width / elementWidth;
    const scaledHeight = boundingRect.height / elementHeight;
    const viewScale = Math.max(scaledWidth, scaledHeight);
    const viewWidth = viewScale * elementWidth;
    const viewHeight = viewScale * elementHeight;
    const offset4 = offsetScale * viewScale;
    const x = boundingRect.x - (viewWidth - boundingRect.width) / 2 - offset4;
    const y = boundingRect.y - (viewHeight - boundingRect.height) / 2 - offset4;
    const width = viewWidth + offset4 * 2;
    const height = viewHeight + offset4 * 2;
    const labelledBy = `${ARIA_LABEL_KEY}-${rfId}`;
    const viewScaleRef = (0, import_react2.useRef)(0);
    const minimapInstance = (0, import_react2.useRef)();
    viewScaleRef.current = viewScale;
    (0, import_react2.useEffect)(() => {
      if (svg.current && panZoom) {
        minimapInstance.current = XYMinimap({
          domNode: svg.current,
          panZoom,
          getTransform: () => store.getState().transform,
          getViewScale: () => viewScaleRef.current
        });
        return () => {
          minimapInstance.current?.destroy();
        };
      }
    }, [panZoom]);
    (0, import_react2.useEffect)(() => {
      minimapInstance.current?.update({
        translateExtent,
        width: flowWidth,
        height: flowHeight,
        inversePan,
        pannable,
        zoomStep,
        zoomable
      });
    }, [pannable, zoomable, inversePan, zoomStep, translateExtent, flowWidth, flowHeight]);
    const onSvgClick = onClick ? (event) => {
      const [x2, y2] = minimapInstance.current?.pointer(event) || [0, 0];
      onClick(event, { x: x2, y: y2 });
    } : void 0;
    const onSvgNodeClick = onNodeClick ? (0, import_react2.useCallback)((event, nodeId) => {
      const node = store.getState().nodeLookup.get(nodeId);
      onNodeClick(event, node);
    }, []) : void 0;
    return (0, import_jsx_runtime.jsx)(Panel, { position: position2, style: {
      ...style5,
      "--xy-minimap-background-color-props": typeof bgColor === "string" ? bgColor : void 0,
      "--xy-minimap-mask-background-color-props": typeof maskColor === "string" ? maskColor : void 0,
      "--xy-minimap-mask-stroke-color-props": typeof maskStrokeColor === "string" ? maskStrokeColor : void 0,
      "--xy-minimap-mask-stroke-width-props": typeof maskStrokeWidth === "number" ? maskStrokeWidth * viewScale : void 0,
      "--xy-minimap-node-background-color-props": typeof nodeColor === "string" ? nodeColor : void 0,
      "--xy-minimap-node-stroke-color-props": typeof nodeStrokeColor === "string" ? nodeStrokeColor : void 0,
      "--xy-minimap-node-stroke-width-props": typeof nodeStrokeWidth === "string" ? nodeStrokeWidth : void 0
    }, className: cc(["react-flow__minimap", className]), "data-testid": "rf__minimap", children: (0, import_jsx_runtime.jsxs)("svg", { width: elementWidth, height: elementHeight, viewBox: `${x} ${y} ${width} ${height}`, className: "react-flow__minimap-svg", role: "img", "aria-labelledby": labelledBy, ref: svg, onClick: onSvgClick, children: [ariaLabel && (0, import_jsx_runtime.jsx)("title", { id: labelledBy, children: ariaLabel }), (0, import_jsx_runtime.jsx)(MiniMapNodes$1, { onClick: onSvgNodeClick, nodeColor, nodeStrokeColor, nodeBorderRadius, nodeClassName, nodeStrokeWidth, nodeComponent }), (0, import_jsx_runtime.jsx)("path", { className: "react-flow__minimap-mask", d: `M${x - offset4},${y - offset4}h${width + offset4 * 2}v${height + offset4 * 2}h${-width - offset4 * 2}z
        M${viewBB.x},${viewBB.y}h${viewBB.width}v${viewBB.height}h${-viewBB.width}z`, fillRule: "evenodd", pointerEvents: "none" })] }) });
  }
  MiniMapComponent.displayName = "MiniMap";
  var MiniMap = (0, import_react2.memo)(MiniMapComponent);
  function ResizeControl({ nodeId, position: position2, variant = ResizeControlVariant.Handle, className, style: style5 = {}, children: children2, color: color2, minWidth = 10, minHeight = 10, maxWidth = Number.MAX_VALUE, maxHeight = Number.MAX_VALUE, keepAspectRatio = false, shouldResize, onResizeStart, onResize, onResizeEnd }) {
    const contextNodeId = useNodeId();
    const id2 = typeof nodeId === "string" ? nodeId : contextNodeId;
    const store = useStoreApi();
    const resizeControlRef = (0, import_react2.useRef)(null);
    const defaultPosition = variant === ResizeControlVariant.Line ? "right" : "bottom-right";
    const controlPosition = position2 ?? defaultPosition;
    const resizer = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      if (!resizeControlRef.current || !id2) {
        return;
      }
      if (!resizer.current) {
        resizer.current = XYResizer({
          domNode: resizeControlRef.current,
          nodeId: id2,
          getStoreItems: () => {
            const { nodeLookup, transform: transform2, snapGrid, snapToGrid, nodeOrigin, domNode } = store.getState();
            return {
              nodeLookup,
              transform: transform2,
              snapGrid,
              snapToGrid,
              nodeOrigin,
              paneDomNode: domNode
            };
          },
          onChange: (change, childChanges) => {
            const { triggerNodeChanges, nodeLookup, parentLookup, nodeOrigin } = store.getState();
            const changes = [];
            const nextPosition = { x: change.x, y: change.y };
            const node = nodeLookup.get(id2);
            if (node && node.expandParent && node.parentId) {
              const origin2 = node.origin ?? nodeOrigin;
              const width = change.width ?? node.measured.width;
              const height = change.height ?? node.measured.height;
              const child = {
                id: node.id,
                parentId: node.parentId,
                rect: {
                  width,
                  height,
                  ...evaluateAbsolutePosition({
                    x: change.x ?? node.position.x,
                    y: change.y ?? node.position.y
                  }, { width, height }, node.parentId, nodeLookup, origin2)
                }
              };
              const parentExpandChanges = handleExpandParent([child], nodeLookup, parentLookup, nodeOrigin);
              changes.push(...parentExpandChanges);
              nextPosition.x = change.x ? Math.max(origin2[0] * width, change.x) : void 0;
              nextPosition.y = change.y ? Math.max(origin2[1] * height, change.y) : void 0;
            }
            if (nextPosition.x !== void 0 && nextPosition.y !== void 0) {
              const positionChange = {
                id: id2,
                type: "position",
                position: { ...nextPosition }
              };
              changes.push(positionChange);
            }
            if (change.width !== void 0 && change.height !== void 0) {
              const dimensionChange = {
                id: id2,
                type: "dimensions",
                resizing: true,
                setAttributes: true,
                dimensions: {
                  width: change.width,
                  height: change.height
                }
              };
              changes.push(dimensionChange);
            }
            for (const childChange of childChanges) {
              const positionChange = {
                ...childChange,
                type: "position"
              };
              changes.push(positionChange);
            }
            triggerNodeChanges(changes);
          },
          onEnd: () => {
            const dimensionChange = {
              id: id2,
              type: "dimensions",
              resizing: false
            };
            store.getState().triggerNodeChanges([dimensionChange]);
          }
        });
      }
      resizer.current.update({
        controlPosition,
        boundaries: {
          minWidth,
          minHeight,
          maxWidth,
          maxHeight
        },
        keepAspectRatio,
        onResizeStart,
        onResize,
        onResizeEnd,
        shouldResize
      });
      return () => {
        resizer.current?.destroy();
      };
    }, [
      controlPosition,
      minWidth,
      minHeight,
      maxWidth,
      maxHeight,
      keepAspectRatio,
      onResizeStart,
      onResize,
      onResizeEnd,
      shouldResize
    ]);
    const positionClassNames = controlPosition.split("-");
    const colorStyleProp = variant === ResizeControlVariant.Line ? "borderColor" : "backgroundColor";
    const controlStyle = color2 ? { ...style5, [colorStyleProp]: color2 } : style5;
    return (0, import_jsx_runtime.jsx)("div", { className: cc(["react-flow__resize-control", "nodrag", ...positionClassNames, variant, className]), ref: resizeControlRef, style: controlStyle, children: children2 });
  }
  var NodeResizeControl = (0, import_react2.memo)(ResizeControl);

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t)
          ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.includes(n))
          continue;
        t[n] = r[n];
      }
    return t;
  }

  // node_modules/uncontrollable/lib/esm/hook.js
  var import_react3 = __toESM(require_react());

  // node_modules/uncontrollable/lib/esm/utils.js
  var import_invariant = __toESM(require_browser());
  function defaultKey(key) {
    return "default" + key.charAt(0).toUpperCase() + key.substr(1);
  }

  // node_modules/uncontrollable/lib/esm/hook.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function useUncontrolledProp(propValue, defaultValue, handler) {
    var wasPropRef = (0, import_react3.useRef)(propValue !== void 0);
    var _useState = (0, import_react3.useState)(defaultValue), stateValue = _useState[0], setState = _useState[1];
    var isProp2 = propValue !== void 0;
    var wasProp = wasPropRef.current;
    wasPropRef.current = isProp2;
    if (!isProp2 && wasProp && stateValue !== defaultValue) {
      setState(defaultValue);
    }
    return [isProp2 ? propValue : stateValue, (0, import_react3.useCallback)(function(value) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (handler)
        handler.apply(void 0, [value].concat(args));
      setState(value);
    }, [handler])];
  }
  function useUncontrolled(props, config) {
    return Object.keys(config).reduce(function(result, fieldName) {
      var _extends22;
      var _ref = result, defaultValue = _ref[defaultKey(fieldName)], propsValue = _ref[fieldName], rest = _objectWithoutPropertiesLoose(_ref, [defaultKey(fieldName), fieldName].map(_toPropertyKey));
      var handlerName = config[fieldName];
      var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
      return _extends({}, rest, (_extends22 = {}, _extends22[fieldName] = value, _extends22[handlerName] = handler, _extends22));
    }, props);
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_react4 = __toESM(require_react());

  // node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== void 0) {
      this.setState(state);
    }
  }
  function componentWillReceiveProps(nextProps) {
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== void 0 ? state : null;
    }
    this.setState(updater.bind(this));
  }
  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
        prevProps,
        prevState
      );
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }
  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  // node_modules/uncontrollable/lib/esm/uncontrollable.js
  var import_invariant2 = __toESM(require_browser());

  // node_modules/react-bootstrap/esm/ThemeProvider.js
  var React2 = __toESM(require_react());
  var import_react5 = __toESM(require_react());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  "use client";
  var DEFAULT_BREAKPOINTS = ["xxl", "xl", "lg", "md", "sm", "xs"];
  var DEFAULT_MIN_BREAKPOINT = "xs";
  var ThemeContext = /* @__PURE__ */ React2.createContext({
    prefixes: {},
    breakpoints: DEFAULT_BREAKPOINTS,
    minBreakpoint: DEFAULT_MIN_BREAKPOINT
  });
  var {
    Consumer,
    Provider: Provider2
  } = ThemeContext;
  function useBootstrapPrefix(prefix3, defaultPrefix) {
    const {
      prefixes
    } = (0, import_react5.useContext)(ThemeContext);
    return prefix3 || prefixes[defaultPrefix] || defaultPrefix;
  }
  function useBootstrapBreakpoints() {
    const {
      breakpoints
    } = (0, import_react5.useContext)(ThemeContext);
    return breakpoints;
  }
  function useBootstrapMinBreakpoint() {
    const {
      minBreakpoint
    } = (0, import_react5.useContext)(ThemeContext);
    return minBreakpoint;
  }
  function useIsRTL() {
    const {
      dir
    } = (0, import_react5.useContext)(ThemeContext);
    return dir === "rtl";
  }

  // node_modules/react-bootstrap/esm/Collapse.js
  var import_classnames = __toESM(require_classnames());

  // node_modules/dom-helpers/esm/ownerDocument.js
  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/dom-helpers/esm/ownerWindow.js
  function ownerWindow(node) {
    var doc = ownerDocument(node);
    return doc && doc.defaultView || window;
  }

  // node_modules/dom-helpers/esm/getComputedStyle.js
  function getComputedStyle(node, psuedoElement) {
    return ownerWindow(node).getComputedStyle(node, psuedoElement);
  }

  // node_modules/dom-helpers/esm/hyphenate.js
  var rUpper = /([A-Z])/g;
  function hyphenate(string) {
    return string.replace(rUpper, "-$1").toLowerCase();
  }

  // node_modules/dom-helpers/esm/hyphenateStyle.js
  var msPattern = /^ms-/;
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, "-ms-");
  }

  // node_modules/dom-helpers/esm/isTransform.js
  var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
  function isTransform(value) {
    return !!(value && supportedTransforms.test(value));
  }

  // node_modules/dom-helpers/esm/css.js
  function style2(node, property) {
    var css = "";
    var transforms2 = "";
    if (typeof property === "string") {
      return node.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));
    }
    Object.keys(property).forEach(function(key) {
      var value = property[key];
      if (!value && value !== 0) {
        node.style.removeProperty(hyphenateStyleName(key));
      } else if (isTransform(key)) {
        transforms2 += key + "(" + value + ") ";
      } else {
        css += hyphenateStyleName(key) + ": " + value + ";";
      }
    });
    if (transforms2) {
      css += "transform: " + transforms2 + ";";
    }
    node.style.cssText += ";" + css;
  }
  var css_default = style2;

  // node_modules/react-bootstrap/esm/Collapse.js
  var import_react10 = __toESM(require_react());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types2 = __toESM(require_prop_types());
  var import_react7 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    enter: import_prop_types.default.number,
    exit: import_prop_types.default.number,
    appear: import_prop_types.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    active: import_prop_types.default.string
  }), import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    enterDone: import_prop_types.default.string,
    enterActive: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    exitDone: import_prop_types.default.string,
    exitActive: import_prop_types.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react6 = __toESM(require_react());
  var TransitionGroupContext_default = import_react6.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node) {
    return node.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition2 = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition3, _React$Component);
    function Transition3(props, context4) {
      var _this;
      _this = _React$Component.call(this, props, context4) || this;
      var parentGroup = context4;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout3 = this.props.timeout;
      var exit, enter2, appear;
      exit = enter2 = appear = timeout3;
      if (timeout3 != null && typeof timeout3 !== "number") {
        exit = timeout3.exit;
        enter2 = timeout3.enter;
        appear = timeout3.appear !== void 0 ? timeout3.appear : enter2;
      }
      return {
        exit,
        enter: enter2,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
            if (node)
              forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter2 = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter2 || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout3, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout3 == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout3 != null) {
        setTimeout(this.nextCallback, timeout3);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react7.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children2 === "function" ? children2(status, childProps) : import_react7.default.cloneElement(import_react7.default.Children.only(children2), childProps))
      );
    };
    return Transition3;
  }(import_react7.default.Component);
  Transition2.contextType = TransitionGroupContext_default;
  Transition2.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types2.default.shape({
      current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types2.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types2.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types2.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types2.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types2.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types2.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout2(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types2.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types2.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types2.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types2.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types2.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types2.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types2.default.func
  } : {};
  function noop2() {
  }
  Transition2.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  Transition2.UNMOUNTED = UNMOUNTED;
  Transition2.EXITED = EXITED;
  Transition2.ENTERING = ENTERING;
  Transition2.ENTERED = ENTERED;
  Transition2.EXITING = EXITING;
  var Transition_default = Transition2;

  // node_modules/@restart/ui/esm/utils.js
  var React5 = __toESM(require_react());
  function isEscKey(e) {
    return e.code === "Escape" || e.keyCode === 27;
  }
  function getReactVersion() {
    const parts = React5.version.split(".");
    return {
      major: +parts[0],
      minor: +parts[1],
      patch: +parts[2]
    };
  }
  function getChildRef(element) {
    if (!element || typeof element === "function") {
      return null;
    }
    const {
      major
    } = getReactVersion();
    const childRef = major >= 19 ? element.props.ref : element.ref;
    return childRef;
  }

  // node_modules/dom-helpers/esm/canUseDOM.js
  var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

  // node_modules/dom-helpers/esm/addEventListener.js
  var optionsSupported = false;
  var onceSupported = false;
  try {
    options = {
      get passive() {
        return optionsSupported = true;
      },
      get once() {
        return onceSupported = optionsSupported = true;
      }
    };
    if (canUseDOM_default) {
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, true);
    }
  } catch (e) {
  }
  var options;
  function addEventListener(node, eventName, handler, options) {
    if (options && typeof options !== "boolean" && !onceSupported) {
      var once = options.once, capture = options.capture;
      var wrappedHandler = handler;
      if (!onceSupported && once) {
        wrappedHandler = handler.__once || function onceHandler(event) {
          this.removeEventListener(eventName, onceHandler, capture);
          handler.call(this, event);
        };
        handler.__once = wrappedHandler;
      }
      node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
    }
    node.addEventListener(eventName, handler, options);
  }
  var addEventListener_default = addEventListener;

  // node_modules/dom-helpers/esm/removeEventListener.js
  function removeEventListener(node, eventName, handler, options) {
    var capture = options && typeof options !== "boolean" ? options.capture : options;
    node.removeEventListener(eventName, handler, capture);
    if (handler.__once) {
      node.removeEventListener(eventName, handler.__once, capture);
    }
  }
  var removeEventListener_default = removeEventListener;

  // node_modules/dom-helpers/esm/listen.js
  function listen(node, eventName, handler, options) {
    addEventListener_default(node, eventName, handler, options);
    return function() {
      removeEventListener_default(node, eventName, handler, options);
    };
  }
  var listen_default = listen;

  // node_modules/dom-helpers/esm/triggerEvent.js
  function triggerEvent(node, eventName, bubbles, cancelable) {
    if (bubbles === void 0) {
      bubbles = false;
    }
    if (cancelable === void 0) {
      cancelable = true;
    }
    if (node) {
      var event = document.createEvent("HTMLEvents");
      event.initEvent(eventName, bubbles, cancelable);
      node.dispatchEvent(event);
    }
  }

  // node_modules/dom-helpers/esm/transitionEnd.js
  function parseDuration(node) {
    var str = css_default(node, "transitionDuration") || "";
    var mult = str.indexOf("ms") === -1 ? 1e3 : 1;
    return parseFloat(str) * mult;
  }
  function emulateTransitionEnd(element, duration, padding) {
    if (padding === void 0) {
      padding = 5;
    }
    var called = false;
    var handle = setTimeout(function() {
      if (!called)
        triggerEvent(element, "transitionend", true);
    }, duration + padding);
    var remove2 = listen_default(element, "transitionend", function() {
      called = true;
    }, {
      once: true
    });
    return function() {
      clearTimeout(handle);
      remove2();
    };
  }
  function transitionEnd(element, handler, duration, padding) {
    if (duration == null)
      duration = parseDuration(element) || 0;
    var removeEmulate = emulateTransitionEnd(element, duration, padding);
    var remove2 = listen_default(element, "transitionend", handler);
    return function() {
      removeEmulate();
      remove2();
    };
  }

  // node_modules/react-bootstrap/esm/transitionEndListener.js
  function parseDuration2(node, property) {
    const str = css_default(node, property) || "";
    const mult = str.indexOf("ms") === -1 ? 1e3 : 1;
    return parseFloat(str) * mult;
  }
  function transitionEndListener(element, handler) {
    const duration = parseDuration2(element, "transitionDuration");
    const delay = parseDuration2(element, "transitionDelay");
    const remove2 = transitionEnd(element, (e) => {
      if (e.target === element) {
        remove2();
        handler(e);
      }
    }, duration + delay);
  }

  // node_modules/react-bootstrap/esm/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.filter((f) => f != null).reduce((acc, f) => {
      if (typeof f !== "function") {
        throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");
      }
      if (acc === null)
        return f;
      return function chainedFunction(...args) {
        acc.apply(this, args);
        f.apply(this, args);
      };
    }, null);
  }
  var createChainedFunction_default = createChainedFunction;

  // node_modules/react-bootstrap/esm/triggerBrowserReflow.js
  function triggerBrowserReflow(node) {
    node.offsetHeight;
  }

  // node_modules/react-bootstrap/esm/TransitionWrapper.js
  var import_react9 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useMergedRefs.js
  var import_react8 = __toESM(require_react());
  var toFnRef = (ref2) => !ref2 || typeof ref2 === "function" ? ref2 : (value) => {
    ref2.current = value;
  };
  function mergeRefs(refA, refB) {
    const a = toFnRef(refA);
    const b = toFnRef(refB);
    return (value) => {
      if (a)
        a(value);
      if (b)
        b(value);
    };
  }
  function useMergedRefs(refA, refB) {
    return (0, import_react8.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
  }
  var useMergedRefs_default = useMergedRefs;

  // node_modules/react-bootstrap/esm/safeFindDOMNode.js
  var import_react_dom3 = __toESM(require_react_dom());
  function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && "setState" in componentOrElement) {
      return import_react_dom3.default.findDOMNode(componentOrElement);
    }
    return componentOrElement != null ? componentOrElement : null;
  }

  // node_modules/react-bootstrap/esm/TransitionWrapper.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  "use client";
  var TransitionWrapper = /* @__PURE__ */ import_react9.default.forwardRef(({
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited,
    addEndListener,
    children: children2,
    childRef,
    ...props
  }, ref2) => {
    const nodeRef = (0, import_react9.useRef)(null);
    const mergedRef = useMergedRefs_default(nodeRef, childRef);
    const attachRef = (r) => {
      mergedRef(safeFindDOMNode(r));
    };
    const normalize = (callback) => (param) => {
      if (callback && nodeRef.current) {
        callback(nodeRef.current, param);
      }
    };
    const handleEnter = (0, import_react9.useCallback)(normalize(onEnter), [onEnter]);
    const handleEntering = (0, import_react9.useCallback)(normalize(onEntering), [onEntering]);
    const handleEntered = (0, import_react9.useCallback)(normalize(onEntered), [onEntered]);
    const handleExit = (0, import_react9.useCallback)(normalize(onExit), [onExit]);
    const handleExiting = (0, import_react9.useCallback)(normalize(onExiting), [onExiting]);
    const handleExited = (0, import_react9.useCallback)(normalize(onExited), [onExited]);
    const handleAddEndListener = (0, import_react9.useCallback)(normalize(addEndListener), [addEndListener]);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Transition_default, {
      ref: ref2,
      ...props,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      children: typeof children2 === "function" ? (status, innerProps) => (
        // TODO: Types for RTG missing innerProps, so need to cast.
        children2(status, {
          ...innerProps,
          ref: attachRef
        })
      ) : /* @__PURE__ */ import_react9.default.cloneElement(children2, {
        ref: attachRef
      })
    });
  });
  var TransitionWrapper_default = TransitionWrapper;

  // node_modules/react-bootstrap/esm/Collapse.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var MARGINS = {
    height: ["marginTop", "marginBottom"],
    width: ["marginLeft", "marginRight"]
  };
  function getDefaultDimensionValue(dimension, elem) {
    const offset4 = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
    const value = elem[offset4];
    const margins = MARGINS[dimension];
    return value + // @ts-ignore
    parseInt(css_default(elem, margins[0]), 10) + // @ts-ignore
    parseInt(css_default(elem, margins[1]), 10);
  }
  var collapseStyles = {
    [EXITED]: "collapse",
    [EXITING]: "collapsing",
    [ENTERING]: "collapsing",
    [ENTERED]: "collapse show"
  };
  var Collapse = /* @__PURE__ */ import_react10.default.forwardRef(({
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    className,
    children: children2,
    dimension = "height",
    in: inProp = false,
    timeout: timeout3 = 300,
    mountOnEnter = false,
    unmountOnExit = false,
    appear = false,
    getDimensionValue = getDefaultDimensionValue,
    ...props
  }, ref2) => {
    const computedDimension = typeof dimension === "function" ? dimension() : dimension;
    const handleEnter = (0, import_react10.useMemo)(() => createChainedFunction_default((elem) => {
      elem.style[computedDimension] = "0";
    }, onEnter), [computedDimension, onEnter]);
    const handleEntering = (0, import_react10.useMemo)(() => createChainedFunction_default((elem) => {
      const scroll2 = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
      elem.style[computedDimension] = `${elem[scroll2]}px`;
    }, onEntering), [computedDimension, onEntering]);
    const handleEntered = (0, import_react10.useMemo)(() => createChainedFunction_default((elem) => {
      elem.style[computedDimension] = null;
    }, onEntered), [computedDimension, onEntered]);
    const handleExit = (0, import_react10.useMemo)(() => createChainedFunction_default((elem) => {
      elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
      triggerBrowserReflow(elem);
    }, onExit), [onExit, getDimensionValue, computedDimension]);
    const handleExiting = (0, import_react10.useMemo)(() => createChainedFunction_default((elem) => {
      elem.style[computedDimension] = null;
    }, onExiting), [computedDimension, onExiting]);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(TransitionWrapper_default, {
      ref: ref2,
      addEndListener: transitionEndListener,
      ...props,
      "aria-expanded": props.role ? inProp : null,
      onEnter: handleEnter,
      onEntering: handleEntering,
      onEntered: handleEntered,
      onExit: handleExit,
      onExiting: handleExiting,
      childRef: getChildRef(children2),
      in: inProp,
      timeout: timeout3,
      mountOnEnter,
      unmountOnExit,
      appear,
      children: (state, innerProps) => /* @__PURE__ */ import_react10.default.cloneElement(children2, {
        ...innerProps,
        className: (0, import_classnames.default)(className, children2.props.className, collapseStyles[state], computedDimension === "width" && "collapse-horizontal")
      })
    });
  });
  var Collapse_default = Collapse;

  // node_modules/@restart/hooks/esm/useEventCallback.js
  var import_react12 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useCommittedRef.js
  var import_react11 = __toESM(require_react());
  function useCommittedRef(value) {
    const ref2 = (0, import_react11.useRef)(value);
    (0, import_react11.useEffect)(() => {
      ref2.current = value;
    }, [value]);
    return ref2;
  }
  var useCommittedRef_default = useCommittedRef;

  // node_modules/@restart/hooks/esm/useEventCallback.js
  function useEventCallback(fn2) {
    const ref2 = useCommittedRef_default(fn2);
    return (0, import_react12.useCallback)(function(...args) {
      return ref2.current && ref2.current(...args);
    }, [ref2]);
  }

  // node_modules/react-bootstrap/esm/divWithClassName.js
  var React8 = __toESM(require_react());
  var import_classnames2 = __toESM(require_classnames());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var divWithClassName_default = (className) => /* @__PURE__ */ React8.forwardRef((p, ref2) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", {
    ...p,
    ref: ref2,
    className: (0, import_classnames2.default)(p.className, className)
  }));

  // node_modules/@restart/ui/esm/Anchor.js
  var React10 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js
  var import_react13 = __toESM(require_react());
  function useCallbackRef() {
    return (0, import_react13.useState)(null);
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js
  var import_react14 = __toESM(require_react());
  function useCommittedRef2(value) {
    const ref2 = (0, import_react14.useRef)(value);
    (0, import_react14.useEffect)(() => {
      ref2.current = value;
    }, [value]);
    return ref2;
  }
  var useCommittedRef_default2 = useCommittedRef2;

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js
  var import_react15 = __toESM(require_react());
  function useEventCallback2(fn2) {
    const ref2 = useCommittedRef_default2(fn2);
    return (0, import_react15.useCallback)(function(...args) {
      return ref2.current && ref2.current(...args);
    }, [ref2]);
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js
  var import_react16 = __toESM(require_react());
  function useEventListener(eventTarget, event, listener, capture = false) {
    const handler = useEventCallback2(listener);
    (0, import_react16.useEffect)(() => {
      const target = typeof eventTarget === "function" ? eventTarget() : eventTarget;
      target.addEventListener(event, handler, capture);
      return () => target.removeEventListener(event, handler, capture);
    }, [eventTarget]);
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useGlobalListener.js
  var import_react17 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useInterval.js
  var import_react18 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useRafInterval.js
  var import_react19 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMergeState.js
  var import_react20 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js
  var import_react21 = __toESM(require_react());
  function useMounted() {
    const mounted = (0, import_react21.useRef)(true);
    const isMounted = (0, import_react21.useRef)(() => mounted.current);
    (0, import_react21.useEffect)(() => {
      mounted.current = true;
      return () => {
        mounted.current = false;
      };
    }, []);
    return isMounted.current;
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js
  var import_react22 = __toESM(require_react());
  function usePrevious(value) {
    const ref2 = (0, import_react22.useRef)(null);
    (0, import_react22.useEffect)(() => {
      ref2.current = value;
    });
    return ref2.current;
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useImage.js
  var import_react23 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js
  var import_react25 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js
  var import_react24 = __toESM(require_react());
  var isReactNative = typeof global !== "undefined" && // @ts-ignore
  global.navigator && // @ts-ignore
  global.navigator.product === "ReactNative";
  var isDOM = typeof document !== "undefined";
  var useIsomorphicEffect_default = isDOM || isReactNative ? import_react24.useLayoutEffect : import_react24.useEffect;

  // node_modules/@restart/ui/esm/Button.js
  var React9 = __toESM(require_react());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var _excluded = ["as", "disabled"];
  function _objectWithoutPropertiesLoose2(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function isTrivialHref(href) {
    return !href || href.trim() === "#";
  }
  function useButtonProps({
    tagName,
    disabled,
    href,
    target,
    rel,
    role,
    onClick,
    tabIndex = 0,
    type
  }) {
    if (!tagName) {
      if (href != null || target != null || rel != null) {
        tagName = "a";
      } else {
        tagName = "button";
      }
    }
    const meta = {
      tagName
    };
    if (tagName === "button") {
      return [{
        type: type || "button",
        disabled
      }, meta];
    }
    const handleClick = (event) => {
      if (disabled || tagName === "a" && isTrivialHref(href)) {
        event.preventDefault();
      }
      if (disabled) {
        event.stopPropagation();
        return;
      }
      onClick == null ? void 0 : onClick(event);
    };
    const handleKeyDown = (event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick(event);
      }
    };
    if (tagName === "a") {
      href || (href = "#");
      if (disabled) {
        href = void 0;
      }
    }
    return [{
      role: role != null ? role : "button",
      // explicitly undefined so that it overrides the props disabled in a spread
      // e.g. <Tag {...props} {...hookProps} />
      disabled: void 0,
      tabIndex: disabled ? void 0 : tabIndex,
      href,
      target: tagName === "a" ? target : void 0,
      "aria-disabled": !disabled ? void 0 : disabled,
      rel: tagName === "a" ? rel : void 0,
      onClick: handleClick,
      onKeyDown: handleKeyDown
    }, meta];
  }
  var Button = /* @__PURE__ */ React9.forwardRef((_ref, ref2) => {
    let {
      as: asProp,
      disabled
    } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    const [buttonProps, {
      tagName: Component2
    }] = useButtonProps(Object.assign({
      tagName: asProp,
      disabled
    }, props));
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Component2, Object.assign({}, props, buttonProps, {
      ref: ref2
    }));
  });
  Button.displayName = "Button";
  var Button_default = Button;

  // node_modules/@restart/ui/esm/Anchor.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded2 = ["onKeyDown"];
  function _objectWithoutPropertiesLoose3(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function isTrivialHref2(href) {
    return !href || href.trim() === "#";
  }
  var Anchor = /* @__PURE__ */ React10.forwardRef((_ref, ref2) => {
    let {
      onKeyDown
    } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded2);
    const [buttonProps] = useButtonProps(Object.assign({
      tagName: "a"
    }, props));
    const handleKeyDown = useEventCallback2((e) => {
      buttonProps.onKeyDown(e);
      onKeyDown == null ? void 0 : onKeyDown(e);
    });
    if (isTrivialHref2(props.href) || props.role === "button") {
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", Object.assign({
        ref: ref2
      }, props, buttonProps, {
        onKeyDown: handleKeyDown
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", Object.assign({
      ref: ref2
    }, props, {
      onKeyDown
    }));
  });
  Anchor.displayName = "Anchor";
  var Anchor_default = Anchor;

  // node_modules/react-bootstrap/esm/Fade.js
  var import_classnames3 = __toESM(require_classnames());
  var React11 = __toESM(require_react());
  var import_react26 = __toESM(require_react());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var fadeStyles = {
    [ENTERING]: "show",
    [ENTERED]: "show"
  };
  var Fade = /* @__PURE__ */ React11.forwardRef(({
    className,
    children: children2,
    transitionClasses = {},
    onEnter,
    ...rest
  }, ref2) => {
    const props = {
      in: false,
      timeout: 300,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      ...rest
    };
    const handleEnter = (0, import_react26.useCallback)((node, isAppearing) => {
      triggerBrowserReflow(node);
      onEnter == null || onEnter(node, isAppearing);
    }, [onEnter]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(TransitionWrapper_default, {
      ref: ref2,
      addEndListener: transitionEndListener,
      ...props,
      onEnter: handleEnter,
      childRef: getChildRef(children2),
      children: (status, innerProps) => /* @__PURE__ */ React11.cloneElement(children2, {
        ...innerProps,
        className: (0, import_classnames3.default)("fade", className, children2.props.className, fadeStyles[status], transitionClasses[status])
      })
    });
  });
  Fade.displayName = "Fade";
  var Fade_default = Fade;

  // node_modules/react-bootstrap/esm/CloseButton.js
  var import_prop_types3 = __toESM(require_prop_types());
  var React12 = __toESM(require_react());
  var import_classnames4 = __toESM(require_classnames());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var propTypes = {
    /** An accessible label indicating the relevant information about the Close Button. */
    "aria-label": import_prop_types3.default.string,
    /** A callback fired after the Close Button is clicked. */
    onClick: import_prop_types3.default.func,
    /**
     * Render different color variant for the button.
     *
     * Omitting this will render the default dark color.
     */
    variant: import_prop_types3.default.oneOf(["white"])
  };
  var CloseButton = /* @__PURE__ */ React12.forwardRef(({
    className,
    variant,
    "aria-label": ariaLabel = "Close",
    ...props
  }, ref2) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", {
    ref: ref2,
    type: "button",
    className: (0, import_classnames4.default)("btn-close", variant && `btn-close-${variant}`, className),
    "aria-label": ariaLabel,
    ...props
  }));
  CloseButton.displayName = "CloseButton";
  CloseButton.propTypes = propTypes;
  var CloseButton_default = CloseButton;

  // node_modules/react-bootstrap/esm/Button.js
  var import_classnames5 = __toESM(require_classnames());
  var React13 = __toESM(require_react());
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  "use client";
  var Button2 = /* @__PURE__ */ React13.forwardRef(({
    as,
    bsPrefix,
    variant = "primary",
    size,
    active = false,
    disabled = false,
    className,
    ...props
  }, ref2) => {
    const prefix3 = useBootstrapPrefix(bsPrefix, "btn");
    const [buttonProps, {
      tagName
    }] = useButtonProps({
      tagName: as,
      disabled,
      ...props
    });
    const Component2 = tagName;
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Component2, {
      ...buttonProps,
      ...props,
      ref: ref2,
      disabled,
      className: (0, import_classnames5.default)(className, prefix3, active && "active", variant && `${prefix3}-${variant}`, size && `${prefix3}-${size}`, props.href && disabled && "disabled")
    });
  });
  Button2.displayName = "Button";
  var Button_default2 = Button2;

  // node_modules/react-bootstrap/esm/ButtonGroup.js
  var import_classnames6 = __toESM(require_classnames());
  var React14 = __toESM(require_react());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  "use client";
  var ButtonGroup = /* @__PURE__ */ React14.forwardRef(({
    bsPrefix,
    size,
    vertical: vertical2 = false,
    className,
    role = "group",
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "div",
    ...rest
  }, ref2) => {
    const prefix3 = useBootstrapPrefix(bsPrefix, "btn-group");
    let baseClass = prefix3;
    if (vertical2)
      baseClass = `${prefix3}-vertical`;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Component2, {
      ...rest,
      ref: ref2,
      role,
      className: (0, import_classnames6.default)(className, baseClass, size && `${prefix3}-${size}`)
    });
  });
  ButtonGroup.displayName = "ButtonGroup";
  var ButtonGroup_default = ButtonGroup;

  // node_modules/react-bootstrap/esm/CardHeaderContext.js
  var React15 = __toESM(require_react());
  "use client";
  var context = /* @__PURE__ */ React15.createContext(null);
  context.displayName = "CardHeaderContext";
  var CardHeaderContext_default = context;

  // node_modules/react-bootstrap/esm/ElementChildren.js
  var React16 = __toESM(require_react());
  function map(children2, func) {
    let index2 = 0;
    return React16.Children.map(children2, (child) => /* @__PURE__ */ React16.isValidElement(child) ? func(child, index2++) : child);
  }
  function forEach(children2, func) {
    let index2 = 0;
    React16.Children.forEach(children2, (child) => {
      if (/* @__PURE__ */ React16.isValidElement(child))
        func(child, index2++);
    });
  }
  function hasChildOfType(children2, type) {
    return React16.Children.toArray(children2).some((child) => /* @__PURE__ */ React16.isValidElement(child) && child.type === type);
  }

  // node_modules/react-bootstrap/esm/Col.js
  var import_classnames7 = __toESM(require_classnames());
  var React17 = __toESM(require_react());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  "use client";
  function useCol({
    as,
    bsPrefix,
    className,
    ...props
  }) {
    bsPrefix = useBootstrapPrefix(bsPrefix, "col");
    const breakpoints = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const spans = [];
    const classes = [];
    breakpoints.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let span;
      let offset4;
      let order2;
      if (typeof propValue === "object" && propValue != null) {
        ({
          span,
          offset: offset4,
          order: order2
        } = propValue);
      } else {
        span = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (span)
        spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
      if (order2 != null)
        classes.push(`order${infix}-${order2}`);
      if (offset4 != null)
        classes.push(`offset${infix}-${offset4}`);
    });
    return [{
      ...props,
      className: (0, import_classnames7.default)(className, ...spans, ...classes)
    }, {
      as,
      bsPrefix,
      spans
    }];
  }
  var Col = /* @__PURE__ */ React17.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    (props, ref2) => {
      const [{
        className,
        ...colProps
      }, {
        as: Component2 = "div",
        bsPrefix,
        spans
      }] = useCol(props);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Component2, {
        ...colProps,
        ref: ref2,
        className: (0, import_classnames7.default)(className, !spans.length && bsPrefix)
      });
    }
  );
  Col.displayName = "Col";
  var Col_default = Col;

  // node_modules/react-bootstrap/esm/Container.js
  var import_classnames8 = __toESM(require_classnames());
  var React18 = __toESM(require_react());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  "use client";
  var Container = /* @__PURE__ */ React18.forwardRef(({
    bsPrefix,
    fluid = false,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "div",
    className,
    ...props
  }, ref2) => {
    const prefix3 = useBootstrapPrefix(bsPrefix, "container");
    const suffix2 = typeof fluid === "string" ? `-${fluid}` : "-fluid";
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Component2, {
      ref: ref2,
      ...props,
      className: (0, import_classnames8.default)(className, fluid ? `${prefix3}${suffix2}` : prefix3)
    });
  });
  Container.displayName = "Container";
  var Container_default = Container;

  // node_modules/react-bootstrap/esm/Dropdown.js
  var import_classnames15 = __toESM(require_classnames());
  var React35 = __toESM(require_react());
  var import_react42 = __toESM(require_react());

  // node_modules/dom-helpers/esm/querySelectorAll.js
  var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
  function qsa(element, selector) {
    return toArray(element.querySelectorAll(selector));
  }

  // node_modules/@restart/ui/esm/Dropdown.js
  var import_react37 = __toESM(require_react());
  var React25 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/uncontrollable/lib/esm/index.js
  var import_react27 = __toESM(require_react());
  function useUncontrolledProp2(propValue, defaultValue, handler) {
    const wasPropRef = (0, import_react27.useRef)(propValue !== void 0);
    const [stateValue, setState] = (0, import_react27.useState)(defaultValue);
    const isProp2 = propValue !== void 0;
    const wasProp = wasPropRef.current;
    wasPropRef.current = isProp2;
    if (!isProp2 && wasProp && stateValue !== defaultValue) {
      setState(defaultValue);
    }
    return [isProp2 ? propValue : stateValue, (0, import_react27.useCallback)((...args) => {
      const [value, ...rest] = args;
      let returnValue = handler == null ? void 0 : handler(value, ...rest);
      setState(value);
      return returnValue;
    }, [handler])];
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useForceUpdate.js
  var import_react28 = __toESM(require_react());
  function useForceUpdate() {
    const [, dispatch2] = (0, import_react28.useReducer)((revision) => revision + 1, 0);
    return dispatch2;
  }

  // node_modules/@restart/ui/esm/DropdownContext.js
  var React19 = __toESM(require_react());
  var DropdownContext = /* @__PURE__ */ React19.createContext(null);
  var DropdownContext_default = DropdownContext;

  // node_modules/@restart/ui/esm/DropdownMenu.js
  var import_react32 = __toESM(require_react());
  var React20 = __toESM(require_react());

  // node_modules/@restart/ui/esm/usePopper.js
  var import_react30 = __toESM(require_react());

  // node_modules/dequal/dist/index.mjs
  var has = Object.prototype.hasOwnProperty;
  function find2(iter, tar, key) {
    for (key of iter.keys()) {
      if (dequal(key, tar))
        return key;
    }
  }
  function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar)
      return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
      if (ctor === Date)
        return foo.getTime() === bar.getTime();
      if (ctor === RegExp)
        return foo.toString() === bar.toString();
      if (ctor === Array) {
        if ((len = foo.length) === bar.length) {
          while (len-- && dequal(foo[len], bar[len]))
            ;
        }
        return len === -1;
      }
      if (ctor === Set) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len;
          if (tmp && typeof tmp === "object") {
            tmp = find2(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!bar.has(tmp))
            return false;
        }
        return true;
      }
      if (ctor === Map) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len[0];
          if (tmp && typeof tmp === "object") {
            tmp = find2(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!dequal(len[1], bar.get(tmp))) {
            return false;
          }
        }
        return true;
      }
      if (ctor === ArrayBuffer) {
        foo = new Uint8Array(foo);
        bar = new Uint8Array(bar);
      } else if (ctor === DataView) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo.getInt8(len) === bar.getInt8(len))
            ;
        }
        return len === -1;
      }
      if (ArrayBuffer.isView(foo)) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo[len] === bar[len])
            ;
        }
        return len === -1;
      }
      if (!ctor || typeof foo === "object") {
        len = 0;
        for (ctor in foo) {
          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
            return false;
          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
            return false;
        }
        return Object.keys(bar).length === len;
      }
    }
    return foo !== foo && bar !== bar;
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useSafeState.js
  var import_react29 = __toESM(require_react());
  function useSafeState(state) {
    const isMounted = useMounted();
    return [state[0], (0, import_react29.useCallback)((nextState) => {
      if (!isMounted())
        return;
      return state[1](nextState);
    }, [isMounted, state[1]])];
  }
  var useSafeState_default = useSafeState;

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start2 = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start2, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start2, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument2 = node.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset4 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset4, _state$modifiersData$.centerOffset = offset4 - center, _state$modifiersData$);
  }
  function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win2) {
    var x = _ref.x, y = _ref.y;
    var dpr = win2.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win2 = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win2.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect2(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll2 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll2) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll2) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect2,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win2 = getWindow(node);
    var scrollLeft = win2.pageXOffset;
    var scrollTop = win2.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win2 = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win2.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win2 = getWindow(scrollParent);
    var target = isBody ? [win2].concat(win2.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start2:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset4 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset4[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start2;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset4) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset4 === "function" ? offset4(Object.assign({}, rects, {
      placement
    })) : offset4, skidding = _ref[0], distance3 = _ref[1];
    skidding = skidding || 0;
    distance3 = (distance3 || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance3,
      y: skidding
    } : {
      x: skidding,
      y: distance3
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset4 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset4);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset4 = popperOffsets2[mainAxis];
      var min2 = offset4 + overflow[mainSide];
      var max2 = offset4 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start2 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start2 ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset4 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset4 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset4, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset4;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll2 = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll2 = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll2.scrollLeft - offsets.x,
      y: rect.top + scroll2.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map2 = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map2.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map2.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper3(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
            if (state.reset === true) {
              state.reset = false;
              index2 = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect3 = _ref.effect;
          if (typeof effect3 === "function") {
            var cleanupFn = effect3({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@restart/ui/esm/popper.js
  var createPopper2 = popperGenerator({
    defaultModifiers: [hide_default, popperOffsets_default, computeStyles_default, eventListeners_default, offset_default, flip_default, preventOverflow_default, arrow_default]
  });

  // node_modules/@restart/ui/esm/usePopper.js
  var _excluded3 = ["enabled", "placement", "strategy", "modifiers"];
  function _objectWithoutPropertiesLoose4(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var disabledApplyStylesModifier = {
    name: "applyStyles",
    enabled: false,
    phase: "afterWrite",
    fn: () => void 0
  };
  var ariaDescribedByModifier = {
    name: "ariaDescribedBy",
    enabled: true,
    phase: "afterWrite",
    effect: ({
      state
    }) => () => {
      const {
        reference: reference2,
        popper: popper2
      } = state.elements;
      if ("removeAttribute" in reference2) {
        const ids = (reference2.getAttribute("aria-describedby") || "").split(",").filter((id2) => id2.trim() !== popper2.id);
        if (!ids.length)
          reference2.removeAttribute("aria-describedby");
        else
          reference2.setAttribute("aria-describedby", ids.join(","));
      }
    },
    fn: ({
      state
    }) => {
      var _popper$getAttribute;
      const {
        popper: popper2,
        reference: reference2
      } = state.elements;
      const role = (_popper$getAttribute = popper2.getAttribute("role")) == null ? void 0 : _popper$getAttribute.toLowerCase();
      if (popper2.id && role === "tooltip" && "setAttribute" in reference2) {
        const ids = reference2.getAttribute("aria-describedby");
        if (ids && ids.split(",").indexOf(popper2.id) !== -1) {
          return;
        }
        reference2.setAttribute("aria-describedby", ids ? `${ids},${popper2.id}` : popper2.id);
      }
    }
  };
  var EMPTY_MODIFIERS = [];
  function usePopper(referenceElement, popperElement, _ref = {}) {
    let {
      enabled = true,
      placement = "bottom",
      strategy = "absolute",
      modifiers = EMPTY_MODIFIERS
    } = _ref, config = _objectWithoutPropertiesLoose4(_ref, _excluded3);
    const prevModifiers = (0, import_react30.useRef)(modifiers);
    const popperInstanceRef = (0, import_react30.useRef)();
    const update2 = (0, import_react30.useCallback)(() => {
      var _popperInstanceRef$cu;
      (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.update();
    }, []);
    const forceUpdate = (0, import_react30.useCallback)(() => {
      var _popperInstanceRef$cu2;
      (_popperInstanceRef$cu2 = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu2.forceUpdate();
    }, []);
    const [popperState, setState] = useSafeState_default((0, import_react30.useState)({
      placement,
      update: update2,
      forceUpdate,
      attributes: {},
      styles: {
        popper: {},
        arrow: {}
      }
    }));
    const updateModifier = (0, import_react30.useMemo)(() => ({
      name: "updateStateModifier",
      enabled: true,
      phase: "write",
      requires: ["computeStyles"],
      fn: ({
        state
      }) => {
        const styles2 = {};
        const attributes = {};
        Object.keys(state.elements).forEach((element) => {
          styles2[element] = state.styles[element];
          attributes[element] = state.attributes[element];
        });
        setState({
          state,
          styles: styles2,
          attributes,
          update: update2,
          forceUpdate,
          placement: state.placement
        });
      }
    }), [update2, forceUpdate, setState]);
    const nextModifiers = (0, import_react30.useMemo)(() => {
      if (!dequal(prevModifiers.current, modifiers)) {
        prevModifiers.current = modifiers;
      }
      return prevModifiers.current;
    }, [modifiers]);
    (0, import_react30.useEffect)(() => {
      if (!popperInstanceRef.current || !enabled)
        return;
      popperInstanceRef.current.setOptions({
        placement,
        strategy,
        modifiers: [...nextModifiers, updateModifier, disabledApplyStylesModifier]
      });
    }, [strategy, placement, updateModifier, enabled, nextModifiers]);
    (0, import_react30.useEffect)(() => {
      if (!enabled || referenceElement == null || popperElement == null) {
        return void 0;
      }
      popperInstanceRef.current = createPopper2(referenceElement, popperElement, Object.assign({}, config, {
        placement,
        strategy,
        modifiers: [...nextModifiers, ariaDescribedByModifier, updateModifier]
      }));
      return () => {
        if (popperInstanceRef.current != null) {
          popperInstanceRef.current.destroy();
          popperInstanceRef.current = void 0;
          setState((s) => Object.assign({}, s, {
            attributes: {},
            styles: {
              popper: {}
            }
          }));
        }
      };
    }, [enabled, referenceElement, popperElement]);
    return popperState;
  }
  var usePopper_default = usePopper;

  // node_modules/dom-helpers/esm/contains.js
  function contains2(context4, node) {
    if (context4.contains)
      return context4.contains(node);
    if (context4.compareDocumentPosition)
      return context4 === node || !!(context4.compareDocumentPosition(node) & 16);
  }

  // node_modules/@restart/ui/esm/useClickOutside.js
  var import_react31 = __toESM(require_react());
  var import_warning = __toESM(require_warning());
  var noop3 = () => {
  };
  function isLeftClickEvent(event) {
    return event.button === 0;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  var getRefTarget = (ref2) => ref2 && ("current" in ref2 ? ref2.current : ref2);
  var InitialTriggerEvents = {
    click: "mousedown",
    mouseup: "mousedown",
    pointerup: "pointerdown"
  };
  function useClickOutside(ref2, onClickOutside = noop3, {
    disabled,
    clickTrigger = "click"
  } = {}) {
    const preventMouseClickOutsideRef = (0, import_react31.useRef)(false);
    const waitingForTrigger = (0, import_react31.useRef)(false);
    const handleMouseCapture = (0, import_react31.useCallback)((e) => {
      const currentTarget = getRefTarget(ref2);
      (0, import_warning.default)(!!currentTarget, "ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node");
      preventMouseClickOutsideRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains2(currentTarget, e.target) || waitingForTrigger.current;
      waitingForTrigger.current = false;
    }, [ref2]);
    const handleInitialMouse = useEventCallback2((e) => {
      const currentTarget = getRefTarget(ref2);
      if (currentTarget && contains2(currentTarget, e.target)) {
        waitingForTrigger.current = true;
      } else {
        waitingForTrigger.current = false;
      }
    });
    const handleMouse = useEventCallback2((e) => {
      if (!preventMouseClickOutsideRef.current) {
        onClickOutside(e);
      }
    });
    (0, import_react31.useEffect)(() => {
      var _ownerWindow$event, _ownerWindow$parent;
      if (disabled || ref2 == null)
        return void 0;
      const doc = ownerDocument(getRefTarget(ref2));
      const ownerWindow2 = doc.defaultView || window;
      let currentEvent = (_ownerWindow$event = ownerWindow2.event) != null ? _ownerWindow$event : (_ownerWindow$parent = ownerWindow2.parent) == null ? void 0 : _ownerWindow$parent.event;
      let removeInitialTriggerListener = null;
      if (InitialTriggerEvents[clickTrigger]) {
        removeInitialTriggerListener = listen_default(doc, InitialTriggerEvents[clickTrigger], handleInitialMouse, true);
      }
      const removeMouseCaptureListener = listen_default(doc, clickTrigger, handleMouseCapture, true);
      const removeMouseListener = listen_default(doc, clickTrigger, (e) => {
        if (e === currentEvent) {
          currentEvent = void 0;
          return;
        }
        handleMouse(e);
      });
      let mobileSafariHackListeners = [];
      if ("ontouchstart" in doc.documentElement) {
        mobileSafariHackListeners = [].slice.call(doc.body.children).map((el) => listen_default(el, "mousemove", noop3));
      }
      return () => {
        removeInitialTriggerListener == null ? void 0 : removeInitialTriggerListener();
        removeMouseCaptureListener();
        removeMouseListener();
        mobileSafariHackListeners.forEach((remove2) => remove2());
      };
    }, [ref2, disabled, clickTrigger, handleMouseCapture, handleInitialMouse, handleMouse]);
  }
  var useClickOutside_default = useClickOutside;

  // node_modules/@restart/ui/esm/mergeOptionsWithPopperConfig.js
  function toModifierMap(modifiers) {
    const result = {};
    if (!Array.isArray(modifiers)) {
      return modifiers || result;
    }
    modifiers == null ? void 0 : modifiers.forEach((m) => {
      result[m.name] = m;
    });
    return result;
  }
  function toModifierArray(map2 = {}) {
    if (Array.isArray(map2))
      return map2;
    return Object.keys(map2).map((k) => {
      map2[k].name = k;
      return map2[k];
    });
  }
  function mergeOptionsWithPopperConfig({
    enabled,
    enableEvents,
    placement,
    flip: flip2,
    offset: offset4,
    fixed,
    containerPadding,
    arrowElement,
    popperConfig = {}
  }) {
    var _modifiers$eventListe, _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;
    const modifiers = toModifierMap(popperConfig.modifiers);
    return Object.assign({}, popperConfig, {
      placement,
      enabled,
      strategy: fixed ? "fixed" : popperConfig.strategy,
      modifiers: toModifierArray(Object.assign({}, modifiers, {
        eventListeners: {
          enabled: enableEvents,
          options: (_modifiers$eventListe = modifiers.eventListeners) == null ? void 0 : _modifiers$eventListe.options
        },
        preventOverflow: Object.assign({}, modifiers.preventOverflow, {
          options: containerPadding ? Object.assign({
            padding: containerPadding
          }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
        }),
        offset: {
          options: Object.assign({
            offset: offset4
          }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
        },
        arrow: Object.assign({}, modifiers.arrow, {
          enabled: !!arrowElement,
          options: Object.assign({}, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
            element: arrowElement
          })
        }),
        flip: Object.assign({
          enabled: !!flip2
        }, modifiers.flip)
      }))
    });
  }

  // node_modules/@restart/ui/esm/DropdownMenu.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded4 = ["children", "usePopper"];
  function _objectWithoutPropertiesLoose5(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var noop4 = () => {
  };
  function useDropdownMenu(options = {}) {
    const context4 = (0, import_react32.useContext)(DropdownContext_default);
    const [arrowElement, attachArrowRef] = useCallbackRef();
    const hasShownRef = (0, import_react32.useRef)(false);
    const {
      flip: flip2,
      offset: offset4,
      rootCloseEvent,
      fixed = false,
      placement: placementOverride,
      popperConfig = {},
      enableEventListeners = true,
      usePopper: shouldUsePopper = !!context4
    } = options;
    const show = (context4 == null ? void 0 : context4.show) == null ? !!options.show : context4.show;
    if (show && !hasShownRef.current) {
      hasShownRef.current = true;
    }
    const handleClose = (e) => {
      context4 == null ? void 0 : context4.toggle(false, e);
    };
    const {
      placement,
      setMenu,
      menuElement,
      toggleElement
    } = context4 || {};
    const popper2 = usePopper_default(toggleElement, menuElement, mergeOptionsWithPopperConfig({
      placement: placementOverride || placement || "bottom-start",
      enabled: shouldUsePopper,
      enableEvents: enableEventListeners == null ? show : enableEventListeners,
      offset: offset4,
      flip: flip2,
      fixed,
      arrowElement,
      popperConfig
    }));
    const menuProps = Object.assign({
      ref: setMenu || noop4,
      "aria-labelledby": toggleElement == null ? void 0 : toggleElement.id
    }, popper2.attributes.popper, {
      style: popper2.styles.popper
    });
    const metadata = {
      show,
      placement,
      hasShown: hasShownRef.current,
      toggle: context4 == null ? void 0 : context4.toggle,
      popper: shouldUsePopper ? popper2 : null,
      arrowProps: shouldUsePopper ? Object.assign({
        ref: attachArrowRef
      }, popper2.attributes.arrow, {
        style: popper2.styles.arrow
      }) : {}
    };
    useClickOutside_default(menuElement, handleClose, {
      clickTrigger: rootCloseEvent,
      disabled: !show
    });
    return [menuProps, metadata];
  }
  function DropdownMenu(_ref) {
    let {
      children: children2,
      usePopper: usePopperProp = true
    } = _ref, options = _objectWithoutPropertiesLoose5(_ref, _excluded4);
    const [props, meta] = useDropdownMenu(Object.assign({}, options, {
      usePopper: usePopperProp
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_jsx_runtime14.Fragment, {
      children: children2(props, meta)
    });
  }
  DropdownMenu.displayName = "DropdownMenu";
  var DropdownMenu_default = DropdownMenu;

  // node_modules/@restart/ui/esm/DropdownToggle.js
  var import_react34 = __toESM(require_react());
  var React21 = __toESM(require_react());

  // node_modules/@react-aria/ssr/dist/SSRProvider.mjs
  var import_react33 = __toESM(require_react(), 1);
  var $b5e257d569688ac6$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 1e10)),
    current: 0
  };
  var $b5e257d569688ac6$var$SSRContext = /* @__PURE__ */ (0, import_react33.default).createContext($b5e257d569688ac6$var$defaultContext);
  var $b5e257d569688ac6$var$IsSSRContext = /* @__PURE__ */ (0, import_react33.default).createContext(false);
  var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
  var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
  function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
    let ctx = (0, import_react33.useContext)($b5e257d569688ac6$var$SSRContext);
    let ref2 = (0, import_react33.useRef)(null);
    if (ref2.current === null && !isDisabled) {
      var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react33.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
      if (currentOwner) {
        let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
        if (prevComponentValue == null)
          $b5e257d569688ac6$var$componentIds.set(currentOwner, {
            id: ctx.current,
            state: currentOwner.memoizedState
          });
        else if (currentOwner.memoizedState !== prevComponentValue.state) {
          ctx.current = prevComponentValue.id;
          $b5e257d569688ac6$var$componentIds.delete(currentOwner);
        }
      }
      ref2.current = ++ctx.current;
    }
    return ref2.current;
  }
  function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
    let ctx = (0, import_react33.useContext)($b5e257d569688ac6$var$SSRContext);
    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM)
      console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
    let prefix3 = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
    return defaultId || `${prefix3}-${counter}`;
  }
  function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
    let id2 = (0, import_react33.default).useId();
    let [didSSR] = (0, import_react33.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
    let prefix3 = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
    return defaultId || `${prefix3}-${id2}`;
  }
  var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react33.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
  function $b5e257d569688ac6$var$getSnapshot() {
    return false;
  }
  function $b5e257d569688ac6$var$getServerSnapshot() {
    return true;
  }
  function $b5e257d569688ac6$var$subscribe(onStoreChange) {
    return () => {
    };
  }
  function $b5e257d569688ac6$export$535bd6ca7f90a273() {
    if (typeof (0, import_react33.default)["useSyncExternalStore"] === "function")
      return (0, import_react33.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
    return (0, import_react33.useContext)($b5e257d569688ac6$var$IsSSRContext);
  }

  // node_modules/@restart/ui/esm/DropdownToggle.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var isRoleMenu = (el) => {
    var _el$getAttribute;
    return ((_el$getAttribute = el.getAttribute("role")) == null ? void 0 : _el$getAttribute.toLowerCase()) === "menu";
  };
  var noop5 = () => {
  };
  function useDropdownToggle() {
    const id2 = $b5e257d569688ac6$export$619500959fc48b26();
    const {
      show = false,
      toggle = noop5,
      setToggle,
      menuElement
    } = (0, import_react34.useContext)(DropdownContext_default) || {};
    const handleClick = (0, import_react34.useCallback)((e) => {
      toggle(!show, e);
    }, [show, toggle]);
    const props = {
      id: id2,
      ref: setToggle || noop5,
      onClick: handleClick,
      "aria-expanded": !!show
    };
    if (menuElement && isRoleMenu(menuElement)) {
      props["aria-haspopup"] = true;
    }
    return [props, {
      show,
      toggle
    }];
  }
  function DropdownToggle({
    children: children2
  }) {
    const [props, meta] = useDropdownToggle();
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_jsx_runtime15.Fragment, {
      children: children2(props, meta)
    });
  }
  DropdownToggle.displayName = "DropdownToggle";
  var DropdownToggle_default = DropdownToggle;

  // node_modules/@restart/ui/esm/DropdownItem.js
  var React24 = __toESM(require_react());
  var import_react35 = __toESM(require_react());

  // node_modules/@restart/ui/esm/SelectableContext.js
  var React22 = __toESM(require_react());
  var SelectableContext = /* @__PURE__ */ React22.createContext(null);
  var makeEventKey = (eventKey, href = null) => {
    if (eventKey != null)
      return String(eventKey);
    return href || null;
  };
  var SelectableContext_default = SelectableContext;

  // node_modules/@restart/ui/esm/NavContext.js
  var React23 = __toESM(require_react());
  var NavContext = /* @__PURE__ */ React23.createContext(null);
  NavContext.displayName = "NavContext";
  var NavContext_default = NavContext;

  // node_modules/@restart/ui/esm/DataKey.js
  var ATTRIBUTE_PREFIX = `data-rr-ui-`;
  var PROPERTY_PREFIX = `rrUi`;
  function dataAttr(property) {
    return `${ATTRIBUTE_PREFIX}${property}`;
  }
  function dataProp(property) {
    return `${PROPERTY_PREFIX}${property}`;
  }

  // node_modules/@restart/ui/esm/DropdownItem.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var _excluded5 = ["eventKey", "disabled", "onClick", "active", "as"];
  function _objectWithoutPropertiesLoose6(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useDropdownItem({
    key,
    href,
    active,
    disabled,
    onClick
  }) {
    const onSelectCtx = (0, import_react35.useContext)(SelectableContext_default);
    const navContext = (0, import_react35.useContext)(NavContext_default);
    const {
      activeKey
    } = navContext || {};
    const eventKey = makeEventKey(key, href);
    const isActive2 = active == null && key != null ? makeEventKey(activeKey) === eventKey : active;
    const handleClick = useEventCallback2((event) => {
      if (disabled)
        return;
      onClick == null ? void 0 : onClick(event);
      if (onSelectCtx && !event.isPropagationStopped()) {
        onSelectCtx(eventKey, event);
      }
    });
    return [{
      onClick: handleClick,
      "aria-disabled": disabled || void 0,
      "aria-selected": isActive2,
      [dataAttr("dropdown-item")]: ""
    }, {
      isActive: isActive2
    }];
  }
  var DropdownItem = /* @__PURE__ */ React24.forwardRef((_ref, ref2) => {
    let {
      eventKey,
      disabled,
      onClick,
      active,
      as: Component2 = Button_default
    } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded5);
    const [dropdownItemProps] = useDropdownItem({
      key: eventKey,
      href: props.href,
      disabled,
      onClick,
      active
    });
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Component2, Object.assign({}, props, {
      ref: ref2
    }, dropdownItemProps));
  });
  DropdownItem.displayName = "DropdownItem";
  var DropdownItem_default = DropdownItem;

  // node_modules/@restart/ui/esm/useWindow.js
  var import_react36 = __toESM(require_react());
  var Context = /* @__PURE__ */ (0, import_react36.createContext)(canUseDOM_default ? window : void 0);
  var WindowProvider = Context.Provider;
  function useWindow() {
    return (0, import_react36.useContext)(Context);
  }

  // node_modules/@restart/ui/esm/Dropdown.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  function useRefWithUpdate() {
    const forceUpdate = useForceUpdate();
    const ref2 = (0, import_react37.useRef)(null);
    const attachRef = (0, import_react37.useCallback)((element) => {
      ref2.current = element;
      forceUpdate();
    }, [forceUpdate]);
    return [ref2, attachRef];
  }
  function Dropdown({
    defaultShow,
    show: rawShow,
    onSelect,
    onToggle: rawOnToggle,
    itemSelector = `* [${dataAttr("dropdown-item")}]`,
    focusFirstItemOnShow,
    placement = "bottom-start",
    children: children2
  }) {
    const window2 = useWindow();
    const [show, onToggle] = useUncontrolledProp2(rawShow, defaultShow, rawOnToggle);
    const [menuRef, setMenu] = useRefWithUpdate();
    const menuElement = menuRef.current;
    const [toggleRef, setToggle] = useRefWithUpdate();
    const toggleElement = toggleRef.current;
    const lastShow = usePrevious(show);
    const lastSourceEvent = (0, import_react37.useRef)(null);
    const focusInDropdown = (0, import_react37.useRef)(false);
    const onSelectCtx = (0, import_react37.useContext)(SelectableContext_default);
    const toggle = (0, import_react37.useCallback)((nextShow, event, source = event == null ? void 0 : event.type) => {
      onToggle(nextShow, {
        originalEvent: event,
        source
      });
    }, [onToggle]);
    const handleSelect = useEventCallback2((key, event) => {
      onSelect == null ? void 0 : onSelect(key, event);
      toggle(false, event, "select");
      if (!event.isPropagationStopped()) {
        onSelectCtx == null ? void 0 : onSelectCtx(key, event);
      }
    });
    const context4 = (0, import_react37.useMemo)(() => ({
      toggle,
      placement,
      show,
      menuElement,
      toggleElement,
      setMenu,
      setToggle
    }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);
    if (menuElement && lastShow && !show) {
      focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);
    }
    const focusToggle = useEventCallback2(() => {
      if (toggleElement && toggleElement.focus) {
        toggleElement.focus();
      }
    });
    const maybeFocusFirst = useEventCallback2(() => {
      const type = lastSourceEvent.current;
      let focusType = focusFirstItemOnShow;
      if (focusType == null) {
        focusType = menuRef.current && isRoleMenu(menuRef.current) ? "keyboard" : false;
      }
      if (focusType === false || focusType === "keyboard" && !/^key.+$/.test(type)) {
        return;
      }
      const first = qsa(menuRef.current, itemSelector)[0];
      if (first && first.focus)
        first.focus();
    });
    (0, import_react37.useEffect)(() => {
      if (show)
        maybeFocusFirst();
      else if (focusInDropdown.current) {
        focusInDropdown.current = false;
        focusToggle();
      }
    }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);
    (0, import_react37.useEffect)(() => {
      lastSourceEvent.current = null;
    });
    const getNextFocusedChild = (current, offset4) => {
      if (!menuRef.current)
        return null;
      const items = qsa(menuRef.current, itemSelector);
      let index2 = items.indexOf(current) + offset4;
      index2 = Math.max(0, Math.min(index2, items.length));
      return items[index2];
    };
    useEventListener((0, import_react37.useCallback)(() => window2.document, [window2]), "keydown", (event) => {
      var _menuRef$current, _toggleRef$current;
      const {
        key
      } = event;
      const target = event.target;
      const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
      const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);
      const isInput = /input|textarea/i.test(target.tagName);
      if (isInput && (key === " " || key !== "Escape" && fromMenu || key === "Escape" && target.type === "search")) {
        return;
      }
      if (!fromMenu && !fromToggle) {
        return;
      }
      if (key === "Tab" && (!menuRef.current || !show)) {
        return;
      }
      lastSourceEvent.current = event.type;
      const meta = {
        originalEvent: event,
        source: event.type
      };
      switch (key) {
        case "ArrowUp": {
          const next = getNextFocusedChild(target, -1);
          if (next && next.focus)
            next.focus();
          event.preventDefault();
          return;
        }
        case "ArrowDown":
          event.preventDefault();
          if (!show) {
            onToggle(true, meta);
          } else {
            const next = getNextFocusedChild(target, 1);
            if (next && next.focus)
              next.focus();
          }
          return;
        case "Tab":
          addEventListener_default(target.ownerDocument, "keyup", (e) => {
            var _menuRef$current2;
            if (e.key === "Tab" && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {
              onToggle(false, meta);
            }
          }, {
            once: true
          });
          break;
        case "Escape":
          if (key === "Escape") {
            event.preventDefault();
            event.stopPropagation();
          }
          onToggle(false, meta);
          break;
        default:
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectableContext_default.Provider, {
      value: handleSelect,
      children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(DropdownContext_default.Provider, {
        value: context4,
        children: children2
      })
    });
  }
  Dropdown.displayName = "Dropdown";
  Dropdown.Menu = DropdownMenu_default;
  Dropdown.Toggle = DropdownToggle_default;
  Dropdown.Item = DropdownItem_default;
  var Dropdown_default = Dropdown;

  // node_modules/react-bootstrap/esm/DropdownContext.js
  var React26 = __toESM(require_react());
  "use client";
  var DropdownContext2 = /* @__PURE__ */ React26.createContext({});
  DropdownContext2.displayName = "DropdownContext";
  var DropdownContext_default2 = DropdownContext2;

  // node_modules/react-bootstrap/esm/DropdownDivider.js
  var React27 = __toESM(require_react());
  var import_classnames9 = __toESM(require_classnames());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  "use client";
  var DropdownDivider = /* @__PURE__ */ React27.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "hr",
    role = "separator",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "dropdown-divider");
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames9.default)(className, bsPrefix),
      role,
      ...props
    });
  });
  DropdownDivider.displayName = "DropdownDivider";
  var DropdownDivider_default = DropdownDivider;

  // node_modules/react-bootstrap/esm/DropdownHeader.js
  var React28 = __toESM(require_react());
  var import_classnames10 = __toESM(require_classnames());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  "use client";
  var DropdownHeader = /* @__PURE__ */ React28.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "div",
    role = "heading",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "dropdown-header");
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames10.default)(className, bsPrefix),
      role,
      ...props
    });
  });
  DropdownHeader.displayName = "DropdownHeader";
  var DropdownHeader_default = DropdownHeader;

  // node_modules/react-bootstrap/esm/DropdownItem.js
  var import_classnames11 = __toESM(require_classnames());
  var React29 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  "use client";
  var DropdownItem2 = /* @__PURE__ */ React29.forwardRef(({
    bsPrefix,
    className,
    eventKey,
    disabled = false,
    onClick,
    active,
    as: Component2 = Anchor_default,
    ...props
  }, ref2) => {
    const prefix3 = useBootstrapPrefix(bsPrefix, "dropdown-item");
    const [dropdownItemProps, meta] = useDropdownItem({
      key: eventKey,
      href: props.href,
      disabled,
      onClick,
      active
    });
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Component2, {
      ...props,
      ...dropdownItemProps,
      ref: ref2,
      className: (0, import_classnames11.default)(className, prefix3, meta.isActive && "active", disabled && "disabled")
    });
  });
  DropdownItem2.displayName = "DropdownItem";
  var DropdownItem_default2 = DropdownItem2;

  // node_modules/react-bootstrap/esm/DropdownItemText.js
  var React30 = __toESM(require_react());
  var import_classnames12 = __toESM(require_classnames());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  "use client";
  var DropdownItemText = /* @__PURE__ */ React30.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "span",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "dropdown-item-text");
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames12.default)(className, bsPrefix),
      ...props
    });
  });
  DropdownItemText.displayName = "DropdownItemText";
  var DropdownItemText_default = DropdownItemText;

  // node_modules/react-bootstrap/esm/DropdownMenu.js
  var import_classnames13 = __toESM(require_classnames());
  var React33 = __toESM(require_react());
  var import_react40 = __toESM(require_react());

  // node_modules/@restart/hooks/esm/useIsomorphicEffect.js
  var import_react38 = __toESM(require_react());
  var isReactNative2 = typeof global !== "undefined" && // @ts-ignore
  global.navigator && // @ts-ignore
  global.navigator.product === "ReactNative";
  var isDOM2 = typeof document !== "undefined";
  var useIsomorphicEffect_default2 = isDOM2 || isReactNative2 ? import_react38.useLayoutEffect : import_react38.useEffect;

  // node_modules/react-bootstrap/esm/DropdownMenu.js
  var import_warning2 = __toESM(require_warning());

  // node_modules/react-bootstrap/esm/InputGroupContext.js
  var React31 = __toESM(require_react());
  "use client";
  var context2 = /* @__PURE__ */ React31.createContext(null);
  context2.displayName = "InputGroupContext";
  var InputGroupContext_default = context2;

  // node_modules/react-bootstrap/esm/NavbarContext.js
  var React32 = __toESM(require_react());
  "use client";
  var context3 = /* @__PURE__ */ React32.createContext(null);
  context3.displayName = "NavbarContext";
  var NavbarContext_default = context3;

  // node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js
  var import_invariant3 = __toESM(require_browser());
  var import_react39 = __toESM(require_react());
  function useWrappedRefWithWarning(ref2, componentName) {
    if (false)
      return ref2;
    const warningRef = (0, import_react39.useCallback)((refValue) => {
      !(refValue == null || !refValue.isReactComponent) ? true ? (0, import_invariant3.default)(false, `${componentName} injected a ref to a provided \`as\` component that resolved to a component instance instead of a DOM element. Use \`React.forwardRef\` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element`) : (0, import_invariant3.default)(false) : void 0;
    }, [componentName]);
    return useMergedRefs_default(warningRef, ref2);
  }

  // node_modules/react-bootstrap/esm/DropdownMenu.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  "use client";
  function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {
    const topStart = isRTL ? "top-end" : "top-start";
    const topEnd = isRTL ? "top-start" : "top-end";
    const bottomStart = isRTL ? "bottom-end" : "bottom-start";
    const bottomEnd = isRTL ? "bottom-start" : "bottom-end";
    const leftStart = isRTL ? "right-start" : "left-start";
    const leftEnd = isRTL ? "right-end" : "left-end";
    const rightStart = isRTL ? "left-start" : "right-start";
    const rightEnd = isRTL ? "left-end" : "right-end";
    let placement = alignEnd ? bottomEnd : bottomStart;
    if (dropDirection === "up")
      placement = alignEnd ? topEnd : topStart;
    else if (dropDirection === "end")
      placement = alignEnd ? rightEnd : rightStart;
    else if (dropDirection === "start")
      placement = alignEnd ? leftEnd : leftStart;
    else if (dropDirection === "down-centered")
      placement = "bottom";
    else if (dropDirection === "up-centered")
      placement = "top";
    return placement;
  }
  var DropdownMenu2 = /* @__PURE__ */ React33.forwardRef(({
    bsPrefix,
    className,
    align,
    rootCloseEvent,
    flip: flip2 = true,
    show: showProps,
    renderOnMount,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "div",
    popperConfig,
    variant,
    ...props
  }, ref2) => {
    let alignEnd = false;
    const isNavbar = (0, import_react40.useContext)(NavbarContext_default);
    const prefix3 = useBootstrapPrefix(bsPrefix, "dropdown-menu");
    const {
      align: contextAlign,
      drop: drop2,
      isRTL
    } = (0, import_react40.useContext)(DropdownContext_default2);
    align = align || contextAlign;
    const isInputGroup = (0, import_react40.useContext)(InputGroupContext_default);
    const alignClasses = [];
    if (align) {
      if (typeof align === "object") {
        const keys = Object.keys(align);
        true ? (0, import_warning2.default)(keys.length === 1, "There should only be 1 breakpoint when passing an object to `align`") : void 0;
        if (keys.length) {
          const brkPoint = keys[0];
          const direction = align[brkPoint];
          alignEnd = direction === "start";
          alignClasses.push(`${prefix3}-${brkPoint}-${direction}`);
        }
      } else if (align === "end") {
        alignEnd = true;
      }
    }
    const placement = getDropdownMenuPlacement(alignEnd, drop2, isRTL);
    const [menuProps, {
      hasShown,
      popper: popper2,
      show,
      toggle
    }] = useDropdownMenu({
      flip: flip2,
      rootCloseEvent,
      show: showProps,
      usePopper: !isNavbar && alignClasses.length === 0,
      offset: [0, 2],
      popperConfig,
      placement
    });
    menuProps.ref = useMergedRefs_default(useWrappedRefWithWarning(ref2, "DropdownMenu"), menuProps.ref);
    useIsomorphicEffect_default2(() => {
      if (show)
        popper2 == null || popper2.update();
    }, [show]);
    if (!hasShown && !renderOnMount && !isInputGroup)
      return null;
    if (typeof Component2 !== "string") {
      menuProps.show = show;
      menuProps.close = () => toggle == null ? void 0 : toggle(false);
      menuProps.align = align;
    }
    let style5 = props.style;
    if (popper2 != null && popper2.placement) {
      style5 = {
        ...props.style,
        ...menuProps.style
      };
      props["x-placement"] = popper2.placement;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Component2, {
      ...props,
      ...menuProps,
      style: style5,
      ...(alignClasses.length || isNavbar) && {
        "data-bs-popper": "static"
      },
      className: (0, import_classnames13.default)(className, prefix3, show && "show", alignEnd && `${prefix3}-end`, variant && `${prefix3}-${variant}`, ...alignClasses)
    });
  });
  DropdownMenu2.displayName = "DropdownMenu";
  var DropdownMenu_default2 = DropdownMenu2;

  // node_modules/react-bootstrap/esm/DropdownToggle.js
  var import_classnames14 = __toESM(require_classnames());
  var React34 = __toESM(require_react());
  var import_react41 = __toESM(require_react());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  "use client";
  var DropdownToggle2 = /* @__PURE__ */ React34.forwardRef(({
    bsPrefix,
    split,
    className,
    childBsPrefix,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = Button_default2,
    ...props
  }, ref2) => {
    const prefix3 = useBootstrapPrefix(bsPrefix, "dropdown-toggle");
    const dropdownContext = (0, import_react41.useContext)(DropdownContext_default);
    if (childBsPrefix !== void 0) {
      props.bsPrefix = childBsPrefix;
    }
    const [toggleProps] = useDropdownToggle();
    toggleProps.ref = useMergedRefs_default(toggleProps.ref, useWrappedRefWithWarning(ref2, "DropdownToggle"));
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Component2, {
      className: (0, import_classnames14.default)(className, prefix3, split && `${prefix3}-split`, (dropdownContext == null ? void 0 : dropdownContext.show) && "show"),
      ...toggleProps,
      ...props
    });
  });
  DropdownToggle2.displayName = "DropdownToggle";
  var DropdownToggle_default2 = DropdownToggle2;

  // node_modules/react-bootstrap/esm/Dropdown.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  "use client";
  var Dropdown2 = /* @__PURE__ */ React35.forwardRef((pProps, ref2) => {
    const {
      bsPrefix,
      drop: drop2 = "down",
      show,
      className,
      align = "start",
      onSelect,
      onToggle,
      focusFirstItemOnShow,
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component2 = "div",
      navbar: _4,
      autoClose = true,
      ...props
    } = useUncontrolled(pProps, {
      show: "onToggle"
    });
    const isInputGroup = (0, import_react42.useContext)(InputGroupContext_default);
    const prefix3 = useBootstrapPrefix(bsPrefix, "dropdown");
    const isRTL = useIsRTL();
    const isClosingPermitted = (source) => {
      if (autoClose === false)
        return source === "click";
      if (autoClose === "inside")
        return source !== "rootClose";
      if (autoClose === "outside")
        return source !== "select";
      return true;
    };
    const handleToggle = useEventCallback((nextShow, meta) => {
      var _meta$originalEvent;
      const isToggleButton = (_meta$originalEvent = meta.originalEvent) == null || (_meta$originalEvent = _meta$originalEvent.target) == null ? void 0 : _meta$originalEvent.classList.contains("dropdown-toggle");
      if (isToggleButton && meta.source === "mousedown") {
        return;
      }
      if (meta.originalEvent.currentTarget === document && (meta.source !== "keydown" || meta.originalEvent.key === "Escape"))
        meta.source = "rootClose";
      if (isClosingPermitted(meta.source))
        onToggle == null || onToggle(nextShow, meta);
    });
    const alignEnd = align === "end";
    const placement = getDropdownMenuPlacement(alignEnd, drop2, isRTL);
    const contextValue = (0, import_react42.useMemo)(() => ({
      align,
      drop: drop2,
      isRTL
    }), [align, drop2, isRTL]);
    const directionClasses = {
      down: prefix3,
      "down-centered": `${prefix3}-center`,
      up: "dropup",
      "up-centered": "dropup-center dropup",
      end: "dropend",
      start: "dropstart"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(DropdownContext_default2.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Dropdown_default, {
        placement,
        show,
        onSelect,
        onToggle: handleToggle,
        focusFirstItemOnShow,
        itemSelector: `.${prefix3}-item:not(.disabled):not(:disabled)`,
        children: isInputGroup ? props.children : /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Component2, {
          ...props,
          ref: ref2,
          className: (0, import_classnames15.default)(className, show && "show", directionClasses[drop2])
        })
      })
    });
  });
  Dropdown2.displayName = "Dropdown";
  var Dropdown_default2 = Object.assign(Dropdown2, {
    Toggle: DropdownToggle_default2,
    Menu: DropdownMenu_default2,
    Item: DropdownItem_default2,
    ItemText: DropdownItemText_default,
    Divider: DropdownDivider_default,
    Header: DropdownHeader_default
  });

  // node_modules/react-bootstrap/esm/Form.js
  var import_classnames27 = __toESM(require_classnames());
  var import_prop_types5 = __toESM(require_prop_types());
  var React50 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/FormCheck.js
  var import_classnames19 = __toESM(require_classnames());
  var React40 = __toESM(require_react());
  var import_react45 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/Feedback.js
  var import_classnames16 = __toESM(require_classnames());
  var React36 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var propTypes2 = {
    /**
     * Specify whether the feedback is for valid or invalid fields
     *
     * @type {('valid'|'invalid')}
     */
    type: import_prop_types4.default.string,
    /** Display feedback as a tooltip. */
    tooltip: import_prop_types4.default.bool,
    as: import_prop_types4.default.elementType
  };
  var Feedback = /* @__PURE__ */ React36.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    ({
      as: Component2 = "div",
      className,
      type = "valid",
      tooltip = false,
      ...props
    }, ref2) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Component2, {
      ...props,
      ref: ref2,
      className: (0, import_classnames16.default)(className, `${type}-${tooltip ? "tooltip" : "feedback"}`)
    })
  );
  Feedback.displayName = "Feedback";
  Feedback.propTypes = propTypes2;
  var Feedback_default = Feedback;

  // node_modules/react-bootstrap/esm/FormCheckInput.js
  var import_classnames17 = __toESM(require_classnames());
  var React38 = __toESM(require_react());
  var import_react43 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/FormContext.js
  var React37 = __toESM(require_react());
  "use client";
  var FormContext = /* @__PURE__ */ React37.createContext({});
  var FormContext_default = FormContext;

  // node_modules/react-bootstrap/esm/FormCheckInput.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  "use client";
  var FormCheckInput = /* @__PURE__ */ React38.forwardRef(({
    id: id2,
    bsPrefix,
    className,
    type = "checkbox",
    isValid = false,
    isInvalid = false,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "input",
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react43.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-input");
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Component2, {
      ...props,
      ref: ref2,
      type,
      id: id2 || controlId,
      className: (0, import_classnames17.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid")
    });
  });
  FormCheckInput.displayName = "FormCheckInput";
  var FormCheckInput_default = FormCheckInput;

  // node_modules/react-bootstrap/esm/FormCheckLabel.js
  var import_classnames18 = __toESM(require_classnames());
  var React39 = __toESM(require_react());
  var import_react44 = __toESM(require_react());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  "use client";
  var FormCheckLabel = /* @__PURE__ */ React39.forwardRef(({
    bsPrefix,
    className,
    htmlFor,
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react44.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-label");
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", {
      ...props,
      ref: ref2,
      htmlFor: htmlFor || controlId,
      className: (0, import_classnames18.default)(className, bsPrefix)
    });
  });
  FormCheckLabel.displayName = "FormCheckLabel";
  var FormCheckLabel_default = FormCheckLabel;

  // node_modules/react-bootstrap/esm/FormCheck.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  "use client";
  var FormCheck = /* @__PURE__ */ React40.forwardRef(({
    id: id2,
    bsPrefix,
    bsSwitchPrefix,
    inline = false,
    reverse = false,
    disabled = false,
    isValid = false,
    isInvalid = false,
    feedbackTooltip = false,
    feedback,
    feedbackType,
    className,
    style: style5,
    title = "",
    type = "checkbox",
    label,
    children: children2,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as = "input",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-check");
    bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, "form-switch");
    const {
      controlId
    } = (0, import_react45.useContext)(FormContext_default);
    const innerFormContext = (0, import_react45.useMemo)(() => ({
      controlId: id2 || controlId
    }), [controlId, id2]);
    const hasLabel = !children2 && label != null && label !== false || hasChildOfType(children2, FormCheckLabel_default);
    const input = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(FormCheckInput_default, {
      ...props,
      type: type === "switch" ? "checkbox" : type,
      ref: ref2,
      isValid,
      isInvalid,
      disabled,
      as
    });
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(FormContext_default.Provider, {
      value: innerFormContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", {
        style: style5,
        className: (0, import_classnames19.default)(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, reverse && `${bsPrefix}-reverse`, type === "switch" && bsSwitchPrefix),
        children: children2 || /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime29.Fragment, {
          children: [input, hasLabel && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(FormCheckLabel_default, {
            title,
            children: label
          }), feedback && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Feedback_default, {
            type: feedbackType,
            tooltip: feedbackTooltip,
            children: feedback
          })]
        })
      })
    });
  });
  FormCheck.displayName = "FormCheck";
  var FormCheck_default = Object.assign(FormCheck, {
    Input: FormCheckInput_default,
    Label: FormCheckLabel_default
  });

  // node_modules/react-bootstrap/esm/FormControl.js
  var import_classnames20 = __toESM(require_classnames());
  var React41 = __toESM(require_react());
  var import_react46 = __toESM(require_react());
  var import_warning3 = __toESM(require_warning());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  "use client";
  var FormControl = /* @__PURE__ */ React41.forwardRef(({
    bsPrefix,
    type,
    size,
    htmlSize,
    id: id2,
    className,
    isValid = false,
    isInvalid = false,
    plaintext,
    readOnly,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "input",
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react46.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-control");
    true ? (0, import_warning3.default)(controlId == null || !id2, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Component2, {
      ...props,
      type,
      size: htmlSize,
      ref: ref2,
      readOnly,
      id: id2 || controlId,
      className: (0, import_classnames20.default)(className, plaintext ? `${bsPrefix}-plaintext` : bsPrefix, size && `${bsPrefix}-${size}`, type === "color" && `${bsPrefix}-color`, isValid && "is-valid", isInvalid && "is-invalid")
    });
  });
  FormControl.displayName = "FormControl";
  var FormControl_default = Object.assign(FormControl, {
    Feedback: Feedback_default
  });

  // node_modules/react-bootstrap/esm/FormFloating.js
  var React42 = __toESM(require_react());
  var import_classnames21 = __toESM(require_classnames());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  "use client";
  var FormFloating = /* @__PURE__ */ React42.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "div",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-floating");
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames21.default)(className, bsPrefix),
      ...props
    });
  });
  FormFloating.displayName = "FormFloating";
  var FormFloating_default = FormFloating;

  // node_modules/react-bootstrap/esm/FormGroup.js
  var React43 = __toESM(require_react());
  var import_react47 = __toESM(require_react());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var FormGroup = /* @__PURE__ */ React43.forwardRef(({
    controlId,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "div",
    ...props
  }, ref2) => {
    const context4 = (0, import_react47.useMemo)(() => ({
      controlId
    }), [controlId]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(FormContext_default.Provider, {
      value: context4,
      children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Component2, {
        ...props,
        ref: ref2
      })
    });
  });
  FormGroup.displayName = "FormGroup";
  var FormGroup_default = FormGroup;

  // node_modules/react-bootstrap/esm/FormLabel.js
  var import_classnames22 = __toESM(require_classnames());
  var React44 = __toESM(require_react());
  var import_react48 = __toESM(require_react());
  var import_warning4 = __toESM(require_warning());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  "use client";
  var FormLabel = /* @__PURE__ */ React44.forwardRef(({
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "label",
    bsPrefix,
    column = false,
    visuallyHidden: visuallyHidden2 = false,
    className,
    htmlFor,
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react48.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-label");
    let columnClass = "col-form-label";
    if (typeof column === "string")
      columnClass = `${columnClass} ${columnClass}-${column}`;
    const classes = (0, import_classnames22.default)(className, bsPrefix, visuallyHidden2 && "visually-hidden", column && columnClass);
    true ? (0, import_warning4.default)(controlId == null || !htmlFor, "`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.") : void 0;
    htmlFor = htmlFor || controlId;
    if (column)
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Col_default, {
        ref: ref2,
        as: "label",
        className: classes,
        htmlFor,
        ...props
      });
    return (
      // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Component2, {
        ref: ref2,
        className: classes,
        htmlFor,
        ...props
      })
    );
  });
  FormLabel.displayName = "FormLabel";
  var FormLabel_default = FormLabel;

  // node_modules/react-bootstrap/esm/FormRange.js
  var import_classnames23 = __toESM(require_classnames());
  var React45 = __toESM(require_react());
  var import_react49 = __toESM(require_react());
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  "use client";
  var FormRange = /* @__PURE__ */ React45.forwardRef(({
    bsPrefix,
    className,
    id: id2,
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react49.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-range");
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("input", {
      ...props,
      type: "range",
      ref: ref2,
      className: (0, import_classnames23.default)(className, bsPrefix),
      id: id2 || controlId
    });
  });
  FormRange.displayName = "FormRange";
  var FormRange_default = FormRange;

  // node_modules/react-bootstrap/esm/FormSelect.js
  var import_classnames24 = __toESM(require_classnames());
  var React46 = __toESM(require_react());
  var import_react50 = __toESM(require_react());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  "use client";
  var FormSelect = /* @__PURE__ */ React46.forwardRef(({
    bsPrefix,
    size,
    htmlSize,
    className,
    isValid = false,
    isInvalid = false,
    id: id2,
    ...props
  }, ref2) => {
    const {
      controlId
    } = (0, import_react50.useContext)(FormContext_default);
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-select");
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("select", {
      ...props,
      size: htmlSize,
      ref: ref2,
      className: (0, import_classnames24.default)(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`),
      id: id2 || controlId
    });
  });
  FormSelect.displayName = "FormSelect";
  var FormSelect_default = FormSelect;

  // node_modules/react-bootstrap/esm/FormText.js
  var import_classnames25 = __toESM(require_classnames());
  var React47 = __toESM(require_react());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  "use client";
  var FormText = /* @__PURE__ */ React47.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    ({
      bsPrefix,
      className,
      as: Component2 = "small",
      muted,
      ...props
    }, ref2) => {
      bsPrefix = useBootstrapPrefix(bsPrefix, "form-text");
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Component2, {
        ...props,
        ref: ref2,
        className: (0, import_classnames25.default)(className, bsPrefix, muted && "text-muted")
      });
    }
  );
  FormText.displayName = "FormText";
  var FormText_default = FormText;

  // node_modules/react-bootstrap/esm/Switch.js
  var React48 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var Switch = /* @__PURE__ */ React48.forwardRef((props, ref2) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(FormCheck_default, {
    ...props,
    ref: ref2,
    type: "switch"
  }));
  Switch.displayName = "Switch";
  var Switch_default = Object.assign(Switch, {
    Input: FormCheck_default.Input,
    Label: FormCheck_default.Label
  });

  // node_modules/react-bootstrap/esm/FloatingLabel.js
  var import_classnames26 = __toESM(require_classnames());
  var React49 = __toESM(require_react());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  "use client";
  var FloatingLabel = /* @__PURE__ */ React49.forwardRef(({
    bsPrefix,
    className,
    children: children2,
    controlId,
    label,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "form-floating");
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(FormGroup_default, {
      ref: ref2,
      className: (0, import_classnames26.default)(className, bsPrefix),
      controlId,
      ...props,
      children: [children2, /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", {
        htmlFor: controlId,
        children: label
      })]
    });
  });
  FloatingLabel.displayName = "FloatingLabel";
  var FloatingLabel_default = FloatingLabel;

  // node_modules/react-bootstrap/esm/Form.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var propTypes3 = {
    /**
     * The Form `ref` will be forwarded to the underlying element,
     * which means, unless it's rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: import_prop_types5.default.any,
    /**
     * Mark a form as having been validated. Setting it to `true` will
     * toggle any validation styles on the forms elements.
     */
    validated: import_prop_types5.default.bool,
    as: import_prop_types5.default.elementType
  };
  var Form = /* @__PURE__ */ React50.forwardRef(({
    className,
    validated,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "form",
    ...props
  }, ref2) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Component2, {
    ...props,
    ref: ref2,
    className: (0, import_classnames27.default)(className, validated && "was-validated")
  }));
  Form.displayName = "Form";
  Form.propTypes = propTypes3;
  var Form_default = Object.assign(Form, {
    Group: FormGroup_default,
    Control: FormControl_default,
    Floating: FormFloating_default,
    Check: FormCheck_default,
    Switch: Switch_default,
    Label: FormLabel_default,
    Text: FormText_default,
    Range: FormRange_default,
    Select: FormSelect_default,
    FloatingLabel: FloatingLabel_default
  });

  // node_modules/@restart/ui/esm/Nav.js
  var React53 = __toESM(require_react());
  var import_react53 = __toESM(require_react());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMergedRefs.js
  var import_react51 = __toESM(require_react());
  var toFnRef2 = (ref2) => !ref2 || typeof ref2 === "function" ? ref2 : (value) => {
    ref2.current = value;
  };
  function mergeRefs2(refA, refB) {
    const a = toFnRef2(refA);
    const b = toFnRef2(refB);
    return (value) => {
      if (a)
        a(value);
      if (b)
        b(value);
    };
  }
  function useMergedRefs2(refA, refB) {
    return (0, import_react51.useMemo)(() => mergeRefs2(refA, refB), [refA, refB]);
  }
  var useMergedRefs_default2 = useMergedRefs2;

  // node_modules/@restart/ui/esm/TabContext.js
  var React51 = __toESM(require_react());
  var TabContext = /* @__PURE__ */ React51.createContext(null);
  var TabContext_default = TabContext;

  // node_modules/@restart/ui/esm/NavItem.js
  var React52 = __toESM(require_react());
  var import_react52 = __toESM(require_react());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _excluded6 = ["as", "active", "eventKey"];
  function _objectWithoutPropertiesLoose7(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useNavItem({
    key,
    onClick,
    active,
    id: id2,
    role,
    disabled
  }) {
    const parentOnSelect = (0, import_react52.useContext)(SelectableContext_default);
    const navContext = (0, import_react52.useContext)(NavContext_default);
    const tabContext = (0, import_react52.useContext)(TabContext_default);
    let isActive2 = active;
    const props = {
      role
    };
    if (navContext) {
      if (!role && navContext.role === "tablist")
        props.role = "tab";
      const contextControllerId = navContext.getControllerId(key != null ? key : null);
      const contextControlledId = navContext.getControlledId(key != null ? key : null);
      props[dataAttr("event-key")] = key;
      props.id = contextControllerId || id2;
      isActive2 = active == null && key != null ? navContext.activeKey === key : active;
      if (isActive2 || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter))
        props["aria-controls"] = contextControlledId;
    }
    if (props.role === "tab") {
      props["aria-selected"] = isActive2;
      if (!isActive2) {
        props.tabIndex = -1;
      }
      if (disabled) {
        props.tabIndex = -1;
        props["aria-disabled"] = true;
      }
    }
    props.onClick = useEventCallback2((e) => {
      if (disabled)
        return;
      onClick == null ? void 0 : onClick(e);
      if (key == null) {
        return;
      }
      if (parentOnSelect && !e.isPropagationStopped()) {
        parentOnSelect(key, e);
      }
    });
    return [props, {
      isActive: isActive2
    }];
  }
  var NavItem = /* @__PURE__ */ React52.forwardRef((_ref, ref2) => {
    let {
      as: Component2 = Button_default,
      active,
      eventKey
    } = _ref, options = _objectWithoutPropertiesLoose7(_ref, _excluded6);
    const [props, meta] = useNavItem(Object.assign({
      key: makeEventKey(eventKey, options.href),
      active
    }, options));
    props[dataAttr("active")] = meta.isActive;
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Component2, Object.assign({}, options, props, {
      ref: ref2
    }));
  });
  NavItem.displayName = "NavItem";
  var NavItem_default = NavItem;

  // node_modules/@restart/ui/esm/Nav.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded7 = ["as", "onSelect", "activeKey", "role", "onKeyDown"];
  function _objectWithoutPropertiesLoose8(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var noop6 = () => {
  };
  var EVENT_KEY_ATTR = dataAttr("event-key");
  var Nav = /* @__PURE__ */ React53.forwardRef((_ref, ref2) => {
    let {
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component2 = "div",
      onSelect,
      activeKey,
      role,
      onKeyDown
    } = _ref, props = _objectWithoutPropertiesLoose8(_ref, _excluded7);
    const forceUpdate = useForceUpdate();
    const needsRefocusRef = (0, import_react53.useRef)(false);
    const parentOnSelect = (0, import_react53.useContext)(SelectableContext_default);
    const tabContext = (0, import_react53.useContext)(TabContext_default);
    let getControlledId, getControllerId;
    if (tabContext) {
      role = role || "tablist";
      activeKey = tabContext.activeKey;
      getControlledId = tabContext.getControlledId;
      getControllerId = tabContext.getControllerId;
    }
    const listNode = (0, import_react53.useRef)(null);
    const getNextActiveTab = (offset4) => {
      const currentListNode = listNode.current;
      if (!currentListNode)
        return null;
      const items = qsa(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);
      const activeChild = currentListNode.querySelector("[aria-selected=true]");
      if (!activeChild || activeChild !== document.activeElement)
        return null;
      const index2 = items.indexOf(activeChild);
      if (index2 === -1)
        return null;
      let nextIndex = index2 + offset4;
      if (nextIndex >= items.length)
        nextIndex = 0;
      if (nextIndex < 0)
        nextIndex = items.length - 1;
      return items[nextIndex];
    };
    const handleSelect = (key, event) => {
      if (key == null)
        return;
      onSelect == null ? void 0 : onSelect(key, event);
      parentOnSelect == null ? void 0 : parentOnSelect(key, event);
    };
    const handleKeyDown = (event) => {
      onKeyDown == null ? void 0 : onKeyDown(event);
      if (!tabContext) {
        return;
      }
      let nextActiveChild;
      switch (event.key) {
        case "ArrowLeft":
        case "ArrowUp":
          nextActiveChild = getNextActiveTab(-1);
          break;
        case "ArrowRight":
        case "ArrowDown":
          nextActiveChild = getNextActiveTab(1);
          break;
        default:
          return;
      }
      if (!nextActiveChild)
        return;
      event.preventDefault();
      handleSelect(nextActiveChild.dataset[dataProp("EventKey")] || null, event);
      needsRefocusRef.current = true;
      forceUpdate();
    };
    (0, import_react53.useEffect)(() => {
      if (listNode.current && needsRefocusRef.current) {
        const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);
        activeChild == null ? void 0 : activeChild.focus();
      }
      needsRefocusRef.current = false;
    });
    const mergedRef = useMergedRefs_default2(ref2, listNode);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(SelectableContext_default.Provider, {
      value: handleSelect,
      children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(NavContext_default.Provider, {
        value: {
          role,
          // used by NavLink to determine it's role
          activeKey: makeEventKey(activeKey),
          getControlledId: getControlledId || noop6,
          getControllerId: getControllerId || noop6
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Component2, Object.assign({}, props, {
          onKeyDown: handleKeyDown,
          ref: mergedRef,
          role
        }))
      })
    });
  });
  Nav.displayName = "Nav";
  var Nav_default = Object.assign(Nav, {
    Item: NavItem_default
  });

  // node_modules/dom-helpers/esm/activeElement.js
  function activeElement(doc) {
    if (doc === void 0) {
      doc = ownerDocument();
    }
    try {
      var active = doc.activeElement;
      if (!active || !active.nodeName)
        return null;
      return active;
    } catch (e) {
      return doc.body;
    }
  }

  // node_modules/@restart/ui/esm/Modal.js
  var import_react60 = __toESM(require_react());
  var React56 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useUpdatedRef.js
  var import_react54 = __toESM(require_react());
  function useUpdatedRef(value) {
    const valueRef = (0, import_react54.useRef)(value);
    valueRef.current = value;
    return valueRef;
  }

  // node_modules/@restart/ui/node_modules/@restart/hooks/esm/useWillUnmount.js
  var import_react55 = __toESM(require_react());
  function useWillUnmount(fn2) {
    const onUnmount = useUpdatedRef(fn2);
    (0, import_react55.useEffect)(() => () => onUnmount.current(), []);
  }

  // node_modules/@restart/ui/esm/getScrollbarWidth.js
  function getBodyScrollbarWidth(ownerDocument2 = document) {
    const window2 = ownerDocument2.defaultView;
    return Math.abs(window2.innerWidth - ownerDocument2.documentElement.clientWidth);
  }

  // node_modules/@restart/ui/esm/ModalManager.js
  var OPEN_DATA_ATTRIBUTE = dataAttr("modal-open");
  var ModalManager = class {
    constructor({
      ownerDocument: ownerDocument2,
      handleContainerOverflow = true,
      isRTL = false
    } = {}) {
      this.handleContainerOverflow = handleContainerOverflow;
      this.isRTL = isRTL;
      this.modals = [];
      this.ownerDocument = ownerDocument2;
    }
    getScrollbarWidth() {
      return getBodyScrollbarWidth(this.ownerDocument);
    }
    getElement() {
      return (this.ownerDocument || document).body;
    }
    setModalAttributes(_modal) {
    }
    removeModalAttributes(_modal) {
    }
    setContainerStyle(containerState) {
      const style5 = {
        overflow: "hidden"
      };
      const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
      const container = this.getElement();
      containerState.style = {
        overflow: container.style.overflow,
        [paddingProp]: container.style[paddingProp]
      };
      if (containerState.scrollBarWidth) {
        style5[paddingProp] = `${parseInt(css_default(container, paddingProp) || "0", 10) + containerState.scrollBarWidth}px`;
      }
      container.setAttribute(OPEN_DATA_ATTRIBUTE, "");
      css_default(container, style5);
    }
    reset() {
      [...this.modals].forEach((m) => this.remove(m));
    }
    removeContainerStyle(containerState) {
      const container = this.getElement();
      container.removeAttribute(OPEN_DATA_ATTRIBUTE);
      Object.assign(container.style, containerState.style);
    }
    add(modal) {
      let modalIdx = this.modals.indexOf(modal);
      if (modalIdx !== -1) {
        return modalIdx;
      }
      modalIdx = this.modals.length;
      this.modals.push(modal);
      this.setModalAttributes(modal);
      if (modalIdx !== 0) {
        return modalIdx;
      }
      this.state = {
        scrollBarWidth: this.getScrollbarWidth(),
        style: {}
      };
      if (this.handleContainerOverflow) {
        this.setContainerStyle(this.state);
      }
      return modalIdx;
    }
    remove(modal) {
      const modalIdx = this.modals.indexOf(modal);
      if (modalIdx === -1) {
        return;
      }
      this.modals.splice(modalIdx, 1);
      if (!this.modals.length && this.handleContainerOverflow) {
        this.removeContainerStyle(this.state);
      }
      this.removeModalAttributes(modal);
    }
    isTopModal(modal) {
      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
    }
  };
  var ModalManager_default = ModalManager;

  // node_modules/@restart/ui/esm/useWaitForDOMRef.js
  var import_react56 = __toESM(require_react());
  var resolveContainerRef = (ref2, document2) => {
    if (!canUseDOM_default)
      return null;
    if (ref2 == null)
      return (document2 || ownerDocument()).body;
    if (typeof ref2 === "function")
      ref2 = ref2();
    if (ref2 && "current" in ref2)
      ref2 = ref2.current;
    if (ref2 && ("nodeType" in ref2 || ref2.getBoundingClientRect))
      return ref2;
    return null;
  };
  function useWaitForDOMRef(ref2, onResolved) {
    const window2 = useWindow();
    const [resolvedRef, setRef] = (0, import_react56.useState)(() => resolveContainerRef(ref2, window2 == null ? void 0 : window2.document));
    if (!resolvedRef) {
      const earlyRef = resolveContainerRef(ref2);
      if (earlyRef)
        setRef(earlyRef);
    }
    (0, import_react56.useEffect)(() => {
      if (onResolved && resolvedRef) {
        onResolved(resolvedRef);
      }
    }, [onResolved, resolvedRef]);
    (0, import_react56.useEffect)(() => {
      const nextRef = resolveContainerRef(ref2);
      if (nextRef !== resolvedRef) {
        setRef(nextRef);
      }
    }, [ref2, resolvedRef]);
    return resolvedRef;
  }

  // node_modules/@restart/ui/esm/ImperativeTransition.js
  var import_react59 = __toESM(require_react());

  // node_modules/@restart/ui/esm/NoopTransition.js
  var import_react57 = __toESM(require_react());
  function NoopTransition({
    children: children2,
    in: inProp,
    onExited,
    mountOnEnter,
    unmountOnExit
  }) {
    const ref2 = (0, import_react57.useRef)(null);
    const hasEnteredRef = (0, import_react57.useRef)(inProp);
    const handleExited = useEventCallback2(onExited);
    (0, import_react57.useEffect)(() => {
      if (inProp)
        hasEnteredRef.current = true;
      else {
        handleExited(ref2.current);
      }
    }, [inProp, handleExited]);
    const combinedRef = useMergedRefs_default2(ref2, children2.ref);
    const child = /* @__PURE__ */ (0, import_react57.cloneElement)(children2, {
      ref: combinedRef
    });
    if (inProp)
      return child;
    if (unmountOnExit) {
      return null;
    }
    if (!hasEnteredRef.current && mountOnEnter) {
      return null;
    }
    return child;
  }
  var NoopTransition_default = NoopTransition;

  // node_modules/@restart/ui/esm/RTGTransition.js
  var React54 = __toESM(require_react());

  // node_modules/@restart/ui/esm/useRTGTransitionProps.js
  var import_react58 = __toESM(require_react());
  var _excluded8 = ["onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "addEndListener", "children"];
  function _objectWithoutPropertiesLoose9(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useRTGTransitionProps(_ref) {
    let {
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      addEndListener,
      children: children2
    } = _ref, props = _objectWithoutPropertiesLoose9(_ref, _excluded8);
    const nodeRef = (0, import_react58.useRef)(null);
    const mergedRef = useMergedRefs_default2(nodeRef, getChildRef(children2));
    const normalize = (callback) => (param) => {
      if (callback && nodeRef.current) {
        callback(nodeRef.current, param);
      }
    };
    const handleEnter = (0, import_react58.useCallback)(normalize(onEnter), [onEnter]);
    const handleEntering = (0, import_react58.useCallback)(normalize(onEntering), [onEntering]);
    const handleEntered = (0, import_react58.useCallback)(normalize(onEntered), [onEntered]);
    const handleExit = (0, import_react58.useCallback)(normalize(onExit), [onExit]);
    const handleExiting = (0, import_react58.useCallback)(normalize(onExiting), [onExiting]);
    const handleExited = (0, import_react58.useCallback)(normalize(onExited), [onExited]);
    const handleAddEndListener = (0, import_react58.useCallback)(normalize(addEndListener), [addEndListener]);
    return Object.assign({}, props, {
      nodeRef
    }, onEnter && {
      onEnter: handleEnter
    }, onEntering && {
      onEntering: handleEntering
    }, onEntered && {
      onEntered: handleEntered
    }, onExit && {
      onExit: handleExit
    }, onExiting && {
      onExiting: handleExiting
    }, onExited && {
      onExited: handleExited
    }, addEndListener && {
      addEndListener: handleAddEndListener
    }, {
      children: typeof children2 === "function" ? (status, innerProps) => (
        // TODO: Types for RTG missing innerProps, so need to cast.
        children2(status, Object.assign({}, innerProps, {
          ref: mergedRef
        }))
      ) : /* @__PURE__ */ (0, import_react58.cloneElement)(children2, {
        ref: mergedRef
      })
    });
  }

  // node_modules/@restart/ui/esm/RTGTransition.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var _excluded9 = ["component"];
  function _objectWithoutPropertiesLoose10(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var RTGTransition = /* @__PURE__ */ React54.forwardRef((_ref, ref2) => {
    let {
      component: Component2
    } = _ref, props = _objectWithoutPropertiesLoose10(_ref, _excluded9);
    const transitionProps = useRTGTransitionProps(props);
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Component2, Object.assign({
      ref: ref2
    }, transitionProps));
  });
  var RTGTransition_default = RTGTransition;

  // node_modules/@restart/ui/esm/ImperativeTransition.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  function useTransition({
    in: inProp,
    onTransition
  }) {
    const ref2 = (0, import_react59.useRef)(null);
    const isInitialRef = (0, import_react59.useRef)(true);
    const handleTransition = useEventCallback2(onTransition);
    useIsomorphicEffect_default(() => {
      if (!ref2.current) {
        return void 0;
      }
      let stale = false;
      handleTransition({
        in: inProp,
        element: ref2.current,
        initial: isInitialRef.current,
        isStale: () => stale
      });
      return () => {
        stale = true;
      };
    }, [inProp, handleTransition]);
    useIsomorphicEffect_default(() => {
      isInitialRef.current = false;
      return () => {
        isInitialRef.current = true;
      };
    }, []);
    return ref2;
  }
  function ImperativeTransition({
    children: children2,
    in: inProp,
    onExited,
    onEntered,
    transition: transition2
  }) {
    const [exited, setExited] = (0, import_react59.useState)(!inProp);
    if (inProp && exited) {
      setExited(false);
    }
    const ref2 = useTransition({
      in: !!inProp,
      onTransition: (options) => {
        const onFinish = () => {
          if (options.isStale())
            return;
          if (options.in) {
            onEntered == null ? void 0 : onEntered(options.element, options.initial);
          } else {
            setExited(true);
            onExited == null ? void 0 : onExited(options.element);
          }
        };
        Promise.resolve(transition2(options)).then(onFinish, (error2) => {
          if (!options.in)
            setExited(true);
          throw error2;
        });
      }
    });
    const combinedRef = useMergedRefs_default2(ref2, children2.ref);
    return exited && !inProp ? null : /* @__PURE__ */ (0, import_react59.cloneElement)(children2, {
      ref: combinedRef
    });
  }
  function renderTransition(component, runTransition, props) {
    if (component) {
      return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(RTGTransition_default, Object.assign({}, props, {
        component
      }));
    }
    if (runTransition) {
      return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ImperativeTransition, Object.assign({}, props, {
        transition: runTransition
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(NoopTransition_default, Object.assign({}, props));
  }

  // node_modules/@restart/ui/esm/Modal.js
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var _excluded10 = ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "runTransition", "backdropTransition", "runBackdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"];
  function _objectWithoutPropertiesLoose11(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  var manager;
  function getManager(window2) {
    if (!manager)
      manager = new ModalManager_default({
        ownerDocument: window2 == null ? void 0 : window2.document
      });
    return manager;
  }
  function useModalManager(provided) {
    const window2 = useWindow();
    const modalManager = provided || getManager(window2);
    const modal = (0, import_react60.useRef)({
      dialog: null,
      backdrop: null
    });
    return Object.assign(modal.current, {
      add: () => modalManager.add(modal.current),
      remove: () => modalManager.remove(modal.current),
      isTopModal: () => modalManager.isTopModal(modal.current),
      setDialogRef: (0, import_react60.useCallback)((ref2) => {
        modal.current.dialog = ref2;
      }, []),
      setBackdropRef: (0, import_react60.useCallback)((ref2) => {
        modal.current.backdrop = ref2;
      }, [])
    });
  }
  var Modal = /* @__PURE__ */ (0, import_react60.forwardRef)((_ref, ref2) => {
    let {
      show = false,
      role = "dialog",
      className,
      style: style5,
      children: children2,
      backdrop = true,
      keyboard = true,
      onBackdropClick,
      onEscapeKeyDown,
      transition: transition2,
      runTransition,
      backdropTransition,
      runBackdropTransition,
      autoFocus = true,
      enforceFocus = true,
      restoreFocus = true,
      restoreFocusOptions,
      renderDialog,
      renderBackdrop = (props) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", Object.assign({}, props)),
      manager: providedManager,
      container: containerRef,
      onShow,
      onHide = () => {
      },
      onExit,
      onExited,
      onExiting,
      onEnter,
      onEntering,
      onEntered
    } = _ref, rest = _objectWithoutPropertiesLoose11(_ref, _excluded10);
    const ownerWindow2 = useWindow();
    const container = useWaitForDOMRef(containerRef);
    const modal = useModalManager(providedManager);
    const isMounted = useMounted();
    const prevShow = usePrevious(show);
    const [exited, setExited] = (0, import_react60.useState)(!show);
    const lastFocusRef = (0, import_react60.useRef)(null);
    (0, import_react60.useImperativeHandle)(ref2, () => modal, [modal]);
    if (canUseDOM_default && !prevShow && show) {
      lastFocusRef.current = activeElement(ownerWindow2 == null ? void 0 : ownerWindow2.document);
    }
    if (show && exited) {
      setExited(false);
    }
    const handleShow = useEventCallback2(() => {
      modal.add();
      removeKeydownListenerRef.current = listen_default(document, "keydown", handleDocumentKeyDown);
      removeFocusListenerRef.current = listen_default(
        document,
        "focus",
        // the timeout is necessary b/c this will run before the new modal is mounted
        // and so steals focus from it
        () => setTimeout(handleEnforceFocus),
        true
      );
      if (onShow) {
        onShow();
      }
      if (autoFocus) {
        var _modal$dialog$ownerDo, _modal$dialog;
        const currentActiveElement = activeElement((_modal$dialog$ownerDo = (_modal$dialog = modal.dialog) == null ? void 0 : _modal$dialog.ownerDocument) != null ? _modal$dialog$ownerDo : ownerWindow2 == null ? void 0 : ownerWindow2.document);
        if (modal.dialog && currentActiveElement && !contains2(modal.dialog, currentActiveElement)) {
          lastFocusRef.current = currentActiveElement;
          modal.dialog.focus();
        }
      }
    });
    const handleHide = useEventCallback2(() => {
      modal.remove();
      removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
      removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();
      if (restoreFocus) {
        var _lastFocusRef$current;
        (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
        lastFocusRef.current = null;
      }
    });
    (0, import_react60.useEffect)(() => {
      if (!show || !container)
        return;
      handleShow();
    }, [
      show,
      container,
      /* should never change: */
      handleShow
    ]);
    (0, import_react60.useEffect)(() => {
      if (!exited)
        return;
      handleHide();
    }, [exited, handleHide]);
    useWillUnmount(() => {
      handleHide();
    });
    const handleEnforceFocus = useEventCallback2(() => {
      if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
        return;
      }
      const currentActiveElement = activeElement(ownerWindow2 == null ? void 0 : ownerWindow2.document);
      if (modal.dialog && currentActiveElement && !contains2(modal.dialog, currentActiveElement)) {
        modal.dialog.focus();
      }
    });
    const handleBackdropClick = useEventCallback2((e) => {
      if (e.target !== e.currentTarget) {
        return;
      }
      onBackdropClick == null ? void 0 : onBackdropClick(e);
      if (backdrop === true) {
        onHide();
      }
    });
    const handleDocumentKeyDown = useEventCallback2((e) => {
      if (keyboard && isEscKey(e) && modal.isTopModal()) {
        onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);
        if (!e.defaultPrevented) {
          onHide();
        }
      }
    });
    const removeFocusListenerRef = (0, import_react60.useRef)();
    const removeKeydownListenerRef = (0, import_react60.useRef)();
    const handleHidden = (...args) => {
      setExited(true);
      onExited == null ? void 0 : onExited(...args);
    };
    if (!container) {
      return null;
    }
    const dialogProps = Object.assign({
      role,
      ref: modal.setDialogRef,
      // apparently only works on the dialog role element
      "aria-modal": role === "dialog" ? true : void 0
    }, rest, {
      style: style5,
      className,
      tabIndex: -1
    });
    let dialog = renderDialog ? renderDialog(dialogProps) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", Object.assign({}, dialogProps, {
      children: /* @__PURE__ */ React56.cloneElement(children2, {
        role: "document"
      })
    }));
    dialog = renderTransition(transition2, runTransition, {
      unmountOnExit: true,
      mountOnEnter: true,
      appear: true,
      in: !!show,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered,
      children: dialog
    });
    let backdropElement = null;
    if (backdrop) {
      backdropElement = renderBackdrop({
        ref: modal.setBackdropRef,
        onClick: handleBackdropClick
      });
      backdropElement = renderTransition(backdropTransition, runBackdropTransition, {
        in: !!show,
        appear: true,
        mountOnEnter: true,
        unmountOnExit: true,
        children: backdropElement
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(import_jsx_runtime46.Fragment, {
      children: /* @__PURE__ */ import_react_dom4.default.createPortal(/* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, {
        children: [backdropElement, dialog]
      }), container)
    });
  });
  Modal.displayName = "Modal";
  var Modal_default = Object.assign(Modal, {
    Manager: ModalManager_default
  });

  // node_modules/dom-helpers/esm/hasClass.js
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  // node_modules/dom-helpers/esm/addClass.js
  function addClass(element, className) {
    if (element.classList)
      element.classList.add(className);
    else if (!hasClass(element, className))
      if (typeof element.className === "string")
        element.className = element.className + " " + className;
      else
        element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
  }

  // node_modules/dom-helpers/esm/removeClass.js
  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
  }
  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === "string") {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
    }
  }

  // node_modules/react-bootstrap/esm/BootstrapModalManager.js
  var Selector = {
    FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
    STICKY_CONTENT: ".sticky-top",
    NAVBAR_TOGGLER: ".navbar-toggler"
  };
  var BootstrapModalManager = class extends ModalManager_default {
    adjustAndStore(prop, element, adjust) {
      const actual = element.style[prop];
      element.dataset[prop] = actual;
      css_default(element, {
        [prop]: `${parseFloat(css_default(element, prop)) + adjust}px`
      });
    }
    restore(prop, element) {
      const value = element.dataset[prop];
      if (value !== void 0) {
        delete element.dataset[prop];
        css_default(element, {
          [prop]: value
        });
      }
    }
    setContainerStyle(containerState) {
      super.setContainerStyle(containerState);
      const container = this.getElement();
      addClass(container, "modal-open");
      if (!containerState.scrollBarWidth)
        return;
      const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
      const marginProp = this.isRTL ? "marginLeft" : "marginRight";
      qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));
      qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));
      qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));
    }
    removeContainerStyle(containerState) {
      super.removeContainerStyle(containerState);
      const container = this.getElement();
      removeClass(container, "modal-open");
      const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
      const marginProp = this.isRTL ? "marginLeft" : "marginRight";
      qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.restore(paddingProp, el));
      qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.restore(marginProp, el));
      qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.restore(marginProp, el));
    }
  };
  var sharedManager;
  function getSharedManager(options) {
    if (!sharedManager)
      sharedManager = new BootstrapModalManager(options);
    return sharedManager;
  }
  var BootstrapModalManager_default = BootstrapModalManager;

  // node_modules/react-bootstrap/esm/ModalContext.js
  var React57 = __toESM(require_react());
  "use client";
  var ModalContext = /* @__PURE__ */ React57.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onHide() {
    }
  });
  var ModalContext_default = ModalContext;

  // node_modules/react-bootstrap/esm/AbstractModalHeader.js
  var React58 = __toESM(require_react());
  var import_react61 = __toESM(require_react());
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  "use client";
  var AbstractModalHeader = /* @__PURE__ */ React58.forwardRef(({
    closeLabel = "Close",
    closeVariant,
    closeButton = false,
    onHide,
    children: children2,
    ...props
  }, ref2) => {
    const context4 = (0, import_react61.useContext)(ModalContext_default);
    const handleClick = useEventCallback(() => {
      context4 == null || context4.onHide();
      onHide == null || onHide();
    });
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", {
      ref: ref2,
      ...props,
      children: [children2, closeButton && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CloseButton_default, {
        "aria-label": closeLabel,
        variant: closeVariant,
        onClick: handleClick
      })]
    });
  });
  var AbstractModalHeader_default = AbstractModalHeader;

  // node_modules/react-bootstrap/esm/Nav.js
  var import_classnames30 = __toESM(require_classnames());
  var React61 = __toESM(require_react());
  var import_react62 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/NavItem.js
  var React59 = __toESM(require_react());
  var import_classnames28 = __toESM(require_classnames());
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  "use client";
  var NavItem2 = /* @__PURE__ */ React59.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "div",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "nav-item");
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames28.default)(className, bsPrefix),
      ...props
    });
  });
  NavItem2.displayName = "NavItem";
  var NavItem_default2 = NavItem2;

  // node_modules/react-bootstrap/esm/NavLink.js
  var import_classnames29 = __toESM(require_classnames());
  var React60 = __toESM(require_react());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  "use client";
  var NavLink = /* @__PURE__ */ React60.forwardRef(({
    bsPrefix,
    className,
    as: Component2 = Anchor_default,
    active,
    eventKey,
    disabled = false,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "nav-link");
    const [navItemProps, meta] = useNavItem({
      key: makeEventKey(eventKey, props.href),
      active,
      disabled,
      ...props
    });
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Component2, {
      ...props,
      ...navItemProps,
      ref: ref2,
      disabled,
      className: (0, import_classnames29.default)(className, bsPrefix, disabled && "disabled", meta.isActive && "active")
    });
  });
  NavLink.displayName = "NavLink";
  var NavLink_default = NavLink;

  // node_modules/react-bootstrap/esm/Nav.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  "use client";
  var Nav2 = /* @__PURE__ */ React61.forwardRef((uncontrolledProps, ref2) => {
    const {
      as = "div",
      bsPrefix: initialBsPrefix,
      variant,
      fill = false,
      justify = false,
      navbar,
      navbarScroll,
      className,
      activeKey,
      ...props
    } = useUncontrolled(uncontrolledProps, {
      activeKey: "onSelect"
    });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, "nav");
    let navbarBsPrefix;
    let cardHeaderBsPrefix;
    let isNavbar = false;
    const navbarContext = (0, import_react62.useContext)(NavbarContext_default);
    const cardHeaderContext = (0, import_react62.useContext)(CardHeaderContext_default);
    if (navbarContext) {
      navbarBsPrefix = navbarContext.bsPrefix;
      isNavbar = navbar == null ? true : navbar;
    } else if (cardHeaderContext) {
      ({
        cardHeaderBsPrefix
      } = cardHeaderContext);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Nav_default, {
      as,
      ref: ref2,
      activeKey,
      className: (0, import_classnames30.default)(className, {
        [bsPrefix]: !isNavbar,
        [`${navbarBsPrefix}-nav`]: isNavbar,
        [`${navbarBsPrefix}-nav-scroll`]: isNavbar && navbarScroll,
        [`${cardHeaderBsPrefix}-${variant}`]: !!cardHeaderBsPrefix,
        [`${bsPrefix}-${variant}`]: !!variant,
        [`${bsPrefix}-fill`]: fill,
        [`${bsPrefix}-justified`]: justify
      }),
      ...props
    });
  });
  Nav2.displayName = "Nav";
  var Nav_default2 = Object.assign(Nav2, {
    Item: NavItem_default2,
    Link: NavLink_default
  });

  // node_modules/react-bootstrap/esm/Navbar.js
  var import_classnames39 = __toESM(require_classnames());
  var React72 = __toESM(require_react());
  var import_react69 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/NavbarBrand.js
  var import_classnames31 = __toESM(require_classnames());
  var React62 = __toESM(require_react());
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  "use client";
  var NavbarBrand = /* @__PURE__ */ React62.forwardRef(({
    bsPrefix,
    className,
    as,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-brand");
    const Component2 = as || (props.href ? "a" : "span");
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Component2, {
      ...props,
      ref: ref2,
      className: (0, import_classnames31.default)(className, bsPrefix)
    });
  });
  NavbarBrand.displayName = "NavbarBrand";
  var NavbarBrand_default = NavbarBrand;

  // node_modules/react-bootstrap/esm/NavbarCollapse.js
  var React63 = __toESM(require_react());
  var import_react63 = __toESM(require_react());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  "use client";
  var NavbarCollapse = /* @__PURE__ */ React63.forwardRef(({
    children: children2,
    bsPrefix,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-collapse");
    const context4 = (0, import_react63.useContext)(NavbarContext_default);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Collapse_default, {
      in: !!(context4 && context4.expanded),
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", {
        ref: ref2,
        className: bsPrefix,
        children: children2
      })
    });
  });
  NavbarCollapse.displayName = "NavbarCollapse";
  var NavbarCollapse_default = NavbarCollapse;

  // node_modules/react-bootstrap/esm/NavbarToggle.js
  var import_classnames32 = __toESM(require_classnames());
  var React64 = __toESM(require_react());
  var import_react64 = __toESM(require_react());
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  "use client";
  var NavbarToggle = /* @__PURE__ */ React64.forwardRef(({
    bsPrefix,
    className,
    children: children2,
    label = "Toggle navigation",
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "button",
    onClick,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-toggler");
    const {
      onToggle,
      expanded
    } = (0, import_react64.useContext)(NavbarContext_default) || {};
    const handleClick = useEventCallback((e) => {
      if (onClick)
        onClick(e);
      if (onToggle)
        onToggle();
    });
    if (Component2 === "button") {
      props.type = "button";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Component2, {
      ...props,
      ref: ref2,
      onClick: handleClick,
      "aria-label": label,
      className: (0, import_classnames32.default)(className, bsPrefix, !expanded && "collapsed"),
      children: children2 || /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", {
        className: `${bsPrefix}-icon`
      })
    });
  });
  NavbarToggle.displayName = "NavbarToggle";
  var NavbarToggle_default = NavbarToggle;

  // node_modules/react-bootstrap/esm/NavbarOffcanvas.js
  var React70 = __toESM(require_react());
  var import_react68 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/Offcanvas.js
  var import_classnames37 = __toESM(require_classnames());

  // node_modules/@restart/hooks/esm/useMediaQuery.js
  var import_react65 = __toESM(require_react());
  var matchersByWindow = /* @__PURE__ */ new WeakMap();
  var getMatcher = (query, targetWindow) => {
    if (!query || !targetWindow)
      return void 0;
    const matchers = matchersByWindow.get(targetWindow) || /* @__PURE__ */ new Map();
    matchersByWindow.set(targetWindow, matchers);
    let mql = matchers.get(query);
    if (!mql) {
      mql = targetWindow.matchMedia(query);
      mql.refCount = 0;
      matchers.set(mql.media, mql);
    }
    return mql;
  };
  function useMediaQuery(query, targetWindow = typeof window === "undefined" ? void 0 : window) {
    const mql = getMatcher(query, targetWindow);
    const [matches, setMatches] = (0, import_react65.useState)(() => mql ? mql.matches : false);
    useIsomorphicEffect_default2(() => {
      let mql2 = getMatcher(query, targetWindow);
      if (!mql2) {
        return setMatches(false);
      }
      let matchers = matchersByWindow.get(targetWindow);
      const handleChange = () => {
        setMatches(mql2.matches);
      };
      mql2.refCount++;
      mql2.addListener(handleChange);
      handleChange();
      return () => {
        mql2.removeListener(handleChange);
        mql2.refCount--;
        if (mql2.refCount <= 0) {
          matchers == null ? void 0 : matchers.delete(mql2.media);
        }
        mql2 = void 0;
      };
    }, [query]);
    return matches;
  }

  // node_modules/@restart/hooks/esm/useBreakpoint.js
  var import_react66 = __toESM(require_react());
  function createBreakpointHook(breakpointValues) {
    const names = Object.keys(breakpointValues);
    function and(query, next) {
      if (query === next) {
        return next;
      }
      return query ? `${query} and ${next}` : next;
    }
    function getNext(breakpoint) {
      return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];
    }
    function getMaxQuery(breakpoint) {
      const next = getNext(breakpoint);
      let value = breakpointValues[next];
      if (typeof value === "number")
        value = `${value - 0.2}px`;
      else
        value = `calc(${value} - 0.2px)`;
      return `(max-width: ${value})`;
    }
    function getMinQuery(breakpoint) {
      let value = breakpointValues[breakpoint];
      if (typeof value === "number") {
        value = `${value}px`;
      }
      return `(min-width: ${value})`;
    }
    function useBreakpoint2(breakpointOrMap, direction, window2) {
      let breakpointMap;
      if (typeof breakpointOrMap === "object") {
        breakpointMap = breakpointOrMap;
        window2 = direction;
        direction = true;
      } else {
        direction = direction || true;
        breakpointMap = {
          [breakpointOrMap]: direction
        };
      }
      let query = (0, import_react66.useMemo)(() => Object.entries(breakpointMap).reduce((query2, [key, direction2]) => {
        if (direction2 === "up" || direction2 === true) {
          query2 = and(query2, getMinQuery(key));
        }
        if (direction2 === "down" || direction2 === true) {
          query2 = and(query2, getMaxQuery(key));
        }
        return query2;
      }, ""), [JSON.stringify(breakpointMap)]);
      return useMediaQuery(query, window2);
    }
    return useBreakpoint2;
  }
  var useBreakpoint = createBreakpointHook({
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200,
    xxl: 1400
  });
  var useBreakpoint_default = useBreakpoint;

  // node_modules/react-bootstrap/esm/Offcanvas.js
  var React69 = __toESM(require_react());
  var import_react67 = __toESM(require_react());

  // node_modules/react-bootstrap/esm/OffcanvasBody.js
  var React65 = __toESM(require_react());
  var import_classnames33 = __toESM(require_classnames());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  "use client";
  var OffcanvasBody = /* @__PURE__ */ React65.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "div",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas-body");
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames33.default)(className, bsPrefix),
      ...props
    });
  });
  OffcanvasBody.displayName = "OffcanvasBody";
  var OffcanvasBody_default = OffcanvasBody;

  // node_modules/react-bootstrap/esm/OffcanvasToggling.js
  var import_classnames34 = __toESM(require_classnames());
  var React66 = __toESM(require_react());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  "use client";
  var transitionStyles = {
    [ENTERING]: "show",
    [ENTERED]: "show"
  };
  var OffcanvasToggling = /* @__PURE__ */ React66.forwardRef(({
    bsPrefix,
    className,
    children: children2,
    in: inProp = false,
    mountOnEnter = false,
    unmountOnExit = false,
    appear = false,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(TransitionWrapper_default, {
      ref: ref2,
      addEndListener: transitionEndListener,
      in: inProp,
      mountOnEnter,
      unmountOnExit,
      appear,
      ...props,
      childRef: getChildRef(children2),
      children: (status, innerProps) => /* @__PURE__ */ React66.cloneElement(children2, {
        ...innerProps,
        className: (0, import_classnames34.default)(className, children2.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])
      })
    });
  });
  OffcanvasToggling.displayName = "OffcanvasToggling";
  var OffcanvasToggling_default = OffcanvasToggling;

  // node_modules/react-bootstrap/esm/OffcanvasHeader.js
  var import_classnames35 = __toESM(require_classnames());
  var React67 = __toESM(require_react());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  "use client";
  var OffcanvasHeader = /* @__PURE__ */ React67.forwardRef(({
    bsPrefix,
    className,
    closeLabel = "Close",
    closeButton = false,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas-header");
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(AbstractModalHeader_default, {
      ref: ref2,
      ...props,
      className: (0, import_classnames35.default)(className, bsPrefix),
      closeLabel,
      closeButton
    });
  });
  OffcanvasHeader.displayName = "OffcanvasHeader";
  var OffcanvasHeader_default = OffcanvasHeader;

  // node_modules/react-bootstrap/esm/OffcanvasTitle.js
  var React68 = __toESM(require_react());
  var import_classnames36 = __toESM(require_classnames());
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  "use client";
  var DivStyledAsH5 = divWithClassName_default("h5");
  var OffcanvasTitle = /* @__PURE__ */ React68.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = DivStyledAsH5,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas-title");
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames36.default)(className, bsPrefix),
      ...props
    });
  });
  OffcanvasTitle.displayName = "OffcanvasTitle";
  var OffcanvasTitle_default = OffcanvasTitle;

  // node_modules/react-bootstrap/esm/Offcanvas.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  "use client";
  function DialogTransition(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(OffcanvasToggling_default, {
      ...props
    });
  }
  function BackdropTransition(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Fade_default, {
      ...props
    });
  }
  var Offcanvas = /* @__PURE__ */ React69.forwardRef(({
    bsPrefix,
    className,
    children: children2,
    "aria-labelledby": ariaLabelledby,
    placement = "start",
    responsive,
    /* BaseModal props */
    show = false,
    backdrop = true,
    keyboard = true,
    scroll: scroll2 = false,
    onEscapeKeyDown,
    onShow,
    onHide,
    container,
    autoFocus = true,
    enforceFocus = true,
    restoreFocus = true,
    restoreFocusOptions,
    onEntered,
    onExit,
    onExiting,
    onEnter,
    onEntering,
    onExited,
    backdropClassName,
    manager: propsManager,
    renderStaticNode = false,
    ...props
  }, ref2) => {
    const modalManager = (0, import_react67.useRef)();
    bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
    const [showOffcanvas, setShowOffcanvas] = (0, import_react67.useState)(false);
    const handleHide = useEventCallback(onHide);
    const hideResponsiveOffcanvas = useBreakpoint_default(responsive || "xs", "up");
    (0, import_react67.useEffect)(() => {
      setShowOffcanvas(responsive ? show && !hideResponsiveOffcanvas : show);
    }, [show, responsive, hideResponsiveOffcanvas]);
    const modalContext = (0, import_react67.useMemo)(() => ({
      onHide: handleHide
    }), [handleHide]);
    function getModalManager() {
      if (propsManager)
        return propsManager;
      if (scroll2) {
        if (!modalManager.current)
          modalManager.current = new BootstrapModalManager_default({
            handleContainerOverflow: false
          });
        return modalManager.current;
      }
      return getSharedManager();
    }
    const handleEnter = (node, ...args) => {
      if (node)
        node.style.visibility = "visible";
      onEnter == null || onEnter(node, ...args);
    };
    const handleExited = (node, ...args) => {
      if (node)
        node.style.visibility = "";
      onExited == null || onExited(...args);
    };
    const renderBackdrop = (0, import_react67.useCallback)((backdropProps) => /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", {
      ...backdropProps,
      className: (0, import_classnames37.default)(`${bsPrefix}-backdrop`, backdropClassName)
    }), [backdropClassName, bsPrefix]);
    const renderDialog = (dialogProps) => /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", {
      ...dialogProps,
      ...props,
      className: (0, import_classnames37.default)(className, responsive ? `${bsPrefix}-${responsive}` : bsPrefix, `${bsPrefix}-${placement}`),
      "aria-labelledby": ariaLabelledby,
      children: children2
    });
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(import_jsx_runtime60.Fragment, {
      children: [!showOffcanvas && (responsive || renderStaticNode) && renderDialog({}), /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ModalContext_default.Provider, {
        value: modalContext,
        children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Modal_default, {
          show: showOffcanvas,
          ref: ref2,
          backdrop,
          container,
          keyboard,
          autoFocus,
          enforceFocus: enforceFocus && !scroll2,
          restoreFocus,
          restoreFocusOptions,
          onEscapeKeyDown,
          onShow,
          onHide: handleHide,
          onEnter: handleEnter,
          onEntering,
          onEntered,
          onExit,
          onExiting,
          onExited: handleExited,
          manager: getModalManager(),
          transition: DialogTransition,
          backdropTransition: BackdropTransition,
          renderBackdrop,
          renderDialog
        })
      })]
    });
  });
  Offcanvas.displayName = "Offcanvas";
  var Offcanvas_default = Object.assign(Offcanvas, {
    Body: OffcanvasBody_default,
    Header: OffcanvasHeader_default,
    Title: OffcanvasTitle_default
  });

  // node_modules/react-bootstrap/esm/NavbarOffcanvas.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  "use client";
  var NavbarOffcanvas = /* @__PURE__ */ React70.forwardRef(({
    onHide,
    ...props
  }, ref2) => {
    const context4 = (0, import_react68.useContext)(NavbarContext_default);
    const handleHide = useEventCallback(() => {
      context4 == null || context4.onToggle == null || context4.onToggle();
      onHide == null || onHide();
    });
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Offcanvas_default, {
      ref: ref2,
      show: !!(context4 != null && context4.expanded),
      ...props,
      renderStaticNode: true,
      onHide: handleHide
    });
  });
  NavbarOffcanvas.displayName = "NavbarOffcanvas";
  var NavbarOffcanvas_default = NavbarOffcanvas;

  // node_modules/react-bootstrap/esm/NavbarText.js
  var React71 = __toESM(require_react());
  var import_classnames38 = __toESM(require_classnames());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  "use client";
  var NavbarText = /* @__PURE__ */ React71.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "span",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-text");
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames38.default)(className, bsPrefix),
      ...props
    });
  });
  NavbarText.displayName = "NavbarText";
  var NavbarText_default = NavbarText;

  // node_modules/react-bootstrap/esm/Navbar.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  "use client";
  var Navbar = /* @__PURE__ */ React72.forwardRef((props, ref2) => {
    const {
      bsPrefix: initialBsPrefix,
      expand: expand3 = true,
      variant = "light",
      bg,
      fixed,
      sticky,
      className,
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component2 = "nav",
      expanded,
      onToggle,
      onSelect,
      collapseOnSelect = false,
      ...controlledProps
    } = useUncontrolled(props, {
      expanded: "onToggle"
    });
    const bsPrefix = useBootstrapPrefix(initialBsPrefix, "navbar");
    const handleCollapse = (0, import_react69.useCallback)((...args) => {
      onSelect == null || onSelect(...args);
      if (collapseOnSelect && expanded) {
        onToggle == null || onToggle(false);
      }
    }, [onSelect, collapseOnSelect, expanded, onToggle]);
    if (controlledProps.role === void 0 && Component2 !== "nav") {
      controlledProps.role = "navigation";
    }
    let expandClass = `${bsPrefix}-expand`;
    if (typeof expand3 === "string")
      expandClass = `${expandClass}-${expand3}`;
    const navbarContext = (0, import_react69.useMemo)(() => ({
      onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),
      bsPrefix,
      expanded: !!expanded,
      expand: expand3
    }), [bsPrefix, expanded, expand3, onToggle]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(NavbarContext_default.Provider, {
      value: navbarContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(SelectableContext_default.Provider, {
        value: handleCollapse,
        children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Component2, {
          ref: ref2,
          ...controlledProps,
          className: (0, import_classnames39.default)(className, bsPrefix, expand3 && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)
        })
      })
    });
  });
  Navbar.displayName = "Navbar";
  var Navbar_default = Object.assign(Navbar, {
    Brand: NavbarBrand_default,
    Collapse: NavbarCollapse_default,
    Offcanvas: NavbarOffcanvas_default,
    Text: NavbarText_default,
    Toggle: NavbarToggle_default
  });

  // node_modules/react-bootstrap/esm/NavDropdown.js
  var import_classnames40 = __toESM(require_classnames());
  var React73 = __toESM(require_react());
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  "use client";
  var NavDropdown = /* @__PURE__ */ React73.forwardRef(({
    id: id2,
    title,
    children: children2,
    bsPrefix,
    className,
    rootCloseEvent,
    menuRole,
    disabled,
    active,
    renderMenuOnMount,
    menuVariant,
    ...props
  }, ref2) => {
    const navItemPrefix = useBootstrapPrefix(void 0, "nav-item");
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Dropdown_default2, {
      ref: ref2,
      ...props,
      className: (0, import_classnames40.default)(className, navItemPrefix),
      children: [/* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Dropdown_default2.Toggle, {
        id: id2,
        eventKey: null,
        active,
        disabled,
        childBsPrefix: bsPrefix,
        as: NavLink_default,
        children: title
      }), /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Dropdown_default2.Menu, {
        role: menuRole,
        renderOnMount: renderMenuOnMount,
        rootCloseEvent,
        variant: menuVariant,
        children: children2
      })]
    });
  });
  NavDropdown.displayName = "NavDropdown";
  var NavDropdown_default = Object.assign(NavDropdown, {
    Item: Dropdown_default2.Item,
    ItemText: Dropdown_default2.ItemText,
    Divider: Dropdown_default2.Divider,
    Header: Dropdown_default2.Header
  });

  // node_modules/react-bootstrap/esm/Row.js
  var import_classnames41 = __toESM(require_classnames());
  var React74 = __toESM(require_react());
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  "use client";
  var Row = /* @__PURE__ */ React74.forwardRef(({
    bsPrefix,
    className,
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component2 = "div",
    ...props
  }, ref2) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "row");
    const breakpoints = useBootstrapBreakpoints();
    const minBreakpoint = useBootstrapMinBreakpoint();
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    breakpoints.forEach((brkPoint) => {
      const propValue = props[brkPoint];
      delete props[brkPoint];
      let cols;
      if (propValue != null && typeof propValue === "object") {
        ({
          cols
        } = propValue);
      } else {
        cols = propValue;
      }
      const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : "";
      if (cols != null)
        classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Component2, {
      ref: ref2,
      ...props,
      className: (0, import_classnames41.default)(className, decoratedBsPrefix, ...classes)
    });
  });
  Row.displayName = "Row";
  var Row_default = Row;

  // node_modules/react-bootstrap/esm/Tab.js
  var import_prop_types6 = __toESM(require_prop_types());

  // node_modules/react-bootstrap/esm/TabContainer.js
  var React77 = __toESM(require_react());

  // node_modules/@restart/ui/esm/Tabs.js
  var React76 = __toESM(require_react());
  var import_react71 = __toESM(require_react());

  // node_modules/@restart/ui/esm/TabPanel.js
  var React75 = __toESM(require_react());
  var import_react70 = __toESM(require_react());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var _excluded11 = ["active", "eventKey", "mountOnEnter", "transition", "unmountOnExit", "role", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"];
  var _excluded22 = ["activeKey", "getControlledId", "getControllerId"];
  var _excluded32 = ["as"];
  function _objectWithoutPropertiesLoose12(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.indexOf(n) >= 0)
          continue;
        t[n] = r[n];
      }
    return t;
  }
  function useTabPanel(_ref) {
    let {
      active,
      eventKey,
      mountOnEnter,
      transition: transition2,
      unmountOnExit,
      role = "tabpanel",
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    } = _ref, props = _objectWithoutPropertiesLoose12(_ref, _excluded11);
    const context4 = (0, import_react70.useContext)(TabContext_default);
    if (!context4)
      return [Object.assign({}, props, {
        role
      }), {
        eventKey,
        isActive: active,
        mountOnEnter,
        transition: transition2,
        unmountOnExit,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited
      }];
    const {
      activeKey,
      getControlledId,
      getControllerId
    } = context4, rest = _objectWithoutPropertiesLoose12(context4, _excluded22);
    const key = makeEventKey(eventKey);
    return [Object.assign({}, props, {
      role,
      id: getControlledId(eventKey),
      "aria-labelledby": getControllerId(eventKey)
    }), {
      eventKey,
      isActive: active == null && key != null ? makeEventKey(activeKey) === key : active,
      transition: transition2 || rest.transition,
      mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,
      unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    }];
  }
  var TabPanel = /* @__PURE__ */ React75.forwardRef(
    // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    (_ref2, ref2) => {
      let {
        as: Component2 = "div"
      } = _ref2, props = _objectWithoutPropertiesLoose12(_ref2, _excluded32);
      const [tabPanelProps, {
        isActive: isActive2,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited,
        mountOnEnter,
        unmountOnExit,
        transition: Transition3 = NoopTransition_default
      }] = useTabPanel(props);
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(TabContext_default.Provider, {
        value: null,
        children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(SelectableContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Transition3, {
            in: isActive2,
            onEnter,
            onEntering,
            onEntered,
            onExit,
            onExiting,
            onExited,
            mountOnEnter,
            unmountOnExit,
            children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(Component2, Object.assign({}, tabPanelProps, {
              ref: ref2,
              hidden: !isActive2,
              "aria-hidden": !isActive2
            }))
          })
        })
      });
    }
  );
  TabPanel.displayName = "TabPanel";
  var TabPanel_default = TabPanel;

  // node_modules/@restart/ui/esm/Tabs.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var Tabs = (props) => {
    const {
      id: userId,
      generateChildId: generateCustomChildId,
      onSelect: propsOnSelect,
      activeKey: propsActiveKey,
      defaultActiveKey,
      transition: transition2,
      mountOnEnter,
      unmountOnExit,
      children: children2
    } = props;
    const [activeKey, onSelect] = useUncontrolledProp2(propsActiveKey, defaultActiveKey, propsOnSelect);
    const id2 = $b5e257d569688ac6$export$619500959fc48b26(userId);
    const generateChildId = (0, import_react71.useMemo)(() => generateCustomChildId || ((key, type) => id2 ? `${id2}-${type}-${key}` : null), [id2, generateCustomChildId]);
    const tabContext = (0, import_react71.useMemo)(() => ({
      onSelect,
      activeKey,
      transition: transition2,
      mountOnEnter: mountOnEnter || false,
      unmountOnExit: unmountOnExit || false,
      getControlledId: (key) => generateChildId(key, "tabpane"),
      getControllerId: (key) => generateChildId(key, "tab")
    }), [onSelect, activeKey, transition2, mountOnEnter, unmountOnExit, generateChildId]);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TabContext_default.Provider, {
      value: tabContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(SelectableContext_default.Provider, {
        value: onSelect || null,
        children: children2
      })
    });
  };
  Tabs.Panel = TabPanel_default;
  var Tabs_default = Tabs;

  // node_modules/react-bootstrap/esm/getTabTransitionComponent.js
  function getTabTransitionComponent(transition2) {
    if (typeof transition2 === "boolean") {
      return transition2 ? Fade_default : NoopTransition_default;
    }
    return transition2;
  }

  // node_modules/react-bootstrap/esm/TabContainer.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var TabContainer = ({
    transition: transition2,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Tabs_default, {
    ...props,
    transition: getTabTransitionComponent(transition2)
  });
  TabContainer.displayName = "TabContainer";
  var TabContainer_default = TabContainer;

  // node_modules/react-bootstrap/esm/TabContent.js
  var React78 = __toESM(require_react());
  var import_classnames42 = __toESM(require_classnames());
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  "use client";
  var TabContent = /* @__PURE__ */ React78.forwardRef(({
    className,
    bsPrefix,
    as: Component2 = "div",
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "tab-content");
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(Component2, {
      ref: ref2,
      className: (0, import_classnames42.default)(className, bsPrefix),
      ...props
    });
  });
  TabContent.displayName = "TabContent";
  var TabContent_default = TabContent;

  // node_modules/react-bootstrap/esm/TabPane.js
  var import_classnames43 = __toESM(require_classnames());
  var React79 = __toESM(require_react());
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  "use client";
  var TabPane = /* @__PURE__ */ React79.forwardRef(({
    bsPrefix,
    transition: transition2,
    ...props
  }, ref2) => {
    const [{
      className,
      // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
      as: Component2 = "div",
      ...rest
    }, {
      isActive: isActive2,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited,
      mountOnEnter,
      unmountOnExit,
      transition: Transition3 = Fade_default
    }] = useTabPanel({
      ...props,
      transition: getTabTransitionComponent(transition2)
    });
    const prefix3 = useBootstrapPrefix(bsPrefix, "tab-pane");
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TabContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(SelectableContext_default.Provider, {
        value: null,
        children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Transition3, {
          in: isActive2,
          onEnter,
          onEntering,
          onEntered,
          onExit,
          onExiting,
          onExited,
          mountOnEnter,
          unmountOnExit,
          children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(Component2, {
            ...rest,
            ref: ref2,
            className: (0, import_classnames43.default)(className, prefix3, isActive2 && "active")
          })
        })
      })
    });
  });
  TabPane.displayName = "TabPane";
  var TabPane_default = TabPane;

  // node_modules/react-bootstrap/esm/Tab.js
  var propTypes4 = {
    eventKey: import_prop_types6.default.oneOfType([import_prop_types6.default.string, import_prop_types6.default.number]),
    /**
     * Content for the tab title.
     */
    title: import_prop_types6.default.node.isRequired,
    /**
     * The disabled state of the tab.
     */
    disabled: import_prop_types6.default.bool,
    /**
     * Class to pass to the underlying nav link.
     */
    tabClassName: import_prop_types6.default.string,
    /**
     * Object containing attributes to pass to underlying nav link.
     */
    tabAttrs: import_prop_types6.default.object
  };
  var Tab = () => {
    throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly");
  };
  Tab.propTypes = propTypes4;
  var Tab_default = Object.assign(Tab, {
    Container: TabContainer_default,
    Content: TabContent_default,
    Pane: TabPane_default
  });

  // node_modules/react-bootstrap/esm/Table.js
  var import_classnames44 = __toESM(require_classnames());
  var React80 = __toESM(require_react());
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  "use client";
  var Table = /* @__PURE__ */ React80.forwardRef(({
    bsPrefix,
    className,
    striped,
    bordered,
    borderless,
    hover,
    size,
    variant,
    responsive,
    ...props
  }, ref2) => {
    const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "table");
    const classes = (0, import_classnames44.default)(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === "string" ? `striped-${striped}` : "striped"}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);
    const table = /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("table", {
      ...props,
      className: classes,
      ref: ref2
    });
    if (responsive) {
      let responsiveClass = `${decoratedBsPrefix}-responsive`;
      if (typeof responsive === "string") {
        responsiveClass = `${responsiveClass}-${responsive}`;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("div", {
        className: responsiveClass,
        children: table
      });
    }
    return table;
  });
  var Table_default = Table;

  // node_modules/react-bootstrap/esm/Tabs.js
  var React81 = __toESM(require_react());
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  function getDefaultActiveKey(children2) {
    let defaultActiveKey;
    forEach(children2, (child) => {
      if (defaultActiveKey == null) {
        defaultActiveKey = child.props.eventKey;
      }
    });
    return defaultActiveKey;
  }
  function renderTab(child) {
    const {
      title,
      eventKey,
      disabled,
      tabClassName,
      tabAttrs,
      id: id2
    } = child.props;
    if (title == null) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(NavItem_default2, {
      as: "li",
      role: "presentation",
      children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(NavLink_default, {
        as: "button",
        type: "button",
        eventKey,
        disabled,
        id: id2,
        className: tabClassName,
        ...tabAttrs,
        children: title
      })
    });
  }
  var Tabs2 = (props) => {
    const {
      id: id2,
      onSelect,
      transition: transition2,
      mountOnEnter = false,
      unmountOnExit = false,
      variant = "tabs",
      children: children2,
      activeKey = getDefaultActiveKey(children2),
      ...controlledProps
    } = useUncontrolled(props, {
      activeKey: "onSelect"
    });
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(Tabs_default, {
      id: id2,
      activeKey,
      onSelect,
      transition: getTabTransitionComponent(transition2),
      mountOnEnter,
      unmountOnExit,
      children: [/* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Nav_default2, {
        id: id2,
        ...controlledProps,
        role: "tablist",
        as: "ul",
        variant,
        children: map(children2, renderTab)
      }), /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TabContent_default, {
        children: map(children2, (child) => {
          const childProps = {
            ...child.props
          };
          delete childProps.title;
          delete childProps.disabled;
          delete childProps.tabClassName;
          delete childProps.tabAttrs;
          return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TabPane_default, {
            ...childProps
          });
        })
      })]
    });
  };
  Tabs2.displayName = "Tabs";
  var Tabs_default2 = Tabs2;

  // node_modules/react-bootstrap/esm/ToggleButton.js
  var import_classnames45 = __toESM(require_classnames());
  var React82 = __toESM(require_react());
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  "use client";
  var noop7 = () => void 0;
  var ToggleButton = /* @__PURE__ */ React82.forwardRef(({
    bsPrefix,
    name,
    className,
    checked,
    type,
    onChange,
    value,
    disabled,
    id: id2,
    inputRef,
    ...props
  }, ref2) => {
    bsPrefix = useBootstrapPrefix(bsPrefix, "btn-check");
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(import_jsx_runtime77.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime76.jsx)("input", {
        className: bsPrefix,
        name,
        type,
        value,
        ref: inputRef,
        autoComplete: "off",
        checked: !!checked,
        disabled: !!disabled,
        onChange: onChange || noop7,
        id: id2
      }), /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Button_default2, {
        ...props,
        ref: ref2,
        className: (0, import_classnames45.default)(className, disabled && "disabled"),
        type: void 0,
        role: void 0,
        as: "label",
        htmlFor: id2
      })]
    });
  });
  ToggleButton.displayName = "ToggleButton";
  var ToggleButton_default = ToggleButton;

  // src/TaskManFrontEnd.tsx
  var import_react83 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // node_modules/react-router-dom/dist/index.js
  var React84 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());

  // node_modules/react-router/dist/index.js
  var React83 = __toESM(require_react());

  // node_modules/@remix-run/router/dist/router.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search,
        hash: hash3
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search,
          hash: hash3
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant4(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning5(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location, index2) {
    return {
      usr: location.state,
      key: location.key,
      idx: index2
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location = _extends2({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search = "",
      hash: hash3 = ""
    } = _ref;
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash3 && hash3 !== "#")
      pathname += hash3.charAt(0) === "#" ? hash3 : "#" + hash3;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends2({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error2) {
        if (error2 instanceof DOMException && error2.name === "DataCloneError") {
          throw error2;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location, to);
      index2 = getIndex();
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      href = href.replace(/ $/, "%20");
      invariant4(base, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn2) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn2;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i = 0; matches == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(branches[i], decoded, allowPartial);
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match, loaderData) {
    let {
      route,
      pathname,
      params
    } = match;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant4(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant4(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required2 = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required2, ""] : [required2];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required2 : [required2, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index2) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial) {
    if (allowPartial === void 0) {
      allowPartial = false;
    }
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end3 = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: end3
      }, remainingPathname);
      let route = meta.route;
      if (!match && end3 && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        }, remainingPathname);
      }
      if (!match) {
        return null;
      }
      Object.assign(matchedParams, match.params);
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match)
      return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce((memo4, _ref, index2) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index2];
      if (isOptional && !value) {
        memo4[paramName] = void 0;
      } else {
        memo4[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo4;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end3) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end3 === void 0) {
      end3 = true;
    }
    warning5(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
      params.push({
        paramName,
        isOptional: isOptional != null
      });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
      params.push({
        paramName: "*"
      });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end3) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error2) {
      warning5(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash: hash3 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash3)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
  }
  function getResolveToMatches(matches, v7_relativeSplatPath) {
    let pathMatches = getPathContributingMatches(matches);
    if (v7_relativeSplatPath) {
      return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
    }
    return pathMatches.map((match) => match.pathnameBase);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends2({}, toArg);
      invariant4(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant4(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant4(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash3) => !hash3 || hash3 === "#" ? "" : hash3.startsWith("#") ? hash3 : "#" + hash3;
  function isRouteErrorResponse(error2) {
    return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // node_modules/react-router/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React83.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React83.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant4(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant4(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React83.useContext(NavigationContext);
    let {
      hash: hash3,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash: hash3
    });
  }
  function useInRouterContext() {
    return React83.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant4(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant4(false) : void 0;
    return React83.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect2(cb) {
    let isStatic = React83.useContext(NavigationContext).static;
    if (!isStatic) {
      React83.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React83.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant4(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant4(false) : void 0;
    let dataRouterContext = React83.useContext(DataRouterContext);
    let {
      basename,
      future,
      navigator: navigator2
    } = React83.useContext(NavigationContext);
    let {
      matches
    } = React83.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    let activeRef = React83.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React83.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning5(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      future
    } = React83.useContext(NavigationContext);
    let {
      matches
    } = React83.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    return React83.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    !useInRouterContext() ? true ? invariant4(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant4(false) : void 0;
    let {
      navigator: navigator2,
      static: isStatic
    } = React83.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React83.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant4(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant4(false) : void 0;
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning5(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
      true ? warning5(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
      params: Object.assign({}, parentParams, match.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
      ]),
      pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
      ])
    })), parentMatches, dataRouterState, future);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React83.createElement(LocationContext.Provider, {
        value: {
          location: _extends3({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error2 = useRouteError();
    let message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2);
    let stack = error2 instanceof Error ? error2.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error2);
      devInfo = /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React83.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React83.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React83.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React83.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React83.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React83.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React83.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error2) {
      return {
        error: error2
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error2, errorInfo) {
      console.error("React Router caught the following error during render", error2, errorInfo);
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React83.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React83.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match,
      children: children2
    } = _ref;
    let dataRouterContext = React83.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React83.createElement(RouteContext.Provider, {
      value: routeContext
    }, children2);
  }
  function _renderMatches(matches, parentMatches, dataRouterState, future) {
    var _dataRouterState;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (future === void 0) {
      future = null;
    }
    if (matches == null) {
      var _future;
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
      !(errorIndex >= 0) ? true ? invariant4(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant4(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match = renderedMatches[i];
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match.route.id) {
          let {
            loaderData,
            errors: errors2
          } = dataRouterState;
          let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
          if (match.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match, index2) => {
      let error2;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error2 = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index2 === 0) {
            warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index2) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren2 = () => {
        let children2;
        if (error2) {
          children2 = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children2 = hydrateFallbackElement;
        } else if (match.route.Component) {
          children2 = /* @__PURE__ */ React83.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children2 = match.route.element;
        } else {
          children2 = outlet;
        }
        return /* @__PURE__ */ React83.createElement(RenderedRoute, {
          match,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children: children2
        });
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React83.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error: error2,
        children: getChildren2(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren2();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React83.useContext(DataRouterContext);
    !ctx ? true ? invariant4(false, getDataRouterConsoleError(hookName)) : invariant4(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React83.useContext(DataRouterStateContext);
    !state ? true ? invariant4(false, getDataRouterConsoleError(hookName)) : invariant4(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React83.useContext(RouteContext);
    !route ? true ? invariant4(false, getDataRouterConsoleError(hookName)) : invariant4(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant4(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant4(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React83.useMemo(() => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error2 = React83.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error2 !== void 0) {
      return error2;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id2 = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React83.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React83.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning5(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends3({
          fromRouteId: id2
        }, options));
      }
    }, [router, id2]);
    return navigate;
  }
  var alreadyWarned$1 = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned$1[key]) {
      alreadyWarned$1[key] = true;
      true ? warning5(false, message) : void 0;
    }
  }
  var alreadyWarned = {};
  function warnOnce(key, message) {
    if (!alreadyWarned[message]) {
      alreadyWarned[message] = true;
      console.warn(message);
    }
  }
  var logDeprecation = (flag, msg, link) => warnOnce(flag, "\u26A0\uFE0F React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
  function logV6DeprecationWarnings(renderFuture, routerFuture) {
    if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) {
      logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
    }
    if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && (!routerFuture || !routerFuture.v7_relativeSplatPath)) {
      logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
    }
    if (routerFuture) {
      if (routerFuture.v7_fetcherPersist === void 0) {
        logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
      }
      if (routerFuture.v7_normalizeFormMethod === void 0) {
        logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
      }
      if (routerFuture.v7_partialHydration === void 0) {
        logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
      }
      if (routerFuture.v7_skipActionErrorRevalidation === void 0) {
        logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
      }
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React83[START_TRANSITION];
  function Route(_props) {
    true ? invariant4(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant4(false);
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children: children2 = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false,
      future
    } = _ref5;
    !!useInRouterContext() ? true ? invariant4(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant4(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React83.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: _extends3({
        v7_relativeSplatPath: false
      }, future)
    }), [basename, future, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash: hash3 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React83.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash: hash3,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash3, state, key, navigationType]);
    true ? warning5(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash3 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React83.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React83.createElement(LocationContext.Provider, {
      children: children2,
      value: locationContext
    }));
  }
  function Routes(_ref6) {
    let {
      children: children2,
      location
    } = _ref6;
    return useRoutes(createRoutesFromChildren(children2), location);
  }
  var neverSettledPromise = new Promise(() => {
  });
  function createRoutesFromChildren(children2, parentPath) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    let routes = [];
    React83.Children.forEach(children2, (element, index2) => {
      if (!/* @__PURE__ */ React83.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index2];
      if (element.type === React83.Fragment) {
        routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
        return;
      }
      !(element.type === Route) ? true ? invariant4(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant4(false) : void 0;
      !(!element.props.index || !element.props.children) ? true ? invariant4(false, "An index route cannot have child routes.") : invariant4(false) : void 0;
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(element.props.children, treePath);
      }
      routes.push(route);
    });
    return routes;
  }

  // node_modules/react-router-dom/dist/index.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose13(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent2(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent2(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning5(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type,
          value
        } = target;
        if (type === "image") {
          let prefix3 = name ? name + "." : "";
          formData.append(prefix3 + "x", "0");
          formData.append(prefix3 + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  var _excluded12 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"];
  var _excluded23 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"];
  var _excluded33 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
  var REACT_ROUTER_VERSION = "6";
  try {
    window.__reactRouterVersion = REACT_ROUTER_VERSION;
  } catch (e) {
  }
  var ViewTransitionContext = /* @__PURE__ */ React84.createContext({
    isTransitioning: false
  });
  if (true) {
    ViewTransitionContext.displayName = "ViewTransition";
  }
  var FetchersContext = /* @__PURE__ */ React84.createContext(/* @__PURE__ */ new Map());
  if (true) {
    FetchersContext.displayName = "Fetchers";
  }
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React84[START_TRANSITION2];
  var FLUSH_SYNC = "flushSync";
  var flushSyncImpl = ReactDOM4[FLUSH_SYNC];
  var USE_ID = "useId";
  var useIdImpl = React84[USE_ID];
  function BrowserRouter(_ref4) {
    let {
      basename,
      children: children2,
      future,
      window: window2
    } = _ref4;
    let historyRef = React84.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React84.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React84.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React84.useLayoutEffect(() => history.listen(setState), [history, setState]);
    React84.useEffect(() => logV6DeprecationWarnings(future), [future]);
    return /* @__PURE__ */ React84.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  function HistoryRouter(_ref6) {
    let {
      basename,
      children: children2,
      future,
      history
    } = _ref6;
    let [state, setStateImpl] = React84.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React84.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React84.useLayoutEffect(() => history.listen(setState), [history, setState]);
    React84.useEffect(() => logV6DeprecationWarnings(future), [future]);
    return /* @__PURE__ */ React84.createElement(Router, {
      basename,
      children: children2,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = /* @__PURE__ */ React84.forwardRef(function LinkWithRef(_ref7, ref2) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      viewTransition
    } = _ref7, rest = _objectWithoutPropertiesLoose13(_ref7, _excluded12);
    let {
      basename
    } = React84.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          true ? warning5(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      viewTransition
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React84.createElement("a", _extends4({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref: ref2,
        target
      }))
    );
  });
  if (true) {
    Link.displayName = "Link";
  }
  var NavLink2 = /* @__PURE__ */ React84.forwardRef(function NavLinkWithRef(_ref8, ref2) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end: end3 = false,
      style: styleProp,
      to,
      viewTransition,
      children: children2
    } = _ref8, rest = _objectWithoutPropertiesLoose13(_ref8, _excluded23);
    let path = useResolvedPath(to, {
      relative: rest.relative
    });
    let location = useLocation();
    let routerState = React84.useContext(DataRouterStateContext);
    let {
      navigator: navigator2,
      basename
    } = React84.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive2 = locationPathname === toPathname || !end3 && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end3 && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive: isActive2,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive2 ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [classNameProp, isActive2 ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
    }
    let style5 = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React84.createElement(Link, _extends4({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref: ref2,
      style: style5,
      to,
      viewTransition
    }), typeof children2 === "function" ? children2(renderProps) : children2);
  });
  if (true) {
    NavLink2.displayName = "NavLink";
  }
  var Form2 = /* @__PURE__ */ React84.forwardRef((_ref9, forwardedRef) => {
    let {
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      viewTransition
    } = _ref9, props = _objectWithoutPropertiesLoose13(_ref9, _excluded33);
    let submit = useSubmit();
    let formAction = useFormAction(action, {
      relative
    });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        viewTransition
      });
    };
    return /* @__PURE__ */ React84.createElement("form", _extends4({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    Form2.displayName = "Form";
  }
  function ScrollRestoration(_ref10) {
    let {
      getKey,
      storageKey
    } = _ref10;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
    DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetcher"] = "useFetcher";
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React84.useContext(DataRouterContext);
    !ctx ? true ? invariant4(false, getDataRouterConsoleError2(hookName)) : invariant4(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React84.useContext(DataRouterStateContext);
    !state ? true ? invariant4(false, getDataRouterConsoleError2(hookName)) : invariant4(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      viewTransition
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React84.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename
    } = React84.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React84.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target, basename);
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          flushSync: options.flushSync
        });
      } else {
        router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          flushSync: options.flushSync,
          viewTransition: options.viewTransition
        });
      }
    }, [router, basename, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React84.useContext(NavigationContext);
    let routeContext = React84.useContext(RouteContext);
    !routeContext ? true ? invariant4(false, "useFormAction must be used inside a RouteContext") : invariant4(false) : void 0;
    let [match] = routeContext.matches.slice(-1);
    let path = _extends4({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? "?" + qs : "";
      }
    }
    if ((!action || action === ".") && match.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp4) {
    let {
      getKey,
      storageKey
    } = _temp4 === void 0 ? {} : _temp4;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename
    } = React84.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React84.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React84.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location, matches) : null) || location.key;
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      } catch (error2) {
        true ? warning5(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error2 + ").") : void 0;
      }
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location, matches]));
    if (typeof document !== "undefined") {
      React84.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey]);
      React84.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
          // Strip the basename to match useLocation()
          _extends4({}, location2, {
            pathname: stripBasename(location2.pathname, basename) || location2.pathname
          }),
          matches2
        ) : getKey;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React84.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location.hash) {
          let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React84.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let vtContext = React84.useContext(ViewTransitionContext);
    !(vtContext != null) ? true ? invariant4(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant4(false) : void 0;
    let {
      basename
    } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
    let path = useResolvedPath(to, {
      relative: opts.relative
    });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }

  // node_modules/@caldwell619/react-kanban/dist/features/board/index.js
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());

  // node_modules/@caldwell619/react-kanban/dist/features/board/components/Container.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var import_react77 = __toESM(require_react());

  // node_modules/@hello-pangea/dnd/dist/dnd.esm.js
  var import_react72 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());

  // node_modules/@hello-pangea/dnd/node_modules/redux/dist/redux.mjs
  var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
  var symbol_observable_default = $$observable;
  var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
  var ActionTypes = {
    INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
    REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
    PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
  };
  var actionTypes_default = ActionTypes;
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    let proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    const type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    const constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    let typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore3(reducer2, preloadedState, enhancer) {
    if (typeof reducer2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer2)}'`);
    }
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
      }
      return enhancer(createStore3)(reducer2, preloadedState);
    }
    let currentReducer = reducer2;
    let currentState = preloadedState;
    let currentListeners = /* @__PURE__ */ new Map();
    let nextListeners = currentListeners;
    let listenerIdCounter = 0;
    let isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = /* @__PURE__ */ new Map();
        currentListeners.forEach((listener, key) => {
          nextListeners.set(key, listener);
        });
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener) {
      if (typeof listener !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      let isSubscribed = true;
      ensureCanMutateNextListeners();
      const listenerId = listenerIdCounter++;
      nextListeners.set(listenerId, listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        nextListeners.delete(listenerId);
        currentListeners = null;
      };
    }
    function dispatch2(action) {
      if (!isPlainObject(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (typeof action.type !== "string") {
        throw new Error(false ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      const listeners = currentListeners = nextListeners;
      listeners.forEach((listener) => {
        listener();
      });
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
      }
      currentReducer = nextReducer;
      dispatch2({
        type: actionTypes_default.REPLACE
      });
    }
    function observable() {
      const outerSubscribe = subscribe;
      return {
        /**
         * The minimal observable subscription method.
         * @param observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
          }
          function observeState() {
            const observerAsObserver = observer;
            if (observerAsObserver.next) {
              observerAsObserver.next(getState());
            }
          }
          observeState();
          const unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        },
        [symbol_observable_default]() {
          return this;
        }
      };
    }
    dispatch2({
      type: actionTypes_default.INIT
    });
    const store = {
      dispatch: dispatch2,
      subscribe,
      getState,
      replaceReducer,
      [symbol_observable_default]: observable
    };
    return store;
  }
  function bindActionCreator(actionCreator, dispatch2) {
    return function(...args) {
      return dispatch2(actionCreator.apply(this, args));
    };
  }
  function bindActionCreators(actionCreators, dispatch2) {
    if (typeof actionCreators === "function") {
      return bindActionCreator(actionCreators, dispatch2);
    }
    if (typeof actionCreators !== "object" || actionCreators === null) {
      throw new Error(false ? formatProdErrorMessage(16) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
    }
    const boundActionCreators = {};
    for (const key in actionCreators) {
      const actionCreator = actionCreators[key];
      if (typeof actionCreator === "function") {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch2);
      }
    }
    return boundActionCreators;
  }
  function compose(...funcs) {
    if (funcs.length === 0) {
      return (arg) => arg;
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce((a, b) => (...args) => a(b(...args)));
  }
  function applyMiddleware(...middlewares) {
    return (createStore22) => (reducer2, preloadedState) => {
      const store = createStore22(reducer2, preloadedState);
      let dispatch2 = () => {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      const middlewareAPI = {
        getState: store.getState,
        dispatch: (action, ...args) => dispatch2(action, ...args)
      };
      const chain = middlewares.map((middleware) => middleware(middlewareAPI));
      dispatch2 = compose(...chain)(store.dispatch);
      return {
        ...store,
        dispatch: dispatch2
      };
    };
  }

  // node_modules/@hello-pangea/dnd/node_modules/react-redux/dist/react-redux.mjs
  var React85 = __toESM(require_react(), 1);
  var import_with_selector2 = __toESM(require_with_selector2(), 1);
  var IS_REACT_19 = /* @__PURE__ */ React85.version.startsWith("19");
  var REACT_ELEMENT_TYPE = /* @__PURE__ */ Symbol.for(
    IS_REACT_19 ? "react.transitional.element" : "react.element"
  );
  var REACT_PORTAL_TYPE = /* @__PURE__ */ Symbol.for("react.portal");
  var REACT_FRAGMENT_TYPE = /* @__PURE__ */ Symbol.for("react.fragment");
  var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
  var REACT_PROFILER_TYPE = /* @__PURE__ */ Symbol.for("react.profiler");
  var REACT_CONSUMER_TYPE = /* @__PURE__ */ Symbol.for("react.consumer");
  var REACT_CONTEXT_TYPE = /* @__PURE__ */ Symbol.for("react.context");
  var REACT_FORWARD_REF_TYPE = /* @__PURE__ */ Symbol.for("react.forward_ref");
  var REACT_SUSPENSE_TYPE = /* @__PURE__ */ Symbol.for("react.suspense");
  var REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */ Symbol.for(
    "react.suspense_list"
  );
  var REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for("react.memo");
  var REACT_LAZY_TYPE = /* @__PURE__ */ Symbol.for("react.lazy");
  var REACT_OFFSCREEN_TYPE = /* @__PURE__ */ Symbol.for("react.offscreen");
  var REACT_CLIENT_REFERENCE = /* @__PURE__ */ Symbol.for(
    "react.client.reference"
  );
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Memo = REACT_MEMO_TYPE;
  function isValidElementType(type) {
    return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) ? true : false;
  }
  function typeOf(object) {
    if (typeof object === "object" && object !== null) {
      const { $$typeof } = object;
      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          switch (object = object.type, object) {
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
            case REACT_SUSPENSE_LIST_TYPE:
              return object;
            default:
              switch (object = object && object.$$typeof, object) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                  return object;
                case REACT_CONSUMER_TYPE:
                  return object;
                default:
                  return $$typeof;
              }
          }
        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }
  }
  function isContextConsumer(object) {
    return IS_REACT_19 ? typeOf(object) === REACT_CONSUMER_TYPE : typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function warning6(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
  function verify(selector, methodName) {
    if (!selector) {
      throw new Error(`Unexpected value for ${methodName} in connect.`);
    } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
      if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
        warning6(
          `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`
        );
      }
    }
  }
  function verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps) {
    verify(mapStateToProps, "mapStateToProps");
    verify(mapDispatchToProps2, "mapDispatchToProps");
    verify(mergeProps, "mergeProps");
  }
  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch2, {
    areStatesEqual,
    areOwnPropsEqual,
    areStatePropsEqual
  }) {
    let hasRunAtLeastOnce = false;
    let state;
    let ownProps;
    let stateProps;
    let dispatchProps;
    let mergedProps;
    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps2(dispatch2, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }
    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps2.dependsOnOwnProps)
        dispatchProps = mapDispatchToProps2(dispatch2, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps)
        stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps2.dependsOnOwnProps)
        dispatchProps = mapDispatchToProps2(dispatch2, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewState() {
      const nextStateProps = mapStateToProps(state, ownProps);
      const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged)
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleSubsequentCalls(nextState, nextOwnProps) {
      const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      const stateChanged = !areStatesEqual(
        nextState,
        state,
        nextOwnProps,
        ownProps
      );
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged)
        return handleNewPropsAndNewState();
      if (propsChanged)
        return handleNewProps();
      if (stateChanged)
        return handleNewState();
      return mergedProps;
    }
    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }
  function finalPropsSelectorFactory(dispatch2, {
    initMapStateToProps,
    initMapDispatchToProps,
    initMergeProps,
    ...options
  }) {
    const mapStateToProps = initMapStateToProps(dispatch2, options);
    const mapDispatchToProps2 = initMapDispatchToProps(dispatch2, options);
    const mergeProps = initMergeProps(dispatch2, options);
    if (true) {
      verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps);
    }
    return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch2, options);
  }
  function bindActionCreators2(actionCreators, dispatch2) {
    const boundActionCreators = {};
    for (const key in actionCreators) {
      const actionCreator = actionCreators[key];
      if (typeof actionCreator === "function") {
        boundActionCreators[key] = (...args) => dispatch2(actionCreator(...args));
      }
    }
    return boundActionCreators;
  }
  function isPlainObject2(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    const proto = Object.getPrototypeOf(obj);
    if (proto === null)
      return true;
    let baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }
  function verifyPlainObject(value, displayName, methodName) {
    if (!isPlainObject2(value)) {
      warning6(
        `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`
      );
    }
  }
  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch2) {
      const constant = getConstant(dispatch2);
      function constantSelector() {
        return constant;
      }
      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }
  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }
  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch2, { displayName }) {
      const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);
      };
      proxy.dependsOnOwnProps = true;
      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        let props = proxy(stateOrDispatch, ownProps);
        if (typeof props === "function") {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }
        if (true)
          verifyPlainObject(props, displayName, methodName);
        return props;
      };
      return proxy;
    };
  }
  function createInvalidArgFactory(arg, name) {
    return (dispatch2, options) => {
      throw new Error(
        `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`
      );
    };
  }
  function mapDispatchToPropsFactory(mapDispatchToProps2) {
    return mapDispatchToProps2 && typeof mapDispatchToProps2 === "object" ? wrapMapToPropsConstant(
      (dispatch2) => (
        // @ts-ignore
        bindActionCreators2(mapDispatchToProps2, dispatch2)
      )
    ) : !mapDispatchToProps2 ? wrapMapToPropsConstant((dispatch2) => ({
      dispatch: dispatch2
    })) : typeof mapDispatchToProps2 === "function" ? (
      // @ts-ignore
      wrapMapToPropsFunc(mapDispatchToProps2, "mapDispatchToProps")
    ) : createInvalidArgFactory(mapDispatchToProps2, "mapDispatchToProps");
  }
  function mapStateToPropsFactory(mapStateToProps) {
    return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === "function" ? (
      // @ts-ignore
      wrapMapToPropsFunc(mapStateToProps, "mapStateToProps")
    ) : createInvalidArgFactory(mapStateToProps, "mapStateToProps");
  }
  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return { ...ownProps, ...stateProps, ...dispatchProps };
  }
  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch2, { displayName, areMergedPropsEqual }) {
      let hasRunOnce = false;
      let mergedProps;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        if (hasRunOnce) {
          if (!areMergedPropsEqual(nextMergedProps, mergedProps))
            mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
          if (true)
            verifyPlainObject(mergedProps, displayName, "mergeProps");
        }
        return mergedProps;
      };
    };
  }
  function mergePropsFactory(mergeProps) {
    return !mergeProps ? () => defaultMergeProps : typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, "mergeProps");
  }
  function defaultNoopBatch(callback) {
    callback();
  }
  function createListenerCollection() {
    let first = null;
    let last = null;
    return {
      clear() {
        first = null;
        last = null;
      },
      notify() {
        defaultNoopBatch(() => {
          let listener = first;
          while (listener) {
            listener.callback();
            listener = listener.next;
          }
        });
      },
      get() {
        const listeners = [];
        let listener = first;
        while (listener) {
          listeners.push(listener);
          listener = listener.next;
        }
        return listeners;
      },
      subscribe(callback) {
        let isSubscribed = true;
        const listener = last = {
          callback,
          next: null,
          prev: last
        };
        if (listener.prev) {
          listener.prev.next = listener;
        } else {
          first = listener;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener.next) {
            listener.next.prev = listener.prev;
          } else {
            last = listener.prev;
          }
          if (listener.prev) {
            listener.prev.next = listener.next;
          } else {
            first = listener.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify() {
    },
    get: () => []
  };
  function createSubscription(store, parentSub) {
    let unsubscribe;
    let listeners = nullListeners;
    let subscriptionsAmount = 0;
    let selfSubscribed = false;
    function addNestedSub(listener) {
      trySubscribe();
      const cleanupListener = listeners.subscribe(listener);
      let removed = false;
      return () => {
        if (!removed) {
          removed = true;
          cleanupListener();
          tryUnsubscribe();
        }
      };
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return selfSubscribed;
    }
    function trySubscribe() {
      subscriptionsAmount++;
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      subscriptionsAmount--;
      if (unsubscribe && subscriptionsAmount === 0) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    function trySubscribeSelf() {
      if (!selfSubscribed) {
        selfSubscribed = true;
        trySubscribe();
      }
    }
    function tryUnsubscribeSelf() {
      if (selfSubscribed) {
        selfSubscribed = false;
        tryUnsubscribe();
      }
    }
    const subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe: trySubscribeSelf,
      tryUnsubscribe: tryUnsubscribeSelf,
      getListeners: () => listeners
    };
    return subscription;
  }
  var canUseDOM = () => !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var isDOM3 = /* @__PURE__ */ canUseDOM();
  var isRunningInReactNative = () => typeof navigator !== "undefined" && navigator.product === "ReactNative";
  var isReactNative3 = /* @__PURE__ */ isRunningInReactNative();
  var getUseIsomorphicLayoutEffect = () => isDOM3 || isReactNative3 ? React85.useLayoutEffect : React85.useEffect;
  var useIsomorphicLayoutEffect3 = /* @__PURE__ */ getUseIsomorphicLayoutEffect();
  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function shallowEqual(objA, objB) {
    if (is(objA, objB))
      return true;
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    const keysA = Object.keys(objA);
    const keysB = Object.keys(objB);
    if (keysA.length !== keysB.length)
      return false;
    for (let i = 0; i < keysA.length; i++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }
    return true;
  }
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {
    [ForwardRef]: FORWARD_REF_STATICS,
    [Memo]: MEMO_STATICS
  };
  function getStatics(component) {
    if (isMemo(component)) {
      return MEMO_STATICS;
    }
    return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
  }
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent) {
    if (typeof sourceComponent !== "string") {
      if (objectPrototype) {
        const inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent);
        }
      }
      let keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      const targetStatics = getStatics(targetComponent);
      const sourceStatics = getStatics(sourceComponent);
      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          const descriptor = getOwnPropertyDescriptor(sourceComponent, key);
          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {
          }
        }
      }
    }
    return targetComponent;
  }
  var ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`);
  var gT = typeof globalThis !== "undefined" ? globalThis : (
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    {}
  );
  function getContext() {
    if (!React85.createContext)
      return {};
    const contextMap = gT[ContextKey] ??= /* @__PURE__ */ new Map();
    let realContext = contextMap.get(React85.createContext);
    if (!realContext) {
      realContext = React85.createContext(
        null
      );
      if (true) {
        realContext.displayName = "ReactRedux";
      }
      contextMap.set(React85.createContext, realContext);
    }
    return realContext;
  }
  var ReactReduxContext = /* @__PURE__ */ getContext();
  var NO_SUBSCRIPTION_ARRAY = [null, null];
  var stringifyComponent = (Comp) => {
    try {
      return JSON.stringify(Comp);
    } catch (err) {
      return String(Comp);
    }
  };
  function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
    useIsomorphicLayoutEffect3(() => effectFunc(...effectArgs), dependencies);
  }
  function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {
    lastWrapperProps.current = wrapperProps;
    renderIsScheduled.current = false;
    if (childPropsFromStoreUpdate.current) {
      childPropsFromStoreUpdate.current = null;
      notifyNestedSubs();
    }
  }
  function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {
    if (!shouldHandleStateChanges)
      return () => {
      };
    let didUnsubscribe = false;
    let lastThrownError = null;
    const checkForUpdates = () => {
      if (didUnsubscribe || !isMounted.current) {
        return;
      }
      const latestStoreState = store.getState();
      let newChildProps, error2;
      try {
        newChildProps = childPropsSelector(
          latestStoreState,
          lastWrapperProps.current
        );
      } catch (e) {
        error2 = e;
        lastThrownError = e;
      }
      if (!error2) {
        lastThrownError = null;
      }
      if (newChildProps === lastChildProps.current) {
        if (!renderIsScheduled.current) {
          notifyNestedSubs();
        }
      } else {
        lastChildProps.current = newChildProps;
        childPropsFromStoreUpdate.current = newChildProps;
        renderIsScheduled.current = true;
        additionalSubscribeListener();
      }
    };
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    const unsubscribeWrapper = () => {
      didUnsubscribe = true;
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
      if (lastThrownError) {
        throw lastThrownError;
      }
    };
    return unsubscribeWrapper;
  }
  function strictEqual(a, b) {
    return a === b;
  }
  var hasWarnedAboutDeprecatedPureOption = false;
  function connect(mapStateToProps, mapDispatchToProps2, mergeProps, {
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    pure,
    areStatesEqual = strictEqual,
    areOwnPropsEqual = shallowEqual,
    areStatePropsEqual = shallowEqual,
    areMergedPropsEqual = shallowEqual,
    // use React's forwardRef to expose a ref of the wrapped component
    forwardRef: forwardRef64 = false,
    // the context consumer to use
    context: context4 = ReactReduxContext
  } = {}) {
    if (true) {
      if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {
        hasWarnedAboutDeprecatedPureOption = true;
        warning6(
          'The `pure` option has been removed. `connect` is now always a "pure/memoized" component'
        );
      }
    }
    const Context2 = context4;
    const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
    const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps2);
    const initMergeProps = mergePropsFactory(mergeProps);
    const shouldHandleStateChanges = Boolean(mapStateToProps);
    const wrapWithConnect = (WrappedComponent) => {
      if (true) {
        const isValid = /* @__PURE__ */ isValidElementType(WrappedComponent);
        if (!isValid)
          throw new Error(
            `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(
              WrappedComponent
            )}`
          );
      }
      const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
      const displayName = `Connect(${wrappedComponentName})`;
      const selectorFactoryOptions = {
        shouldHandleStateChanges,
        displayName,
        wrappedComponentName,
        WrappedComponent,
        // @ts-ignore
        initMapStateToProps,
        initMapDispatchToProps,
        initMergeProps,
        areStatesEqual,
        areStatePropsEqual,
        areOwnPropsEqual,
        areMergedPropsEqual
      };
      function ConnectFunction(props) {
        const [propsContext, reactReduxForwardedRef, wrapperProps] = React85.useMemo(() => {
          const { reactReduxForwardedRef: reactReduxForwardedRef2, ...wrapperProps2 } = props;
          return [props.context, reactReduxForwardedRef2, wrapperProps2];
        }, [props]);
        const ContextToUse = React85.useMemo(() => {
          let ResultContext = Context2;
          if (propsContext?.Consumer) {
            if (true) {
              const isValid = /* @__PURE__ */ isContextConsumer(
                // @ts-ignore
                /* @__PURE__ */ React85.createElement(propsContext.Consumer, null)
              );
              if (!isValid) {
                throw new Error(
                  "You must pass a valid React context consumer as `props.context`"
                );
              }
              ResultContext = propsContext;
            }
          }
          return ResultContext;
        }, [propsContext, Context2]);
        const contextValue = React85.useContext(ContextToUse);
        const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
        const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
        if (!didStoreComeFromProps && !didStoreComeFromContext) {
          throw new Error(
            `Could not find "store" in the context of "${displayName}". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`
          );
        }
        const store = didStoreComeFromProps ? props.store : contextValue.store;
        const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
        const childPropsSelector = React85.useMemo(() => {
          return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);
        }, [store]);
        const [subscription, notifyNestedSubs] = React85.useMemo(() => {
          if (!shouldHandleStateChanges)
            return NO_SUBSCRIPTION_ARRAY;
          const subscription2 = createSubscription(
            store,
            didStoreComeFromProps ? void 0 : contextValue.subscription
          );
          const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
          return [subscription2, notifyNestedSubs2];
        }, [store, didStoreComeFromProps, contextValue]);
        const overriddenContextValue = React85.useMemo(() => {
          if (didStoreComeFromProps) {
            return contextValue;
          }
          return {
            ...contextValue,
            subscription
          };
        }, [didStoreComeFromProps, contextValue, subscription]);
        const lastChildProps = React85.useRef(void 0);
        const lastWrapperProps = React85.useRef(wrapperProps);
        const childPropsFromStoreUpdate = React85.useRef(void 0);
        const renderIsScheduled = React85.useRef(false);
        const isMounted = React85.useRef(false);
        const latestSubscriptionCallbackError = React85.useRef(
          void 0
        );
        useIsomorphicLayoutEffect3(() => {
          isMounted.current = true;
          return () => {
            isMounted.current = false;
          };
        }, []);
        const actualChildPropsSelector = React85.useMemo(() => {
          const selector = () => {
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            }
            return childPropsSelector(store.getState(), wrapperProps);
          };
          return selector;
        }, [store, wrapperProps]);
        const subscribeForReact = React85.useMemo(() => {
          const subscribe = (reactListener) => {
            if (!subscription) {
              return () => {
              };
            }
            return subscribeUpdates(
              shouldHandleStateChanges,
              store,
              subscription,
              // @ts-ignore
              childPropsSelector,
              lastWrapperProps,
              lastChildProps,
              renderIsScheduled,
              isMounted,
              childPropsFromStoreUpdate,
              notifyNestedSubs,
              reactListener
            );
          };
          return subscribe;
        }, [subscription]);
        useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [
          lastWrapperProps,
          lastChildProps,
          renderIsScheduled,
          wrapperProps,
          childPropsFromStoreUpdate,
          notifyNestedSubs
        ]);
        let actualChildProps;
        try {
          actualChildProps = React85.useSyncExternalStore(
            // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
            subscribeForReact,
            // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
            // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
            actualChildPropsSelector,
            getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector
          );
        } catch (err) {
          if (latestSubscriptionCallbackError.current) {
            ;
            err.message += `
The error may be correlated with this previous error:
${latestSubscriptionCallbackError.current.stack}

`;
          }
          throw err;
        }
        useIsomorphicLayoutEffect3(() => {
          latestSubscriptionCallbackError.current = void 0;
          childPropsFromStoreUpdate.current = void 0;
          lastChildProps.current = actualChildProps;
        });
        const renderedWrappedComponent = React85.useMemo(() => {
          return (
            // @ts-ignore
            /* @__PURE__ */ React85.createElement(
              WrappedComponent,
              {
                ...actualChildProps,
                ref: reactReduxForwardedRef
              }
            )
          );
        }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
        const renderedChild = React85.useMemo(() => {
          if (shouldHandleStateChanges) {
            return /* @__PURE__ */ React85.createElement(ContextToUse.Provider, { value: overriddenContextValue }, renderedWrappedComponent);
          }
          return renderedWrappedComponent;
        }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
        return renderedChild;
      }
      const _Connect = React85.memo(ConnectFunction);
      const Connect = _Connect;
      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = ConnectFunction.displayName = displayName;
      if (forwardRef64) {
        const _forwarded = React85.forwardRef(
          function forwardConnectRef(props, ref2) {
            return /* @__PURE__ */ React85.createElement(Connect, { ...props, reactReduxForwardedRef: ref2 });
          }
        );
        const forwarded = _forwarded;
        forwarded.displayName = displayName;
        forwarded.WrappedComponent = WrappedComponent;
        return /* @__PURE__ */ hoistNonReactStatics(forwarded, WrappedComponent);
      }
      return /* @__PURE__ */ hoistNonReactStatics(Connect, WrappedComponent);
    };
    return wrapWithConnect;
  }
  var connect_default = connect;
  function Provider3(providerProps) {
    const { children: children2, context: context4, serverState, store } = providerProps;
    const contextValue = React85.useMemo(() => {
      const subscription = createSubscription(store);
      const baseContextValue = {
        store,
        subscription,
        getServerState: serverState ? () => serverState : void 0
      };
      if (false) {
        return baseContextValue;
      } else {
        const { identityFunctionCheck = "once", stabilityCheck = "once" } = providerProps;
        return /* @__PURE__ */ Object.assign(baseContextValue, {
          stabilityCheck,
          identityFunctionCheck
        });
      }
    }, [store, serverState]);
    const previousState = React85.useMemo(() => store.getState(), [store]);
    useIsomorphicLayoutEffect3(() => {
      const { subscription } = contextValue;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store.getState()) {
        subscription.notifyNestedSubs();
      }
      return () => {
        subscription.tryUnsubscribe();
        subscription.onStateChange = void 0;
      };
    }, [contextValue, previousState]);
    const Context2 = context4 || ReactReduxContext;
    return /* @__PURE__ */ React85.createElement(Context2.Provider, { value: contextValue }, children2);
  }
  var Provider_default = Provider3;

  // node_modules/tiny-invariant/dist/esm/tiny-invariant.js
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant5(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    var provided = typeof message === "function" ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }

  // node_modules/css-box-model/dist/css-box-model.esm.js
  var getRect = function getRect2(_ref) {
    var top2 = _ref.top, right2 = _ref.right, bottom2 = _ref.bottom, left2 = _ref.left;
    var width = right2 - left2;
    var height = bottom2 - top2;
    var rect = {
      top: top2,
      right: right2,
      bottom: bottom2,
      left: left2,
      width,
      height,
      x: left2,
      y: top2,
      center: {
        x: (right2 + left2) / 2,
        y: (bottom2 + top2) / 2
      }
    };
    return rect;
  };
  var expand = function expand2(target, expandBy) {
    return {
      top: target.top - expandBy.top,
      left: target.left - expandBy.left,
      bottom: target.bottom + expandBy.bottom,
      right: target.right + expandBy.right
    };
  };
  var shrink = function shrink2(target, shrinkBy) {
    return {
      top: target.top + shrinkBy.top,
      left: target.left + shrinkBy.left,
      bottom: target.bottom - shrinkBy.bottom,
      right: target.right - shrinkBy.right
    };
  };
  var shift = function shift2(target, shiftBy) {
    return {
      top: target.top + shiftBy.y,
      left: target.left + shiftBy.x,
      bottom: target.bottom + shiftBy.y,
      right: target.right + shiftBy.x
    };
  };
  var noSpacing = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var createBox = function createBox2(_ref2) {
    var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
    var marginBox = getRect(expand(borderBox, margin));
    var paddingBox = getRect(shrink(borderBox, border));
    var contentBox = getRect(shrink(paddingBox, padding));
    return {
      marginBox,
      borderBox: getRect(borderBox),
      paddingBox,
      contentBox,
      margin,
      border,
      padding
    };
  };
  var parse = function parse2(raw) {
    var value = raw.slice(0, -2);
    var suffix2 = raw.slice(-2);
    if (suffix2 !== "px") {
      return 0;
    }
    var result = Number(value);
    !!isNaN(result) ? true ? invariant5(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant5(false) : void 0;
    return result;
  };
  var getWindowScroll2 = function getWindowScroll3() {
    return {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  };
  var offset2 = function offset3(original, change) {
    var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
    var shifted = shift(borderBox, change);
    return createBox({
      borderBox: shifted,
      border,
      margin,
      padding
    });
  };
  var withScroll = function withScroll2(original, scroll2) {
    if (scroll2 === void 0) {
      scroll2 = getWindowScroll2();
    }
    return offset2(original, scroll2);
  };
  var calculateBox = function calculateBox2(borderBox, styles2) {
    var margin = {
      top: parse(styles2.marginTop),
      right: parse(styles2.marginRight),
      bottom: parse(styles2.marginBottom),
      left: parse(styles2.marginLeft)
    };
    var padding = {
      top: parse(styles2.paddingTop),
      right: parse(styles2.paddingRight),
      bottom: parse(styles2.paddingBottom),
      left: parse(styles2.paddingLeft)
    };
    var border = {
      top: parse(styles2.borderTopWidth),
      right: parse(styles2.borderRightWidth),
      bottom: parse(styles2.borderBottomWidth),
      left: parse(styles2.borderLeftWidth)
    };
    return createBox({
      borderBox,
      margin,
      padding,
      border
    });
  };
  var getBox = function getBox2(el) {
    var borderBox = el.getBoundingClientRect();
    var styles2 = window.getComputedStyle(el);
    return calculateBox(borderBox, styles2);
  };

  // node_modules/raf-schd/dist/raf-schd.esm.js
  var rafSchd = function rafSchd2(fn2) {
    var lastArgs = [];
    var frameId = null;
    var wrapperFn = function wrapperFn2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      lastArgs = args;
      if (frameId) {
        return;
      }
      frameId = requestAnimationFrame(function() {
        frameId = null;
        fn2.apply(void 0, lastArgs);
      });
    };
    wrapperFn.cancel = function() {
      if (!frameId) {
        return;
      }
      cancelAnimationFrame(frameId);
      frameId = null;
    };
    return wrapperFn;
  };
  var raf_schd_esm_default = rafSchd;

  // node_modules/@hello-pangea/dnd/node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends5() {
    return _extends5 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t)
          ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends5.apply(null, arguments);
  }

  // node_modules/@hello-pangea/dnd/dist/dnd.esm.js
  var isProduction$1 = false;
  var spacesAndTabs = /[ \t]{2,}/g;
  var lineStartWithSpaces = /^[ \t]*/gm;
  var clean$2 = (value) => value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
  var getDevMessage = (message) => clean$2(`
  %c@hello-pangea/dnd

  %c${clean$2(message)}

  %c\u{1F477}\u200D This is a development only message. It will be removed in production builds.
`);
  var getFormattedMessage = (message) => [getDevMessage(message), "color: #00C584; font-size: 1.2em; font-weight: bold;", "line-height: 1.5", "color: #723874;"];
  var isDisabledFlag = "__@hello-pangea/dnd-disable-dev-warnings";
  function log(type, message) {
    if (isProduction$1) {
      return;
    }
    if (typeof window !== "undefined" && window[isDisabledFlag]) {
      return;
    }
    console[type](...getFormattedMessage(message));
  }
  var warning7 = log.bind(null, "warn");
  var error = log.bind(null, "error");
  function noop$2() {
  }
  function getOptions(shared2, fromBinding) {
    return {
      ...shared2,
      ...fromBinding
    };
  }
  function bindEvents(el, bindings, sharedOptions) {
    const unbindings = bindings.map((binding) => {
      const options = getOptions(sharedOptions, binding.options);
      el.addEventListener(binding.eventName, binding.fn, options);
      return function unbind() {
        el.removeEventListener(binding.eventName, binding.fn, options);
      };
    });
    return function unbindAll() {
      unbindings.forEach((unbind) => {
        unbind();
      });
    };
  }
  var isProduction2 = false;
  var prefix$1 = "Invariant failed";
  var RbdInvariant = class extends Error {
  };
  RbdInvariant.prototype.toString = function toString() {
    return this.message;
  };
  function invariant6(condition, message) {
    if (isProduction2) {
      throw new RbdInvariant(prefix$1);
    } else {
      throw new RbdInvariant(`${prefix$1}: ${message || ""}`);
    }
  }
  var ErrorBoundary = class extends import_react72.default.Component {
    constructor(...args) {
      super(...args);
      this.callbacks = null;
      this.unbind = noop$2;
      this.onWindowError = (event) => {
        const callbacks = this.getCallbacks();
        if (callbacks.isDragging()) {
          callbacks.tryAbort();
          true ? warning7(`
        An error was caught by our window 'error' event listener while a drag was occurring.
        The active drag has been aborted.
      `) : void 0;
        }
        const err = event.error;
        if (err instanceof RbdInvariant) {
          event.preventDefault();
          if (true) {
            error(err.message);
          }
        }
      };
      this.getCallbacks = () => {
        if (!this.callbacks) {
          throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");
        }
        return this.callbacks;
      };
      this.setCallbacks = (callbacks) => {
        this.callbacks = callbacks;
      };
    }
    componentDidMount() {
      this.unbind = bindEvents(window, [{
        eventName: "error",
        fn: this.onWindowError
      }]);
    }
    componentDidCatch(err) {
      if (err instanceof RbdInvariant) {
        if (true) {
          error(err.message);
        }
        this.setState({});
        return;
      }
      throw err;
    }
    componentWillUnmount() {
      this.unbind();
    }
    render() {
      return this.props.children(this.setCallbacks);
    }
  };
  var dragHandleUsageInstructions = `
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
`;
  var position = (index2) => index2 + 1;
  var onDragStart = (start4) => `
  You have lifted an item in position ${position(start4.source.index)}
`;
  var withLocation = (source, destination) => {
    const isInHomeList = source.droppableId === destination.droppableId;
    const startPosition = position(source.index);
    const endPosition = position(destination.index);
    if (isInHomeList) {
      return `
      You have moved the item from position ${startPosition}
      to position ${endPosition}
    `;
    }
    return `
    You have moved the item from position ${startPosition}
    in list ${source.droppableId}
    to list ${destination.droppableId}
    in position ${endPosition}
  `;
  };
  var withCombine = (id2, source, combine2) => {
    const inHomeList = source.droppableId === combine2.droppableId;
    if (inHomeList) {
      return `
      The item ${id2}
      has been combined with ${combine2.draggableId}`;
    }
    return `
      The item ${id2}
      in list ${source.droppableId}
      has been combined with ${combine2.draggableId}
      in list ${combine2.droppableId}
    `;
  };
  var onDragUpdate = (update2) => {
    const location = update2.destination;
    if (location) {
      return withLocation(update2.source, location);
    }
    const combine2 = update2.combine;
    if (combine2) {
      return withCombine(update2.draggableId, update2.source, combine2);
    }
    return "You are over an area that cannot be dropped on";
  };
  var returnedToStart = (source) => `
  The item has returned to its starting position
  of ${position(source.index)}
`;
  var onDragEnd = (result) => {
    if (result.reason === "CANCEL") {
      return `
      Movement cancelled.
      ${returnedToStart(result.source)}
    `;
    }
    const location = result.destination;
    const combine2 = result.combine;
    if (location) {
      return `
      You have dropped the item.
      ${withLocation(result.source, location)}
    `;
    }
    if (combine2) {
      return `
      You have dropped the item.
      ${withCombine(result.draggableId, result.source, combine2)}
    `;
    }
    return `
    The item has been dropped while not over a drop area.
    ${returnedToStart(result.source)}
  `;
  };
  var preset = {
    dragHandleUsageInstructions,
    onDragStart,
    onDragUpdate,
    onDragEnd
  };
  function isEqual$2(first, second) {
    if (first === second) {
      return true;
    }
    if (Number.isNaN(first) && Number.isNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (let i = 0; i < newInputs.length; i++) {
      if (!isEqual$2(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function useMemo18(getResult, inputs) {
    const initial = (0, import_react72.useState)(() => ({
      inputs,
      result: getResult()
    }))[0];
    const isFirstRun = (0, import_react72.useRef)(true);
    const committed = (0, import_react72.useRef)(initial);
    const useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
    const cache = useCache ? committed.current : {
      inputs,
      result: getResult()
    };
    (0, import_react72.useEffect)(() => {
      isFirstRun.current = false;
      committed.current = cache;
    }, [cache]);
    return cache.result;
  }
  function useCallback23(callback, inputs) {
    return useMemo18(() => callback, inputs);
  }
  var origin = {
    x: 0,
    y: 0
  };
  var add = (point1, point2) => ({
    x: point1.x + point2.x,
    y: point1.y + point2.y
  });
  var subtract = (point1, point2) => ({
    x: point1.x - point2.x,
    y: point1.y - point2.y
  });
  var isEqual$1 = (point1, point2) => point1.x === point2.x && point1.y === point2.y;
  var negate = (point) => ({
    x: point.x !== 0 ? -point.x : 0,
    y: point.y !== 0 ? -point.y : 0
  });
  var patch = (line, value, otherValue = 0) => {
    if (line === "x") {
      return {
        x: value,
        y: otherValue
      };
    }
    return {
      x: otherValue,
      y: value
    };
  };
  var distance2 = (point1, point2) => Math.sqrt((point2.x - point1.x) ** 2 + (point2.y - point1.y) ** 2);
  var closest$1 = (target, points) => Math.min(...points.map((point) => distance2(target, point)));
  var apply = (fn2) => (point) => ({
    x: fn2(point.x),
    y: fn2(point.y)
  });
  var executeClip = (frame2, subject) => {
    const result = getRect({
      top: Math.max(subject.top, frame2.top),
      right: Math.min(subject.right, frame2.right),
      bottom: Math.min(subject.bottom, frame2.bottom),
      left: Math.max(subject.left, frame2.left)
    });
    if (result.width <= 0 || result.height <= 0) {
      return null;
    }
    return result;
  };
  var offsetByPosition = (spacing, point) => ({
    top: spacing.top + point.y,
    left: spacing.left + point.x,
    bottom: spacing.bottom + point.y,
    right: spacing.right + point.x
  });
  var getCorners = (spacing) => [{
    x: spacing.left,
    y: spacing.top
  }, {
    x: spacing.right,
    y: spacing.top
  }, {
    x: spacing.left,
    y: spacing.bottom
  }, {
    x: spacing.right,
    y: spacing.bottom
  }];
  var noSpacing2 = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var scroll$1 = (target, frame2) => {
    if (!frame2) {
      return target;
    }
    return offsetByPosition(target, frame2.scroll.diff.displacement);
  };
  var increase = (target, axis, withPlaceholder) => {
    if (withPlaceholder && withPlaceholder.increasedBy) {
      return {
        ...target,
        [axis.end]: target[axis.end] + withPlaceholder.increasedBy[axis.line]
      };
    }
    return target;
  };
  var clip = (target, frame2) => {
    if (frame2 && frame2.shouldClipSubject) {
      return executeClip(frame2.pageMarginBox, target);
    }
    return getRect(target);
  };
  var getSubject = ({
    page,
    withPlaceholder,
    axis,
    frame: frame2
  }) => {
    const scrolled = scroll$1(page.marginBox, frame2);
    const increased = increase(scrolled, axis, withPlaceholder);
    const clipped = clip(increased, frame2);
    return {
      page,
      withPlaceholder,
      active: clipped
    };
  };
  var scrollDroppable = (droppable2, newScroll) => {
    !droppable2.frame ? true ? invariant6() : invariant6() : void 0;
    const scrollable = droppable2.frame;
    const scrollDiff = subtract(newScroll, scrollable.scroll.initial);
    const scrollDisplacement = negate(scrollDiff);
    const frame2 = {
      ...scrollable,
      scroll: {
        initial: scrollable.scroll.initial,
        current: newScroll,
        diff: {
          value: scrollDiff,
          displacement: scrollDisplacement
        },
        max: scrollable.scroll.max
      }
    };
    const subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: droppable2.subject.withPlaceholder,
      axis: droppable2.axis,
      frame: frame2
    });
    const result = {
      ...droppable2,
      frame: frame2,
      subject
    };
    return result;
  };
  function memoizeOne(resultFn, isEqual2 = areInputsEqual) {
    let cache = null;
    function memoized(...newArgs) {
      if (cache && cache.lastThis === this && isEqual2(newArgs, cache.lastArgs)) {
        return cache.lastResult;
      }
      const lastResult = resultFn.apply(this, newArgs);
      cache = {
        lastResult,
        lastArgs: newArgs,
        lastThis: this
      };
      return lastResult;
    }
    memoized.clear = function clear() {
      cache = null;
    };
    return memoized;
  }
  var toDroppableMap = memoizeOne((droppables) => droppables.reduce((previous, current) => {
    previous[current.descriptor.id] = current;
    return previous;
  }, {}));
  var toDraggableMap = memoizeOne((draggables) => draggables.reduce((previous, current) => {
    previous[current.descriptor.id] = current;
    return previous;
  }, {}));
  var toDroppableList = memoizeOne((droppables) => Object.values(droppables));
  var toDraggableList = memoizeOne((draggables) => Object.values(draggables));
  var getDraggablesInsideDroppable = memoizeOne((droppableId, draggables) => {
    const result = toDraggableList(draggables).filter((draggable2) => droppableId === draggable2.descriptor.droppableId).sort((a, b) => a.descriptor.index - b.descriptor.index);
    return result;
  });
  function tryGetDestination(impact) {
    if (impact.at && impact.at.type === "REORDER") {
      return impact.at.destination;
    }
    return null;
  }
  function tryGetCombine(impact) {
    if (impact.at && impact.at.type === "COMBINE") {
      return impact.at.combine;
    }
    return null;
  }
  var removeDraggableFromList = memoizeOne((remove2, list) => list.filter((item) => item.descriptor.id !== remove2.descriptor.id));
  var moveToNextCombine = ({
    isMovingForward,
    draggable: draggable2,
    destination,
    insideDestination,
    previousImpact
  }) => {
    if (!destination.isCombineEnabled) {
      return null;
    }
    const location = tryGetDestination(previousImpact);
    if (!location) {
      return null;
    }
    function getImpact(target) {
      const at = {
        type: "COMBINE",
        combine: {
          draggableId: target,
          droppableId: destination.descriptor.id
        }
      };
      return {
        ...previousImpact,
        at
      };
    }
    const all = previousImpact.displaced.all;
    const closestId = all.length ? all[0] : null;
    if (isMovingForward) {
      return closestId ? getImpact(closestId) : null;
    }
    const withoutDraggable = removeDraggableFromList(draggable2, insideDestination);
    if (!closestId) {
      if (!withoutDraggable.length) {
        return null;
      }
      const last = withoutDraggable[withoutDraggable.length - 1];
      return getImpact(last.descriptor.id);
    }
    const indexOfClosest = withoutDraggable.findIndex((d) => d.descriptor.id === closestId);
    !(indexOfClosest !== -1) ? true ? invariant6(false, "Could not find displaced item in set") : invariant6() : void 0;
    const proposedIndex = indexOfClosest - 1;
    if (proposedIndex < 0) {
      return null;
    }
    const before = withoutDraggable[proposedIndex];
    return getImpact(before.descriptor.id);
  };
  var isHomeOf = (draggable2, destination) => draggable2.descriptor.droppableId === destination.descriptor.id;
  var noDisplacedBy = {
    point: origin,
    value: 0
  };
  var emptyGroups = {
    invisible: {},
    visible: {},
    all: []
  };
  var noImpact = {
    displaced: emptyGroups,
    displacedBy: noDisplacedBy,
    at: null
  };
  var isWithin = (lowerBound, upperBound) => (value) => lowerBound <= value && value <= upperBound;
  var isPartiallyVisibleThroughFrame = (frame2) => {
    const isWithinVertical = isWithin(frame2.top, frame2.bottom);
    const isWithinHorizontal = isWithin(frame2.left, frame2.right);
    return (subject) => {
      const isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      if (isContained) {
        return true;
      }
      const isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
      const isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
      const isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
      if (isPartiallyContained) {
        return true;
      }
      const isBiggerVertically = subject.top < frame2.top && subject.bottom > frame2.bottom;
      const isBiggerHorizontally = subject.left < frame2.left && subject.right > frame2.right;
      const isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
      if (isTargetBiggerThanFrame) {
        return true;
      }
      const isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
      return isTargetBiggerOnOneAxis;
    };
  };
  var isTotallyVisibleThroughFrame = (frame2) => {
    const isWithinVertical = isWithin(frame2.top, frame2.bottom);
    const isWithinHorizontal = isWithin(frame2.left, frame2.right);
    return (subject) => {
      const isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
      return isContained;
    };
  };
  var vertical = {
    direction: "vertical",
    line: "y",
    crossAxisLine: "x",
    start: "top",
    end: "bottom",
    size: "height",
    crossAxisStart: "left",
    crossAxisEnd: "right",
    crossAxisSize: "width"
  };
  var horizontal = {
    direction: "horizontal",
    line: "x",
    crossAxisLine: "y",
    start: "left",
    end: "right",
    size: "width",
    crossAxisStart: "top",
    crossAxisEnd: "bottom",
    crossAxisSize: "height"
  };
  var isTotallyVisibleThroughFrameOnAxis = (axis) => (frame2) => {
    const isWithinVertical = isWithin(frame2.top, frame2.bottom);
    const isWithinHorizontal = isWithin(frame2.left, frame2.right);
    return (subject) => {
      if (axis === vertical) {
        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
      }
      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    };
  };
  var getDroppableDisplaced = (target, destination) => {
    const displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
    return offsetByPosition(target, displacement);
  };
  var isVisibleInDroppable = (target, destination, isVisibleThroughFrameFn) => {
    if (!destination.subject.active) {
      return false;
    }
    return isVisibleThroughFrameFn(destination.subject.active)(target);
  };
  var isVisibleInViewport = (target, viewport2, isVisibleThroughFrameFn) => isVisibleThroughFrameFn(viewport2)(target);
  var isVisible$1 = ({
    target: toBeDisplaced,
    destination,
    viewport: viewport2,
    withDroppableDisplacement: withDroppableDisplacement2,
    isVisibleThroughFrameFn
  }) => {
    const displacedTarget = withDroppableDisplacement2 ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
    return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport2, isVisibleThroughFrameFn);
  };
  var isPartiallyVisible = (args) => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
  });
  var isTotallyVisible = (args) => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
  });
  var isTotallyVisibleOnAxis = (args) => isVisible$1({
    ...args,
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
  });
  var getShouldAnimate = (id2, last, forceShouldAnimate) => {
    if (typeof forceShouldAnimate === "boolean") {
      return forceShouldAnimate;
    }
    if (!last) {
      return true;
    }
    const {
      invisible,
      visible
    } = last;
    if (invisible[id2]) {
      return false;
    }
    const previous = visible[id2];
    return previous ? previous.shouldAnimate : true;
  };
  function getTarget(draggable2, displacedBy) {
    const marginBox = draggable2.page.marginBox;
    const expandBy = {
      top: displacedBy.point.y,
      right: 0,
      bottom: 0,
      left: displacedBy.point.x
    };
    return getRect(expand(marginBox, expandBy));
  }
  function getDisplacementGroups({
    afterDragging,
    destination,
    displacedBy,
    viewport: viewport2,
    forceShouldAnimate,
    last
  }) {
    return afterDragging.reduce(function process2(groups, draggable2) {
      const target = getTarget(draggable2, displacedBy);
      const id2 = draggable2.descriptor.id;
      groups.all.push(id2);
      const isVisible2 = isPartiallyVisible({
        target,
        destination,
        viewport: viewport2,
        withDroppableDisplacement: true
      });
      if (!isVisible2) {
        groups.invisible[draggable2.descriptor.id] = true;
        return groups;
      }
      const shouldAnimate = getShouldAnimate(id2, last, forceShouldAnimate);
      const displacement = {
        draggableId: id2,
        shouldAnimate
      };
      groups.visible[id2] = displacement;
      return groups;
    }, {
      all: [],
      visible: {},
      invisible: {}
    });
  }
  function getIndexOfLastItem(draggables, options) {
    if (!draggables.length) {
      return 0;
    }
    const indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
    return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
  }
  function goAtEnd({
    insideDestination,
    inHomeList,
    displacedBy,
    destination
  }) {
    const newIndex = getIndexOfLastItem(insideDestination, {
      inHomeList
    });
    return {
      displaced: emptyGroups,
      displacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: newIndex
        }
      }
    };
  }
  function calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport: viewport2,
    displacedBy,
    last,
    index: index2,
    forceShouldAnimate
  }) {
    const inHomeList = isHomeOf(draggable2, destination);
    if (index2 == null) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }
    const match = insideDestination.find((item) => item.descriptor.index === index2);
    if (!match) {
      return goAtEnd({
        insideDestination,
        inHomeList,
        displacedBy,
        destination
      });
    }
    const withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    const sliceFrom = insideDestination.indexOf(match);
    const impacted = withoutDragging.slice(sliceFrom);
    const displaced = getDisplacementGroups({
      afterDragging: impacted,
      destination,
      displacedBy,
      last,
      viewport: viewport2.frame,
      forceShouldAnimate
    });
    return {
      displaced,
      displacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: index2
        }
      }
    };
  }
  function didStartAfterCritical(draggableId, afterCritical) {
    return Boolean(afterCritical.effected[draggableId]);
  }
  var fromCombine = ({
    isMovingForward,
    destination,
    draggables,
    combine: combine2,
    afterCritical
  }) => {
    if (!destination.isCombineEnabled) {
      return null;
    }
    const combineId = combine2.draggableId;
    const combineWith = draggables[combineId];
    const combineWithIndex = combineWith.descriptor.index;
    const didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
    if (didCombineWithStartAfterCritical) {
      if (isMovingForward) {
        return combineWithIndex;
      }
      return combineWithIndex - 1;
    }
    if (isMovingForward) {
      return combineWithIndex + 1;
    }
    return combineWithIndex;
  };
  var fromReorder = ({
    isMovingForward,
    isInHomeList,
    insideDestination,
    location
  }) => {
    if (!insideDestination.length) {
      return null;
    }
    const currentIndex = location.index;
    const proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
    const firstIndex = insideDestination[0].descriptor.index;
    const lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
    const upperBound = isInHomeList ? lastIndex : lastIndex + 1;
    if (proposedIndex < firstIndex) {
      return null;
    }
    if (proposedIndex > upperBound) {
      return null;
    }
    return proposedIndex;
  };
  var moveToNextIndex = ({
    isMovingForward,
    isInHomeList,
    draggable: draggable2,
    draggables,
    destination,
    insideDestination,
    previousImpact,
    viewport: viewport2,
    afterCritical
  }) => {
    const wasAt = previousImpact.at;
    !wasAt ? true ? invariant6(false, "Cannot move in direction without previous impact location") : invariant6() : void 0;
    if (wasAt.type === "REORDER") {
      const newIndex2 = fromReorder({
        isMovingForward,
        isInHomeList,
        location: wasAt.destination,
        insideDestination
      });
      if (newIndex2 == null) {
        return null;
      }
      return calculateReorderImpact({
        draggable: draggable2,
        insideDestination,
        destination,
        viewport: viewport2,
        last: previousImpact.displaced,
        displacedBy: previousImpact.displacedBy,
        index: newIndex2
      });
    }
    const newIndex = fromCombine({
      isMovingForward,
      destination,
      displaced: previousImpact.displaced,
      draggables,
      combine: wasAt.combine,
      afterCritical
    });
    if (newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: newIndex
    });
  };
  var getCombinedItemDisplacement = ({
    displaced,
    afterCritical,
    combineWith,
    displacedBy
  }) => {
    const isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
    if (didStartAfterCritical(combineWith, afterCritical)) {
      return isDisplaced ? origin : negate(displacedBy.point);
    }
    return isDisplaced ? displacedBy.point : origin;
  };
  var whenCombining = ({
    afterCritical,
    impact,
    draggables
  }) => {
    const combine2 = tryGetCombine(impact);
    !combine2 ? true ? invariant6() : invariant6() : void 0;
    const combineWith = combine2.draggableId;
    const center = draggables[combineWith].page.borderBox.center;
    const displaceBy = getCombinedItemDisplacement({
      displaced: impact.displaced,
      afterCritical,
      combineWith,
      displacedBy: impact.displacedBy
    });
    return add(center, displaceBy);
  };
  var distanceFromStartToBorderBoxCenter = (axis, box) => box.margin[axis.start] + box.borderBox[axis.size] / 2;
  var distanceFromEndToBorderBoxCenter = (axis, box) => box.margin[axis.end] + box.borderBox[axis.size] / 2;
  var getCrossAxisBorderBoxCenter = (axis, target, isMoving) => target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
  var goAfter = ({
    axis,
    moveRelativeTo,
    isMoving
  }) => patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  var goBefore = ({
    axis,
    moveRelativeTo,
    isMoving
  }) => patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
  var goIntoStart = ({
    axis,
    moveInto,
    isMoving
  }) => patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
  var whenReordering = ({
    impact,
    draggable: draggable2,
    draggables,
    droppable: droppable2,
    afterCritical
  }) => {
    const insideDestination = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
    const draggablePage = draggable2.page;
    const axis = droppable2.axis;
    if (!insideDestination.length) {
      return goIntoStart({
        axis,
        moveInto: droppable2.page,
        isMoving: draggablePage
      });
    }
    const {
      displaced,
      displacedBy
    } = impact;
    const closestAfter = displaced.all[0];
    if (closestAfter) {
      const closest2 = draggables[closestAfter];
      if (didStartAfterCritical(closestAfter, afterCritical)) {
        return goBefore({
          axis,
          moveRelativeTo: closest2.page,
          isMoving: draggablePage
        });
      }
      const withDisplacement = offset2(closest2.page, displacedBy.point);
      return goBefore({
        axis,
        moveRelativeTo: withDisplacement,
        isMoving: draggablePage
      });
    }
    const last = insideDestination[insideDestination.length - 1];
    if (last.descriptor.id === draggable2.descriptor.id) {
      return draggablePage.borderBox.center;
    }
    if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
      const page = offset2(last.page, negate(afterCritical.displacedBy.point));
      return goAfter({
        axis,
        moveRelativeTo: page,
        isMoving: draggablePage
      });
    }
    return goAfter({
      axis,
      moveRelativeTo: last.page,
      isMoving: draggablePage
    });
  };
  var withDroppableDisplacement = (droppable2, point) => {
    const frame2 = droppable2.frame;
    if (!frame2) {
      return point;
    }
    return add(point, frame2.scroll.diff.displacement);
  };
  var getResultWithoutDroppableDisplacement = ({
    impact,
    draggable: draggable2,
    droppable: droppable2,
    draggables,
    afterCritical
  }) => {
    const original = draggable2.page.borderBox.center;
    const at = impact.at;
    if (!droppable2) {
      return original;
    }
    if (!at) {
      return original;
    }
    if (at.type === "REORDER") {
      return whenReordering({
        impact,
        draggable: draggable2,
        draggables,
        droppable: droppable2,
        afterCritical
      });
    }
    return whenCombining({
      impact,
      draggables,
      afterCritical
    });
  };
  var getPageBorderBoxCenterFromImpact = (args) => {
    const withoutDisplacement = getResultWithoutDroppableDisplacement(args);
    const droppable2 = args.droppable;
    const withDisplacement = droppable2 ? withDroppableDisplacement(droppable2, withoutDisplacement) : withoutDisplacement;
    return withDisplacement;
  };
  var scrollViewport = (viewport2, newScroll) => {
    const diff = subtract(newScroll, viewport2.scroll.initial);
    const displacement = negate(diff);
    const frame2 = getRect({
      top: newScroll.y,
      bottom: newScroll.y + viewport2.frame.height,
      left: newScroll.x,
      right: newScroll.x + viewport2.frame.width
    });
    const updated = {
      frame: frame2,
      scroll: {
        initial: viewport2.scroll.initial,
        max: viewport2.scroll.max,
        current: newScroll,
        diff: {
          value: diff,
          displacement
        }
      }
    };
    return updated;
  };
  function getDraggables$1(ids, draggables) {
    return ids.map((id2) => draggables[id2]);
  }
  function tryGetVisible(id2, groups) {
    for (let i = 0; i < groups.length; i++) {
      const displacement = groups[i].visible[id2];
      if (displacement) {
        return displacement;
      }
    }
    return null;
  }
  var speculativelyIncrease = ({
    impact,
    viewport: viewport2,
    destination,
    draggables,
    maxScrollChange
  }) => {
    const scrolledViewport = scrollViewport(viewport2, add(viewport2.scroll.current, maxScrollChange));
    const scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
    const last = impact.displaced;
    const withViewportScroll = getDisplacementGroups({
      afterDragging: getDraggables$1(last.all, draggables),
      destination,
      displacedBy: impact.displacedBy,
      viewport: scrolledViewport.frame,
      last,
      forceShouldAnimate: false
    });
    const withDroppableScroll2 = getDisplacementGroups({
      afterDragging: getDraggables$1(last.all, draggables),
      destination: scrolledDroppable,
      displacedBy: impact.displacedBy,
      viewport: viewport2.frame,
      last,
      forceShouldAnimate: false
    });
    const invisible = {};
    const visible = {};
    const groups = [last, withViewportScroll, withDroppableScroll2];
    last.all.forEach((id2) => {
      const displacement = tryGetVisible(id2, groups);
      if (displacement) {
        visible[id2] = displacement;
        return;
      }
      invisible[id2] = true;
    });
    const newImpact = {
      ...impact,
      displaced: {
        all: last.all,
        invisible,
        visible
      }
    };
    return newImpact;
  };
  var withViewportDisplacement = (viewport2, point) => add(viewport2.scroll.diff.displacement, point);
  var getClientFromPageBorderBoxCenter = ({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport: viewport2
  }) => {
    const withoutPageScrollChange = withViewportDisplacement(viewport2, pageBorderBoxCenter);
    const offset4 = subtract(withoutPageScrollChange, draggable2.page.borderBox.center);
    return add(draggable2.client.borderBox.center, offset4);
  };
  var isTotallyVisibleInNewLocation = ({
    draggable: draggable2,
    destination,
    newPageBorderBoxCenter,
    viewport: viewport2,
    withDroppableDisplacement: withDroppableDisplacement2,
    onlyOnMainAxis = false
  }) => {
    const changeNeeded = subtract(newPageBorderBoxCenter, draggable2.page.borderBox.center);
    const shifted = offsetByPosition(draggable2.page.borderBox, changeNeeded);
    const args = {
      target: shifted,
      destination,
      withDroppableDisplacement: withDroppableDisplacement2,
      viewport: viewport2
    };
    return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
  };
  var moveToNextPlace = ({
    isMovingForward,
    draggable: draggable2,
    destination,
    draggables,
    previousImpact,
    viewport: viewport2,
    previousPageBorderBoxCenter,
    previousClientSelection,
    afterCritical
  }) => {
    if (!destination.isEnabled) {
      return null;
    }
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    const isInHomeList = isHomeOf(draggable2, destination);
    const impact = moveToNextCombine({
      isMovingForward,
      draggable: draggable2,
      destination,
      insideDestination,
      previousImpact
    }) || moveToNextIndex({
      isMovingForward,
      isInHomeList,
      draggable: draggable2,
      draggables,
      destination,
      insideDestination,
      previousImpact,
      viewport: viewport2,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    const isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable: draggable2,
      destination,
      newPageBorderBoxCenter: pageBorderBoxCenter,
      viewport: viewport2.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    if (isVisibleInNewLocation) {
      const clientSelection = getClientFromPageBorderBoxCenter({
        pageBorderBoxCenter,
        draggable: draggable2,
        viewport: viewport2
      });
      return {
        clientSelection,
        impact,
        scrollJumpRequest: null
      };
    }
    const distance3 = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
    const cautious = speculativelyIncrease({
      impact,
      viewport: viewport2,
      destination,
      draggables,
      maxScrollChange: distance3
    });
    return {
      clientSelection: previousClientSelection,
      impact: cautious,
      scrollJumpRequest: distance3
    };
  };
  var getKnownActive = (droppable2) => {
    const rect = droppable2.subject.active;
    !rect ? true ? invariant6(false, "Cannot get clipped area from droppable") : invariant6() : void 0;
    return rect;
  };
  var getBestCrossAxisDroppable = ({
    isMovingForward,
    pageBorderBoxCenter,
    source,
    droppables,
    viewport: viewport2
  }) => {
    const active = source.subject.active;
    if (!active) {
      return null;
    }
    const axis = source.axis;
    const isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
    const candidates = toDroppableList(droppables).filter((droppable2) => droppable2 !== source).filter((droppable2) => droppable2.isEnabled).filter((droppable2) => Boolean(droppable2.subject.active)).filter((droppable2) => isPartiallyVisibleThroughFrame(viewport2.frame)(getKnownActive(droppable2))).filter((droppable2) => {
      const activeOfTarget = getKnownActive(droppable2);
      if (isMovingForward) {
        return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
      }
      return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
    }).filter((droppable2) => {
      const activeOfTarget = getKnownActive(droppable2);
      const isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
      return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
    }).sort((a, b) => {
      const first = getKnownActive(a)[axis.crossAxisStart];
      const second = getKnownActive(b)[axis.crossAxisStart];
      if (isMovingForward) {
        return first - second;
      }
      return second - first;
    }).filter((droppable2, index2, array2) => getKnownActive(droppable2)[axis.crossAxisStart] === getKnownActive(array2[0])[axis.crossAxisStart]);
    if (!candidates.length) {
      return null;
    }
    if (candidates.length === 1) {
      return candidates[0];
    }
    const contains3 = candidates.filter((droppable2) => {
      const isWithinDroppable = isWithin(getKnownActive(droppable2)[axis.start], getKnownActive(droppable2)[axis.end]);
      return isWithinDroppable(pageBorderBoxCenter[axis.line]);
    });
    if (contains3.length === 1) {
      return contains3[0];
    }
    if (contains3.length > 1) {
      return contains3.sort((a, b) => getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start])[0];
    }
    return candidates.sort((a, b) => {
      const first = closest$1(pageBorderBoxCenter, getCorners(getKnownActive(a)));
      const second = closest$1(pageBorderBoxCenter, getCorners(getKnownActive(b)));
      if (first !== second) {
        return first - second;
      }
      return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];
    })[0];
  };
  var getCurrentPageBorderBoxCenter = (draggable2, afterCritical) => {
    const original = draggable2.page.borderBox.center;
    return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
  };
  var getCurrentPageBorderBox = (draggable2, afterCritical) => {
    const original = draggable2.page.borderBox;
    return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
  };
  var getClosestDraggable = ({
    pageBorderBoxCenter,
    viewport: viewport2,
    destination,
    insideDestination,
    afterCritical
  }) => {
    const sorted = insideDestination.filter((draggable2) => isTotallyVisible({
      target: getCurrentPageBorderBox(draggable2, afterCritical),
      destination,
      viewport: viewport2.frame,
      withDroppableDisplacement: true
    })).sort((a, b) => {
      const distanceToA = distance2(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
      const distanceToB = distance2(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b, afterCritical)));
      if (distanceToA < distanceToB) {
        return -1;
      }
      if (distanceToB < distanceToA) {
        return 1;
      }
      return a.descriptor.index - b.descriptor.index;
    });
    return sorted[0] || null;
  };
  var getDisplacedBy = memoizeOne(function getDisplacedBy2(axis, displaceBy) {
    const displacement = displaceBy[axis.line];
    return {
      value: displacement,
      point: patch(axis.line, displacement)
    };
  });
  var getRequiredGrowthForPlaceholder = (droppable2, placeholderSize, draggables) => {
    const axis = droppable2.axis;
    if (droppable2.descriptor.mode === "virtual") {
      return patch(axis.line, placeholderSize[axis.line]);
    }
    const availableSpace = droppable2.subject.page.contentBox[axis.size];
    const insideDroppable = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
    const spaceUsed = insideDroppable.reduce((sum, dimension) => sum + dimension.client.marginBox[axis.size], 0);
    const requiredSpace = spaceUsed + placeholderSize[axis.line];
    const needsToGrowBy = requiredSpace - availableSpace;
    if (needsToGrowBy <= 0) {
      return null;
    }
    return patch(axis.line, needsToGrowBy);
  };
  var withMaxScroll = (frame2, max2) => ({
    ...frame2,
    scroll: {
      ...frame2.scroll,
      max: max2
    }
  });
  var addPlaceholder = (droppable2, draggable2, draggables) => {
    const frame2 = droppable2.frame;
    !!isHomeOf(draggable2, droppable2) ? true ? invariant6(false, "Should not add placeholder space to home list") : invariant6() : void 0;
    !!droppable2.subject.withPlaceholder ? true ? invariant6(false, "Cannot add placeholder size to a subject when it already has one") : invariant6() : void 0;
    const placeholderSize = getDisplacedBy(droppable2.axis, draggable2.displaceBy).point;
    const requiredGrowth = getRequiredGrowthForPlaceholder(droppable2, placeholderSize, draggables);
    const added = {
      placeholderSize,
      increasedBy: requiredGrowth,
      oldFrameMaxScroll: droppable2.frame ? droppable2.frame.scroll.max : null
    };
    if (!frame2) {
      const subject2 = getSubject({
        page: droppable2.subject.page,
        withPlaceholder: added,
        axis: droppable2.axis,
        frame: droppable2.frame
      });
      return {
        ...droppable2,
        subject: subject2
      };
    }
    const maxScroll = requiredGrowth ? add(frame2.scroll.max, requiredGrowth) : frame2.scroll.max;
    const newFrame = withMaxScroll(frame2, maxScroll);
    const subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: added,
      axis: droppable2.axis,
      frame: newFrame
    });
    return {
      ...droppable2,
      subject,
      frame: newFrame
    };
  };
  var removePlaceholder = (droppable2) => {
    const added = droppable2.subject.withPlaceholder;
    !added ? true ? invariant6(false, "Cannot remove placeholder form subject when there was none") : invariant6() : void 0;
    const frame2 = droppable2.frame;
    if (!frame2) {
      const subject2 = getSubject({
        page: droppable2.subject.page,
        axis: droppable2.axis,
        frame: null,
        withPlaceholder: null
      });
      return {
        ...droppable2,
        subject: subject2
      };
    }
    const oldMaxScroll = added.oldFrameMaxScroll;
    !oldMaxScroll ? true ? invariant6(false, "Expected droppable with frame to have old max frame scroll when removing placeholder") : invariant6() : void 0;
    const newFrame = withMaxScroll(frame2, oldMaxScroll);
    const subject = getSubject({
      page: droppable2.subject.page,
      axis: droppable2.axis,
      frame: newFrame,
      withPlaceholder: null
    });
    return {
      ...droppable2,
      subject,
      frame: newFrame
    };
  };
  var moveToNewDroppable = ({
    previousPageBorderBoxCenter,
    moveRelativeTo,
    insideDestination,
    draggable: draggable2,
    draggables,
    destination,
    viewport: viewport2,
    afterCritical
  }) => {
    if (!moveRelativeTo) {
      if (insideDestination.length) {
        return null;
      }
      const proposed = {
        displaced: emptyGroups,
        displacedBy: noDisplacedBy,
        at: {
          type: "REORDER",
          destination: {
            droppableId: destination.descriptor.id,
            index: 0
          }
        }
      };
      const proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
        impact: proposed,
        draggable: draggable2,
        droppable: destination,
        draggables,
        afterCritical
      });
      const withPlaceholder = isHomeOf(draggable2, destination) ? destination : addPlaceholder(destination, draggable2, draggables);
      const isVisibleInNewLocation = isTotallyVisibleInNewLocation({
        draggable: draggable2,
        destination: withPlaceholder,
        newPageBorderBoxCenter: proposedPageBorderBoxCenter,
        viewport: viewport2.frame,
        withDroppableDisplacement: false,
        onlyOnMainAxis: true
      });
      return isVisibleInNewLocation ? proposed : null;
    }
    const isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
    const proposedIndex = (() => {
      const relativeTo = moveRelativeTo.descriptor.index;
      if (moveRelativeTo.descriptor.id === draggable2.descriptor.id) {
        return relativeTo;
      }
      if (isGoingBeforeTarget) {
        return relativeTo;
      }
      return relativeTo + 1;
    })();
    const displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      displacedBy,
      last: emptyGroups,
      index: proposedIndex
    });
  };
  var moveCrossAxis = ({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    isOver,
    draggables,
    droppables,
    viewport: viewport2,
    afterCritical
  }) => {
    const destination = getBestCrossAxisDroppable({
      isMovingForward,
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      source: isOver,
      droppables,
      viewport: viewport2
    });
    if (!destination) {
      return null;
    }
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    const moveRelativeTo = getClosestDraggable({
      pageBorderBoxCenter: previousPageBorderBoxCenter,
      viewport: viewport2,
      destination,
      insideDestination,
      afterCritical
    });
    const impact = moveToNewDroppable({
      previousPageBorderBoxCenter,
      destination,
      draggable: draggable2,
      draggables,
      moveRelativeTo,
      insideDestination,
      viewport: viewport2,
      afterCritical
    });
    if (!impact) {
      return null;
    }
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    const clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport: viewport2
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  };
  var whatIsDraggedOver = (impact) => {
    const at = impact.at;
    if (!at) {
      return null;
    }
    if (at.type === "REORDER") {
      return at.destination.droppableId;
    }
    return at.combine.droppableId;
  };
  var getDroppableOver$1 = (impact, droppables) => {
    const id2 = whatIsDraggedOver(impact);
    return id2 ? droppables[id2] : null;
  };
  var moveInDirection = ({
    state,
    type
  }) => {
    const isActuallyOver = getDroppableOver$1(state.impact, state.dimensions.droppables);
    const isMainAxisMovementAllowed = Boolean(isActuallyOver);
    const home2 = state.dimensions.droppables[state.critical.droppable.id];
    const isOver = isActuallyOver || home2;
    const direction = isOver.axis.direction;
    const isMovingOnMainAxis = direction === "vertical" && (type === "MOVE_UP" || type === "MOVE_DOWN") || direction === "horizontal" && (type === "MOVE_LEFT" || type === "MOVE_RIGHT");
    if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
      return null;
    }
    const isMovingForward = type === "MOVE_DOWN" || type === "MOVE_RIGHT";
    const draggable2 = state.dimensions.draggables[state.critical.draggable.id];
    const previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
    const {
      draggables,
      droppables
    } = state.dimensions;
    return isMovingOnMainAxis ? moveToNextPlace({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable: draggable2,
      destination: isOver,
      draggables,
      viewport: state.viewport,
      previousClientSelection: state.current.client.selection,
      previousImpact: state.impact,
      afterCritical: state.afterCritical
    }) : moveCrossAxis({
      isMovingForward,
      previousPageBorderBoxCenter,
      draggable: draggable2,
      isOver,
      draggables,
      droppables,
      viewport: state.viewport,
      afterCritical: state.afterCritical
    });
  };
  function isMovementAllowed(state) {
    return state.phase === "DRAGGING" || state.phase === "COLLECTING";
  }
  function isPositionInFrame(frame2) {
    const isWithinVertical = isWithin(frame2.top, frame2.bottom);
    const isWithinHorizontal = isWithin(frame2.left, frame2.right);
    return function run(point) {
      return isWithinVertical(point.y) && isWithinHorizontal(point.x);
    };
  }
  function getHasOverlap(first, second) {
    return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
  }
  function getFurthestAway({
    pageBorderBox,
    draggable: draggable2,
    candidates
  }) {
    const startCenter = draggable2.page.borderBox.center;
    const sorted = candidates.map((candidate) => {
      const axis = candidate.axis;
      const target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
      return {
        id: candidate.descriptor.id,
        distance: distance2(startCenter, target)
      };
    }).sort((a, b) => b.distance - a.distance);
    return sorted[0] ? sorted[0].id : null;
  }
  function getDroppableOver({
    pageBorderBox,
    draggable: draggable2,
    droppables
  }) {
    const candidates = toDroppableList(droppables).filter((item) => {
      if (!item.isEnabled) {
        return false;
      }
      const active = item.subject.active;
      if (!active) {
        return false;
      }
      if (!getHasOverlap(pageBorderBox, active)) {
        return false;
      }
      if (isPositionInFrame(active)(pageBorderBox.center)) {
        return true;
      }
      const axis = item.axis;
      const childCenter = active.center[axis.crossAxisLine];
      const crossAxisStart = pageBorderBox[axis.crossAxisStart];
      const crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
      const isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
      const isStartContained = isContained(crossAxisStart);
      const isEndContained = isContained(crossAxisEnd);
      if (!isStartContained && !isEndContained) {
        return true;
      }
      if (isStartContained) {
        return crossAxisStart < childCenter;
      }
      return crossAxisEnd > childCenter;
    });
    if (!candidates.length) {
      return null;
    }
    if (candidates.length === 1) {
      return candidates[0].descriptor.id;
    }
    return getFurthestAway({
      pageBorderBox,
      draggable: draggable2,
      candidates
    });
  }
  var offsetRectByPosition = (rect, point) => getRect(offsetByPosition(rect, point));
  var withDroppableScroll = (droppable2, area) => {
    const frame2 = droppable2.frame;
    if (!frame2) {
      return area;
    }
    return offsetRectByPosition(area, frame2.scroll.diff.value);
  };
  function getIsDisplaced({
    displaced,
    id: id2
  }) {
    return Boolean(displaced.visible[id2] || displaced.invisible[id2]);
  }
  function atIndex({
    draggable: draggable2,
    closest: closest2,
    inHomeList
  }) {
    if (!closest2) {
      return null;
    }
    if (!inHomeList) {
      return closest2.descriptor.index;
    }
    if (closest2.descriptor.index > draggable2.descriptor.index) {
      return closest2.descriptor.index - 1;
    }
    return closest2.descriptor.index;
  }
  var getReorderImpact = ({
    pageBorderBoxWithDroppableScroll: targetRect,
    draggable: draggable2,
    destination,
    insideDestination,
    last,
    viewport: viewport2,
    afterCritical
  }) => {
    const axis = destination.axis;
    const displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    const displacement = displacedBy.value;
    const targetStart = targetRect[axis.start];
    const targetEnd = targetRect[axis.end];
    const withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    const closest2 = withoutDragging.find((child) => {
      const id2 = child.descriptor.id;
      const childCenter = child.page.borderBox.center[axis.line];
      const didStartAfterCritical$1 = didStartAfterCritical(id2, afterCritical);
      const isDisplaced = getIsDisplaced({
        displaced: last,
        id: id2
      });
      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd <= childCenter;
        }
        return targetStart < childCenter - displacement;
      }
      if (isDisplaced) {
        return targetEnd <= childCenter + displacement;
      }
      return targetStart < childCenter;
    }) || null;
    const newIndex = atIndex({
      draggable: draggable2,
      closest: closest2,
      inHomeList: isHomeOf(draggable2, destination)
    });
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      last,
      displacedBy,
      index: newIndex
    });
  };
  var combineThresholdDivisor = 4;
  var getCombineImpact = ({
    draggable: draggable2,
    pageBorderBoxWithDroppableScroll: targetRect,
    previousImpact,
    destination,
    insideDestination,
    afterCritical
  }) => {
    if (!destination.isCombineEnabled) {
      return null;
    }
    const axis = destination.axis;
    const displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
    const displacement = displacedBy.value;
    const targetStart = targetRect[axis.start];
    const targetEnd = targetRect[axis.end];
    const withoutDragging = removeDraggableFromList(draggable2, insideDestination);
    const combineWith = withoutDragging.find((child) => {
      const id2 = child.descriptor.id;
      const childRect = child.page.borderBox;
      const childSize = childRect[axis.size];
      const threshold = childSize / combineThresholdDivisor;
      const didStartAfterCritical$1 = didStartAfterCritical(id2, afterCritical);
      const isDisplaced = getIsDisplaced({
        displaced: previousImpact.displaced,
        id: id2
      });
      if (didStartAfterCritical$1) {
        if (isDisplaced) {
          return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
        }
        return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
      }
      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
      }
      return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
    });
    if (!combineWith) {
      return null;
    }
    const impact = {
      displacedBy,
      displaced: previousImpact.displaced,
      at: {
        type: "COMBINE",
        combine: {
          draggableId: combineWith.descriptor.id,
          droppableId: destination.descriptor.id
        }
      }
    };
    return impact;
  };
  var getDragImpact = ({
    pageOffset,
    draggable: draggable2,
    draggables,
    droppables,
    previousImpact,
    viewport: viewport2,
    afterCritical
  }) => {
    const pageBorderBox = offsetRectByPosition(draggable2.page.borderBox, pageOffset);
    const destinationId = getDroppableOver({
      pageBorderBox,
      draggable: draggable2,
      droppables
    });
    if (!destinationId) {
      return noImpact;
    }
    const destination = droppables[destinationId];
    const insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
    const pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
    return getCombineImpact({
      pageBorderBoxWithDroppableScroll,
      draggable: draggable2,
      previousImpact,
      destination,
      insideDestination,
      afterCritical
    }) || getReorderImpact({
      pageBorderBoxWithDroppableScroll,
      draggable: draggable2,
      destination,
      insideDestination,
      last: previousImpact.displaced,
      viewport: viewport2,
      afterCritical
    });
  };
  var patchDroppableMap = (droppables, updated) => ({
    ...droppables,
    [updated.descriptor.id]: updated
  });
  var clearUnusedPlaceholder = ({
    previousImpact,
    impact,
    droppables
  }) => {
    const last = whatIsDraggedOver(previousImpact);
    const now2 = whatIsDraggedOver(impact);
    if (!last) {
      return droppables;
    }
    if (last === now2) {
      return droppables;
    }
    const lastDroppable = droppables[last];
    if (!lastDroppable.subject.withPlaceholder) {
      return droppables;
    }
    const updated = removePlaceholder(lastDroppable);
    return patchDroppableMap(droppables, updated);
  };
  var recomputePlaceholders = ({
    draggable: draggable2,
    draggables,
    droppables,
    previousImpact,
    impact
  }) => {
    const cleaned = clearUnusedPlaceholder({
      previousImpact,
      impact,
      droppables
    });
    const isOver = whatIsDraggedOver(impact);
    if (!isOver) {
      return cleaned;
    }
    const droppable2 = droppables[isOver];
    if (isHomeOf(draggable2, droppable2)) {
      return cleaned;
    }
    if (droppable2.subject.withPlaceholder) {
      return cleaned;
    }
    const patched = addPlaceholder(droppable2, draggable2, draggables);
    return patchDroppableMap(cleaned, patched);
  };
  var update = ({
    state,
    clientSelection: forcedClientSelection,
    dimensions: forcedDimensions,
    viewport: forcedViewport,
    impact: forcedImpact,
    scrollJumpRequest
  }) => {
    const viewport2 = forcedViewport || state.viewport;
    const dimensions = forcedDimensions || state.dimensions;
    const clientSelection = forcedClientSelection || state.current.client.selection;
    const offset4 = subtract(clientSelection, state.initial.client.selection);
    const client = {
      offset: offset4,
      selection: clientSelection,
      borderBoxCenter: add(state.initial.client.borderBoxCenter, offset4)
    };
    const page = {
      selection: add(client.selection, viewport2.scroll.current),
      borderBoxCenter: add(client.borderBoxCenter, viewport2.scroll.current),
      offset: add(client.offset, viewport2.scroll.diff.value)
    };
    const current = {
      client,
      page
    };
    if (state.phase === "COLLECTING") {
      return {
        ...state,
        dimensions,
        viewport: viewport2,
        current
      };
    }
    const draggable2 = dimensions.draggables[state.critical.draggable.id];
    const newImpact = forcedImpact || getDragImpact({
      pageOffset: page.offset,
      draggable: draggable2,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact: state.impact,
      viewport: viewport2,
      afterCritical: state.afterCritical
    });
    const withUpdatedPlaceholders = recomputePlaceholders({
      draggable: draggable2,
      impact: newImpact,
      previousImpact: state.impact,
      draggables: dimensions.draggables,
      droppables: dimensions.droppables
    });
    const result = {
      ...state,
      current,
      dimensions: {
        draggables: dimensions.draggables,
        droppables: withUpdatedPlaceholders
      },
      impact: newImpact,
      viewport: viewport2,
      scrollJumpRequest: scrollJumpRequest || null,
      forceShouldAnimate: scrollJumpRequest ? false : null
    };
    return result;
  };
  function getDraggables(ids, draggables) {
    return ids.map((id2) => draggables[id2]);
  }
  var recompute = ({
    impact,
    viewport: viewport2,
    draggables,
    destination,
    forceShouldAnimate
  }) => {
    const last = impact.displaced;
    const afterDragging = getDraggables(last.all, draggables);
    const displaced = getDisplacementGroups({
      afterDragging,
      destination,
      displacedBy: impact.displacedBy,
      viewport: viewport2.frame,
      forceShouldAnimate,
      last
    });
    return {
      ...impact,
      displaced
    };
  };
  var getClientBorderBoxCenter = ({
    impact,
    draggable: draggable2,
    droppable: droppable2,
    draggables,
    viewport: viewport2,
    afterCritical
  }) => {
    const pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact,
      draggable: draggable2,
      draggables,
      droppable: droppable2,
      afterCritical
    });
    return getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport: viewport2
    });
  };
  var refreshSnap = ({
    state,
    dimensions: forcedDimensions,
    viewport: forcedViewport
  }) => {
    !(state.movementMode === "SNAP") ? true ? invariant6() : invariant6() : void 0;
    const needsVisibilityCheck = state.impact;
    const viewport2 = forcedViewport || state.viewport;
    const dimensions = forcedDimensions || state.dimensions;
    const {
      draggables,
      droppables
    } = dimensions;
    const draggable2 = draggables[state.critical.draggable.id];
    const isOver = whatIsDraggedOver(needsVisibilityCheck);
    !isOver ? true ? invariant6(false, "Must be over a destination in SNAP movement mode") : invariant6() : void 0;
    const destination = droppables[isOver];
    const impact = recompute({
      impact: needsVisibilityCheck,
      viewport: viewport2,
      destination,
      draggables
    });
    const clientSelection = getClientBorderBoxCenter({
      impact,
      draggable: draggable2,
      droppable: destination,
      draggables,
      viewport: viewport2,
      afterCritical: state.afterCritical
    });
    return update({
      impact,
      clientSelection,
      state,
      dimensions,
      viewport: viewport2
    });
  };
  var getHomeLocation = (descriptor) => ({
    index: descriptor.index,
    droppableId: descriptor.droppableId
  });
  var getLiftEffect = ({
    draggable: draggable2,
    home: home2,
    draggables,
    viewport: viewport2
  }) => {
    const displacedBy = getDisplacedBy(home2.axis, draggable2.displaceBy);
    const insideHome = getDraggablesInsideDroppable(home2.descriptor.id, draggables);
    const rawIndex = insideHome.indexOf(draggable2);
    !(rawIndex !== -1) ? true ? invariant6(false, "Expected draggable to be inside home list") : invariant6() : void 0;
    const afterDragging = insideHome.slice(rawIndex + 1);
    const effected = afterDragging.reduce((previous, item) => {
      previous[item.descriptor.id] = true;
      return previous;
    }, {});
    const afterCritical = {
      inVirtualList: home2.descriptor.mode === "virtual",
      displacedBy,
      effected
    };
    const displaced = getDisplacementGroups({
      afterDragging,
      destination: home2,
      displacedBy,
      last: null,
      viewport: viewport2.frame,
      forceShouldAnimate: false
    });
    const impact = {
      displaced,
      displacedBy,
      at: {
        type: "REORDER",
        destination: getHomeLocation(draggable2.descriptor)
      }
    };
    return {
      impact,
      afterCritical
    };
  };
  var patchDimensionMap = (dimensions, updated) => ({
    draggables: dimensions.draggables,
    droppables: patchDroppableMap(dimensions.droppables, updated)
  });
  var start3 = (key) => {
    if (true) {
      {
        return;
      }
    }
  };
  var finish = (key) => {
    if (true) {
      {
        return;
      }
    }
  };
  var offsetDraggable = ({
    draggable: draggable2,
    offset: offset$1,
    initialWindowScroll
  }) => {
    const client = offset2(draggable2.client, offset$1);
    const page = withScroll(client, initialWindowScroll);
    const moved = {
      ...draggable2,
      placeholder: {
        ...draggable2.placeholder,
        client
      },
      client,
      page
    };
    return moved;
  };
  var getFrame = (droppable2) => {
    const frame2 = droppable2.frame;
    !frame2 ? true ? invariant6(false, "Expected Droppable to have a frame") : invariant6() : void 0;
    return frame2;
  };
  var adjustAdditionsForScrollChanges = ({
    additions,
    updatedDroppables,
    viewport: viewport2
  }) => {
    const windowScrollChange = viewport2.scroll.diff.value;
    return additions.map((draggable2) => {
      const droppableId = draggable2.descriptor.droppableId;
      const modified = updatedDroppables[droppableId];
      const frame2 = getFrame(modified);
      const droppableScrollChange = frame2.scroll.diff.value;
      const totalChange = add(windowScrollChange, droppableScrollChange);
      const moved = offsetDraggable({
        draggable: draggable2,
        offset: totalChange,
        initialWindowScroll: viewport2.scroll.initial
      });
      return moved;
    });
  };
  var publishWhileDraggingInVirtual = ({
    state,
    published
  }) => {
    start3();
    const withScrollChange = published.modified.map((update2) => {
      const existing = state.dimensions.droppables[update2.droppableId];
      const scrolled = scrollDroppable(existing, update2.scroll);
      return scrolled;
    });
    const droppables = {
      ...state.dimensions.droppables,
      ...toDroppableMap(withScrollChange)
    };
    const updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
      additions: published.additions,
      updatedDroppables: droppables,
      viewport: state.viewport
    }));
    const draggables = {
      ...state.dimensions.draggables,
      ...updatedAdditions
    };
    published.removals.forEach((id2) => {
      delete draggables[id2];
    });
    const dimensions = {
      droppables,
      draggables
    };
    const wasOverId = whatIsDraggedOver(state.impact);
    const wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
    const draggable2 = dimensions.draggables[state.critical.draggable.id];
    const home2 = dimensions.droppables[state.critical.droppable.id];
    const {
      impact: onLiftImpact,
      afterCritical
    } = getLiftEffect({
      draggable: draggable2,
      home: home2,
      draggables,
      viewport: state.viewport
    });
    const previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
    const impact = getDragImpact({
      pageOffset: state.current.page.offset,
      draggable: dimensions.draggables[state.critical.draggable.id],
      draggables: dimensions.draggables,
      droppables: dimensions.droppables,
      previousImpact,
      viewport: state.viewport,
      afterCritical
    });
    finish();
    const draggingState = {
      ...state,
      phase: "DRAGGING",
      impact,
      onLiftImpact,
      dimensions,
      afterCritical,
      forceShouldAnimate: false
    };
    if (state.phase === "COLLECTING") {
      return draggingState;
    }
    const dropPending2 = {
      ...draggingState,
      phase: "DROP_PENDING",
      reason: state.reason,
      isWaiting: false
    };
    return dropPending2;
  };
  var isSnapping = (state) => state.movementMode === "SNAP";
  var postDroppableChange = (state, updated, isEnabledChanging) => {
    const dimensions = patchDimensionMap(state.dimensions, updated);
    if (!isSnapping(state) || isEnabledChanging) {
      return update({
        state,
        dimensions
      });
    }
    return refreshSnap({
      state,
      dimensions
    });
  };
  function removeScrollJumpRequest(state) {
    if (state.isDragging && state.movementMode === "SNAP") {
      return {
        ...state,
        scrollJumpRequest: null
      };
    }
    return state;
  }
  var idle$2 = {
    phase: "IDLE",
    completed: null,
    shouldFlush: false
  };
  var reducer = (state = idle$2, action) => {
    if (action.type === "FLUSH") {
      return {
        ...idle$2,
        shouldFlush: true
      };
    }
    if (action.type === "INITIAL_PUBLISH") {
      !(state.phase === "IDLE") ? true ? invariant6(false, "INITIAL_PUBLISH must come after a IDLE phase") : invariant6() : void 0;
      const {
        critical,
        clientSelection,
        viewport: viewport2,
        dimensions,
        movementMode
      } = action.payload;
      const draggable2 = dimensions.draggables[critical.draggable.id];
      const home2 = dimensions.droppables[critical.droppable.id];
      const client = {
        selection: clientSelection,
        borderBoxCenter: draggable2.client.borderBox.center,
        offset: origin
      };
      const initial = {
        client,
        page: {
          selection: add(client.selection, viewport2.scroll.initial),
          borderBoxCenter: add(client.selection, viewport2.scroll.initial),
          offset: add(client.selection, viewport2.scroll.diff.value)
        }
      };
      const isWindowScrollAllowed = toDroppableList(dimensions.droppables).every((item) => !item.isFixedOnPage);
      const {
        impact,
        afterCritical
      } = getLiftEffect({
        draggable: draggable2,
        home: home2,
        draggables: dimensions.draggables,
        viewport: viewport2
      });
      const result = {
        phase: "DRAGGING",
        isDragging: true,
        critical,
        movementMode,
        dimensions,
        initial,
        current: initial,
        isWindowScrollAllowed,
        impact,
        afterCritical,
        onLiftImpact: impact,
        viewport: viewport2,
        scrollJumpRequest: null,
        forceShouldAnimate: null
      };
      return result;
    }
    if (action.type === "COLLECTION_STARTING") {
      if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
        return state;
      }
      !(state.phase === "DRAGGING") ? true ? invariant6(false, `Collection cannot start from phase ${state.phase}`) : invariant6() : void 0;
      const result = {
        ...state,
        phase: "COLLECTING"
      };
      return result;
    }
    if (action.type === "PUBLISH_WHILE_DRAGGING") {
      !(state.phase === "COLLECTING" || state.phase === "DROP_PENDING") ? true ? invariant6(false, `Unexpected ${action.type} received in phase ${state.phase}`) : invariant6() : void 0;
      return publishWhileDraggingInVirtual({
        state,
        published: action.payload
      });
    }
    if (action.type === "MOVE") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant6(false, `${action.type} not permitted in phase ${state.phase}`) : invariant6() : void 0;
      const {
        client: clientSelection
      } = action.payload;
      if (isEqual$1(clientSelection, state.current.client.selection)) {
        return state;
      }
      return update({
        state,
        clientSelection,
        impact: isSnapping(state) ? state.impact : null
      });
    }
    if (action.type === "UPDATE_DROPPABLE_SCROLL") {
      if (state.phase === "DROP_PENDING") {
        return removeScrollJumpRequest(state);
      }
      if (state.phase === "COLLECTING") {
        return removeScrollJumpRequest(state);
      }
      !isMovementAllowed(state) ? true ? invariant6(false, `${action.type} not permitted in phase ${state.phase}`) : invariant6() : void 0;
      const {
        id: id2,
        newScroll
      } = action.payload;
      const target = state.dimensions.droppables[id2];
      if (!target) {
        return state;
      }
      const scrolled = scrollDroppable(target, newScroll);
      return postDroppableChange(state, scrolled, false);
    }
    if (action.type === "UPDATE_DROPPABLE_IS_ENABLED") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant6(false, `Attempting to move in an unsupported phase ${state.phase}`) : invariant6() : void 0;
      const {
        id: id2,
        isEnabled
      } = action.payload;
      const target = state.dimensions.droppables[id2];
      !target ? true ? invariant6(false, `Cannot find Droppable[id: ${id2}] to toggle its enabled state`) : invariant6() : void 0;
      !(target.isEnabled !== isEnabled) ? true ? invariant6(false, `Trying to set droppable isEnabled to ${String(isEnabled)}
      but it is already ${String(target.isEnabled)}`) : invariant6() : void 0;
      const updated = {
        ...target,
        isEnabled
      };
      return postDroppableChange(state, updated, true);
    }
    if (action.type === "UPDATE_DROPPABLE_IS_COMBINE_ENABLED") {
      if (state.phase === "DROP_PENDING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant6(false, `Attempting to move in an unsupported phase ${state.phase}`) : invariant6() : void 0;
      const {
        id: id2,
        isCombineEnabled
      } = action.payload;
      const target = state.dimensions.droppables[id2];
      !target ? true ? invariant6(false, `Cannot find Droppable[id: ${id2}] to toggle its isCombineEnabled state`) : invariant6() : void 0;
      !(target.isCombineEnabled !== isCombineEnabled) ? true ? invariant6(false, `Trying to set droppable isCombineEnabled to ${String(isCombineEnabled)}
      but it is already ${String(target.isCombineEnabled)}`) : invariant6() : void 0;
      const updated = {
        ...target,
        isCombineEnabled
      };
      return postDroppableChange(state, updated, true);
    }
    if (action.type === "MOVE_BY_WINDOW_SCROLL") {
      if (state.phase === "DROP_PENDING" || state.phase === "DROP_ANIMATING") {
        return state;
      }
      !isMovementAllowed(state) ? true ? invariant6(false, `Cannot move by window in phase ${state.phase}`) : invariant6() : void 0;
      !state.isWindowScrollAllowed ? true ? invariant6(false, "Window scrolling is currently not supported for fixed lists") : invariant6() : void 0;
      const newScroll = action.payload.newScroll;
      if (isEqual$1(state.viewport.scroll.current, newScroll)) {
        return removeScrollJumpRequest(state);
      }
      const viewport2 = scrollViewport(state.viewport, newScroll);
      if (isSnapping(state)) {
        return refreshSnap({
          state,
          viewport: viewport2
        });
      }
      return update({
        state,
        viewport: viewport2
      });
    }
    if (action.type === "UPDATE_VIEWPORT_MAX_SCROLL") {
      if (!isMovementAllowed(state)) {
        return state;
      }
      const maxScroll = action.payload.maxScroll;
      if (isEqual$1(maxScroll, state.viewport.scroll.max)) {
        return state;
      }
      const withMaxScroll2 = {
        ...state.viewport,
        scroll: {
          ...state.viewport.scroll,
          max: maxScroll
        }
      };
      return {
        ...state,
        viewport: withMaxScroll2
      };
    }
    if (action.type === "MOVE_UP" || action.type === "MOVE_DOWN" || action.type === "MOVE_LEFT" || action.type === "MOVE_RIGHT") {
      if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
        return state;
      }
      !(state.phase === "DRAGGING") ? true ? invariant6(false, `${action.type} received while not in DRAGGING phase`) : invariant6() : void 0;
      const result = moveInDirection({
        state,
        type: action.type
      });
      if (!result) {
        return state;
      }
      return update({
        state,
        impact: result.impact,
        clientSelection: result.clientSelection,
        scrollJumpRequest: result.scrollJumpRequest
      });
    }
    if (action.type === "DROP_PENDING") {
      const reason = action.payload.reason;
      !(state.phase === "COLLECTING") ? true ? invariant6(false, "Can only move into the DROP_PENDING phase from the COLLECTING phase") : invariant6() : void 0;
      const newState = {
        ...state,
        phase: "DROP_PENDING",
        isWaiting: true,
        reason
      };
      return newState;
    }
    if (action.type === "DROP_ANIMATE") {
      const {
        completed,
        dropDuration,
        newHomeClientOffset
      } = action.payload;
      !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant6(false, `Cannot animate drop from phase ${state.phase}`) : invariant6() : void 0;
      const result = {
        phase: "DROP_ANIMATING",
        completed,
        dropDuration,
        newHomeClientOffset,
        dimensions: state.dimensions
      };
      return result;
    }
    if (action.type === "DROP_COMPLETE") {
      const {
        completed
      } = action.payload;
      return {
        phase: "IDLE",
        completed,
        shouldFlush: false
      };
    }
    return state;
  };
  function guard(action, predicate) {
    return action instanceof Object && "type" in action && action.type === predicate;
  }
  var beforeInitialCapture = (args) => ({
    type: "BEFORE_INITIAL_CAPTURE",
    payload: args
  });
  var lift$1 = (args) => ({
    type: "LIFT",
    payload: args
  });
  var initialPublish = (args) => ({
    type: "INITIAL_PUBLISH",
    payload: args
  });
  var publishWhileDragging = (args) => ({
    type: "PUBLISH_WHILE_DRAGGING",
    payload: args
  });
  var collectionStarting = () => ({
    type: "COLLECTION_STARTING",
    payload: null
  });
  var updateDroppableScroll = (args) => ({
    type: "UPDATE_DROPPABLE_SCROLL",
    payload: args
  });
  var updateDroppableIsEnabled = (args) => ({
    type: "UPDATE_DROPPABLE_IS_ENABLED",
    payload: args
  });
  var updateDroppableIsCombineEnabled = (args) => ({
    type: "UPDATE_DROPPABLE_IS_COMBINE_ENABLED",
    payload: args
  });
  var move = (args) => ({
    type: "MOVE",
    payload: args
  });
  var moveByWindowScroll = (args) => ({
    type: "MOVE_BY_WINDOW_SCROLL",
    payload: args
  });
  var updateViewportMaxScroll = (args) => ({
    type: "UPDATE_VIEWPORT_MAX_SCROLL",
    payload: args
  });
  var moveUp = () => ({
    type: "MOVE_UP",
    payload: null
  });
  var moveDown = () => ({
    type: "MOVE_DOWN",
    payload: null
  });
  var moveRight = () => ({
    type: "MOVE_RIGHT",
    payload: null
  });
  var moveLeft = () => ({
    type: "MOVE_LEFT",
    payload: null
  });
  var flush = () => ({
    type: "FLUSH",
    payload: null
  });
  var animateDrop = (args) => ({
    type: "DROP_ANIMATE",
    payload: args
  });
  var completeDrop = (args) => ({
    type: "DROP_COMPLETE",
    payload: args
  });
  var drop = (args) => ({
    type: "DROP",
    payload: args
  });
  var dropPending = (args) => ({
    type: "DROP_PENDING",
    payload: args
  });
  var dropAnimationFinished = () => ({
    type: "DROP_ANIMATION_FINISHED",
    payload: null
  });
  function checkIndexes(insideDestination) {
    if (insideDestination.length <= 1) {
      return;
    }
    const indexes = insideDestination.map((d) => d.descriptor.index);
    const errors = {};
    for (let i = 1; i < indexes.length; i++) {
      const current = indexes[i];
      const previous = indexes[i - 1];
      if (current !== previous + 1) {
        errors[current] = true;
      }
    }
    if (!Object.keys(errors).length) {
      return;
    }
    const formatted = indexes.map((index2) => {
      const hasError = Boolean(errors[index2]);
      return hasError ? `[\u{1F525}${index2}]` : `${index2}`;
    }).join(", ");
    true ? warning7(`
    Detected non-consecutive <Draggable /> indexes.

    (This can cause unexpected bugs)

    ${formatted}
  `) : void 0;
  }
  function validateDimensions(critical, dimensions) {
    if (true) {
      const insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
      checkIndexes(insideDestination);
    }
  }
  var lift = (marshal) => ({
    getState,
    dispatch: dispatch2
  }) => (next) => (action) => {
    if (!guard(action, "LIFT")) {
      next(action);
      return;
    }
    const {
      id: id2,
      clientSelection,
      movementMode
    } = action.payload;
    const initial = getState();
    if (initial.phase === "DROP_ANIMATING") {
      dispatch2(completeDrop({
        completed: initial.completed
      }));
    }
    !(getState().phase === "IDLE") ? true ? invariant6(false, "Unexpected phase to start a drag") : invariant6() : void 0;
    dispatch2(flush());
    dispatch2(beforeInitialCapture({
      draggableId: id2,
      movementMode
    }));
    const scrollOptions = {
      shouldPublishImmediately: movementMode === "SNAP"
    };
    const request = {
      draggableId: id2,
      scrollOptions
    };
    const {
      critical,
      dimensions,
      viewport: viewport2
    } = marshal.startPublishing(request);
    validateDimensions(critical, dimensions);
    dispatch2(initialPublish({
      critical,
      dimensions,
      clientSelection,
      movementMode,
      viewport: viewport2
    }));
  };
  var style3 = (marshal) => () => (next) => (action) => {
    if (guard(action, "INITIAL_PUBLISH")) {
      marshal.dragging();
    }
    if (guard(action, "DROP_ANIMATE")) {
      marshal.dropping(action.payload.completed.result.reason);
    }
    if (guard(action, "FLUSH") || guard(action, "DROP_COMPLETE")) {
      marshal.resting();
    }
    next(action);
  };
  var curves = {
    outOfTheWay: "cubic-bezier(0.2, 0, 0, 1)",
    drop: "cubic-bezier(.2,1,.1,1)"
  };
  var combine = {
    opacity: {
      drop: 0,
      combining: 0.7
    },
    scale: {
      drop: 0.75
    }
  };
  var timings = {
    outOfTheWay: 0.2,
    minDropTime: 0.33,
    maxDropTime: 0.55
  };
  var outOfTheWayTiming = `${timings.outOfTheWay}s ${curves.outOfTheWay}`;
  var transitions = {
    fluid: `opacity ${outOfTheWayTiming}`,
    snap: `transform ${outOfTheWayTiming}, opacity ${outOfTheWayTiming}`,
    drop: (duration) => {
      const timing = `${duration}s ${curves.drop}`;
      return `transform ${timing}, opacity ${timing}`;
    },
    outOfTheWay: `transform ${outOfTheWayTiming}`,
    placeholder: `height ${outOfTheWayTiming}, width ${outOfTheWayTiming}, margin ${outOfTheWayTiming}`
  };
  var moveTo = (offset4) => isEqual$1(offset4, origin) ? void 0 : `translate(${offset4.x}px, ${offset4.y}px)`;
  var transforms = {
    moveTo,
    drop: (offset4, isCombining) => {
      const translate = moveTo(offset4);
      if (!translate) {
        return void 0;
      }
      if (!isCombining) {
        return translate;
      }
      return `${translate} scale(${combine.scale.drop})`;
    }
  };
  var {
    minDropTime,
    maxDropTime
  } = timings;
  var dropTimeRange = maxDropTime - minDropTime;
  var maxDropTimeAtDistance = 1500;
  var cancelDropModifier = 0.6;
  var getDropDuration = ({
    current,
    destination,
    reason
  }) => {
    const distance$1 = distance2(current, destination);
    if (distance$1 <= 0) {
      return minDropTime;
    }
    if (distance$1 >= maxDropTimeAtDistance) {
      return maxDropTime;
    }
    const percentage = distance$1 / maxDropTimeAtDistance;
    const duration = minDropTime + dropTimeRange * percentage;
    const withDuration = reason === "CANCEL" ? duration * cancelDropModifier : duration;
    return Number(withDuration.toFixed(2));
  };
  var getNewHomeClientOffset = ({
    impact,
    draggable: draggable2,
    dimensions,
    viewport: viewport2,
    afterCritical
  }) => {
    const {
      draggables,
      droppables
    } = dimensions;
    const droppableId = whatIsDraggedOver(impact);
    const destination = droppableId ? droppables[droppableId] : null;
    const home2 = droppables[draggable2.descriptor.droppableId];
    const newClientCenter = getClientBorderBoxCenter({
      impact,
      draggable: draggable2,
      draggables,
      afterCritical,
      droppable: destination || home2,
      viewport: viewport2
    });
    const offset4 = subtract(newClientCenter, draggable2.client.borderBox.center);
    return offset4;
  };
  var getDropImpact = ({
    draggables,
    reason,
    lastImpact,
    home: home2,
    viewport: viewport2,
    onLiftImpact
  }) => {
    if (!lastImpact.at || reason !== "DROP") {
      const recomputedHomeImpact = recompute({
        draggables,
        impact: onLiftImpact,
        destination: home2,
        viewport: viewport2,
        forceShouldAnimate: true
      });
      return {
        impact: recomputedHomeImpact,
        didDropInsideDroppable: false
      };
    }
    if (lastImpact.at.type === "REORDER") {
      return {
        impact: lastImpact,
        didDropInsideDroppable: true
      };
    }
    const withoutMovement = {
      ...lastImpact,
      displaced: emptyGroups
    };
    return {
      impact: withoutMovement,
      didDropInsideDroppable: true
    };
  };
  var dropMiddleware = ({
    getState,
    dispatch: dispatch2
  }) => (next) => (action) => {
    if (!guard(action, "DROP")) {
      next(action);
      return;
    }
    const state = getState();
    const reason = action.payload.reason;
    if (state.phase === "COLLECTING") {
      dispatch2(dropPending({
        reason
      }));
      return;
    }
    if (state.phase === "IDLE") {
      return;
    }
    const isWaitingForDrop = state.phase === "DROP_PENDING" && state.isWaiting;
    !!isWaitingForDrop ? true ? invariant6(false, "A DROP action occurred while DROP_PENDING and still waiting") : invariant6() : void 0;
    !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant6(false, `Cannot drop in phase: ${state.phase}`) : invariant6() : void 0;
    const critical = state.critical;
    const dimensions = state.dimensions;
    const draggable2 = dimensions.draggables[state.critical.draggable.id];
    const {
      impact,
      didDropInsideDroppable
    } = getDropImpact({
      reason,
      lastImpact: state.impact,
      afterCritical: state.afterCritical,
      onLiftImpact: state.onLiftImpact,
      home: state.dimensions.droppables[state.critical.droppable.id],
      viewport: state.viewport,
      draggables: state.dimensions.draggables
    });
    const destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
    const combine2 = didDropInsideDroppable ? tryGetCombine(impact) : null;
    const source = {
      index: critical.draggable.index,
      droppableId: critical.droppable.id
    };
    const result = {
      draggableId: draggable2.descriptor.id,
      type: draggable2.descriptor.type,
      source,
      reason,
      mode: state.movementMode,
      destination,
      combine: combine2
    };
    const newHomeClientOffset = getNewHomeClientOffset({
      impact,
      draggable: draggable2,
      dimensions,
      viewport: state.viewport,
      afterCritical: state.afterCritical
    });
    const completed = {
      critical: state.critical,
      afterCritical: state.afterCritical,
      result,
      impact
    };
    const isAnimationRequired = !isEqual$1(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);
    if (!isAnimationRequired) {
      dispatch2(completeDrop({
        completed
      }));
      return;
    }
    const dropDuration = getDropDuration({
      current: state.current.client.offset,
      destination: newHomeClientOffset,
      reason
    });
    const args = {
      newHomeClientOffset,
      dropDuration,
      completed
    };
    dispatch2(animateDrop(args));
  };
  var getWindowScroll4 = () => ({
    x: window.pageXOffset,
    y: window.pageYOffset
  });
  function getWindowScrollBinding(update2) {
    return {
      eventName: "scroll",
      options: {
        passive: true,
        capture: false
      },
      fn: (event) => {
        if (event.target !== window && event.target !== window.document) {
          return;
        }
        update2();
      }
    };
  }
  function getScrollListener({
    onWindowScroll
  }) {
    function updateScroll() {
      onWindowScroll(getWindowScroll4());
    }
    const scheduled = raf_schd_esm_default(updateScroll);
    const binding = getWindowScrollBinding(scheduled);
    let unbind = noop$2;
    function isActive2() {
      return unbind !== noop$2;
    }
    function start4() {
      !!isActive2() ? true ? invariant6(false, "Cannot start scroll listener when already active") : invariant6() : void 0;
      unbind = bindEvents(window, [binding]);
    }
    function stop() {
      !isActive2() ? true ? invariant6(false, "Cannot stop scroll listener when not active") : invariant6() : void 0;
      scheduled.cancel();
      unbind();
      unbind = noop$2;
    }
    return {
      start: start4,
      stop,
      isActive: isActive2
    };
  }
  var shouldStop$1 = (action) => guard(action, "DROP_COMPLETE") || guard(action, "DROP_ANIMATE") || guard(action, "FLUSH");
  var scrollListener = (store) => {
    const listener = getScrollListener({
      onWindowScroll: (newScroll) => {
        store.dispatch(moveByWindowScroll({
          newScroll
        }));
      }
    });
    return (next) => (action) => {
      if (!listener.isActive() && guard(action, "INITIAL_PUBLISH")) {
        listener.start();
      }
      if (listener.isActive() && shouldStop$1(action)) {
        listener.stop();
      }
      next(action);
    };
  };
  var getExpiringAnnounce = (announce) => {
    let wasCalled = false;
    let isExpired = false;
    const timeoutId = setTimeout(() => {
      isExpired = true;
    });
    const result = (message) => {
      if (wasCalled) {
        true ? warning7("Announcement already made. Not making a second announcement") : void 0;
        return;
      }
      if (isExpired) {
        true ? warning7(`
        Announcements cannot be made asynchronously.
        Default message has already been announced.
      `) : void 0;
        return;
      }
      wasCalled = true;
      announce(message);
      clearTimeout(timeoutId);
    };
    result.wasCalled = () => wasCalled;
    return result;
  };
  var getAsyncMarshal = () => {
    const entries = [];
    const execute2 = (timerId) => {
      const index2 = entries.findIndex((item) => item.timerId === timerId);
      !(index2 !== -1) ? true ? invariant6(false, "Could not find timer") : invariant6() : void 0;
      const [entry] = entries.splice(index2, 1);
      entry.callback();
    };
    const add2 = (fn2) => {
      const timerId = setTimeout(() => execute2(timerId));
      const entry = {
        timerId,
        callback: fn2
      };
      entries.push(entry);
    };
    const flush2 = () => {
      if (!entries.length) {
        return;
      }
      const shallow = [...entries];
      entries.length = 0;
      shallow.forEach((entry) => {
        clearTimeout(entry.timerId);
        entry.callback();
      });
    };
    return {
      add: add2,
      flush: flush2
    };
  };
  var areLocationsEqual = (first, second) => {
    if (first == null && second == null) {
      return true;
    }
    if (first == null || second == null) {
      return false;
    }
    return first.droppableId === second.droppableId && first.index === second.index;
  };
  var isCombineEqual = (first, second) => {
    if (first == null && second == null) {
      return true;
    }
    if (first == null || second == null) {
      return false;
    }
    return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
  };
  var isCriticalEqual = (first, second) => {
    if (first === second) {
      return true;
    }
    const isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
    const isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
    return isDraggableEqual && isDroppableEqual;
  };
  var withTimings = (key, fn2) => {
    start3();
    fn2();
    finish();
  };
  var getDragStart = (critical, mode) => ({
    draggableId: critical.draggable.id,
    type: critical.droppable.type,
    source: {
      droppableId: critical.droppable.id,
      index: critical.draggable.index
    },
    mode
  });
  function execute(responder, data, announce, getDefaultMessage) {
    if (!responder) {
      announce(getDefaultMessage(data));
      return;
    }
    const willExpire = getExpiringAnnounce(announce);
    const provided = {
      announce: willExpire
    };
    responder(data, provided);
    if (!willExpire.wasCalled()) {
      announce(getDefaultMessage(data));
    }
  }
  var getPublisher = (getResponders, announce) => {
    const asyncMarshal = getAsyncMarshal();
    let dragging = null;
    const beforeCapture = (draggableId, mode) => {
      !!dragging ? true ? invariant6(false, "Cannot fire onBeforeCapture as a drag start has already been published") : invariant6() : void 0;
      withTimings("onBeforeCapture", () => {
        const fn2 = getResponders().onBeforeCapture;
        if (fn2) {
          const before = {
            draggableId,
            mode
          };
          fn2(before);
        }
      });
    };
    const beforeStart = (critical, mode) => {
      !!dragging ? true ? invariant6(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant6() : void 0;
      withTimings("onBeforeDragStart", () => {
        const fn2 = getResponders().onBeforeDragStart;
        if (fn2) {
          fn2(getDragStart(critical, mode));
        }
      });
    };
    const start4 = (critical, mode) => {
      !!dragging ? true ? invariant6(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant6() : void 0;
      const data = getDragStart(critical, mode);
      dragging = {
        mode,
        lastCritical: critical,
        lastLocation: data.source,
        lastCombine: null
      };
      asyncMarshal.add(() => {
        withTimings("onDragStart", () => execute(getResponders().onDragStart, data, announce, preset.onDragStart));
      });
    };
    const update2 = (critical, impact) => {
      const location = tryGetDestination(impact);
      const combine2 = tryGetCombine(impact);
      !dragging ? true ? invariant6(false, "Cannot fire onDragMove when onDragStart has not been called") : invariant6() : void 0;
      const hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
      if (hasCriticalChanged) {
        dragging.lastCritical = critical;
      }
      const hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
      if (hasLocationChanged) {
        dragging.lastLocation = location;
      }
      const hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine2);
      if (hasGroupingChanged) {
        dragging.lastCombine = combine2;
      }
      if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
        return;
      }
      const data = {
        ...getDragStart(critical, dragging.mode),
        combine: combine2,
        destination: location
      };
      asyncMarshal.add(() => {
        withTimings("onDragUpdate", () => execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate));
      });
    };
    const flush2 = () => {
      !dragging ? true ? invariant6(false, "Can only flush responders while dragging") : invariant6() : void 0;
      asyncMarshal.flush();
    };
    const drop2 = (result) => {
      !dragging ? true ? invariant6(false, "Cannot fire onDragEnd when there is no matching onDragStart") : invariant6() : void 0;
      dragging = null;
      withTimings("onDragEnd", () => execute(getResponders().onDragEnd, result, announce, preset.onDragEnd));
    };
    const abort = () => {
      if (!dragging) {
        return;
      }
      const result = {
        ...getDragStart(dragging.lastCritical, dragging.mode),
        combine: null,
        destination: null,
        reason: "CANCEL"
      };
      drop2(result);
    };
    return {
      beforeCapture,
      beforeStart,
      start: start4,
      update: update2,
      flush: flush2,
      drop: drop2,
      abort
    };
  };
  var responders = (getResponders, announce) => {
    const publisher = getPublisher(getResponders, announce);
    return (store) => (next) => (action) => {
      if (guard(action, "BEFORE_INITIAL_CAPTURE")) {
        publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
        return;
      }
      if (guard(action, "INITIAL_PUBLISH")) {
        const critical = action.payload.critical;
        publisher.beforeStart(critical, action.payload.movementMode);
        next(action);
        publisher.start(critical, action.payload.movementMode);
        return;
      }
      if (guard(action, "DROP_COMPLETE")) {
        const result = action.payload.completed.result;
        publisher.flush();
        next(action);
        publisher.drop(result);
        return;
      }
      next(action);
      if (guard(action, "FLUSH")) {
        publisher.abort();
        return;
      }
      const state = store.getState();
      if (state.phase === "DRAGGING") {
        publisher.update(state.critical, state.impact);
      }
    };
  };
  var dropAnimationFinishMiddleware = (store) => (next) => (action) => {
    if (!guard(action, "DROP_ANIMATION_FINISHED")) {
      next(action);
      return;
    }
    const state = store.getState();
    !(state.phase === "DROP_ANIMATING") ? true ? invariant6(false, "Cannot finish a drop animating when no drop is occurring") : invariant6() : void 0;
    store.dispatch(completeDrop({
      completed: state.completed
    }));
  };
  var dropAnimationFlushOnScrollMiddleware = (store) => {
    let unbind = null;
    let frameId = null;
    function clear() {
      if (frameId) {
        cancelAnimationFrame(frameId);
        frameId = null;
      }
      if (unbind) {
        unbind();
        unbind = null;
      }
    }
    return (next) => (action) => {
      if (guard(action, "FLUSH") || guard(action, "DROP_COMPLETE") || guard(action, "DROP_ANIMATION_FINISHED")) {
        clear();
      }
      next(action);
      if (!guard(action, "DROP_ANIMATE")) {
        return;
      }
      const binding = {
        eventName: "scroll",
        options: {
          capture: true,
          passive: false,
          once: true
        },
        fn: function flushDropAnimation() {
          const state = store.getState();
          if (state.phase === "DROP_ANIMATING") {
            store.dispatch(dropAnimationFinished());
          }
        }
      };
      frameId = requestAnimationFrame(() => {
        frameId = null;
        unbind = bindEvents(window, [binding]);
      });
    };
  };
  var dimensionMarshalStopper = (marshal) => () => (next) => (action) => {
    if (guard(action, "DROP_COMPLETE") || guard(action, "FLUSH") || guard(action, "DROP_ANIMATE")) {
      marshal.stopPublishing();
    }
    next(action);
  };
  var focus = (marshal) => {
    let isWatching = false;
    return () => (next) => (action) => {
      if (guard(action, "INITIAL_PUBLISH")) {
        isWatching = true;
        marshal.tryRecordFocus(action.payload.critical.draggable.id);
        next(action);
        marshal.tryRestoreFocusRecorded();
        return;
      }
      next(action);
      if (!isWatching) {
        return;
      }
      if (guard(action, "FLUSH")) {
        isWatching = false;
        marshal.tryRestoreFocusRecorded();
        return;
      }
      if (guard(action, "DROP_COMPLETE")) {
        isWatching = false;
        const result = action.payload.completed.result;
        if (result.combine) {
          marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
        }
        marshal.tryRestoreFocusRecorded();
      }
    };
  };
  var shouldStop = (action) => guard(action, "DROP_COMPLETE") || guard(action, "DROP_ANIMATE") || guard(action, "FLUSH");
  var autoScroll = (autoScroller) => (store) => (next) => (action) => {
    if (shouldStop(action)) {
      autoScroller.stop();
      next(action);
      return;
    }
    if (guard(action, "INITIAL_PUBLISH")) {
      next(action);
      const state = store.getState();
      !(state.phase === "DRAGGING") ? true ? invariant6(false, "Expected phase to be DRAGGING after INITIAL_PUBLISH") : invariant6() : void 0;
      autoScroller.start(state);
      return;
    }
    next(action);
    autoScroller.scroll(store.getState());
  };
  var pendingDrop = (store) => (next) => (action) => {
    next(action);
    if (!guard(action, "PUBLISH_WHILE_DRAGGING")) {
      return;
    }
    const postActionState = store.getState();
    if (postActionState.phase !== "DROP_PENDING") {
      return;
    }
    if (postActionState.isWaiting) {
      return;
    }
    store.dispatch(drop({
      reason: postActionState.reason
    }));
  };
  var composeEnhancers = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
    name: "@hello-pangea/dnd"
  }) : compose;
  var createStore4 = ({
    dimensionMarshal,
    focusMarshal,
    styleMarshal,
    getResponders,
    announce,
    autoScroller
  }) => createStore3(reducer, composeEnhancers(applyMiddleware(style3(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift(dimensionMarshal), dropMiddleware, dropAnimationFinishMiddleware, dropAnimationFlushOnScrollMiddleware, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
  var clean$1 = () => ({
    additions: {},
    removals: {},
    modified: {}
  });
  function createPublisher({
    registry,
    callbacks
  }) {
    let staging = clean$1();
    let frameId = null;
    const collect = () => {
      if (frameId) {
        return;
      }
      callbacks.collectionStarting();
      frameId = requestAnimationFrame(() => {
        frameId = null;
        start3();
        const {
          additions,
          removals,
          modified
        } = staging;
        const added = Object.keys(additions).map((id2) => registry.draggable.getById(id2).getDimension(origin)).sort((a, b) => a.descriptor.index - b.descriptor.index);
        const updated = Object.keys(modified).map((id2) => {
          const entry = registry.droppable.getById(id2);
          const scroll2 = entry.callbacks.getScrollWhileDragging();
          return {
            droppableId: id2,
            scroll: scroll2
          };
        });
        const result = {
          additions: added,
          removals: Object.keys(removals),
          modified: updated
        };
        staging = clean$1();
        finish();
        callbacks.publish(result);
      });
    };
    const add2 = (entry) => {
      const id2 = entry.descriptor.id;
      staging.additions[id2] = entry;
      staging.modified[entry.descriptor.droppableId] = true;
      if (staging.removals[id2]) {
        delete staging.removals[id2];
      }
      collect();
    };
    const remove2 = (entry) => {
      const descriptor = entry.descriptor;
      staging.removals[descriptor.id] = true;
      staging.modified[descriptor.droppableId] = true;
      if (staging.additions[descriptor.id]) {
        delete staging.additions[descriptor.id];
      }
      collect();
    };
    const stop = () => {
      if (!frameId) {
        return;
      }
      cancelAnimationFrame(frameId);
      frameId = null;
      staging = clean$1();
    };
    return {
      add: add2,
      remove: remove2,
      stop
    };
  }
  var getMaxScroll = ({
    scrollHeight,
    scrollWidth,
    height,
    width
  }) => {
    const maxScroll = subtract({
      x: scrollWidth,
      y: scrollHeight
    }, {
      x: width,
      y: height
    });
    const adjustedMaxScroll = {
      x: Math.max(0, maxScroll.x),
      y: Math.max(0, maxScroll.y)
    };
    return adjustedMaxScroll;
  };
  var getDocumentElement2 = () => {
    const doc = document.documentElement;
    !doc ? true ? invariant6(false, "Cannot find document.documentElement") : invariant6() : void 0;
    return doc;
  };
  var getMaxWindowScroll = () => {
    const doc = getDocumentElement2();
    const maxScroll = getMaxScroll({
      scrollHeight: doc.scrollHeight,
      scrollWidth: doc.scrollWidth,
      width: doc.clientWidth,
      height: doc.clientHeight
    });
    return maxScroll;
  };
  var getViewport = () => {
    const scroll2 = getWindowScroll4();
    const maxScroll = getMaxWindowScroll();
    const top2 = scroll2.y;
    const left2 = scroll2.x;
    const doc = getDocumentElement2();
    const width = doc.clientWidth;
    const height = doc.clientHeight;
    const right2 = left2 + width;
    const bottom2 = top2 + height;
    const frame2 = getRect({
      top: top2,
      left: left2,
      right: right2,
      bottom: bottom2
    });
    const viewport2 = {
      frame: frame2,
      scroll: {
        initial: scroll2,
        current: scroll2,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
    return viewport2;
  };
  var getInitialPublish = ({
    critical,
    scrollOptions,
    registry
  }) => {
    start3();
    const viewport2 = getViewport();
    const windowScroll = viewport2.scroll.current;
    const home2 = critical.droppable;
    const droppables = registry.droppable.getAllByType(home2.type).map((entry) => entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions));
    const draggables = registry.draggable.getAllByType(critical.draggable.type).map((entry) => entry.getDimension(windowScroll));
    const dimensions = {
      draggables: toDraggableMap(draggables),
      droppables: toDroppableMap(droppables)
    };
    finish();
    const result = {
      dimensions,
      critical,
      viewport: viewport2
    };
    return result;
  };
  function shouldPublishUpdate(registry, dragging, entry) {
    if (entry.descriptor.id === dragging.id) {
      return false;
    }
    if (entry.descriptor.type !== dragging.type) {
      return false;
    }
    const home2 = registry.droppable.getById(entry.descriptor.droppableId);
    if (home2.descriptor.mode !== "virtual") {
      true ? warning7(`
      You are attempting to add or remove a Draggable [id: ${entry.descriptor.id}]
      while a drag is occurring. This is only supported for virtual lists.

      See https://github.com/hello-pangea/dnd/blob/main/docs/patterns/virtual-lists.md
    `) : void 0;
      return false;
    }
    return true;
  }
  var createDimensionMarshal = (registry, callbacks) => {
    let collection = null;
    const publisher = createPublisher({
      callbacks: {
        publish: callbacks.publishWhileDragging,
        collectionStarting: callbacks.collectionStarting
      },
      registry
    });
    const updateDroppableIsEnabled2 = (id2, isEnabled) => {
      !registry.droppable.exists(id2) ? true ? invariant6(false, `Cannot update is enabled flag of Droppable ${id2} as it is not registered`) : invariant6() : void 0;
      if (!collection) {
        return;
      }
      callbacks.updateDroppableIsEnabled({
        id: id2,
        isEnabled
      });
    };
    const updateDroppableIsCombineEnabled2 = (id2, isCombineEnabled) => {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id2) ? true ? invariant6(false, `Cannot update isCombineEnabled flag of Droppable ${id2} as it is not registered`) : invariant6() : void 0;
      callbacks.updateDroppableIsCombineEnabled({
        id: id2,
        isCombineEnabled
      });
    };
    const updateDroppableScroll2 = (id2, newScroll) => {
      if (!collection) {
        return;
      }
      !registry.droppable.exists(id2) ? true ? invariant6(false, `Cannot update the scroll on Droppable ${id2} as it is not registered`) : invariant6() : void 0;
      callbacks.updateDroppableScroll({
        id: id2,
        newScroll
      });
    };
    const scrollDroppable2 = (id2, change) => {
      if (!collection) {
        return;
      }
      registry.droppable.getById(id2).callbacks.scroll(change);
    };
    const stopPublishing = () => {
      if (!collection) {
        return;
      }
      publisher.stop();
      const home2 = collection.critical.droppable;
      registry.droppable.getAllByType(home2.type).forEach((entry) => entry.callbacks.dragStopped());
      collection.unsubscribe();
      collection = null;
    };
    const subscriber = (event) => {
      !collection ? true ? invariant6(false, "Should only be subscribed when a collection is occurring") : invariant6() : void 0;
      const dragging = collection.critical.draggable;
      if (event.type === "ADDITION") {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.add(event.value);
        }
      }
      if (event.type === "REMOVAL") {
        if (shouldPublishUpdate(registry, dragging, event.value)) {
          publisher.remove(event.value);
        }
      }
    };
    const startPublishing = (request) => {
      !!collection ? true ? invariant6(false, "Cannot start capturing critical dimensions as there is already a collection") : invariant6() : void 0;
      const entry = registry.draggable.getById(request.draggableId);
      const home2 = registry.droppable.getById(entry.descriptor.droppableId);
      const critical = {
        draggable: entry.descriptor,
        droppable: home2.descriptor
      };
      const unsubscribe = registry.subscribe(subscriber);
      collection = {
        critical,
        unsubscribe
      };
      return getInitialPublish({
        critical,
        registry,
        scrollOptions: request.scrollOptions
      });
    };
    const marshal = {
      updateDroppableIsEnabled: updateDroppableIsEnabled2,
      updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled2,
      scrollDroppable: scrollDroppable2,
      updateDroppableScroll: updateDroppableScroll2,
      startPublishing,
      stopPublishing
    };
    return marshal;
  };
  var canStartDrag = (state, id2) => {
    if (state.phase === "IDLE") {
      return true;
    }
    if (state.phase !== "DROP_ANIMATING") {
      return false;
    }
    if (state.completed.result.draggableId === id2) {
      return false;
    }
    return state.completed.result.reason === "DROP";
  };
  var scrollWindow = (change) => {
    window.scrollBy(change.x, change.y);
  };
  var getScrollableDroppables = memoizeOne((droppables) => toDroppableList(droppables).filter((droppable2) => {
    if (!droppable2.isEnabled) {
      return false;
    }
    if (!droppable2.frame) {
      return false;
    }
    return true;
  }));
  var getScrollableDroppableOver = (target, droppables) => {
    const maybe = getScrollableDroppables(droppables).find((droppable2) => {
      !droppable2.frame ? true ? invariant6(false, "Invalid result") : invariant6() : void 0;
      return isPositionInFrame(droppable2.frame.pageMarginBox)(target);
    }) || null;
    return maybe;
  };
  var getBestScrollableDroppable = ({
    center,
    destination,
    droppables
  }) => {
    if (destination) {
      const dimension2 = droppables[destination];
      if (!dimension2.frame) {
        return null;
      }
      return dimension2;
    }
    const dimension = getScrollableDroppableOver(center, droppables);
    return dimension;
  };
  var defaultAutoScrollerOptions = {
    startFromPercentage: 0.25,
    maxScrollAtPercentage: 0.05,
    maxPixelScroll: 28,
    ease: (percentage) => percentage ** 2,
    durationDampening: {
      stopDampeningAt: 1200,
      accelerateAt: 360
    },
    disabled: false
  };
  var getDistanceThresholds = (container, axis, getAutoScrollerOptions = () => defaultAutoScrollerOptions) => {
    const autoScrollerOptions = getAutoScrollerOptions();
    const startScrollingFrom = container[axis.size] * autoScrollerOptions.startFromPercentage;
    const maxScrollValueAt = container[axis.size] * autoScrollerOptions.maxScrollAtPercentage;
    const thresholds = {
      startScrollingFrom,
      maxScrollValueAt
    };
    return thresholds;
  };
  var getPercentage = ({
    startOfRange,
    endOfRange,
    current
  }) => {
    const range = endOfRange - startOfRange;
    if (range === 0) {
      true ? warning7(`
      Detected distance range of 0 in the fluid auto scroller
      This is unexpected and would cause a divide by 0 issue.
      Not allowing an auto scroll
    `) : void 0;
      return 0;
    }
    const currentInRange = current - startOfRange;
    const percentage = currentInRange / range;
    return percentage;
  };
  var minScroll = 1;
  var getValueFromDistance = (distanceToEdge, thresholds, getAutoScrollerOptions = () => defaultAutoScrollerOptions) => {
    const autoScrollerOptions = getAutoScrollerOptions();
    if (distanceToEdge > thresholds.startScrollingFrom) {
      return 0;
    }
    if (distanceToEdge <= thresholds.maxScrollValueAt) {
      return autoScrollerOptions.maxPixelScroll;
    }
    if (distanceToEdge === thresholds.startScrollingFrom) {
      return minScroll;
    }
    const percentageFromMaxScrollValueAt = getPercentage({
      startOfRange: thresholds.maxScrollValueAt,
      endOfRange: thresholds.startScrollingFrom,
      current: distanceToEdge
    });
    const percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
    const scroll2 = autoScrollerOptions.maxPixelScroll * autoScrollerOptions.ease(percentageFromStartScrollingFrom);
    return Math.ceil(scroll2);
  };
  var dampenValueByTime = (proposedScroll, dragStartTime, getAutoScrollerOptions) => {
    const autoScrollerOptions = getAutoScrollerOptions();
    const accelerateAt = autoScrollerOptions.durationDampening.accelerateAt;
    const stopAt = autoScrollerOptions.durationDampening.stopDampeningAt;
    const startOfRange = dragStartTime;
    const endOfRange = stopAt;
    const now2 = Date.now();
    const runTime = now2 - startOfRange;
    if (runTime >= stopAt) {
      return proposedScroll;
    }
    if (runTime < accelerateAt) {
      return minScroll;
    }
    const betweenAccelerateAtAndStopAtPercentage = getPercentage({
      startOfRange: accelerateAt,
      endOfRange,
      current: runTime
    });
    const scroll2 = proposedScroll * autoScrollerOptions.ease(betweenAccelerateAtAndStopAtPercentage);
    return Math.ceil(scroll2);
  };
  var getValue = ({
    distanceToEdge,
    thresholds,
    dragStartTime,
    shouldUseTimeDampening,
    getAutoScrollerOptions
  }) => {
    const scroll2 = getValueFromDistance(distanceToEdge, thresholds, getAutoScrollerOptions);
    if (scroll2 === 0) {
      return 0;
    }
    if (!shouldUseTimeDampening) {
      return scroll2;
    }
    return Math.max(dampenValueByTime(scroll2, dragStartTime, getAutoScrollerOptions), minScroll);
  };
  var getScrollOnAxis = ({
    container,
    distanceToEdges,
    dragStartTime,
    axis,
    shouldUseTimeDampening,
    getAutoScrollerOptions
  }) => {
    const thresholds = getDistanceThresholds(container, axis, getAutoScrollerOptions);
    const isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
    if (isCloserToEnd) {
      return getValue({
        distanceToEdge: distanceToEdges[axis.end],
        thresholds,
        dragStartTime,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
    }
    return -1 * getValue({
      distanceToEdge: distanceToEdges[axis.start],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
  };
  var adjustForSizeLimits = ({
    container,
    subject,
    proposedScroll
  }) => {
    const isTooBigVertically = subject.height > container.height;
    const isTooBigHorizontally = subject.width > container.width;
    if (!isTooBigHorizontally && !isTooBigVertically) {
      return proposedScroll;
    }
    if (isTooBigHorizontally && isTooBigVertically) {
      return null;
    }
    return {
      x: isTooBigHorizontally ? 0 : proposedScroll.x,
      y: isTooBigVertically ? 0 : proposedScroll.y
    };
  };
  var clean = apply((value) => value === 0 ? 0 : value);
  var getScroll$1 = ({
    dragStartTime,
    container,
    subject,
    center,
    shouldUseTimeDampening,
    getAutoScrollerOptions
  }) => {
    const distanceToEdges = {
      top: center.y - container.top,
      right: container.right - center.x,
      bottom: container.bottom - center.y,
      left: center.x - container.left
    };
    const y = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: vertical,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    const x = getScrollOnAxis({
      container,
      distanceToEdges,
      dragStartTime,
      axis: horizontal,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    const required2 = clean({
      x,
      y
    });
    if (isEqual$1(required2, origin)) {
      return null;
    }
    const limited = adjustForSizeLimits({
      container,
      subject,
      proposedScroll: required2
    });
    if (!limited) {
      return null;
    }
    return isEqual$1(limited, origin) ? null : limited;
  };
  var smallestSigned = apply((value) => {
    if (value === 0) {
      return 0;
    }
    return value > 0 ? 1 : -1;
  });
  var getOverlap = (() => {
    const getRemainder = (target, max2) => {
      if (target < 0) {
        return target;
      }
      if (target > max2) {
        return target - max2;
      }
      return 0;
    };
    return ({
      current,
      max: max2,
      change
    }) => {
      const targetScroll = add(current, change);
      const overlap = {
        x: getRemainder(targetScroll.x, max2.x),
        y: getRemainder(targetScroll.y, max2.y)
      };
      if (isEqual$1(overlap, origin)) {
        return null;
      }
      return overlap;
    };
  })();
  var canPartiallyScroll = ({
    max: rawMax,
    current,
    change
  }) => {
    const max2 = {
      x: Math.max(current.x, rawMax.x),
      y: Math.max(current.y, rawMax.y)
    };
    const smallestChange = smallestSigned(change);
    const overlap = getOverlap({
      max: max2,
      current,
      change: smallestChange
    });
    if (!overlap) {
      return true;
    }
    if (smallestChange.x !== 0 && overlap.x === 0) {
      return true;
    }
    if (smallestChange.y !== 0 && overlap.y === 0) {
      return true;
    }
    return false;
  };
  var canScrollWindow = (viewport2, change) => canPartiallyScroll({
    current: viewport2.scroll.current,
    max: viewport2.scroll.max,
    change
  });
  var getWindowOverlap = (viewport2, change) => {
    if (!canScrollWindow(viewport2, change)) {
      return null;
    }
    const max2 = viewport2.scroll.max;
    const current = viewport2.scroll.current;
    return getOverlap({
      current,
      max: max2,
      change
    });
  };
  var canScrollDroppable = (droppable2, change) => {
    const frame2 = droppable2.frame;
    if (!frame2) {
      return false;
    }
    return canPartiallyScroll({
      current: frame2.scroll.current,
      max: frame2.scroll.max,
      change
    });
  };
  var getDroppableOverlap = (droppable2, change) => {
    const frame2 = droppable2.frame;
    if (!frame2) {
      return null;
    }
    if (!canScrollDroppable(droppable2, change)) {
      return null;
    }
    return getOverlap({
      current: frame2.scroll.current,
      max: frame2.scroll.max,
      change
    });
  };
  var getWindowScrollChange = ({
    viewport: viewport2,
    subject,
    center,
    dragStartTime,
    shouldUseTimeDampening,
    getAutoScrollerOptions
  }) => {
    const scroll2 = getScroll$1({
      dragStartTime,
      container: viewport2.frame,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    return scroll2 && canScrollWindow(viewport2, scroll2) ? scroll2 : null;
  };
  var getDroppableScrollChange = ({
    droppable: droppable2,
    subject,
    center,
    dragStartTime,
    shouldUseTimeDampening,
    getAutoScrollerOptions
  }) => {
    const frame2 = droppable2.frame;
    if (!frame2) {
      return null;
    }
    const scroll2 = getScroll$1({
      dragStartTime,
      container: frame2.pageMarginBox,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    return scroll2 && canScrollDroppable(droppable2, scroll2) ? scroll2 : null;
  };
  var scroll = ({
    state,
    dragStartTime,
    shouldUseTimeDampening,
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2,
    getAutoScrollerOptions
  }) => {
    const center = state.current.page.borderBoxCenter;
    const draggable2 = state.dimensions.draggables[state.critical.draggable.id];
    const subject = draggable2.page.marginBox;
    if (state.isWindowScrollAllowed) {
      const viewport2 = state.viewport;
      const change2 = getWindowScrollChange({
        dragStartTime,
        viewport: viewport2,
        subject,
        center,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
      if (change2) {
        scrollWindow2(change2);
        return;
      }
    }
    const droppable2 = getBestScrollableDroppable({
      center,
      destination: whatIsDraggedOver(state.impact),
      droppables: state.dimensions.droppables
    });
    if (!droppable2) {
      return;
    }
    const change = getDroppableScrollChange({
      dragStartTime,
      droppable: droppable2,
      subject,
      center,
      shouldUseTimeDampening,
      getAutoScrollerOptions
    });
    if (change) {
      scrollDroppable2(droppable2.descriptor.id, change);
    }
  };
  var createFluidScroller = ({
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2,
    getAutoScrollerOptions = () => defaultAutoScrollerOptions
  }) => {
    const scheduleWindowScroll = raf_schd_esm_default(scrollWindow2);
    const scheduleDroppableScroll = raf_schd_esm_default(scrollDroppable2);
    let dragging = null;
    const tryScroll = (state) => {
      !dragging ? true ? invariant6(false, "Cannot fluid scroll if not dragging") : invariant6() : void 0;
      const {
        shouldUseTimeDampening,
        dragStartTime
      } = dragging;
      scroll({
        state,
        scrollWindow: scheduleWindowScroll,
        scrollDroppable: scheduleDroppableScroll,
        dragStartTime,
        shouldUseTimeDampening,
        getAutoScrollerOptions
      });
    };
    const start$1 = (state) => {
      start3();
      !!dragging ? true ? invariant6(false, "Cannot start auto scrolling when already started") : invariant6() : void 0;
      const dragStartTime = Date.now();
      let wasScrollNeeded = false;
      const fakeScrollCallback = () => {
        wasScrollNeeded = true;
      };
      scroll({
        state,
        dragStartTime: 0,
        shouldUseTimeDampening: false,
        scrollWindow: fakeScrollCallback,
        scrollDroppable: fakeScrollCallback,
        getAutoScrollerOptions
      });
      dragging = {
        dragStartTime,
        shouldUseTimeDampening: wasScrollNeeded
      };
      finish();
      if (wasScrollNeeded) {
        tryScroll(state);
      }
    };
    const stop = () => {
      if (!dragging) {
        return;
      }
      scheduleWindowScroll.cancel();
      scheduleDroppableScroll.cancel();
      dragging = null;
    };
    return {
      start: start$1,
      stop,
      scroll: tryScroll
    };
  };
  var createJumpScroller = ({
    move: move2,
    scrollDroppable: scrollDroppable2,
    scrollWindow: scrollWindow2
  }) => {
    const moveByOffset = (state, offset4) => {
      const client = add(state.current.client.selection, offset4);
      move2({
        client
      });
    };
    const scrollDroppableAsMuchAsItCan = (droppable2, change) => {
      if (!canScrollDroppable(droppable2, change)) {
        return change;
      }
      const overlap = getDroppableOverlap(droppable2, change);
      if (!overlap) {
        scrollDroppable2(droppable2.descriptor.id, change);
        return null;
      }
      const whatTheDroppableCanScroll = subtract(change, overlap);
      scrollDroppable2(droppable2.descriptor.id, whatTheDroppableCanScroll);
      const remainder = subtract(change, whatTheDroppableCanScroll);
      return remainder;
    };
    const scrollWindowAsMuchAsItCan = (isWindowScrollAllowed, viewport2, change) => {
      if (!isWindowScrollAllowed) {
        return change;
      }
      if (!canScrollWindow(viewport2, change)) {
        return change;
      }
      const overlap = getWindowOverlap(viewport2, change);
      if (!overlap) {
        scrollWindow2(change);
        return null;
      }
      const whatTheWindowCanScroll = subtract(change, overlap);
      scrollWindow2(whatTheWindowCanScroll);
      const remainder = subtract(change, whatTheWindowCanScroll);
      return remainder;
    };
    const jumpScroller = (state) => {
      const request = state.scrollJumpRequest;
      if (!request) {
        return;
      }
      const destination = whatIsDraggedOver(state.impact);
      !destination ? true ? invariant6(false, "Cannot perform a jump scroll when there is no destination") : invariant6() : void 0;
      const droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);
      if (!droppableRemainder) {
        return;
      }
      const viewport2 = state.viewport;
      const windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport2, droppableRemainder);
      if (!windowRemainder) {
        return;
      }
      moveByOffset(state, windowRemainder);
    };
    return jumpScroller;
  };
  var createAutoScroller = ({
    scrollDroppable: scrollDroppable2,
    scrollWindow: scrollWindow2,
    move: move2,
    getAutoScrollerOptions
  }) => {
    const fluidScroller = createFluidScroller({
      scrollWindow: scrollWindow2,
      scrollDroppable: scrollDroppable2,
      getAutoScrollerOptions
    });
    const jumpScroll = createJumpScroller({
      move: move2,
      scrollWindow: scrollWindow2,
      scrollDroppable: scrollDroppable2
    });
    const scroll2 = (state) => {
      const autoScrollerOptions = getAutoScrollerOptions();
      if (autoScrollerOptions.disabled || state.phase !== "DRAGGING") {
        return;
      }
      if (state.movementMode === "FLUID") {
        fluidScroller.scroll(state);
        return;
      }
      if (!state.scrollJumpRequest) {
        return;
      }
      jumpScroll(state);
    };
    const scroller = {
      scroll: scroll2,
      start: fluidScroller.start,
      stop: fluidScroller.stop
    };
    return scroller;
  };
  var prefix2 = "data-rfd";
  var dragHandle = (() => {
    const base = `${prefix2}-drag-handle`;
    return {
      base,
      draggableId: `${base}-draggable-id`,
      contextId: `${base}-context-id`
    };
  })();
  var draggable = (() => {
    const base = `${prefix2}-draggable`;
    return {
      base,
      contextId: `${base}-context-id`,
      id: `${base}-id`
    };
  })();
  var droppable = (() => {
    const base = `${prefix2}-droppable`;
    return {
      base,
      contextId: `${base}-context-id`,
      id: `${base}-id`
    };
  })();
  var scrollContainer = {
    contextId: `${prefix2}-scroll-container-context-id`
  };
  var makeGetSelector = (context4) => (attribute) => `[${attribute}="${context4}"]`;
  var getStyles = (rules, property) => rules.map((rule) => {
    const value = rule.styles[property];
    if (!value) {
      return "";
    }
    return `${rule.selector} { ${value} }`;
  }).join(" ");
  var noPointerEvents = "pointer-events: none;";
  var getStyles$1 = (contextId) => {
    const getSelector3 = makeGetSelector(contextId);
    const dragHandle$1 = (() => {
      const grabCursor = `
      cursor: -webkit-grab;
      cursor: grab;
    `;
      return {
        selector: getSelector3(dragHandle.contextId),
        styles: {
          always: `
          -webkit-touch-callout: none;
          -webkit-tap-highlight-color: rgba(0,0,0,0);
          touch-action: manipulation;
        `,
          resting: grabCursor,
          dragging: noPointerEvents,
          dropAnimating: grabCursor
        }
      };
    })();
    const draggable$1 = (() => {
      const transition2 = `
      transition: ${transitions.outOfTheWay};
    `;
      return {
        selector: getSelector3(draggable.contextId),
        styles: {
          dragging: transition2,
          dropAnimating: transition2,
          userCancel: transition2
        }
      };
    })();
    const droppable$1 = {
      selector: getSelector3(droppable.contextId),
      styles: {
        always: `overflow-anchor: none;`
      }
    };
    const body = {
      selector: "body",
      styles: {
        dragging: `
        cursor: grabbing;
        cursor: -webkit-grabbing;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        overflow-anchor: none;
      `
      }
    };
    const rules = [draggable$1, dragHandle$1, droppable$1, body];
    return {
      always: getStyles(rules, "always"),
      resting: getStyles(rules, "resting"),
      dragging: getStyles(rules, "dragging"),
      dropAnimating: getStyles(rules, "dropAnimating"),
      userCancel: getStyles(rules, "userCancel")
    };
  };
  var useIsomorphicLayoutEffect4 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react72.useLayoutEffect : import_react72.useEffect;
  var getHead = () => {
    const head = document.querySelector("head");
    !head ? true ? invariant6(false, "Cannot find the head to append a style to") : invariant6() : void 0;
    return head;
  };
  var createStyleEl = (nonce) => {
    const el = document.createElement("style");
    if (nonce) {
      el.setAttribute("nonce", nonce);
    }
    el.type = "text/css";
    return el;
  };
  function useStyleMarshal(contextId, nonce) {
    const styles2 = useMemo18(() => getStyles$1(contextId), [contextId]);
    const alwaysRef = (0, import_react72.useRef)(null);
    const dynamicRef = (0, import_react72.useRef)(null);
    const setDynamicStyle = useCallback23(memoizeOne((proposed) => {
      const el = dynamicRef.current;
      !el ? true ? invariant6(false, "Cannot set dynamic style element if it is not set") : invariant6() : void 0;
      el.textContent = proposed;
    }), []);
    const setAlwaysStyle = useCallback23((proposed) => {
      const el = alwaysRef.current;
      !el ? true ? invariant6(false, "Cannot set dynamic style element if it is not set") : invariant6() : void 0;
      el.textContent = proposed;
    }, []);
    useIsomorphicLayoutEffect4(() => {
      !(!alwaysRef.current && !dynamicRef.current) ? true ? invariant6(false, "style elements already mounted") : invariant6() : void 0;
      const always = createStyleEl(nonce);
      const dynamic = createStyleEl(nonce);
      alwaysRef.current = always;
      dynamicRef.current = dynamic;
      always.setAttribute(`${prefix2}-always`, contextId);
      dynamic.setAttribute(`${prefix2}-dynamic`, contextId);
      getHead().appendChild(always);
      getHead().appendChild(dynamic);
      setAlwaysStyle(styles2.always);
      setDynamicStyle(styles2.resting);
      return () => {
        const remove2 = (ref2) => {
          const current = ref2.current;
          !current ? true ? invariant6(false, "Cannot unmount ref as it is not set") : invariant6() : void 0;
          getHead().removeChild(current);
          ref2.current = null;
        };
        remove2(alwaysRef);
        remove2(dynamicRef);
      };
    }, [nonce, setAlwaysStyle, setDynamicStyle, styles2.always, styles2.resting, contextId]);
    const dragging = useCallback23(() => setDynamicStyle(styles2.dragging), [setDynamicStyle, styles2.dragging]);
    const dropping = useCallback23((reason) => {
      if (reason === "DROP") {
        setDynamicStyle(styles2.dropAnimating);
        return;
      }
      setDynamicStyle(styles2.userCancel);
    }, [setDynamicStyle, styles2.dropAnimating, styles2.userCancel]);
    const resting = useCallback23(() => {
      if (!dynamicRef.current) {
        return;
      }
      setDynamicStyle(styles2.resting);
    }, [setDynamicStyle, styles2.resting]);
    const marshal = useMemo18(() => ({
      dragging,
      dropping,
      resting
    }), [dragging, dropping, resting]);
    return marshal;
  }
  function querySelectorAll(parentNode, selector) {
    return Array.from(parentNode.querySelectorAll(selector));
  }
  var getWindowFromEl = (el) => {
    if (el && el.ownerDocument && el.ownerDocument.defaultView) {
      return el.ownerDocument.defaultView;
    }
    return window;
  };
  function isHtmlElement2(el) {
    return el instanceof getWindowFromEl(el).HTMLElement;
  }
  function findDragHandle(contextId, draggableId) {
    const selector = `[${dragHandle.contextId}="${contextId}"]`;
    const possible = querySelectorAll(document, selector);
    if (!possible.length) {
      true ? warning7(`Unable to find any drag handles in the context "${contextId}"`) : void 0;
      return null;
    }
    const handle = possible.find((el) => {
      return el.getAttribute(dragHandle.draggableId) === draggableId;
    });
    if (!handle) {
      true ? warning7(`Unable to find drag handle with id "${draggableId}" as no handle with a matching id was found`) : void 0;
      return null;
    }
    if (!isHtmlElement2(handle)) {
      true ? warning7("drag handle needs to be a HTMLElement") : void 0;
      return null;
    }
    return handle;
  }
  function useFocusMarshal(contextId) {
    const entriesRef = (0, import_react72.useRef)({});
    const recordRef = (0, import_react72.useRef)(null);
    const restoreFocusFrameRef = (0, import_react72.useRef)(null);
    const isMountedRef = (0, import_react72.useRef)(false);
    const register = useCallback23(function register2(id2, focus2) {
      const entry = {
        id: id2,
        focus: focus2
      };
      entriesRef.current[id2] = entry;
      return function unregister() {
        const entries = entriesRef.current;
        const current = entries[id2];
        if (current !== entry) {
          delete entries[id2];
        }
      };
    }, []);
    const tryGiveFocus = useCallback23(function tryGiveFocus2(tryGiveFocusTo) {
      const handle = findDragHandle(contextId, tryGiveFocusTo);
      if (handle && handle !== document.activeElement) {
        handle.focus();
      }
    }, [contextId]);
    const tryShiftRecord = useCallback23(function tryShiftRecord2(previous, redirectTo) {
      if (recordRef.current === previous) {
        recordRef.current = redirectTo;
      }
    }, []);
    const tryRestoreFocusRecorded = useCallback23(function tryRestoreFocusRecorded2() {
      if (restoreFocusFrameRef.current) {
        return;
      }
      if (!isMountedRef.current) {
        return;
      }
      restoreFocusFrameRef.current = requestAnimationFrame(() => {
        restoreFocusFrameRef.current = null;
        const record = recordRef.current;
        if (record) {
          tryGiveFocus(record);
        }
      });
    }, [tryGiveFocus]);
    const tryRecordFocus = useCallback23(function tryRecordFocus2(id2) {
      recordRef.current = null;
      const focused = document.activeElement;
      if (!focused) {
        return;
      }
      if (focused.getAttribute(dragHandle.draggableId) !== id2) {
        return;
      }
      recordRef.current = id2;
    }, []);
    useIsomorphicLayoutEffect4(() => {
      isMountedRef.current = true;
      return function clearFrameOnUnmount() {
        isMountedRef.current = false;
        const frameId = restoreFocusFrameRef.current;
        if (frameId) {
          cancelAnimationFrame(frameId);
        }
      };
    }, []);
    const marshal = useMemo18(() => ({
      register,
      tryRecordFocus,
      tryRestoreFocusRecorded,
      tryShiftRecord
    }), [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
    return marshal;
  }
  function createRegistry() {
    const entries = {
      draggables: {},
      droppables: {}
    };
    const subscribers = [];
    function subscribe(cb) {
      subscribers.push(cb);
      return function unsubscribe() {
        const index2 = subscribers.indexOf(cb);
        if (index2 === -1) {
          return;
        }
        subscribers.splice(index2, 1);
      };
    }
    function notify(event) {
      if (subscribers.length) {
        subscribers.forEach((cb) => cb(event));
      }
    }
    function findDraggableById(id2) {
      return entries.draggables[id2] || null;
    }
    function getDraggableById(id2) {
      const entry = findDraggableById(id2);
      !entry ? true ? invariant6(false, `Cannot find draggable entry with id [${id2}]`) : invariant6() : void 0;
      return entry;
    }
    const draggableAPI = {
      register: (entry) => {
        entries.draggables[entry.descriptor.id] = entry;
        notify({
          type: "ADDITION",
          value: entry
        });
      },
      update: (entry, last) => {
        const current = entries.draggables[last.descriptor.id];
        if (!current) {
          return;
        }
        if (current.uniqueId !== entry.uniqueId) {
          return;
        }
        delete entries.draggables[last.descriptor.id];
        entries.draggables[entry.descriptor.id] = entry;
      },
      unregister: (entry) => {
        const draggableId = entry.descriptor.id;
        const current = findDraggableById(draggableId);
        if (!current) {
          return;
        }
        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.draggables[draggableId];
        if (entries.droppables[entry.descriptor.droppableId]) {
          notify({
            type: "REMOVAL",
            value: entry
          });
        }
      },
      getById: getDraggableById,
      findById: findDraggableById,
      exists: (id2) => Boolean(findDraggableById(id2)),
      getAllByType: (type) => Object.values(entries.draggables).filter((entry) => entry.descriptor.type === type)
    };
    function findDroppableById(id2) {
      return entries.droppables[id2] || null;
    }
    function getDroppableById(id2) {
      const entry = findDroppableById(id2);
      !entry ? true ? invariant6(false, `Cannot find droppable entry with id [${id2}]`) : invariant6() : void 0;
      return entry;
    }
    const droppableAPI = {
      register: (entry) => {
        entries.droppables[entry.descriptor.id] = entry;
      },
      unregister: (entry) => {
        const current = findDroppableById(entry.descriptor.id);
        if (!current) {
          return;
        }
        if (entry.uniqueId !== current.uniqueId) {
          return;
        }
        delete entries.droppables[entry.descriptor.id];
      },
      getById: getDroppableById,
      findById: findDroppableById,
      exists: (id2) => Boolean(findDroppableById(id2)),
      getAllByType: (type) => Object.values(entries.droppables).filter((entry) => entry.descriptor.type === type)
    };
    function clean2() {
      entries.draggables = {};
      entries.droppables = {};
      subscribers.length = 0;
    }
    return {
      draggable: draggableAPI,
      droppable: droppableAPI,
      subscribe,
      clean: clean2
    };
  }
  function useRegistry() {
    const registry = useMemo18(createRegistry, []);
    (0, import_react72.useEffect)(() => {
      return function unmount() {
        registry.clean();
      };
    }, [registry]);
    return registry;
  }
  var StoreContext2 = import_react72.default.createContext(null);
  var getBodyElement = () => {
    const body = document.body;
    !body ? true ? invariant6(false, "Cannot find document.body") : invariant6() : void 0;
    return body;
  };
  var visuallyHidden = {
    position: "absolute",
    width: "1px",
    height: "1px",
    margin: "-1px",
    border: "0",
    padding: "0",
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    "clip-path": "inset(100%)"
  };
  var getId = (contextId) => `rfd-announcement-${contextId}`;
  function useAnnouncer(contextId) {
    const id2 = useMemo18(() => getId(contextId), [contextId]);
    const ref2 = (0, import_react72.useRef)(null);
    (0, import_react72.useEffect)(function setup() {
      const el = document.createElement("div");
      ref2.current = el;
      el.id = id2;
      el.setAttribute("aria-live", "assertive");
      el.setAttribute("aria-atomic", "true");
      _extends5(el.style, visuallyHidden);
      getBodyElement().appendChild(el);
      return function cleanup() {
        setTimeout(function remove2() {
          const body = getBodyElement();
          if (body.contains(el)) {
            body.removeChild(el);
          }
          if (el === ref2.current) {
            ref2.current = null;
          }
        });
      };
    }, [id2]);
    const announce = useCallback23((message) => {
      const el = ref2.current;
      if (el) {
        el.textContent = message;
        return;
      }
      true ? warning7(`
      A screen reader message was trying to be announced but it was unable to do so.
      This can occur if you unmount your <DragDropContext /> in your onDragEnd.
      Consider calling provided.announce() before the unmount so that the instruction will
      not be lost for users relying on a screen reader.

      Message not passed to screen reader:

      "${message}"
    `) : void 0;
    }, []);
    return announce;
  }
  var defaults = {
    separator: "::"
  };
  function useUniqueId(prefix3, options = defaults) {
    const id2 = import_react72.default.useId();
    return useMemo18(() => `${prefix3}${options.separator}${id2}`, [options.separator, prefix3, id2]);
  }
  function getElementId({
    contextId,
    uniqueId
  }) {
    return `rfd-hidden-text-${contextId}-${uniqueId}`;
  }
  function useHiddenTextElement({
    contextId,
    text
  }) {
    const uniqueId = useUniqueId("hidden-text", {
      separator: "-"
    });
    const id2 = useMemo18(() => getElementId({
      contextId,
      uniqueId
    }), [uniqueId, contextId]);
    (0, import_react72.useEffect)(function mount() {
      const el = document.createElement("div");
      el.id = id2;
      el.textContent = text;
      el.style.display = "none";
      getBodyElement().appendChild(el);
      return function unmount() {
        const body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
      };
    }, [id2, text]);
    return id2;
  }
  var AppContext = import_react72.default.createContext(null);
  var peerDependencies = {
    react: "^18.0.0 || ^19.0.0"
  };
  var semver = /(\d+)\.(\d+)\.(\d+)/;
  var getVersion = (value) => {
    const result = semver.exec(value);
    !(result != null) ? true ? invariant6(false, `Unable to parse React version ${value}`) : invariant6() : void 0;
    const major = Number(result[1]);
    const minor = Number(result[2]);
    const patch2 = Number(result[3]);
    return {
      major,
      minor,
      patch: patch2,
      raw: value
    };
  };
  var isSatisfied = (expected, actual) => {
    if (actual.major > expected.major) {
      return true;
    }
    if (actual.major < expected.major) {
      return false;
    }
    if (actual.minor > expected.minor) {
      return true;
    }
    if (actual.minor < expected.minor) {
      return false;
    }
    return actual.patch >= expected.patch;
  };
  var checkReactVersion = (peerDepValue, actualValue) => {
    const peerDep = getVersion(peerDepValue);
    const actual = getVersion(actualValue);
    if (isSatisfied(peerDep, actual)) {
      return;
    }
    true ? warning7(`
    React version: [${actual.raw}]
    does not satisfy expected peer dependency version: [${peerDep.raw}]

    This can result in run time bugs, and even fatal crashes
  `) : void 0;
  };
  var suffix = `
  We expect a html5 doctype: <!doctype html>
  This is to ensure consistent browser layout and measurement

  More information: https://github.com/hello-pangea/dnd/blob/main/docs/guides/doctype.md
`;
  var checkDoctype = (doc) => {
    const doctype = doc.doctype;
    if (!doctype) {
      true ? warning7(`
      No <!doctype html> found.

      ${suffix}
    `) : void 0;
      return;
    }
    if (doctype.name.toLowerCase() !== "html") {
      true ? warning7(`
      Unexpected <!doctype> found: (${doctype.name})

      ${suffix}
    `) : void 0;
    }
    if (doctype.publicId !== "") {
      true ? warning7(`
      Unexpected <!doctype> publicId found: (${doctype.publicId})
      A html5 doctype does not have a publicId

      ${suffix}
    `) : void 0;
    }
  };
  function useDev(useHook) {
    if (true) {
      useHook();
    }
  }
  function useDevSetupWarning(fn2, inputs) {
    useDev(() => {
      (0, import_react72.useEffect)(() => {
        try {
          fn2();
        } catch (e) {
          error(`
          A setup problem was encountered.

          > ${e.message}
        `);
        }
      }, inputs);
    });
  }
  function useStartupValidation() {
    useDevSetupWarning(() => {
      checkReactVersion(peerDependencies.react, import_react72.default.version);
      checkDoctype(document);
    }, []);
  }
  function usePrevious2(current) {
    const ref2 = (0, import_react72.useRef)(current);
    (0, import_react72.useEffect)(() => {
      ref2.current = current;
    });
    return ref2;
  }
  function create2() {
    let lock = null;
    function isClaimed() {
      return Boolean(lock);
    }
    function isActive2(value) {
      return value === lock;
    }
    function claim(abandon) {
      !!lock ? true ? invariant6(false, "Cannot claim lock as it is already claimed") : invariant6() : void 0;
      const newLock = {
        abandon
      };
      lock = newLock;
      return newLock;
    }
    function release() {
      !lock ? true ? invariant6(false, "Cannot release lock when there is no lock") : invariant6() : void 0;
      lock = null;
    }
    function tryAbandon() {
      if (lock) {
        lock.abandon();
        release();
      }
    }
    return {
      isClaimed,
      isActive: isActive2,
      claim,
      release,
      tryAbandon
    };
  }
  function isDragging(state) {
    if (state.phase === "IDLE" || state.phase === "DROP_ANIMATING") {
      return false;
    }
    return state.isDragging;
  }
  var tab = 9;
  var enter = 13;
  var escape = 27;
  var space = 32;
  var pageUp = 33;
  var pageDown = 34;
  var end2 = 35;
  var home = 36;
  var arrowLeft = 37;
  var arrowUp = 38;
  var arrowRight = 39;
  var arrowDown = 40;
  var preventedKeys = {
    [enter]: true,
    [tab]: true
  };
  var preventStandardKeyEvents = (event) => {
    if (preventedKeys[event.keyCode]) {
      event.preventDefault();
    }
  };
  var supportedEventName = (() => {
    const base = "visibilitychange";
    if (typeof document === "undefined") {
      return base;
    }
    const candidates = [base, `ms${base}`, `webkit${base}`, `moz${base}`, `o${base}`];
    const supported = candidates.find((eventName) => `on${eventName}` in document);
    return supported || base;
  })();
  var primaryButton = 0;
  var sloppyClickThreshold = 5;
  function isSloppyClickThresholdExceeded(original, current) {
    return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
  }
  var idle$1 = {
    type: "IDLE"
  };
  function getCaptureBindings({
    cancel,
    completed,
    getPhase,
    setPhase
  }) {
    return [{
      eventName: "mousemove",
      fn: (event) => {
        const {
          button,
          clientX,
          clientY
        } = event;
        if (button !== primaryButton) {
          return;
        }
        const point = {
          x: clientX,
          y: clientY
        };
        const phase = getPhase();
        if (phase.type === "DRAGGING") {
          event.preventDefault();
          phase.actions.move(point);
          return;
        }
        !(phase.type === "PENDING") ? true ? invariant6(false, "Cannot be IDLE") : invariant6() : void 0;
        const pending = phase.point;
        if (!isSloppyClickThresholdExceeded(pending, point)) {
          return;
        }
        event.preventDefault();
        const actions = phase.actions.fluidLift(point);
        setPhase({
          type: "DRAGGING",
          actions
        });
      }
    }, {
      eventName: "mouseup",
      fn: (event) => {
        const phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: "mousedown",
      fn: (event) => {
        if (getPhase().type === "DRAGGING") {
          event.preventDefault();
        }
        cancel();
      }
    }, {
      eventName: "keydown",
      fn: (event) => {
        const phase = getPhase();
        if (phase.type === "PENDING") {
          cancel();
          return;
        }
        if (event.keyCode === escape) {
          event.preventDefault();
          cancel();
          return;
        }
        preventStandardKeyEvents(event);
      }
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "scroll",
      options: {
        passive: true,
        capture: false
      },
      fn: () => {
        if (getPhase().type === "PENDING") {
          cancel();
        }
      }
    }, {
      eventName: "webkitmouseforcedown",
      fn: (event) => {
        const phase = getPhase();
        !(phase.type !== "IDLE") ? true ? invariant6(false, "Unexpected phase") : invariant6() : void 0;
        if (phase.actions.shouldRespectForcePress()) {
          cancel();
          return;
        }
        event.preventDefault();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useMouseSensor(api) {
    const phaseRef = (0, import_react72.useRef)(idle$1);
    const unbindEventsRef = (0, import_react72.useRef)(noop$2);
    const startCaptureBinding = useMemo18(() => ({
      eventName: "mousedown",
      fn: function onMouseDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== primaryButton) {
          return;
        }
        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
          return;
        }
        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        event.preventDefault();
        const point = {
          x: event.clientX,
          y: event.clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    }), [api]);
    const preventForcePressBinding = useMemo18(() => ({
      eventName: "webkitmouseforcewillbegin",
      fn: (event) => {
        if (event.defaultPrevented) {
          return;
        }
        const id2 = api.findClosestDraggableId(event);
        if (!id2) {
          return;
        }
        const options = api.findOptionsForDraggable(id2);
        if (!options) {
          return;
        }
        if (options.shouldRespectForcePress) {
          return;
        }
        if (!api.canGetLock(id2)) {
          return;
        }
        event.preventDefault();
      }
    }), [api]);
    const listenForCapture = useCallback23(function listenForCapture2() {
      const options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
    }, [preventForcePressBinding, startCaptureBinding]);
    const stop = useCallback23(() => {
      const current = phaseRef.current;
      if (current.type === "IDLE") {
        return;
      }
      phaseRef.current = idle$1;
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture]);
    const cancel = useCallback23(() => {
      const phase = phaseRef.current;
      stop();
      if (phase.type === "DRAGGING") {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === "PENDING") {
        phase.actions.abort();
      }
    }, [stop]);
    const bindCapturingEvents = useCallback23(function bindCapturingEvents2() {
      const options = {
        capture: true,
        passive: false
      };
      const bindings = getCaptureBindings({
        cancel,
        completed: stop,
        getPhase: () => phaseRef.current,
        setPhase: (phase) => {
          phaseRef.current = phase;
        }
      });
      unbindEventsRef.current = bindEvents(window, bindings, options);
    }, [cancel, stop]);
    const startPendingDrag = useCallback23(function startPendingDrag2(actions, point) {
      !(phaseRef.current.type === "IDLE") ? true ? invariant6(false, "Expected to move from IDLE to PENDING drag") : invariant6() : void 0;
      phaseRef.current = {
        type: "PENDING",
        point,
        actions
      };
      bindCapturingEvents();
    }, [bindCapturingEvents]);
    useIsomorphicLayoutEffect4(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }
  function noop$1() {
  }
  var scrollJumpKeys = {
    [pageDown]: true,
    [pageUp]: true,
    [home]: true,
    [end2]: true
  };
  function getDraggingBindings(actions, stop) {
    function cancel() {
      stop();
      actions.cancel();
    }
    function drop2() {
      stop();
      actions.drop();
    }
    return [{
      eventName: "keydown",
      fn: (event) => {
        if (event.keyCode === escape) {
          event.preventDefault();
          cancel();
          return;
        }
        if (event.keyCode === space) {
          event.preventDefault();
          drop2();
          return;
        }
        if (event.keyCode === arrowDown) {
          event.preventDefault();
          actions.moveDown();
          return;
        }
        if (event.keyCode === arrowUp) {
          event.preventDefault();
          actions.moveUp();
          return;
        }
        if (event.keyCode === arrowRight) {
          event.preventDefault();
          actions.moveRight();
          return;
        }
        if (event.keyCode === arrowLeft) {
          event.preventDefault();
          actions.moveLeft();
          return;
        }
        if (scrollJumpKeys[event.keyCode]) {
          event.preventDefault();
          return;
        }
        preventStandardKeyEvents(event);
      }
    }, {
      eventName: "mousedown",
      fn: cancel
    }, {
      eventName: "mouseup",
      fn: cancel
    }, {
      eventName: "click",
      fn: cancel
    }, {
      eventName: "touchstart",
      fn: cancel
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "wheel",
      fn: cancel,
      options: {
        passive: true
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useKeyboardSensor(api) {
    const unbindEventsRef = (0, import_react72.useRef)(noop$1);
    const startCaptureBinding = useMemo18(() => ({
      eventName: "keydown",
      fn: function onKeyDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.keyCode !== space) {
          return;
        }
        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const preDrag = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!preDrag) {
          return;
        }
        event.preventDefault();
        let isCapturing = true;
        const actions = preDrag.snapLift();
        unbindEventsRef.current();
        function stop() {
          !isCapturing ? true ? invariant6(false, "Cannot stop capturing a keyboard drag when not capturing") : invariant6() : void 0;
          isCapturing = false;
          unbindEventsRef.current();
          listenForCapture();
        }
        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
          capture: true,
          passive: false
        });
      }
    }), [api]);
    const listenForCapture = useCallback23(function tryStartCapture() {
      const options = {
        passive: false,
        capture: true
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    useIsomorphicLayoutEffect4(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
      };
    }, [listenForCapture]);
  }
  var idle = {
    type: "IDLE"
  };
  var timeForLongPress = 120;
  var forcePressThreshold = 0.15;
  function getWindowBindings({
    cancel,
    getPhase
  }) {
    return [{
      eventName: "orientationchange",
      fn: cancel
    }, {
      eventName: "resize",
      fn: cancel
    }, {
      eventName: "contextmenu",
      fn: (event) => {
        event.preventDefault();
      }
    }, {
      eventName: "keydown",
      fn: (event) => {
        if (getPhase().type !== "DRAGGING") {
          cancel();
          return;
        }
        if (event.keyCode === escape) {
          event.preventDefault();
        }
        cancel();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function getHandleBindings({
    cancel,
    completed,
    getPhase
  }) {
    return [{
      eventName: "touchmove",
      options: {
        capture: false
      },
      fn: (event) => {
        const phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        phase.hasMoved = true;
        const {
          clientX,
          clientY
        } = event.touches[0];
        const point = {
          x: clientX,
          y: clientY
        };
        event.preventDefault();
        phase.actions.move(point);
      }
    }, {
      eventName: "touchend",
      fn: (event) => {
        const phase = getPhase();
        if (phase.type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        phase.actions.drop({
          shouldBlockNextClick: true
        });
        completed();
      }
    }, {
      eventName: "touchcancel",
      fn: (event) => {
        if (getPhase().type !== "DRAGGING") {
          cancel();
          return;
        }
        event.preventDefault();
        cancel();
      }
    }, {
      eventName: "touchforcechange",
      fn: (event) => {
        const phase = getPhase();
        !(phase.type !== "IDLE") ? true ? invariant6() : invariant6() : void 0;
        const touch = event.touches[0];
        if (!touch) {
          return;
        }
        const isForcePress = touch.force >= forcePressThreshold;
        if (!isForcePress) {
          return;
        }
        const shouldRespect = phase.actions.shouldRespectForcePress();
        if (phase.type === "PENDING") {
          if (shouldRespect) {
            cancel();
          }
          return;
        }
        if (shouldRespect) {
          if (phase.hasMoved) {
            event.preventDefault();
            return;
          }
          cancel();
          return;
        }
        event.preventDefault();
      }
    }, {
      eventName: supportedEventName,
      fn: cancel
    }];
  }
  function useTouchSensor(api) {
    const phaseRef = (0, import_react72.useRef)(idle);
    const unbindEventsRef = (0, import_react72.useRef)(noop$2);
    const getPhase = useCallback23(function getPhase2() {
      return phaseRef.current;
    }, []);
    const setPhase = useCallback23(function setPhase2(phase) {
      phaseRef.current = phase;
    }, []);
    const startCaptureBinding = useMemo18(() => ({
      eventName: "touchstart",
      fn: function onTouchStart(event) {
        if (event.defaultPrevented) {
          return;
        }
        const draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        const actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        const touch = event.touches[0];
        const {
          clientX,
          clientY
        } = touch;
        const point = {
          x: clientX,
          y: clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    }), [api]);
    const listenForCapture = useCallback23(function listenForCapture2() {
      const options = {
        capture: true,
        passive: false
      };
      unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
    }, [startCaptureBinding]);
    const stop = useCallback23(() => {
      const current = phaseRef.current;
      if (current.type === "IDLE") {
        return;
      }
      if (current.type === "PENDING") {
        clearTimeout(current.longPressTimerId);
      }
      setPhase(idle);
      unbindEventsRef.current();
      listenForCapture();
    }, [listenForCapture, setPhase]);
    const cancel = useCallback23(() => {
      const phase = phaseRef.current;
      stop();
      if (phase.type === "DRAGGING") {
        phase.actions.cancel({
          shouldBlockNextClick: true
        });
      }
      if (phase.type === "PENDING") {
        phase.actions.abort();
      }
    }, [stop]);
    const bindCapturingEvents = useCallback23(function bindCapturingEvents2() {
      const options = {
        capture: true,
        passive: false
      };
      const args = {
        cancel,
        completed: stop,
        getPhase
      };
      const unbindTarget = bindEvents(window, getHandleBindings(args), options);
      const unbindWindow = bindEvents(window, getWindowBindings(args), options);
      unbindEventsRef.current = function unbindAll() {
        unbindTarget();
        unbindWindow();
      };
    }, [cancel, getPhase, stop]);
    const startDragging = useCallback23(function startDragging2() {
      const phase = getPhase();
      !(phase.type === "PENDING") ? true ? invariant6(false, `Cannot start dragging from phase ${phase.type}`) : invariant6() : void 0;
      const actions = phase.actions.fluidLift(phase.point);
      setPhase({
        type: "DRAGGING",
        actions,
        hasMoved: false
      });
    }, [getPhase, setPhase]);
    const startPendingDrag = useCallback23(function startPendingDrag2(actions, point) {
      !(getPhase().type === "IDLE") ? true ? invariant6(false, "Expected to move from IDLE to PENDING drag") : invariant6() : void 0;
      const longPressTimerId = setTimeout(startDragging, timeForLongPress);
      setPhase({
        type: "PENDING",
        point,
        actions,
        longPressTimerId
      });
      bindCapturingEvents();
    }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
    useIsomorphicLayoutEffect4(function mount() {
      listenForCapture();
      return function unmount() {
        unbindEventsRef.current();
        const phase = getPhase();
        if (phase.type === "PENDING") {
          clearTimeout(phase.longPressTimerId);
          setPhase(idle);
        }
      };
    }, [getPhase, listenForCapture, setPhase]);
    useIsomorphicLayoutEffect4(function webkitHack() {
      const unbind = bindEvents(window, [{
        eventName: "touchmove",
        fn: () => {
        },
        options: {
          capture: false,
          passive: false
        }
      }]);
      return unbind;
    }, []);
  }
  function useValidateSensorHooks(sensorHooks) {
    useDev(() => {
      const previousRef = usePrevious2(sensorHooks);
      useDevSetupWarning(() => {
        !(previousRef.current.length === sensorHooks.length) ? true ? invariant6(false, "Cannot change the amount of sensor hooks after mounting") : invariant6(false) : void 0;
      });
    });
  }
  var interactiveTagNames = ["input", "button", "textarea", "select", "option", "optgroup", "video", "audio"];
  function isAnInteractiveElement(parent, current) {
    if (current == null) {
      return false;
    }
    const hasAnInteractiveTag = interactiveTagNames.includes(current.tagName.toLowerCase());
    if (hasAnInteractiveTag) {
      return true;
    }
    const attribute = current.getAttribute("contenteditable");
    if (attribute === "true" || attribute === "") {
      return true;
    }
    if (current === parent) {
      return false;
    }
    return isAnInteractiveElement(parent, current.parentElement);
  }
  function isEventInInteractiveElement(draggable2, event) {
    const target = event.target;
    if (!isHtmlElement2(target)) {
      return false;
    }
    return isAnInteractiveElement(draggable2, target);
  }
  var getBorderBoxCenterPosition = (el) => getRect(el.getBoundingClientRect()).center;
  function isElement2(el) {
    return el instanceof getWindowFromEl(el).Element;
  }
  var supportedMatchesName = (() => {
    const base = "matches";
    if (typeof document === "undefined") {
      return base;
    }
    const candidates = [base, "msMatchesSelector", "webkitMatchesSelector"];
    const value = candidates.find((name) => name in Element.prototype);
    return value || base;
  })();
  function closestPonyfill(el, selector) {
    if (el == null) {
      return null;
    }
    if (el[supportedMatchesName](selector)) {
      return el;
    }
    return closestPonyfill(el.parentElement, selector);
  }
  function closest(el, selector) {
    if (el.closest) {
      return el.closest(selector);
    }
    return closestPonyfill(el, selector);
  }
  function getSelector2(contextId) {
    return `[${dragHandle.contextId}="${contextId}"]`;
  }
  function findClosestDragHandleFromEvent(contextId, event) {
    const target = event.target;
    if (!isElement2(target)) {
      true ? warning7("event.target must be a Element") : void 0;
      return null;
    }
    const selector = getSelector2(contextId);
    const handle = closest(target, selector);
    if (!handle) {
      return null;
    }
    if (!isHtmlElement2(handle)) {
      true ? warning7("drag handle must be a HTMLElement") : void 0;
      return null;
    }
    return handle;
  }
  function tryGetClosestDraggableIdFromEvent(contextId, event) {
    const handle = findClosestDragHandleFromEvent(contextId, event);
    if (!handle) {
      return null;
    }
    return handle.getAttribute(dragHandle.draggableId);
  }
  function findDraggable(contextId, draggableId) {
    const selector = `[${draggable.contextId}="${contextId}"]`;
    const possible = querySelectorAll(document, selector);
    const draggable$1 = possible.find((el) => {
      return el.getAttribute(draggable.id) === draggableId;
    });
    if (!draggable$1) {
      return null;
    }
    if (!isHtmlElement2(draggable$1)) {
      true ? warning7("Draggable element is not a HTMLElement") : void 0;
      return null;
    }
    return draggable$1;
  }
  function preventDefault(event) {
    event.preventDefault();
  }
  function isActive({
    expected,
    phase,
    isLockActive,
    shouldWarn
  }) {
    if (!isLockActive()) {
      if (shouldWarn) {
        true ? warning7(`
        Cannot perform action.
        The sensor no longer has an action lock.

        Tips:

        - Throw away your action handlers when forceStop() is called
        - Check actions.isActive() if you really need to
      `) : void 0;
      }
      return false;
    }
    if (expected !== phase) {
      if (shouldWarn) {
        true ? warning7(`
        Cannot perform action.
        The actions you used belong to an outdated phase

        Current phase: ${expected}
        You called an action from outdated phase: ${phase}

        Tips:

        - Do not use preDragActions actions after calling preDragActions.lift()
      `) : void 0;
      }
      return false;
    }
    return true;
  }
  function canStart({
    lockAPI,
    store,
    registry,
    draggableId
  }) {
    if (lockAPI.isClaimed()) {
      return false;
    }
    const entry = registry.draggable.findById(draggableId);
    if (!entry) {
      true ? warning7(`Unable to find draggable with id: ${draggableId}`) : void 0;
      return false;
    }
    if (!entry.options.isEnabled) {
      return false;
    }
    if (!canStartDrag(store.getState(), draggableId)) {
      return false;
    }
    return true;
  }
  function tryStart({
    lockAPI,
    contextId,
    store,
    registry,
    draggableId,
    forceSensorStop,
    sourceEvent
  }) {
    const shouldStart = canStart({
      lockAPI,
      store,
      registry,
      draggableId
    });
    if (!shouldStart) {
      return null;
    }
    const entry = registry.draggable.getById(draggableId);
    const el = findDraggable(contextId, entry.descriptor.id);
    if (!el) {
      true ? warning7(`Unable to find draggable element with id: ${draggableId}`) : void 0;
      return null;
    }
    if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
      return null;
    }
    const lock = lockAPI.claim(forceSensorStop || noop$2);
    let phase = "PRE_DRAG";
    function getShouldRespectForcePress() {
      return entry.options.shouldRespectForcePress;
    }
    function isLockActive() {
      return lockAPI.isActive(lock);
    }
    function tryDispatch(expected, getAction) {
      if (isActive({
        expected,
        phase,
        isLockActive,
        shouldWarn: true
      })) {
        store.dispatch(getAction());
      }
    }
    const tryDispatchWhenDragging = tryDispatch.bind(null, "DRAGGING");
    function lift2(args) {
      function completed() {
        lockAPI.release();
        phase = "COMPLETED";
      }
      if (phase !== "PRE_DRAG") {
        completed();
        true ? invariant6(false, `Cannot lift in phase ${phase}`) : invariant6();
      }
      store.dispatch(lift$1(args.liftActionArgs));
      phase = "DRAGGING";
      function finish2(reason, options = {
        shouldBlockNextClick: false
      }) {
        args.cleanup();
        if (options.shouldBlockNextClick) {
          const unbind = bindEvents(window, [{
            eventName: "click",
            fn: preventDefault,
            options: {
              once: true,
              passive: false,
              capture: true
            }
          }]);
          setTimeout(unbind);
        }
        completed();
        store.dispatch(drop({
          reason
        }));
      }
      return {
        isActive: () => isActive({
          expected: "DRAGGING",
          phase,
          isLockActive,
          shouldWarn: false
        }),
        shouldRespectForcePress: getShouldRespectForcePress,
        drop: (options) => finish2("DROP", options),
        cancel: (options) => finish2("CANCEL", options),
        ...args.actions
      };
    }
    function fluidLift(clientSelection) {
      const move$1 = raf_schd_esm_default((client) => {
        tryDispatchWhenDragging(() => move({
          client
        }));
      });
      const api = lift2({
        liftActionArgs: {
          id: draggableId,
          clientSelection,
          movementMode: "FLUID"
        },
        cleanup: () => move$1.cancel(),
        actions: {
          move: move$1
        }
      });
      return {
        ...api,
        move: move$1
      };
    }
    function snapLift() {
      const actions = {
        moveUp: () => tryDispatchWhenDragging(moveUp),
        moveRight: () => tryDispatchWhenDragging(moveRight),
        moveDown: () => tryDispatchWhenDragging(moveDown),
        moveLeft: () => tryDispatchWhenDragging(moveLeft)
      };
      return lift2({
        liftActionArgs: {
          id: draggableId,
          clientSelection: getBorderBoxCenterPosition(el),
          movementMode: "SNAP"
        },
        cleanup: noop$2,
        actions
      });
    }
    function abortPreDrag() {
      const shouldRelease = isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: true
      });
      if (shouldRelease) {
        lockAPI.release();
      }
    }
    const preDrag = {
      isActive: () => isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: false
      }),
      shouldRespectForcePress: getShouldRespectForcePress,
      fluidLift,
      snapLift,
      abort: abortPreDrag
    };
    return preDrag;
  }
  var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
  function useSensorMarshal({
    contextId,
    store,
    registry,
    customSensors,
    enableDefaultSensors
  }) {
    const useSensors = [...enableDefaultSensors ? defaultSensors : [], ...customSensors || []];
    const lockAPI = (0, import_react72.useState)(() => create2())[0];
    const tryAbandonLock = useCallback23(function tryAbandonLock2(previous, current) {
      if (isDragging(previous) && !isDragging(current)) {
        lockAPI.tryAbandon();
      }
    }, [lockAPI]);
    useIsomorphicLayoutEffect4(function listenToStore() {
      let previous = store.getState();
      const unsubscribe = store.subscribe(() => {
        const current = store.getState();
        tryAbandonLock(previous, current);
        previous = current;
      });
      return unsubscribe;
    }, [lockAPI, store, tryAbandonLock]);
    useIsomorphicLayoutEffect4(() => {
      return lockAPI.tryAbandon;
    }, [lockAPI.tryAbandon]);
    const canGetLock = useCallback23((draggableId) => {
      return canStart({
        lockAPI,
        registry,
        store,
        draggableId
      });
    }, [lockAPI, registry, store]);
    const tryGetLock = useCallback23((draggableId, forceStop, options) => tryStart({
      lockAPI,
      registry,
      contextId,
      store,
      draggableId,
      forceSensorStop: forceStop || null,
      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
    }), [contextId, lockAPI, registry, store]);
    const findClosestDraggableId = useCallback23((event) => tryGetClosestDraggableIdFromEvent(contextId, event), [contextId]);
    const findOptionsForDraggable = useCallback23((id2) => {
      const entry = registry.draggable.findById(id2);
      return entry ? entry.options : null;
    }, [registry.draggable]);
    const tryReleaseLock = useCallback23(function tryReleaseLock2() {
      if (!lockAPI.isClaimed()) {
        return;
      }
      lockAPI.tryAbandon();
      if (store.getState().phase !== "IDLE") {
        store.dispatch(flush());
      }
    }, [lockAPI, store]);
    const isLockClaimed = useCallback23(() => lockAPI.isClaimed(), [lockAPI]);
    const api = useMemo18(() => ({
      canGetLock,
      tryGetLock,
      findClosestDraggableId,
      findOptionsForDraggable,
      tryReleaseLock,
      isLockClaimed
    }), [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
    useValidateSensorHooks(useSensors);
    for (let i = 0; i < useSensors.length; i++) {
      useSensors[i](api);
    }
  }
  var createResponders = (props) => ({
    onBeforeCapture: (t) => {
      const onBeforeCapureCallback = () => {
        if (props.onBeforeCapture) {
          props.onBeforeCapture(t);
        }
      };
      (0, import_react_dom5.flushSync)(onBeforeCapureCallback);
    },
    onBeforeDragStart: props.onBeforeDragStart,
    onDragStart: props.onDragStart,
    onDragEnd: props.onDragEnd,
    onDragUpdate: props.onDragUpdate
  });
  var createAutoScrollerOptions = (props) => ({
    ...defaultAutoScrollerOptions,
    ...props.autoScrollerOptions,
    durationDampening: {
      ...defaultAutoScrollerOptions.durationDampening,
      ...props.autoScrollerOptions
    }
  });
  function getStore(lazyRef) {
    !lazyRef.current ? true ? invariant6(false, "Could not find store from lazy ref") : invariant6() : void 0;
    return lazyRef.current;
  }
  function App(props) {
    const {
      contextId,
      setCallbacks,
      sensors,
      nonce,
      dragHandleUsageInstructions: dragHandleUsageInstructions2
    } = props;
    const lazyStoreRef = (0, import_react72.useRef)(null);
    useStartupValidation();
    const lastPropsRef = usePrevious2(props);
    const getResponders = useCallback23(() => {
      return createResponders(lastPropsRef.current);
    }, [lastPropsRef]);
    const getAutoScrollerOptions = useCallback23(() => {
      return createAutoScrollerOptions(lastPropsRef.current);
    }, [lastPropsRef]);
    const announce = useAnnouncer(contextId);
    const dragHandleUsageInstructionsId = useHiddenTextElement({
      contextId,
      text: dragHandleUsageInstructions2
    });
    const styleMarshal = useStyleMarshal(contextId, nonce);
    const lazyDispatch = useCallback23((action) => {
      getStore(lazyStoreRef).dispatch(action);
    }, []);
    const marshalCallbacks = useMemo18(() => bindActionCreators({
      publishWhileDragging,
      updateDroppableScroll,
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      collectionStarting
    }, lazyDispatch), [lazyDispatch]);
    const registry = useRegistry();
    const dimensionMarshal = useMemo18(() => {
      return createDimensionMarshal(registry, marshalCallbacks);
    }, [registry, marshalCallbacks]);
    const autoScroller = useMemo18(() => createAutoScroller({
      scrollWindow,
      scrollDroppable: dimensionMarshal.scrollDroppable,
      getAutoScrollerOptions,
      ...bindActionCreators({
        move
      }, lazyDispatch)
    }), [dimensionMarshal.scrollDroppable, lazyDispatch, getAutoScrollerOptions]);
    const focusMarshal = useFocusMarshal(contextId);
    const store = useMemo18(() => createStore4({
      announce,
      autoScroller,
      dimensionMarshal,
      focusMarshal,
      getResponders,
      styleMarshal
    }), [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);
    if (true) {
      if (lazyStoreRef.current && lazyStoreRef.current !== store) {
        true ? warning7("unexpected store change") : void 0;
      }
    }
    lazyStoreRef.current = store;
    const tryResetStore = useCallback23(() => {
      const current = getStore(lazyStoreRef);
      const state = current.getState();
      if (state.phase !== "IDLE") {
        current.dispatch(flush());
      }
    }, []);
    const isDragging2 = useCallback23(() => {
      const state = getStore(lazyStoreRef).getState();
      if (state.phase === "DROP_ANIMATING") {
        return true;
      }
      if (state.phase === "IDLE") {
        return false;
      }
      return state.isDragging;
    }, []);
    const appCallbacks = useMemo18(() => ({
      isDragging: isDragging2,
      tryAbort: tryResetStore
    }), [isDragging2, tryResetStore]);
    setCallbacks(appCallbacks);
    const getCanLift = useCallback23((id2) => canStartDrag(getStore(lazyStoreRef).getState(), id2), []);
    const getIsMovementAllowed = useCallback23(() => isMovementAllowed(getStore(lazyStoreRef).getState()), []);
    const appContext = useMemo18(() => ({
      marshal: dimensionMarshal,
      focus: focusMarshal,
      contextId,
      canLift: getCanLift,
      isMovementAllowed: getIsMovementAllowed,
      dragHandleUsageInstructionsId,
      registry
    }), [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
    useSensorMarshal({
      contextId,
      store,
      registry,
      customSensors: sensors || null,
      enableDefaultSensors: props.enableDefaultSensors !== false
    });
    (0, import_react72.useEffect)(() => {
      return tryResetStore;
    }, [tryResetStore]);
    return import_react72.default.createElement(AppContext.Provider, {
      value: appContext
    }, import_react72.default.createElement(Provider_default, {
      context: StoreContext2,
      store
    }, props.children));
  }
  function useUniqueContextId() {
    return import_react72.default.useId();
  }
  function DragDropContext(props) {
    const contextId = useUniqueContextId();
    const dragHandleUsageInstructions2 = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
    return import_react72.default.createElement(ErrorBoundary, null, (setCallbacks) => import_react72.default.createElement(App, {
      nonce: props.nonce,
      contextId,
      setCallbacks,
      dragHandleUsageInstructions: dragHandleUsageInstructions2,
      enableDefaultSensors: props.enableDefaultSensors,
      sensors: props.sensors,
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragUpdate: props.onDragUpdate,
      onDragEnd: props.onDragEnd,
      autoScrollerOptions: props.autoScrollerOptions
    }, props.children));
  }
  var zIndexOptions = {
    dragging: 5e3,
    dropAnimating: 4500
  };
  var getDraggingTransition = (shouldAnimateDragMovement, dropping) => {
    if (dropping) {
      return transitions.drop(dropping.duration);
    }
    if (shouldAnimateDragMovement) {
      return transitions.snap;
    }
    return transitions.fluid;
  };
  var getDraggingOpacity = (isCombining, isDropAnimating) => {
    if (!isCombining) {
      return void 0;
    }
    return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
  };
  var getShouldDraggingAnimate = (dragging) => {
    if (dragging.forceShouldAnimate != null) {
      return dragging.forceShouldAnimate;
    }
    return dragging.mode === "SNAP";
  };
  function getDraggingStyle(dragging) {
    const dimension = dragging.dimension;
    const box = dimension.client;
    const {
      offset: offset4,
      combineWith,
      dropping
    } = dragging;
    const isCombining = Boolean(combineWith);
    const shouldAnimate = getShouldDraggingAnimate(dragging);
    const isDropAnimating = Boolean(dropping);
    const transform2 = isDropAnimating ? transforms.drop(offset4, isCombining) : transforms.moveTo(offset4);
    const style5 = {
      position: "fixed",
      top: box.marginBox.top,
      left: box.marginBox.left,
      boxSizing: "border-box",
      width: box.borderBox.width,
      height: box.borderBox.height,
      transition: getDraggingTransition(shouldAnimate, dropping),
      transform: transform2,
      opacity: getDraggingOpacity(isCombining, isDropAnimating),
      zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
      pointerEvents: "none"
    };
    return style5;
  }
  function getSecondaryStyle(secondary) {
    return {
      transform: transforms.moveTo(secondary.offset),
      transition: secondary.shouldAnimateDisplacement ? void 0 : "none"
    };
  }
  function getStyle$1(mapped) {
    return mapped.type === "DRAGGING" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
  }
  function getDimension$1(descriptor, el, windowScroll = origin) {
    const computedStyles = window.getComputedStyle(el);
    const borderBox = el.getBoundingClientRect();
    const client = calculateBox(borderBox, computedStyles);
    const page = withScroll(client, windowScroll);
    const placeholder2 = {
      client,
      tagName: el.tagName.toLowerCase(),
      display: computedStyles.display
    };
    const displaceBy = {
      x: client.marginBox.width,
      y: client.marginBox.height
    };
    const dimension = {
      descriptor,
      placeholder: placeholder2,
      displaceBy,
      client,
      page
    };
    return dimension;
  }
  function useDraggablePublisher(args) {
    const uniqueId = useUniqueId("draggable");
    const {
      descriptor,
      registry,
      getDraggableRef,
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    } = args;
    const options = useMemo18(() => ({
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    }), [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
    const getDimension2 = useCallback23((windowScroll) => {
      const el = getDraggableRef();
      !el ? true ? invariant6(false, "Cannot get dimension when no ref is set") : invariant6() : void 0;
      return getDimension$1(descriptor, el, windowScroll);
    }, [descriptor, getDraggableRef]);
    const entry = useMemo18(() => ({
      uniqueId,
      descriptor,
      options,
      getDimension: getDimension2
    }), [descriptor, getDimension2, options, uniqueId]);
    const publishedRef = (0, import_react72.useRef)(entry);
    const isFirstPublishRef = (0, import_react72.useRef)(true);
    useIsomorphicLayoutEffect4(() => {
      registry.draggable.register(publishedRef.current);
      return () => registry.draggable.unregister(publishedRef.current);
    }, [registry.draggable]);
    useIsomorphicLayoutEffect4(() => {
      if (isFirstPublishRef.current) {
        isFirstPublishRef.current = false;
        return;
      }
      const last = publishedRef.current;
      publishedRef.current = entry;
      registry.draggable.update(entry, last);
    }, [entry, registry.draggable]);
  }
  var DroppableContext = import_react72.default.createContext(null);
  function checkIsValidInnerRef(el) {
    !(el && isHtmlElement2(el)) ? true ? invariant6(false, `
    provided.innerRef has not been provided with a HTMLElement.

    You can find a guide on using the innerRef callback functions at:
    https://github.com/hello-pangea/dnd/blob/main/docs/guides/using-inner-ref.md
  `) : invariant6() : void 0;
  }
  function useValidation$1(props, contextId, getRef) {
    useDevSetupWarning(() => {
      function prefix3(id3) {
        return `Draggable[id: ${id3}]: `;
      }
      const id2 = props.draggableId;
      !id2 ? true ? invariant6(false, "Draggable requires a draggableId") : invariant6(false) : void 0;
      !(typeof id2 === "string") ? true ? invariant6(false, `Draggable requires a [string] draggableId.
      Provided: [type: ${typeof id2}] (value: ${id2})`) : invariant6(false) : void 0;
      !Number.isInteger(props.index) ? true ? invariant6(false, `${prefix3(id2)} requires an integer index prop`) : invariant6(false) : void 0;
      if (props.mapped.type === "DRAGGING") {
        return;
      }
      checkIsValidInnerRef(getRef());
      if (props.isEnabled) {
        !findDragHandle(contextId, id2) ? true ? invariant6(false, `${prefix3(id2)} Unable to find drag handle`) : invariant6(false) : void 0;
      }
    });
  }
  function useClonePropValidation(isClone) {
    useDev(() => {
      const initialRef = (0, import_react72.useRef)(isClone);
      useDevSetupWarning(() => {
        !(isClone === initialRef.current) ? true ? invariant6(false, "Draggable isClone prop value changed during component life") : invariant6(false) : void 0;
      }, [isClone]);
    });
  }
  function useRequiredContext(Context2) {
    const result = (0, import_react72.useContext)(Context2);
    !result ? true ? invariant6(false, "Could not find required context") : invariant6() : void 0;
    return result;
  }
  function preventHtml5Dnd(event) {
    event.preventDefault();
  }
  var Draggable = (props) => {
    const ref2 = (0, import_react72.useRef)(null);
    const setRef = useCallback23((el = null) => {
      ref2.current = el;
    }, []);
    const getRef = useCallback23(() => ref2.current, []);
    const {
      contextId,
      dragHandleUsageInstructionsId,
      registry
    } = useRequiredContext(AppContext);
    const {
      type,
      droppableId
    } = useRequiredContext(DroppableContext);
    const descriptor = useMemo18(() => ({
      id: props.draggableId,
      index: props.index,
      type,
      droppableId
    }), [props.draggableId, props.index, type, droppableId]);
    const {
      children: children2,
      draggableId,
      isEnabled,
      shouldRespectForcePress,
      canDragInteractiveElements,
      isClone,
      mapped,
      dropAnimationFinished: dropAnimationFinishedAction
    } = props;
    useValidation$1(props, contextId, getRef);
    useClonePropValidation(isClone);
    if (!isClone) {
      const forPublisher = useMemo18(() => ({
        descriptor,
        registry,
        getDraggableRef: getRef,
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      }), [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
      useDraggablePublisher(forPublisher);
    }
    const dragHandleProps = useMemo18(() => isEnabled ? {
      tabIndex: 0,
      role: "button",
      "aria-describedby": dragHandleUsageInstructionsId,
      "data-rfd-drag-handle-draggable-id": draggableId,
      "data-rfd-drag-handle-context-id": contextId,
      draggable: false,
      onDragStart: preventHtml5Dnd
    } : null, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
    const onMoveEnd = useCallback23((event) => {
      if (mapped.type !== "DRAGGING") {
        return;
      }
      if (!mapped.dropping) {
        return;
      }
      if (event.propertyName !== "transform") {
        return;
      }
      (0, import_react_dom5.flushSync)(dropAnimationFinishedAction);
    }, [dropAnimationFinishedAction, mapped]);
    const provided = useMemo18(() => {
      const style5 = getStyle$1(mapped);
      const onTransitionEnd = mapped.type === "DRAGGING" && mapped.dropping ? onMoveEnd : void 0;
      const result = {
        innerRef: setRef,
        draggableProps: {
          "data-rfd-draggable-context-id": contextId,
          "data-rfd-draggable-id": draggableId,
          style: style5,
          onTransitionEnd
        },
        dragHandleProps
      };
      return result;
    }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef]);
    const rubric = useMemo18(() => ({
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    }), [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
    return import_react72.default.createElement(import_react72.default.Fragment, null, children2(provided, mapped.snapshot, rubric));
  };
  var isStrictEqual = (a, b) => a === b;
  var whatIsDraggedOverFromResult = (result) => {
    const {
      combine: combine2,
      destination
    } = result;
    if (destination) {
      return destination.droppableId;
    }
    if (combine2) {
      return combine2.droppableId;
    }
    return null;
  };
  var getCombineWithFromResult = (result) => {
    return result.combine ? result.combine.draggableId : null;
  };
  var getCombineWithFromImpact = (impact) => {
    return impact.at && impact.at.type === "COMBINE" ? impact.at.combine.draggableId : null;
  };
  function getDraggableSelector() {
    const memoizedOffset = memoizeOne((x, y) => ({
      x,
      y
    }));
    const getMemoizedSnapshot = memoizeOne((mode, isClone, draggingOver = null, combineWith = null, dropping = null) => ({
      isDragging: true,
      isClone,
      isDropAnimating: Boolean(dropping),
      dropAnimation: dropping,
      mode,
      draggingOver,
      combineWith,
      combineTargetFor: null
    }));
    const getMemoizedProps = memoizeOne((offset4, mode, dimension, isClone, draggingOver = null, combineWith = null, forceShouldAnimate = null) => ({
      mapped: {
        type: "DRAGGING",
        dropping: null,
        draggingOver,
        combineWith,
        mode,
        offset: offset4,
        dimension,
        forceShouldAnimate,
        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
      }
    }));
    const selector = (state, ownProps) => {
      if (isDragging(state)) {
        if (state.critical.draggable.id !== ownProps.draggableId) {
          return null;
        }
        const offset4 = state.current.client.offset;
        const dimension = state.dimensions.draggables[ownProps.draggableId];
        const draggingOver = whatIsDraggedOver(state.impact);
        const combineWith = getCombineWithFromImpact(state.impact);
        const forceShouldAnimate = state.forceShouldAnimate;
        return getMemoizedProps(memoizedOffset(offset4.x, offset4.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
      }
      if (state.phase === "DROP_ANIMATING") {
        const completed = state.completed;
        if (completed.result.draggableId !== ownProps.draggableId) {
          return null;
        }
        const isClone = ownProps.isClone;
        const dimension = state.dimensions.draggables[ownProps.draggableId];
        const result = completed.result;
        const mode = result.mode;
        const draggingOver = whatIsDraggedOverFromResult(result);
        const combineWith = getCombineWithFromResult(result);
        const duration = state.dropDuration;
        const dropping = {
          duration,
          curve: curves.drop,
          moveTo: state.newHomeClientOffset,
          opacity: combineWith ? combine.opacity.drop : null,
          scale: combineWith ? combine.scale.drop : null
        };
        return {
          mapped: {
            type: "DRAGGING",
            offset: state.newHomeClientOffset,
            dimension,
            dropping,
            draggingOver,
            combineWith,
            mode,
            forceShouldAnimate: null,
            snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, dropping)
          }
        };
      }
      return null;
    };
    return selector;
  }
  function getSecondarySnapshot(combineTargetFor = null) {
    return {
      isDragging: false,
      isDropAnimating: false,
      isClone: false,
      dropAnimation: null,
      mode: null,
      draggingOver: null,
      combineTargetFor,
      combineWith: null
    };
  }
  var atRest = {
    mapped: {
      type: "SECONDARY",
      offset: origin,
      combineTargetFor: null,
      shouldAnimateDisplacement: true,
      snapshot: getSecondarySnapshot(null)
    }
  };
  function getSecondarySelector() {
    const memoizedOffset = memoizeOne((x, y) => ({
      x,
      y
    }));
    const getMemoizedSnapshot = memoizeOne(getSecondarySnapshot);
    const getMemoizedProps = memoizeOne((offset4, combineTargetFor = null, shouldAnimateDisplacement) => ({
      mapped: {
        type: "SECONDARY",
        offset: offset4,
        combineTargetFor,
        shouldAnimateDisplacement,
        snapshot: getMemoizedSnapshot(combineTargetFor)
      }
    }));
    const getFallback = (combineTargetFor) => {
      return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
    };
    const getProps = (ownId, draggingId, impact, afterCritical) => {
      const visualDisplacement = impact.displaced.visible[ownId];
      const isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
      const combine2 = tryGetCombine(impact);
      const combineTargetFor = combine2 && combine2.draggableId === ownId ? draggingId : null;
      if (!visualDisplacement) {
        if (!isAfterCriticalInVirtualList) {
          return getFallback(combineTargetFor);
        }
        if (impact.displaced.invisible[ownId]) {
          return null;
        }
        const change = negate(afterCritical.displacedBy.point);
        const offset5 = memoizedOffset(change.x, change.y);
        return getMemoizedProps(offset5, combineTargetFor, true);
      }
      if (isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      const displaceBy = impact.displacedBy.point;
      const offset4 = memoizedOffset(displaceBy.x, displaceBy.y);
      return getMemoizedProps(offset4, combineTargetFor, visualDisplacement.shouldAnimate);
    };
    const selector = (state, ownProps) => {
      if (isDragging(state)) {
        if (state.critical.draggable.id === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
      }
      if (state.phase === "DROP_ANIMATING") {
        const completed = state.completed;
        if (completed.result.draggableId === ownProps.draggableId) {
          return null;
        }
        return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
      }
      return null;
    };
    return selector;
  }
  var makeMapStateToProps$1 = () => {
    const draggingSelector = getDraggableSelector();
    const secondarySelector = getSecondarySelector();
    const selector = (state, ownProps) => draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
    return selector;
  };
  var mapDispatchToProps$1 = {
    dropAnimationFinished
  };
  var ConnectedDraggable = connect_default(makeMapStateToProps$1, mapDispatchToProps$1, null, {
    context: StoreContext2,
    areStatePropsEqual: isStrictEqual
  })(Draggable);
  function PrivateDraggable(props) {
    const droppableContext = useRequiredContext(DroppableContext);
    const isUsingCloneFor = droppableContext.isUsingCloneFor;
    if (isUsingCloneFor === props.draggableId && !props.isClone) {
      return null;
    }
    return import_react72.default.createElement(ConnectedDraggable, props);
  }
  function PublicDraggable(props) {
    const isEnabled = typeof props.isDragDisabled === "boolean" ? !props.isDragDisabled : true;
    const canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
    const shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
    return import_react72.default.createElement(PrivateDraggable, _extends5({}, props, {
      isClone: false,
      isEnabled,
      canDragInteractiveElements,
      shouldRespectForcePress
    }));
  }
  var isEqual = (base) => (value) => base === value;
  var isScroll = isEqual("scroll");
  var isAuto = isEqual("auto");
  var isVisible = isEqual("visible");
  var isEither = (overflow, fn2) => fn2(overflow.overflowX) || fn2(overflow.overflowY);
  var isBoth = (overflow, fn2) => fn2(overflow.overflowX) && fn2(overflow.overflowY);
  var isElementScrollable = (el) => {
    const style5 = window.getComputedStyle(el);
    const overflow = {
      overflowX: style5.overflowX,
      overflowY: style5.overflowY
    };
    return isEither(overflow, isScroll) || isEither(overflow, isAuto);
  };
  var isBodyScrollable = () => {
    if (false) {
      return false;
    }
    const body = getBodyElement();
    const html = document.documentElement;
    !html ? true ? invariant6() : invariant6() : void 0;
    if (!isElementScrollable(body)) {
      return false;
    }
    const htmlStyle = window.getComputedStyle(html);
    const htmlOverflow = {
      overflowX: htmlStyle.overflowX,
      overflowY: htmlStyle.overflowY
    };
    if (isBoth(htmlOverflow, isVisible)) {
      return false;
    }
    true ? warning7(`
    We have detected that your <body> element might be a scroll container.
    We have found no reliable way of detecting whether the <body> element is a scroll container.
    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)

    Because we cannot determine if the <body> is a scroll container, and generally it is not one,
    we will be treating the <body> as *not* a scroll container

    More information: https://github.com/hello-pangea/dnd/blob/main/docs/guides/how-we-detect-scroll-containers.md
  `) : void 0;
    return false;
  };
  var getClosestScrollable = (el) => {
    if (el == null) {
      return null;
    }
    if (el === document.body) {
      return isBodyScrollable() ? el : null;
    }
    if (el === document.documentElement) {
      return null;
    }
    if (!isElementScrollable(el)) {
      return getClosestScrollable(el.parentElement);
    }
    return el;
  };
  var checkForNestedScrollContainers = (scrollable) => {
    if (!scrollable) {
      return;
    }
    const anotherScrollParent = getClosestScrollable(scrollable.parentElement);
    if (!anotherScrollParent) {
      return;
    }
    true ? warning7(`
    Droppable: unsupported nested scroll container detected.
    A Droppable can only have one scroll parent (which can be itself)
    Nested scroll containers are currently not supported.

    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131
  `) : void 0;
  };
  var getScroll = (el) => ({
    x: el.scrollLeft,
    y: el.scrollTop
  });
  var getIsFixed = (el) => {
    if (!el) {
      return false;
    }
    const style5 = window.getComputedStyle(el);
    if (style5.position === "fixed") {
      return true;
    }
    return getIsFixed(el.parentElement);
  };
  var getEnv = (start4) => {
    const closestScrollable = getClosestScrollable(start4);
    const isFixedOnPage = getIsFixed(start4);
    return {
      closestScrollable,
      isFixedOnPage
    };
  };
  var getDroppableDimension = ({
    descriptor,
    isEnabled,
    isCombineEnabled,
    isFixedOnPage,
    direction,
    client,
    page,
    closest: closest2
  }) => {
    const frame2 = (() => {
      if (!closest2) {
        return null;
      }
      const {
        scrollSize,
        client: frameClient
      } = closest2;
      const maxScroll = getMaxScroll({
        scrollHeight: scrollSize.scrollHeight,
        scrollWidth: scrollSize.scrollWidth,
        height: frameClient.paddingBox.height,
        width: frameClient.paddingBox.width
      });
      return {
        pageMarginBox: closest2.page.marginBox,
        frameClient,
        scrollSize,
        shouldClipSubject: closest2.shouldClipSubject,
        scroll: {
          initial: closest2.scroll,
          current: closest2.scroll,
          max: maxScroll,
          diff: {
            value: origin,
            displacement: origin
          }
        }
      };
    })();
    const axis = direction === "vertical" ? vertical : horizontal;
    const subject = getSubject({
      page,
      withPlaceholder: null,
      axis,
      frame: frame2
    });
    const dimension = {
      descriptor,
      isCombineEnabled,
      isFixedOnPage,
      axis,
      isEnabled,
      client,
      page,
      frame: frame2,
      subject
    };
    return dimension;
  };
  var getClient = (targetRef, closestScrollable) => {
    const base = getBox(targetRef);
    if (!closestScrollable) {
      return base;
    }
    if (targetRef !== closestScrollable) {
      return base;
    }
    const top2 = base.paddingBox.top - closestScrollable.scrollTop;
    const left2 = base.paddingBox.left - closestScrollable.scrollLeft;
    const bottom2 = top2 + closestScrollable.scrollHeight;
    const right2 = left2 + closestScrollable.scrollWidth;
    const paddingBox = {
      top: top2,
      right: right2,
      bottom: bottom2,
      left: left2
    };
    const borderBox = expand(paddingBox, base.border);
    const client = createBox({
      borderBox,
      margin: base.margin,
      border: base.border,
      padding: base.padding
    });
    return client;
  };
  var getDimension = ({
    ref: ref2,
    descriptor,
    env,
    windowScroll,
    direction,
    isDropDisabled,
    isCombineEnabled,
    shouldClipSubject
  }) => {
    const closestScrollable = env.closestScrollable;
    const client = getClient(ref2, closestScrollable);
    const page = withScroll(client, windowScroll);
    const closest2 = (() => {
      if (!closestScrollable) {
        return null;
      }
      const frameClient = getBox(closestScrollable);
      const scrollSize = {
        scrollHeight: closestScrollable.scrollHeight,
        scrollWidth: closestScrollable.scrollWidth
      };
      return {
        client: frameClient,
        page: withScroll(frameClient, windowScroll),
        scroll: getScroll(closestScrollable),
        scrollSize,
        shouldClipSubject
      };
    })();
    const dimension = getDroppableDimension({
      descriptor,
      isEnabled: !isDropDisabled,
      isCombineEnabled,
      isFixedOnPage: env.isFixedOnPage,
      direction,
      client,
      page,
      closest: closest2
    });
    return dimension;
  };
  var immediate = {
    passive: false
  };
  var delayed = {
    passive: true
  };
  var getListenerOptions = (options) => options.shouldPublishImmediately ? immediate : delayed;
  var getClosestScrollableFromDrag = (dragging) => dragging && dragging.env.closestScrollable || null;
  function useDroppablePublisher(args) {
    const whileDraggingRef = (0, import_react72.useRef)(null);
    const appContext = useRequiredContext(AppContext);
    const uniqueId = useUniqueId("droppable");
    const {
      registry,
      marshal
    } = appContext;
    const previousRef = usePrevious2(args);
    const descriptor = useMemo18(() => ({
      id: args.droppableId,
      type: args.type,
      mode: args.mode
    }), [args.droppableId, args.mode, args.type]);
    const publishedDescriptorRef = (0, import_react72.useRef)(descriptor);
    const memoizedUpdateScroll = useMemo18(() => memoizeOne((x, y) => {
      !whileDraggingRef.current ? true ? invariant6(false, "Can only update scroll when dragging") : invariant6() : void 0;
      const scroll3 = {
        x,
        y
      };
      marshal.updateDroppableScroll(descriptor.id, scroll3);
    }), [descriptor.id, marshal]);
    const getClosestScroll = useCallback23(() => {
      const dragging = whileDraggingRef.current;
      if (!dragging || !dragging.env.closestScrollable) {
        return origin;
      }
      return getScroll(dragging.env.closestScrollable);
    }, []);
    const updateScroll = useCallback23(() => {
      const scroll3 = getClosestScroll();
      memoizedUpdateScroll(scroll3.x, scroll3.y);
    }, [getClosestScroll, memoizedUpdateScroll]);
    const scheduleScrollUpdate = useMemo18(() => raf_schd_esm_default(updateScroll), [updateScroll]);
    const onClosestScroll = useCallback23(() => {
      const dragging = whileDraggingRef.current;
      const closest2 = getClosestScrollableFromDrag(dragging);
      !(dragging && closest2) ? true ? invariant6(false, "Could not find scroll options while scrolling") : invariant6() : void 0;
      const options = dragging.scrollOptions;
      if (options.shouldPublishImmediately) {
        updateScroll();
        return;
      }
      scheduleScrollUpdate();
    }, [scheduleScrollUpdate, updateScroll]);
    const getDimensionAndWatchScroll = useCallback23((windowScroll, options) => {
      !!whileDraggingRef.current ? true ? invariant6(false, "Cannot collect a droppable while a drag is occurring") : invariant6() : void 0;
      const previous = previousRef.current;
      const ref2 = previous.getDroppableRef();
      !ref2 ? true ? invariant6(false, "Cannot collect without a droppable ref") : invariant6() : void 0;
      const env = getEnv(ref2);
      const dragging = {
        ref: ref2,
        descriptor,
        env,
        scrollOptions: options
      };
      whileDraggingRef.current = dragging;
      const dimension = getDimension({
        ref: ref2,
        descriptor,
        env,
        windowScroll,
        direction: previous.direction,
        isDropDisabled: previous.isDropDisabled,
        isCombineEnabled: previous.isCombineEnabled,
        shouldClipSubject: !previous.ignoreContainerClipping
      });
      const scrollable = env.closestScrollable;
      if (scrollable) {
        scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
        scrollable.addEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
        if (true) {
          checkForNestedScrollContainers(scrollable);
        }
      }
      return dimension;
    }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
    const getScrollWhileDragging = useCallback23(() => {
      const dragging = whileDraggingRef.current;
      const closest2 = getClosestScrollableFromDrag(dragging);
      !(dragging && closest2) ? true ? invariant6(false, "Can only recollect Droppable client for Droppables that have a scroll container") : invariant6() : void 0;
      return getScroll(closest2);
    }, []);
    const dragStopped = useCallback23(() => {
      const dragging = whileDraggingRef.current;
      !dragging ? true ? invariant6(false, "Cannot stop drag when no active drag") : invariant6() : void 0;
      const closest2 = getClosestScrollableFromDrag(dragging);
      whileDraggingRef.current = null;
      if (!closest2) {
        return;
      }
      scheduleScrollUpdate.cancel();
      closest2.removeAttribute(scrollContainer.contextId);
      closest2.removeEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
    }, [onClosestScroll, scheduleScrollUpdate]);
    const scroll2 = useCallback23((change) => {
      const dragging = whileDraggingRef.current;
      !dragging ? true ? invariant6(false, "Cannot scroll when there is no drag") : invariant6() : void 0;
      const closest2 = getClosestScrollableFromDrag(dragging);
      !closest2 ? true ? invariant6(false, "Cannot scroll a droppable with no closest scrollable") : invariant6() : void 0;
      closest2.scrollTop += change.y;
      closest2.scrollLeft += change.x;
    }, []);
    const callbacks = useMemo18(() => {
      return {
        getDimensionAndWatchScroll,
        getScrollWhileDragging,
        dragStopped,
        scroll: scroll2
      };
    }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll2]);
    const entry = useMemo18(() => ({
      uniqueId,
      descriptor,
      callbacks
    }), [callbacks, descriptor, uniqueId]);
    useIsomorphicLayoutEffect4(() => {
      publishedDescriptorRef.current = entry.descriptor;
      registry.droppable.register(entry);
      return () => {
        if (whileDraggingRef.current) {
          true ? warning7("Unsupported: changing the droppableId or type of a Droppable during a drag") : void 0;
          dragStopped();
        }
        registry.droppable.unregister(entry);
      };
    }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
    useIsomorphicLayoutEffect4(() => {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
    }, [args.isDropDisabled, marshal]);
    useIsomorphicLayoutEffect4(() => {
      if (!whileDraggingRef.current) {
        return;
      }
      marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
    }, [args.isCombineEnabled, marshal]);
  }
  function noop8() {
  }
  var empty2 = {
    width: 0,
    height: 0,
    margin: noSpacing2
  };
  var getSize = ({
    isAnimatingOpenOnMount,
    placeholder: placeholder2,
    animate
  }) => {
    if (isAnimatingOpenOnMount) {
      return empty2;
    }
    if (animate === "close") {
      return empty2;
    }
    return {
      height: placeholder2.client.borderBox.height,
      width: placeholder2.client.borderBox.width,
      margin: placeholder2.client.margin
    };
  };
  var getStyle = ({
    isAnimatingOpenOnMount,
    placeholder: placeholder2,
    animate
  }) => {
    const size = getSize({
      isAnimatingOpenOnMount,
      placeholder: placeholder2,
      animate
    });
    return {
      display: placeholder2.display,
      boxSizing: "border-box",
      width: size.width,
      height: size.height,
      marginTop: size.margin.top,
      marginRight: size.margin.right,
      marginBottom: size.margin.bottom,
      marginLeft: size.margin.left,
      flexShrink: "0",
      flexGrow: "0",
      pointerEvents: "none",
      transition: animate !== "none" ? transitions.placeholder : null
    };
  };
  var Placeholder = (props) => {
    const animateOpenTimerRef = (0, import_react72.useRef)(null);
    const tryClearAnimateOpenTimer = useCallback23(() => {
      if (!animateOpenTimerRef.current) {
        return;
      }
      clearTimeout(animateOpenTimerRef.current);
      animateOpenTimerRef.current = null;
    }, []);
    const {
      animate,
      onTransitionEnd,
      onClose,
      contextId
    } = props;
    const [isAnimatingOpenOnMount, setIsAnimatingOpenOnMount] = (0, import_react72.useState)(props.animate === "open");
    (0, import_react72.useEffect)(() => {
      if (!isAnimatingOpenOnMount) {
        return noop8;
      }
      if (animate !== "open") {
        tryClearAnimateOpenTimer();
        setIsAnimatingOpenOnMount(false);
        return noop8;
      }
      if (animateOpenTimerRef.current) {
        return noop8;
      }
      animateOpenTimerRef.current = setTimeout(() => {
        animateOpenTimerRef.current = null;
        setIsAnimatingOpenOnMount(false);
      });
      return tryClearAnimateOpenTimer;
    }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
    const onSizeChangeEnd = useCallback23((event) => {
      if (event.propertyName !== "height") {
        return;
      }
      onTransitionEnd();
      if (animate === "close") {
        onClose();
      }
    }, [animate, onClose, onTransitionEnd]);
    const style5 = getStyle({
      isAnimatingOpenOnMount,
      animate: props.animate,
      placeholder: props.placeholder
    });
    return import_react72.default.createElement(props.placeholder.tagName, {
      style: style5,
      "data-rfd-placeholder-context-id": contextId,
      onTransitionEnd: onSizeChangeEnd,
      ref: props.innerRef
    });
  };
  var Placeholder$1 = import_react72.default.memo(Placeholder);
  function isBoolean(value) {
    return typeof value === "boolean";
  }
  function runChecks(args, checks) {
    checks.forEach((check) => check(args));
  }
  var shared = [function required({
    props
  }) {
    !props.droppableId ? true ? invariant6(false, "A Droppable requires a droppableId prop") : invariant6() : void 0;
    !(typeof props.droppableId === "string") ? true ? invariant6(false, `A Droppable requires a [string] droppableId. Provided: [${typeof props.droppableId}]`) : invariant6() : void 0;
  }, function boolean({
    props
  }) {
    !isBoolean(props.isDropDisabled) ? true ? invariant6(false, "isDropDisabled must be a boolean") : invariant6() : void 0;
    !isBoolean(props.isCombineEnabled) ? true ? invariant6(false, "isCombineEnabled must be a boolean") : invariant6() : void 0;
    !isBoolean(props.ignoreContainerClipping) ? true ? invariant6(false, "ignoreContainerClipping must be a boolean") : invariant6() : void 0;
  }, function ref({
    getDroppableRef
  }) {
    checkIsValidInnerRef(getDroppableRef());
  }];
  var standard = [function placeholder({
    props,
    getPlaceholderRef
  }) {
    if (!props.placeholder) {
      return;
    }
    const ref2 = getPlaceholderRef();
    if (ref2) {
      return;
    }
    true ? warning7(`
      Droppable setup issue [droppableId: "${props.droppableId}"]:
      DroppableProvided > placeholder could not be found.

      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.
      More information: https://github.com/hello-pangea/dnd/blob/main/docs/api/droppable.md
    `) : void 0;
  }];
  var virtual = [function hasClone({
    props
  }) {
    !props.renderClone ? true ? invariant6(false, "Must provide a clone render function (renderClone) for virtual lists") : invariant6() : void 0;
  }, function hasNoPlaceholder({
    getPlaceholderRef
  }) {
    !!getPlaceholderRef() ? true ? invariant6(false, "Expected virtual list to not have a placeholder") : invariant6() : void 0;
  }];
  function useValidation(args) {
    useDevSetupWarning(() => {
      runChecks(args, shared);
      if (args.props.mode === "standard") {
        runChecks(args, standard);
      }
      if (args.props.mode === "virtual") {
        runChecks(args, virtual);
      }
    });
  }
  var AnimateInOut = class extends import_react72.default.PureComponent {
    constructor(...args) {
      super(...args);
      this.state = {
        isVisible: Boolean(this.props.on),
        data: this.props.on,
        animate: this.props.shouldAnimate && this.props.on ? "open" : "none"
      };
      this.onClose = () => {
        if (this.state.animate !== "close") {
          return;
        }
        this.setState({
          isVisible: false
        });
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (!props.shouldAnimate) {
        return {
          isVisible: Boolean(props.on),
          data: props.on,
          animate: "none"
        };
      }
      if (props.on) {
        return {
          isVisible: true,
          data: props.on,
          animate: "open"
        };
      }
      if (state.isVisible) {
        return {
          isVisible: true,
          data: state.data,
          animate: "close"
        };
      }
      return {
        isVisible: false,
        animate: "close",
        data: null
      };
    }
    render() {
      if (!this.state.isVisible) {
        return null;
      }
      const provided = {
        onClose: this.onClose,
        data: this.state.data,
        animate: this.state.animate
      };
      return this.props.children(provided);
    }
  };
  var Droppable = (props) => {
    const appContext = (0, import_react72.useContext)(AppContext);
    !appContext ? true ? invariant6(false, "Could not find app context") : invariant6() : void 0;
    const {
      contextId,
      isMovementAllowed: isMovementAllowed2
    } = appContext;
    const droppableRef = (0, import_react72.useRef)(null);
    const placeholderRef = (0, import_react72.useRef)(null);
    const {
      children: children2,
      droppableId,
      type,
      mode,
      direction,
      ignoreContainerClipping,
      isDropDisabled,
      isCombineEnabled,
      snapshot,
      useClone,
      updateViewportMaxScroll: updateViewportMaxScroll2,
      getContainerForClone
    } = props;
    const getDroppableRef = useCallback23(() => droppableRef.current, []);
    const setDroppableRef = useCallback23((value = null) => {
      droppableRef.current = value;
    }, []);
    const getPlaceholderRef = useCallback23(() => placeholderRef.current, []);
    const setPlaceholderRef = useCallback23((value = null) => {
      placeholderRef.current = value;
    }, []);
    useValidation({
      props,
      getDroppableRef,
      getPlaceholderRef
    });
    const onPlaceholderTransitionEnd = useCallback23(() => {
      if (isMovementAllowed2()) {
        updateViewportMaxScroll2({
          maxScroll: getMaxWindowScroll()
        });
      }
    }, [isMovementAllowed2, updateViewportMaxScroll2]);
    useDroppablePublisher({
      droppableId,
      type,
      mode,
      direction,
      isDropDisabled,
      isCombineEnabled,
      ignoreContainerClipping,
      getDroppableRef
    });
    const placeholder2 = useMemo18(() => import_react72.default.createElement(AnimateInOut, {
      on: props.placeholder,
      shouldAnimate: props.shouldAnimatePlaceholder
    }, ({
      onClose,
      data,
      animate
    }) => import_react72.default.createElement(Placeholder$1, {
      placeholder: data,
      onClose,
      innerRef: setPlaceholderRef,
      animate,
      contextId,
      onTransitionEnd: onPlaceholderTransitionEnd
    })), [contextId, onPlaceholderTransitionEnd, props.placeholder, props.shouldAnimatePlaceholder, setPlaceholderRef]);
    const provided = useMemo18(() => ({
      innerRef: setDroppableRef,
      placeholder: placeholder2,
      droppableProps: {
        "data-rfd-droppable-id": droppableId,
        "data-rfd-droppable-context-id": contextId
      }
    }), [contextId, droppableId, placeholder2, setDroppableRef]);
    const isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
    const droppableContext = useMemo18(() => ({
      droppableId,
      type,
      isUsingCloneFor
    }), [droppableId, isUsingCloneFor, type]);
    function getClone() {
      if (!useClone) {
        return null;
      }
      const {
        dragging,
        render
      } = useClone;
      const node = import_react72.default.createElement(PrivateDraggable, {
        draggableId: dragging.draggableId,
        index: dragging.source.index,
        isClone: true,
        isEnabled: true,
        shouldRespectForcePress: false,
        canDragInteractiveElements: true
      }, (draggableProvided, draggableSnapshot) => render(draggableProvided, draggableSnapshot, dragging));
      return import_react_dom5.default.createPortal(node, getContainerForClone());
    }
    return import_react72.default.createElement(DroppableContext.Provider, {
      value: droppableContext
    }, children2(provided, snapshot), getClone());
  };
  function getBody() {
    !document.body ? true ? invariant6(false, "document.body is not ready") : invariant6() : void 0;
    return document.body;
  }
  var defaultProps = {
    mode: "standard",
    type: "DEFAULT",
    direction: "vertical",
    isDropDisabled: false,
    isCombineEnabled: false,
    ignoreContainerClipping: false,
    renderClone: null,
    getContainerForClone: getBody
  };
  var attachDefaultPropsToOwnProps = (ownProps) => {
    let mergedProps = {
      ...ownProps
    };
    let defaultPropKey;
    for (defaultPropKey in defaultProps) {
      if (ownProps[defaultPropKey] === void 0) {
        mergedProps = {
          ...mergedProps,
          [defaultPropKey]: defaultProps[defaultPropKey]
        };
      }
    }
    return mergedProps;
  };
  var isMatchingType = (type, critical) => type === critical.droppable.type;
  var getDraggable = (critical, dimensions) => dimensions.draggables[critical.draggable.id];
  var makeMapStateToProps = () => {
    const idleWithAnimation = {
      placeholder: null,
      shouldAnimatePlaceholder: true,
      snapshot: {
        isDraggingOver: false,
        draggingOverWith: null,
        draggingFromThisWith: null,
        isUsingPlaceholder: false
      },
      useClone: null
    };
    const idleWithoutAnimation = {
      ...idleWithAnimation,
      shouldAnimatePlaceholder: false
    };
    const getDraggableRubric = memoizeOne((descriptor) => ({
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    }));
    const getMapProps = memoizeOne((id2, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) => {
      const draggableId = dragging.descriptor.id;
      const isHome = dragging.descriptor.droppableId === id2;
      if (isHome) {
        const useClone = renderClone ? {
          render: renderClone,
          dragging: getDraggableRubric(dragging.descriptor)
        } : null;
        const snapshot2 = {
          isDraggingOver: isDraggingOverForConsumer,
          draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
          draggingFromThisWith: draggableId,
          isUsingPlaceholder: true
        };
        return {
          placeholder: dragging.placeholder,
          shouldAnimatePlaceholder: false,
          snapshot: snapshot2,
          useClone
        };
      }
      if (!isEnabled) {
        return idleWithoutAnimation;
      }
      if (!isDraggingOverForImpact) {
        return idleWithAnimation;
      }
      const snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: draggableId,
        draggingFromThisWith: null,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: true,
        snapshot,
        useClone: null
      };
    });
    const selector = (state, ownProps) => {
      const ownPropsWithDefaultProps = attachDefaultPropsToOwnProps(ownProps);
      const id2 = ownPropsWithDefaultProps.droppableId;
      const type = ownPropsWithDefaultProps.type;
      const isEnabled = !ownPropsWithDefaultProps.isDropDisabled;
      const renderClone = ownPropsWithDefaultProps.renderClone;
      if (isDragging(state)) {
        const critical = state.critical;
        if (!isMatchingType(type, critical)) {
          return idleWithoutAnimation;
        }
        const dragging = getDraggable(critical, state.dimensions);
        const isDraggingOver = whatIsDraggedOver(state.impact) === id2;
        return getMapProps(id2, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
      }
      if (state.phase === "DROP_ANIMATING") {
        const completed = state.completed;
        if (!isMatchingType(type, completed.critical)) {
          return idleWithoutAnimation;
        }
        const dragging = getDraggable(completed.critical, state.dimensions);
        return getMapProps(id2, isEnabled, whatIsDraggedOverFromResult(completed.result) === id2, whatIsDraggedOver(completed.impact) === id2, dragging, renderClone);
      }
      if (state.phase === "IDLE" && state.completed && !state.shouldFlush) {
        const completed = state.completed;
        if (!isMatchingType(type, completed.critical)) {
          return idleWithoutAnimation;
        }
        const wasOver = whatIsDraggedOver(completed.impact) === id2;
        const wasCombining = Boolean(completed.impact.at && completed.impact.at.type === "COMBINE");
        const isHome = completed.critical.droppable.id === id2;
        if (wasOver) {
          return wasCombining ? idleWithAnimation : idleWithoutAnimation;
        }
        if (isHome) {
          return idleWithAnimation;
        }
        return idleWithoutAnimation;
      }
      return idleWithoutAnimation;
    };
    return selector;
  };
  var mapDispatchToProps = {
    updateViewportMaxScroll
  };
  var ConnectedDroppable = connect_default(makeMapStateToProps, mapDispatchToProps, (stateProps, dispatchProps, ownProps) => {
    return {
      ...attachDefaultPropsToOwnProps(ownProps),
      ...stateProps,
      ...dispatchProps
    };
  }, {
    context: StoreContext2,
    areStatePropsEqual: isStrictEqual
  })(Droppable);

  // node_modules/@caldwell619/react-kanban/dist/features/column/index.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var import_react76 = __toESM(require_react());

  // node_modules/@caldwell619/react-kanban/dist/features/card/index.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());

  // node_modules/@caldwell619/react-kanban/dist/features/card/components/DefaultCard.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var DefaultCard = function({ children: card, dragging, allowRemoveCard, onCardRemove }) {
    return (0, import_jsx_runtime79.jsxs)("div", Object.assign({ className: `react-kanban-card ${dragging ? "react-kanban-card--dragging" : ""}` }, { children: [(0, import_jsx_runtime79.jsx)("span", { children: (0, import_jsx_runtime79.jsxs)("div", Object.assign({ className: "react-kanban-card__title" }, { children: [(0, import_jsx_runtime79.jsx)("span", { children: card.title }, void 0), allowRemoveCard && (0, import_jsx_runtime79.jsx)("span", Object.assign({ style: { cursor: "pointer" }, onClick: onCardRemove ? () => onCardRemove(card) : void 0 }, { children: "X" }), void 0)] }), void 0) }, void 0), (0, import_jsx_runtime79.jsx)("div", Object.assign({ className: "react-kanban-card__description" }, { children: card.description }), void 0)] }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/card/index.js
  var Card = ({ children: card, index: index2, renderCard, disableCardDrag }) => {
    return (0, import_jsx_runtime80.jsx)(PublicDraggable, Object.assign({ draggableId: String(card.id), index: index2, isDragDisabled: disableCardDrag }, { children: (provided, { isDragging: isDragging2 }) => {
      return (0, import_jsx_runtime80.jsx)("div", Object.assign({ ref: provided.innerRef }, provided.draggableProps, provided.dragHandleProps, { "data-testid": `card-${card.id}` }, { children: (0, import_jsx_runtime80.jsx)("div", Object.assign({ style: { display: "inline-block", whiteSpace: "normal" } }, { children: renderCard(isDragging2) }), void 0) }), void 0);
    } }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/with-droppable/index.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var withDroppable = function(Component2) {
    return function WrapperComponent({ children: children2, ...droppableProps }) {
      return (0, import_jsx_runtime81.jsx)(ConnectedDroppable, Object.assign({}, droppableProps, { children: (provided) => (0, import_jsx_runtime81.jsxs)(Component2, Object.assign({ ref: provided.innerRef }, provided.droppableProps, { children: [children2, provided.placeholder] }), void 0) }), void 0);
    };
  };

  // node_modules/@caldwell619/react-kanban/dist/features/card-adder/index.js
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var import_react74 = __toESM(require_react());

  // node_modules/@caldwell619/react-kanban/dist/features/card-adder/components/CardForm.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var import_react73 = __toESM(require_react());

  // node_modules/@caldwell619/react-kanban/dist/services/utils.js
  function compose2(...fns) {
    return (arg) => fns.reduce((acc, fn2) => fn2(acc), arg);
  }
  function partialRight(fn2, ...args) {
    return (...leftArgs) => fn2(...leftArgs, ...args);
  }
  function addInArrayAtPosition(array2, element, position2) {
    const arrayCopy = [...array2];
    arrayCopy.splice(position2, 0, element);
    return arrayCopy;
  }
  function removeFromArrayAtPosition(array2, position2) {
    return array2.reduce((acc, value, idx) => idx === position2 ? acc : [...acc, value], []);
  }
  function changeElementOfPositionInArray(array2, from, to) {
    const removeFromArrayAtPositionFrom = partialRight(removeFromArrayAtPosition, from);
    const addInArrayAtPositionTo = partialRight(addInArrayAtPosition, array2[from], to);
    return compose2(removeFromArrayAtPositionFrom, addInArrayAtPositionTo)(array2);
  }
  var identity4 = (value) => {
    return value;
  };
  var when = (value, predicate = identity4) => {
    return (callback) => {
      if (predicate(value))
        return callback(value);
    };
  };
  var replaceElementOfArray = (array2) => {
    return function(options) {
      return array2.map((element) => options.when(element) ? options.for(element) : element);
    };
  };
  var pickPropOut = (object, prop) => {
    return Object.keys(object).reduce((obj, key) => {
      return key === prop ? obj : { ...obj, [key]: object[key] };
    }, {});
  };

  // node_modules/@caldwell619/react-kanban/dist/features/card-adder/components/CardForm.js
  var CardForm = function({ onConfirm, onCancel }) {
    const inputCardTitle = (0, import_react73.useRef)();
    const inputCardDescription = (0, import_react73.useRef)();
    function addCard2(event) {
      event.preventDefault();
      when(inputCardTitle.current.value)((value) => {
        onConfirm({ title: value, description: inputCardDescription.current.value });
      });
    }
    return (0, import_jsx_runtime82.jsx)("div", Object.assign({ className: "react-kanban-card-adder-form" }, { children: (0, import_jsx_runtime82.jsxs)("form", Object.assign({ onSubmit: addCard2 }, { children: [(0, import_jsx_runtime82.jsx)("input", {
      className: "react-kanban-card-adder-form__title",
      name: "title",
      autoFocus: true,
      defaultValue: "Title",
      // @ts-expect-error TS(2322): Type 'MutableRefObject<undefined>' is not assignab... Remove this comment to see the full error message
      ref: inputCardTitle
    }, void 0), (0, import_jsx_runtime82.jsx)("input", {
      className: "react-kanban-card-adder-form__description",
      name: "description",
      defaultValue: "Description",
      // @ts-expect-error TS(2322): Type 'MutableRefObject<undefined>' is not assignab... Remove this comment to see the full error message
      ref: inputCardDescription
    }, void 0), (0, import_jsx_runtime82.jsxs)("div", Object.assign({ style: { display: "flex", justifyContent: "space-between", marginTop: "5px" } }, { children: [(0, import_jsx_runtime82.jsx)("button", Object.assign({ className: "react-kanban-card-adder-form__button", type: "submit" }, { children: "Add" }), void 0), (0, import_jsx_runtime82.jsx)("button", Object.assign({ className: "react-kanban-card-adder-form__button", type: "button", onClick: onCancel }, { children: "Cancel" }), void 0)] }), void 0)] }), void 0) }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/card-adder/index.js
  var CardAdder = function({ column, onConfirm }) {
    function confirmCard(card) {
      onConfirm(column, card);
      setAddingCard(false);
    }
    const [addingCard, setAddingCard] = (0, import_react74.useState)(false);
    return (0, import_jsx_runtime83.jsx)(import_jsx_runtime83.Fragment, { children: addingCard ? (0, import_jsx_runtime83.jsx)(CardForm, { onConfirm: confirmCard, onCancel: () => setAddingCard(false) }, void 0) : (0, import_jsx_runtime83.jsx)("button", Object.assign({ className: "react-kanban-card-adder-button", onClick: () => setAddingCard(!addingCard) }, { children: "+" }), void 0) }, void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/column/components/DefaultColumn.js
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());

  // node_modules/@caldwell619/react-kanban/dist/features/column/api/useRenameColumn.js
  var import_react75 = __toESM(require_react());
  var useRenameColumn = ({ onColumnRename, children: column }) => {
    const [canRename, setCanRename] = (0, import_react75.useState)(false);
    const toggleCanRename = () => {
      setCanRename((currentCanRename) => !currentCanRename);
    };
    const [titleInput, setTitleInput] = (0, import_react75.useState)("");
    const handleRenameColumn = (event) => {
      event.preventDefault();
      onColumnRename?.(column, titleInput);
      toggleCanRename();
    };
    const handleCanRename = () => {
      setTitleInput(column.title);
      toggleCanRename();
    };
    const handleTitleChange = ({ target: { value } }) => setTitleInput(value);
    return {
      titleBind: {
        value: titleInput,
        onChange: handleTitleChange
      },
      canRename,
      handleRenameColumn,
      handleCanRename
    };
  };

  // node_modules/@caldwell619/react-kanban/dist/features/column/components/ColumnTitle.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var ColumnTitle = ({ allowRenameColumn, onClick, children: title }) => {
    return allowRenameColumn ? (0, import_jsx_runtime84.jsx)("span", Object.assign({ style: { cursor: "pointer" }, onClick }, { children: title }), void 0) : (0, import_jsx_runtime84.jsx)("span", { children: title }, void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/column/components/DefaultColumn.js
  var DefaultColumn = function(props) {
    const { children: column, allowRemoveColumn, allowRenameColumn, onColumnRemove } = props;
    const { canRename, handleCanRename, titleBind, handleRenameColumn } = useRenameColumn(props);
    return (0, import_jsx_runtime85.jsx)("div", Object.assign({ className: "react-kanban-column-header" }, { children: canRename ? (0, import_jsx_runtime85.jsxs)("form", Object.assign({ onSubmit: handleRenameColumn }, { children: [(0, import_jsx_runtime85.jsx)("span", { children: (0, import_jsx_runtime85.jsx)("input", Object.assign({ type: "text" }, titleBind, { autoFocus: true }), void 0) }, void 0), (0, import_jsx_runtime85.jsxs)("span", { children: [(0, import_jsx_runtime85.jsx)("button", Object.assign({ className: "react-kanban-column-header__button", type: "submit" }, { children: "Rename" }), void 0), (0, import_jsx_runtime85.jsx)("button", Object.assign({ className: "react-kanban-column-header__button", type: "button", onClick: handleCanRename }, { children: "Cancel" }), void 0)] }, void 0)] }), void 0) : (0, import_jsx_runtime85.jsxs)("div", Object.assign({ className: "react-kanban-column-header__spacer" }, { children: [(0, import_jsx_runtime85.jsx)(ColumnTitle, Object.assign({ allowRenameColumn, onClick: handleCanRename }, { children: column.title }), void 0), allowRemoveColumn && (0, import_jsx_runtime85.jsx)("span", Object.assign({ onClick: onColumnRemove ? () => onColumnRemove(column) : void 0 }, { children: "X" }), void 0)] }), void 0) }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/column/index.js
  var ColumnEmptyPlaceholder = (0, import_react76.forwardRef)((props, ref2) => (0, import_jsx_runtime86.jsx)("div", Object.assign({ ref: ref2, style: { minHeight: "inherit", height: "inherit" } }, props), void 0));
  var DroppableColumn = withDroppable(ColumnEmptyPlaceholder);
  var Column = function({ children: column, index: columnIndex, renderCard, renderColumnHeader, disableColumnDrag, disableCardDrag, onCardNew, allowAddCard }) {
    return (0, import_jsx_runtime86.jsx)(PublicDraggable, Object.assign({ draggableId: `column-draggable-${column.id}`, index: columnIndex, isDragDisabled: disableColumnDrag }, { children: (columnProvided) => {
      const draggablePropsWithoutStyle = pickPropOut(columnProvided.draggableProps, "style");
      return (0, import_jsx_runtime86.jsxs)("div", Object.assign({ ref: columnProvided.innerRef }, draggablePropsWithoutStyle, { style: {
        height: "100%",
        minHeight: "28px",
        display: "inline-block",
        verticalAlign: "top",
        ...columnProvided.draggableProps.style
      }, className: "react-kanban-column", "data-testid": `column-${column.id}` }, { children: [(0, import_jsx_runtime86.jsx)("div", Object.assign({}, columnProvided.dragHandleProps, { children: renderColumnHeader(column) }), void 0), allowAddCard && (0, import_jsx_runtime86.jsx)(CardAdder, { column, onConfirm: onCardNew }, void 0), (0, import_jsx_runtime86.jsx)(DroppableColumn, Object.assign({ droppableId: String(column.id) }, { children: column.cards.length ? column.cards.map((card, index2) => (0, import_jsx_runtime86.jsx)(Card, Object.assign({ index: index2, renderCard: (dragging) => renderCard(column, card, dragging), disableCardDrag }, { children: card }), card.id)) : (0, import_jsx_runtime86.jsx)("div", { className: "react-kanban-card-skeleton" }, void 0) }), void 0)] }), void 0);
    } }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/services/board.js
  var getCoordinates = (event, board) => {
    if (event.destination === null)
      return {};
    const columnSource = { fromPosition: event.source.index };
    const columnDestination = { toPosition: event.destination?.index };
    if (isAColumnMove(event.type)) {
      return { source: columnSource, destination: columnDestination };
    }
    return {
      source: { ...columnSource, fromColumnId: getColumnStrict(board, event.source.droppableId).id },
      destination: { ...columnDestination, toColumnId: getColumnStrict(board, event.destination?.droppableId).id }
    };
  };
  var isAColumnMove = (type) => {
    return type === "BOARD";
  };
  var getCard = (board, sourceCoordinate) => {
    const column = board.columns.find((column2) => column2.id === sourceCoordinate.fromColumnId);
    if (!column)
      throw new Error(`Cannot find column: ${sourceCoordinate.fromColumnId}`);
    return column.cards[sourceCoordinate.fromPosition];
  };
  var getColumn = (board, droppableId) => {
    return board.columns.find(({ id: id2 }) => String(id2) === droppableId);
  };
  var getColumnStrict = (board, droppableId) => {
    const column = getColumn(board, droppableId);
    if (!column)
      throw new Error(`Cannot find column with ID: ${droppableId}`);
    return column;
  };
  var isMovingAColumnToAnotherPosition = (coordinates) => {
    return coordinates.source?.fromPosition !== coordinates.destination?.toPosition;
  };
  var isMovingACardToAnotherPosition = (coordinates) => {
    return !(coordinates.source?.fromPosition === coordinates.destination?.toPosition && coordinates.source?.fromColumnId === coordinates.destination?.toColumnId);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/board/components/Container.js
  var Columns = (0, import_react77.forwardRef)((props, ref2) => (0, import_jsx_runtime87.jsx)("div", Object.assign({ ref: ref2, style: { whiteSpace: "nowrap" } }, props), void 0));
  var DroppableBoard = withDroppable(Columns);
  var BoardContainer = function({ board, renderCard, disableColumnDrag, disableCardDrag, renderColumnHeader, renderColumnAdder, allowRemoveColumn, onColumnRemove, allowRenameColumn, onColumnRename, onColumnDragEnd, onCardDragEnd, onCardNew, allowAddCard }) {
    const handleOnDragEnd = (event) => {
      const coordinates = getCoordinates(event, board);
      if (!coordinates.source)
        return;
      isAColumnMove(event.type) ? isMovingAColumnToAnotherPosition(coordinates) && onColumnDragEnd({ ...coordinates, subject: board.columns[coordinates.source.fromPosition] }) : isMovingACardToAnotherPosition(coordinates) && onCardDragEnd({ ...coordinates, subject: getCard(board, coordinates.source) });
    };
    return (0, import_jsx_runtime87.jsx)(DragDropContext, Object.assign({ onDragEnd: handleOnDragEnd }, { children: (0, import_jsx_runtime87.jsxs)("div", Object.assign({ style: { overflowY: "hidden", display: "flex", alignItems: "flex-start" }, className: "react-kanban-board" }, { children: [(0, import_jsx_runtime87.jsx)(DroppableBoard, Object.assign({ droppableId: "board-droppable", direction: "horizontal", type: "BOARD" }, { children: board.columns.map((column, index2) => (0, import_jsx_runtime87.jsx)(Column, Object.assign({ index: index2, renderCard, renderColumnHeader: (column2) => renderColumnHeader ? renderColumnHeader(column2) : (0, import_jsx_runtime87.jsx)(DefaultColumn, Object.assign({ allowRemoveColumn: !!allowRemoveColumn, onColumnRemove, allowRenameColumn: !!allowRenameColumn, onColumnRename }, { children: column2 }), void 0), disableColumnDrag: !!disableColumnDrag, disableCardDrag: !!disableCardDrag, onCardNew, allowAddCard }, { children: column }), column.id)) }), void 0), renderColumnAdder()] }), void 0) }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/board/components/Controlled.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());

  // node_modules/@caldwell619/react-kanban/dist/features/column-adder/index.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var import_react79 = __toESM(require_react());

  // node_modules/@caldwell619/react-kanban/dist/features/column-adder/components/ColumnForm.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var import_react78 = __toESM(require_react());
  var ColumnForm = ({ onConfirm, onCancel }) => {
    const inputColumnTitle = (0, import_react78.createRef)();
    function addColumn2(event) {
      event.preventDefault();
      when(inputColumnTitle.current.value)(onConfirm);
    }
    return (0, import_jsx_runtime88.jsx)("div", Object.assign({ className: "react-kanban-column", style: { minWidth: "230px" } }, { children: (0, import_jsx_runtime88.jsxs)("form", Object.assign({ style: { display: "flex", justifyContent: "space-between" }, onSubmit: addColumn2 }, { children: [(0, import_jsx_runtime88.jsx)("input", { type: "text", ref: inputColumnTitle, autoFocus: true }, void 0), (0, import_jsx_runtime88.jsx)("button", Object.assign({ type: "submit" }, { children: "Add" }), void 0), (0, import_jsx_runtime88.jsx)("button", Object.assign({ type: "button", onClick: onCancel }, { children: "Cancel" }), void 0)] }), void 0) }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/column-adder/index.js
  var ColumnAdder = ({ onConfirm }) => {
    const [isAddingColumn, setAddingColumn] = (0, import_react79.useState)(false);
    const confirmColumn = (title) => {
      onConfirm(title);
      setAddingColumn(false);
    };
    return isAddingColumn ? (0, import_jsx_runtime89.jsx)(ColumnForm, { onConfirm: confirmColumn, onCancel: () => setAddingColumn(false) }, void 0) : (0, import_jsx_runtime89.jsx)("div", Object.assign({ style: { display: "flex", alignItems: "center", justifyContent: "center", minWidth: "230px" }, className: "react-kanban-column-adder-button", onClick: () => setAddingColumn(true), role: "button" }, { children: "+" }), void 0);
  };

  // node_modules/@caldwell619/react-kanban/dist/features/board/components/Uncontrolled.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var import_react80 = __toESM(require_react());

  // node_modules/@caldwell619/react-kanban/dist/services/helpers.js
  function reorderCardsOnColumn(column, reorderCards) {
    return { ...column, cards: reorderCards(column.cards) };
  }
  function moveColumn(board, { fromPosition }, { toPosition }) {
    return { ...board, columns: changeElementOfPositionInArray(board.columns, fromPosition, toPosition) };
  }
  function moveCard(board, { fromPosition, fromColumnId }, { toPosition, toColumnId }) {
    const sourceColumn = board.columns.find((column) => column.id === fromColumnId);
    const destinationColumn = board.columns.find((column) => column.id === toColumnId);
    const reorderColumnsOnBoard = (reorderColumnsMapper) => ({
      ...board,
      columns: board.columns.map(reorderColumnsMapper)
    });
    const reorderCardsOnSourceColumn = reorderCardsOnColumn.bind(null, sourceColumn);
    const reorderCardsOnDestinationColumn = reorderCardsOnColumn.bind(null, destinationColumn);
    if (sourceColumn.id === destinationColumn.id) {
      const reorderedCardsOnColumn = reorderCardsOnSourceColumn((cards) => {
        return changeElementOfPositionInArray(cards, fromPosition, toPosition);
      });
      return reorderColumnsOnBoard((column) => column.id === sourceColumn.id ? reorderedCardsOnColumn : column);
    } else {
      const reorderedCardsOnSourceColumn = reorderCardsOnSourceColumn((cards) => {
        return removeFromArrayAtPosition(cards, fromPosition);
      });
      const reorderedCardsOnDestinationColumn = reorderCardsOnDestinationColumn((cards) => {
        return addInArrayAtPosition(cards, sourceColumn.cards[fromPosition], toPosition);
      });
      return reorderColumnsOnBoard((column) => {
        if (column.id === sourceColumn.id)
          return reorderedCardsOnSourceColumn;
        if (column.id === destinationColumn.id)
          return reorderedCardsOnDestinationColumn;
        return column;
      });
    }
  }
  function addColumn(board, column) {
    return { ...board, columns: addInArrayAtPosition(board.columns, column, board.columns.length) };
  }
  function removeColumn(board, column) {
    return { ...board, columns: board.columns.filter(({ id: id2 }) => id2 !== column.id) };
  }
  function changeColumn(board, column, newColumn) {
    const changedColumns = replaceElementOfArray(board.columns)({
      when: ({ id: id2 }) => id2 === column.id,
      for: (value) => ({
        ...value,
        ...newColumn
      })
    });
    return { ...board, columns: changedColumns };
  }
  function addCard(board, inColumn, card, { on } = {}) {
    const columnToAdd = board.columns.find(({ id: id2 }) => id2 === inColumn.id);
    if (!columnToAdd)
      throw new Error(`Cannot find column with ID: ${inColumn.id}`);
    const cards = addInArrayAtPosition(columnToAdd.cards, card, on === "top" ? 0 : columnToAdd.cards.length);
    const columns = replaceElementOfArray(board.columns)({
      when: ({ id: id2 }) => inColumn.id === id2,
      for: (value) => ({
        ...value,
        cards
      })
    });
    return { ...board, columns };
  }
  function removeCard(board, fromColumn, card) {
    const columnToRemove = board.columns.find(({ id: id2 }) => id2 === fromColumn.id);
    const filteredCards = columnToRemove.cards.filter(({ id: id2 }) => card.id !== id2);
    const columnWithoutCard = { ...columnToRemove, cards: filteredCards };
    const filteredColumns = board.columns.map((column) => fromColumn.id === column.id ? columnWithoutCard : column);
    return { ...board, columns: filteredColumns };
  }

  // node_modules/@caldwell619/react-kanban/dist/features/board/components/Uncontrolled.js
  var UncontrolledBoard = function({ initialBoard, onCardDragEnd, onColumnDragEnd, allowAddColumn = true, renderColumnAdder, onNewColumnConfirm, onColumnRemove, renderColumnHeader, allowRemoveColumn = true, allowRenameColumn = true, onColumnRename, onCardNew, renderCard, allowRemoveCard = true, onCardRemove, onColumnNew, disableCardDrag = false, disableColumnDrag = false, allowAddCard = true, onNewCardConfirm }) {
    const [board, setBoard] = (0, import_react80.useState)(initialBoard);
    const handleOnDragEnd = ({ source, destination, subject }, { moveCallback, notifyCallback }) => {
      const reorderedBoard = moveCallback(board, source, destination);
      when(notifyCallback)((callback) => callback(reorderedBoard, subject, source, destination));
      setBoard(reorderedBoard);
    };
    const handleColumnAdd = async (newColumn) => {
      const column = renderColumnAdder ? newColumn : await onNewColumnConfirm?.(newColumn);
      if (!column)
        throw new Error("Cant add falsy column");
      const boardWithNewColumn = addColumn(board, column);
      onColumnNew?.({ board: boardWithNewColumn, column });
      setBoard(boardWithNewColumn);
    };
    const handleColumnRemove = (column) => {
      const filteredBoard = removeColumn(board, column);
      onColumnRemove?.({ board: filteredBoard, column });
      setBoard(filteredBoard);
    };
    const handleColumnRename = (column, title) => {
      const boardWithRenamedColumn = changeColumn(board, column, { title });
      onColumnRename?.({ board: boardWithRenamedColumn, column: { ...column, title } });
      setBoard(boardWithRenamedColumn);
    };
    const handleCardAdd = (column, card, options = {}) => {
      const boardWithNewCard = addCard(board, column, card, options);
      const targetColumn = boardWithNewCard.columns.find(({ id: id2 }) => id2 === column.id);
      if (!targetColumn)
        throw new Error("Cannot find target column");
      onCardNew?.({ board: boardWithNewCard, column: targetColumn, card });
      setBoard(boardWithNewCard);
    };
    const handleDraftCardAdd = async (column, card, options = {}) => {
      const newCard = await onNewCardConfirm?.(card);
      if (!newCard)
        throw new Error("Cant add falsy card");
      handleCardAdd(column, newCard, options);
    };
    const handleCardRemove = (column, card) => {
      const boardWithoutCard = removeCard(board, column, card);
      const targetColumn = boardWithoutCard.columns.find(({ id: id2 }) => id2 === column.id);
      if (!targetColumn)
        throw new Error("Cannot find target column");
      onCardRemove?.({ board: boardWithoutCard, column: targetColumn, card });
      setBoard(boardWithoutCard);
    };
    const handleOnCardDragEnd = partialRight(handleOnDragEnd, { moveCallback: moveCard, notifyCallback: onCardDragEnd });
    const handleOnColumnDragEnd = partialRight(handleOnDragEnd, {
      moveCallback: moveColumn,
      notifyCallback: onColumnDragEnd
    });
    return (0, import_jsx_runtime91.jsx)(BoardContainer, {
      onCardDragEnd: handleOnCardDragEnd,
      onColumnDragEnd: handleOnColumnDragEnd,
      renderColumnAdder: () => {
        if (!allowAddColumn)
          return null;
        if (renderColumnAdder)
          return renderColumnAdder({ addColumn: handleColumnAdd });
        if (!onNewColumnConfirm)
          return null;
        return (0, import_jsx_runtime91.jsx)(ColumnAdder, { onConfirm: (title) => handleColumnAdd({ title, cards: [] }) }, void 0);
      },
      // TODO: Check because og this could be falsy, also no idea what bound thing is
      renderColumnHeader: (column) => {
        if (renderColumnHeader) {
          return renderColumnHeader(column, {
            removeColumn: handleColumnRemove.bind(null, column),
            renameColumn: handleColumnRename.bind(null, column),
            addCard: handleCardAdd.bind(null, column)
          });
        } else {
          return (0, import_jsx_runtime91.jsx)(DefaultColumn, Object.assign({ allowRemoveColumn, onColumnRemove: (updatedColumn) => onColumnRemove?.({ board, column: updatedColumn }), allowRenameColumn, onColumnRename: (renamedColumn) => onColumnRename?.({ board, column: renamedColumn }) }, { children: column }), void 0);
        }
      },
      renderCard: (column, card, dragging) => {
        if (renderCard)
          return renderCard(card, { removeCard: handleCardRemove.bind(null, column, card), dragging });
        return (0, import_jsx_runtime91.jsx)(DefaultCard, Object.assign({ dragging, allowRemoveCard, onCardRemove: (card2) => handleCardRemove(column, card2) }, { children: card }), void 0);
      },
      allowRemoveColumn,
      onColumnRemove: handleColumnRemove,
      allowRenameColumn,
      onColumnRename: handleColumnRename,
      disableColumnDrag,
      disableCardDrag,
      onCardNew: async (column, card) => await handleDraftCardAdd(column, card, allowAddCard),
      allowAddCard: !!allowAddCard && !!onNewCardConfirm,
      board
    }, void 0);
  };

  // node_modules/gantt-task-react/dist/index.modern.js
  var import_react81 = __toESM(require_react());
  function _extends6() {
    _extends6 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends6.apply(this, arguments);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it)
      return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      return function() {
        if (i >= o.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var ViewMode;
  (function(ViewMode3) {
    ViewMode3["Hour"] = "Hour";
    ViewMode3["QuarterDay"] = "Quarter Day";
    ViewMode3["HalfDay"] = "Half Day";
    ViewMode3["Day"] = "Day";
    ViewMode3["Week"] = "Week";
    ViewMode3["Month"] = "Month";
    ViewMode3["Year"] = "Year";
  })(ViewMode || (ViewMode = {}));
  var intlDTCache = {};
  var getCachedDateTimeFormat = function getCachedDateTimeFormat2(locString, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var key = JSON.stringify([locString, opts]);
    var dtf = intlDTCache[key];
    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache[key] = dtf;
    }
    return dtf;
  };
  var addToDate = function addToDate2(date, quantity, scale) {
    var newDate = new Date(date.getFullYear() + (scale === "year" ? quantity : 0), date.getMonth() + (scale === "month" ? quantity : 0), date.getDate() + (scale === "day" ? quantity : 0), date.getHours() + (scale === "hour" ? quantity : 0), date.getMinutes() + (scale === "minute" ? quantity : 0), date.getSeconds() + (scale === "second" ? quantity : 0), date.getMilliseconds() + (scale === "millisecond" ? quantity : 0));
    return newDate;
  };
  var startOfDate = function startOfDate2(date, scale) {
    var scores = ["millisecond", "second", "minute", "hour", "day", "month", "year"];
    var shouldReset = function shouldReset2(_scale) {
      var maxScore = scores.indexOf(scale);
      return scores.indexOf(_scale) <= maxScore;
    };
    var newDate = new Date(date.getFullYear(), shouldReset("year") ? 0 : date.getMonth(), shouldReset("month") ? 1 : date.getDate(), shouldReset("day") ? 0 : date.getHours(), shouldReset("hour") ? 0 : date.getMinutes(), shouldReset("minute") ? 0 : date.getSeconds(), shouldReset("second") ? 0 : date.getMilliseconds());
    return newDate;
  };
  var ganttDateRange = function ganttDateRange2(tasks, viewMode, preStepsCount) {
    var newStartDate = tasks[0].start;
    var newEndDate = tasks[0].start;
    for (var _iterator = _createForOfIteratorHelperLoose(tasks), _step; !(_step = _iterator()).done; ) {
      var task = _step.value;
      if (task.start < newStartDate) {
        newStartDate = task.start;
      }
      if (task.end > newEndDate) {
        newEndDate = task.end;
      }
    }
    switch (viewMode) {
      case ViewMode.Year:
        newStartDate = addToDate(newStartDate, -1, "year");
        newStartDate = startOfDate(newStartDate, "year");
        newEndDate = addToDate(newEndDate, 1, "year");
        newEndDate = startOfDate(newEndDate, "year");
        break;
      case ViewMode.Month:
        newStartDate = addToDate(newStartDate, -1 * preStepsCount, "month");
        newStartDate = startOfDate(newStartDate, "month");
        newEndDate = addToDate(newEndDate, 1, "year");
        newEndDate = startOfDate(newEndDate, "year");
        break;
      case ViewMode.Week:
        newStartDate = startOfDate(newStartDate, "day");
        newStartDate = addToDate(getMonday(newStartDate), -7 * preStepsCount, "day");
        newEndDate = startOfDate(newEndDate, "day");
        newEndDate = addToDate(newEndDate, 1.5, "month");
        break;
      case ViewMode.Day:
        newStartDate = startOfDate(newStartDate, "day");
        newStartDate = addToDate(newStartDate, -1 * preStepsCount, "day");
        newEndDate = startOfDate(newEndDate, "day");
        newEndDate = addToDate(newEndDate, 19, "day");
        break;
      case ViewMode.QuarterDay:
        newStartDate = startOfDate(newStartDate, "day");
        newStartDate = addToDate(newStartDate, -1 * preStepsCount, "day");
        newEndDate = startOfDate(newEndDate, "day");
        newEndDate = addToDate(newEndDate, 66, "hour");
        break;
      case ViewMode.HalfDay:
        newStartDate = startOfDate(newStartDate, "day");
        newStartDate = addToDate(newStartDate, -1 * preStepsCount, "day");
        newEndDate = startOfDate(newEndDate, "day");
        newEndDate = addToDate(newEndDate, 108, "hour");
        break;
      case ViewMode.Hour:
        newStartDate = startOfDate(newStartDate, "hour");
        newStartDate = addToDate(newStartDate, -1 * preStepsCount, "hour");
        newEndDate = startOfDate(newEndDate, "day");
        newEndDate = addToDate(newEndDate, 1, "day");
        break;
    }
    return [newStartDate, newEndDate];
  };
  var seedDates = function seedDates2(startDate, endDate, viewMode) {
    var currentDate = new Date(startDate);
    var dates = [currentDate];
    while (currentDate < endDate) {
      switch (viewMode) {
        case ViewMode.Year:
          currentDate = addToDate(currentDate, 1, "year");
          break;
        case ViewMode.Month:
          currentDate = addToDate(currentDate, 1, "month");
          break;
        case ViewMode.Week:
          currentDate = addToDate(currentDate, 7, "day");
          break;
        case ViewMode.Day:
          currentDate = addToDate(currentDate, 1, "day");
          break;
        case ViewMode.HalfDay:
          currentDate = addToDate(currentDate, 12, "hour");
          break;
        case ViewMode.QuarterDay:
          currentDate = addToDate(currentDate, 6, "hour");
          break;
        case ViewMode.Hour:
          currentDate = addToDate(currentDate, 1, "hour");
          break;
      }
      dates.push(currentDate);
    }
    return dates;
  };
  var getLocaleMonth = function getLocaleMonth2(date, locale) {
    var bottomValue = getCachedDateTimeFormat(locale, {
      month: "long"
    }).format(date);
    bottomValue = bottomValue.replace(bottomValue[0], bottomValue[0].toLocaleUpperCase());
    return bottomValue;
  };
  var getLocalDayOfWeek = function getLocalDayOfWeek2(date, locale, format) {
    var bottomValue = getCachedDateTimeFormat(locale, {
      weekday: format
    }).format(date);
    bottomValue = bottomValue.replace(bottomValue[0], bottomValue[0].toLocaleUpperCase());
    return bottomValue;
  };
  var getMonday = function getMonday2(date) {
    var day = date.getDay();
    var diff = date.getDate() - day + (day === 0 ? -6 : 1);
    return new Date(date.setDate(diff));
  };
  var getWeekNumberISO8601 = function getWeekNumberISO86012(date) {
    var tmpDate = new Date(date.valueOf());
    var dayNumber = (tmpDate.getDay() + 6) % 7;
    tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);
    var firstThursday = tmpDate.valueOf();
    tmpDate.setMonth(0, 1);
    if (tmpDate.getDay() !== 4) {
      tmpDate.setMonth(0, 1 + (4 - tmpDate.getDay() + 7) % 7);
    }
    var weekNumber = (1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 6048e5)).toString();
    if (weekNumber.length === 1) {
      return "0" + weekNumber;
    } else {
      return weekNumber;
    }
  };
  var getDaysInMonth = function getDaysInMonth2(month, year) {
    return new Date(year, month + 1, 0).getDate();
  };
  var styles = { "ganttTable": "_3_ygE", "ganttTable_Header": "_1nBOt", "ganttTable_HeaderSeparator": "_2eZzQ", "ganttTable_HeaderItem": "_WuQ0f" };
  var TaskListHeaderDefault = function TaskListHeaderDefault2(_ref) {
    var headerHeight = _ref.headerHeight, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rowWidth = _ref.rowWidth;
    return import_react81.default.createElement("div", {
      className: styles.ganttTable,
      style: {
        fontFamily,
        fontSize
      }
    }, import_react81.default.createElement("div", {
      className: styles.ganttTable_Header,
      style: {
        height: headerHeight - 2
      }
    }, import_react81.default.createElement("div", {
      className: styles.ganttTable_HeaderItem,
      style: {
        minWidth: rowWidth
      }
    }, "\xA0Name"), import_react81.default.createElement("div", {
      className: styles.ganttTable_HeaderSeparator,
      style: {
        height: headerHeight * 0.5,
        marginTop: headerHeight * 0.2
      }
    }), import_react81.default.createElement("div", {
      className: styles.ganttTable_HeaderItem,
      style: {
        minWidth: rowWidth
      }
    }, "\xA0From"), import_react81.default.createElement("div", {
      className: styles.ganttTable_HeaderSeparator,
      style: {
        height: headerHeight * 0.5,
        marginTop: headerHeight * 0.25
      }
    }), import_react81.default.createElement("div", {
      className: styles.ganttTable_HeaderItem,
      style: {
        minWidth: rowWidth
      }
    }, "\xA0To")));
  };
  var styles$1 = { "taskListWrapper": "_3ZbQT", "taskListTableRow": "_34SS0", "taskListCell": "_3lLk3", "taskListNameWrapper": "_nI1Xw", "taskListExpander": "_2QjE6", "taskListEmptyExpander": "_2TfEi" };
  var localeDateStringCache = {};
  var toLocaleDateStringFactory = function toLocaleDateStringFactory2(locale) {
    return function(date, dateTimeOptions2) {
      var key = date.toString();
      var lds = localeDateStringCache[key];
      if (!lds) {
        lds = date.toLocaleDateString(locale, dateTimeOptions2);
        localeDateStringCache[key] = lds;
      }
      return lds;
    };
  };
  var dateTimeOptions = {
    weekday: "short",
    year: "numeric",
    month: "long",
    day: "numeric"
  };
  var TaskListTableDefault = function TaskListTableDefault2(_ref) {
    var rowHeight = _ref.rowHeight, rowWidth = _ref.rowWidth, tasks = _ref.tasks, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, locale = _ref.locale, onExpanderClick = _ref.onExpanderClick;
    var toLocaleDateString = (0, import_react81.useMemo)(function() {
      return toLocaleDateStringFactory(locale);
    }, [locale]);
    return import_react81.default.createElement("div", {
      className: styles$1.taskListWrapper,
      style: {
        fontFamily,
        fontSize
      }
    }, tasks.map(function(t) {
      var expanderSymbol = "";
      if (t.hideChildren === false) {
        expanderSymbol = "\u25BC";
      } else if (t.hideChildren === true) {
        expanderSymbol = "\u25B6";
      }
      return import_react81.default.createElement("div", {
        className: styles$1.taskListTableRow,
        style: {
          height: rowHeight
        },
        key: t.id + "row"
      }, import_react81.default.createElement("div", {
        className: styles$1.taskListCell,
        style: {
          minWidth: rowWidth,
          maxWidth: rowWidth
        },
        title: t.name
      }, import_react81.default.createElement("div", {
        className: styles$1.taskListNameWrapper
      }, import_react81.default.createElement("div", {
        className: expanderSymbol ? styles$1.taskListExpander : styles$1.taskListEmptyExpander,
        onClick: function onClick() {
          return onExpanderClick(t);
        }
      }, expanderSymbol), import_react81.default.createElement("div", null, t.name))), import_react81.default.createElement("div", {
        className: styles$1.taskListCell,
        style: {
          minWidth: rowWidth,
          maxWidth: rowWidth
        }
      }, "\xA0", toLocaleDateString(t.start, dateTimeOptions)), import_react81.default.createElement("div", {
        className: styles$1.taskListCell,
        style: {
          minWidth: rowWidth,
          maxWidth: rowWidth
        }
      }, "\xA0", toLocaleDateString(t.end, dateTimeOptions)));
    }));
  };
  var styles$2 = { "tooltipDefaultContainer": "_3T42e", "tooltipDefaultContainerParagraph": "_29NTg", "tooltipDetailsContainer": "_25P-K", "tooltipDetailsContainerHidden": "_3gVAq" };
  var Tooltip = function Tooltip2(_ref) {
    var task = _ref.task, rowHeight = _ref.rowHeight, rtl = _ref.rtl, svgContainerHeight = _ref.svgContainerHeight, svgContainerWidth = _ref.svgContainerWidth, scrollX = _ref.scrollX, scrollY = _ref.scrollY, arrowIndent = _ref.arrowIndent, fontSize = _ref.fontSize, fontFamily = _ref.fontFamily, headerHeight = _ref.headerHeight, taskListWidth = _ref.taskListWidth, TooltipContent = _ref.TooltipContent;
    var tooltipRef = (0, import_react81.useRef)(null);
    var _useState = (0, import_react81.useState)(0), relatedY = _useState[0], setRelatedY = _useState[1];
    var _useState2 = (0, import_react81.useState)(0), relatedX = _useState2[0], setRelatedX = _useState2[1];
    (0, import_react81.useEffect)(function() {
      if (tooltipRef.current) {
        var tooltipHeight = tooltipRef.current.offsetHeight * 1.1;
        var tooltipWidth = tooltipRef.current.offsetWidth * 1.1;
        var newRelatedY = task.index * rowHeight - scrollY + headerHeight;
        var newRelatedX;
        if (rtl) {
          newRelatedX = task.x1 - arrowIndent * 1.5 - tooltipWidth - scrollX;
          if (newRelatedX < 0) {
            newRelatedX = task.x2 + arrowIndent * 1.5 - scrollX;
          }
          var tooltipLeftmostPoint = tooltipWidth + newRelatedX;
          if (tooltipLeftmostPoint > svgContainerWidth) {
            newRelatedX = svgContainerWidth - tooltipWidth;
            newRelatedY += rowHeight;
          }
        } else {
          newRelatedX = task.x2 + arrowIndent * 1.5 + taskListWidth - scrollX;
          var _tooltipLeftmostPoint = tooltipWidth + newRelatedX;
          var fullChartWidth = taskListWidth + svgContainerWidth;
          if (_tooltipLeftmostPoint > fullChartWidth) {
            newRelatedX = task.x1 + taskListWidth - arrowIndent * 1.5 - scrollX - tooltipWidth;
          }
          if (newRelatedX < taskListWidth) {
            newRelatedX = svgContainerWidth + taskListWidth - tooltipWidth;
            newRelatedY += rowHeight;
          }
        }
        var tooltipLowerPoint = tooltipHeight + newRelatedY - scrollY;
        if (tooltipLowerPoint > svgContainerHeight - scrollY) {
          newRelatedY = svgContainerHeight - tooltipHeight;
        }
        setRelatedY(newRelatedY);
        setRelatedX(newRelatedX);
      }
    }, [tooltipRef, task, arrowIndent, scrollX, scrollY, headerHeight, taskListWidth, rowHeight, svgContainerHeight, svgContainerWidth, rtl]);
    return import_react81.default.createElement("div", {
      ref: tooltipRef,
      className: relatedX ? styles$2.tooltipDetailsContainer : styles$2.tooltipDetailsContainerHidden,
      style: {
        left: relatedX,
        top: relatedY
      }
    }, import_react81.default.createElement(TooltipContent, {
      task,
      fontSize,
      fontFamily
    }));
  };
  var StandardTooltipContent = function StandardTooltipContent2(_ref2) {
    var task = _ref2.task, fontSize = _ref2.fontSize, fontFamily = _ref2.fontFamily;
    var style5 = {
      fontSize,
      fontFamily
    };
    return import_react81.default.createElement("div", {
      className: styles$2.tooltipDefaultContainer,
      style: style5
    }, import_react81.default.createElement("b", {
      style: {
        fontSize: fontSize + 6
      }
    }, task.name + ": " + task.start.getDate() + "-" + (task.start.getMonth() + 1) + "-" + task.start.getFullYear() + " - " + task.end.getDate() + "-" + (task.end.getMonth() + 1) + "-" + task.end.getFullYear()), task.end.getTime() - task.start.getTime() !== 0 && import_react81.default.createElement("p", {
      className: styles$2.tooltipDefaultContainerParagraph
    }, "Duration: " + ~~((task.end.getTime() - task.start.getTime()) / (1e3 * 60 * 60 * 24)) + " day(s)"), import_react81.default.createElement("p", {
      className: styles$2.tooltipDefaultContainerParagraph
    }, !!task.progress && "Progress: " + task.progress + " %"));
  };
  var styles$3 = { "scroll": "_1eT-t" };
  var VerticalScroll = function VerticalScroll2(_ref) {
    var scroll2 = _ref.scroll, ganttHeight = _ref.ganttHeight, ganttFullHeight = _ref.ganttFullHeight, headerHeight = _ref.headerHeight, rtl = _ref.rtl, onScroll = _ref.onScroll;
    var scrollRef = (0, import_react81.useRef)(null);
    (0, import_react81.useEffect)(function() {
      if (scrollRef.current) {
        scrollRef.current.scrollTop = scroll2;
      }
    }, [scroll2]);
    return import_react81.default.createElement("div", {
      style: {
        height: ganttHeight,
        marginTop: headerHeight,
        marginLeft: rtl ? "" : "-1rem"
      },
      className: styles$3.scroll,
      onScroll,
      ref: scrollRef
    }, import_react81.default.createElement("div", {
      style: {
        height: ganttFullHeight,
        width: 1
      }
    }));
  };
  var TaskList = function TaskList2(_ref) {
    var headerHeight = _ref.headerHeight, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rowWidth = _ref.rowWidth, rowHeight = _ref.rowHeight, scrollY = _ref.scrollY, tasks = _ref.tasks, selectedTask = _ref.selectedTask, setSelectedTask = _ref.setSelectedTask, onExpanderClick = _ref.onExpanderClick, locale = _ref.locale, ganttHeight = _ref.ganttHeight, taskListRef = _ref.taskListRef, horizontalContainerClass = _ref.horizontalContainerClass, TaskListHeader = _ref.TaskListHeader, TaskListTable = _ref.TaskListTable;
    var horizontalContainerRef = (0, import_react81.useRef)(null);
    (0, import_react81.useEffect)(function() {
      if (horizontalContainerRef.current) {
        horizontalContainerRef.current.scrollTop = scrollY;
      }
    }, [scrollY]);
    var headerProps = {
      headerHeight,
      fontFamily,
      fontSize,
      rowWidth
    };
    var selectedTaskId = selectedTask ? selectedTask.id : "";
    var tableProps = {
      rowHeight,
      rowWidth,
      fontFamily,
      fontSize,
      tasks,
      locale,
      selectedTaskId,
      setSelectedTask,
      onExpanderClick
    };
    return import_react81.default.createElement("div", {
      ref: taskListRef
    }, import_react81.default.createElement(TaskListHeader, Object.assign({}, headerProps)), import_react81.default.createElement("div", {
      ref: horizontalContainerRef,
      className: horizontalContainerClass,
      style: ganttHeight ? {
        height: ganttHeight
      } : {}
    }, import_react81.default.createElement(TaskListTable, Object.assign({}, tableProps))));
  };
  var styles$4 = { "gridRow": "_2dZTy", "gridRowLine": "_3rUKi", "gridTick": "_RuwuK" };
  var GridBody = function GridBody2(_ref) {
    var tasks = _ref.tasks, dates = _ref.dates, rowHeight = _ref.rowHeight, svgWidth = _ref.svgWidth, columnWidth = _ref.columnWidth, todayColor = _ref.todayColor, rtl = _ref.rtl;
    var y = 0;
    var gridRows = [];
    var rowLines = [import_react81.default.createElement("line", {
      key: "RowLineFirst",
      x: "0",
      y1: 0,
      x2: svgWidth,
      y2: 0,
      className: styles$4.gridRowLine
    })];
    for (var _iterator = _createForOfIteratorHelperLoose(tasks), _step; !(_step = _iterator()).done; ) {
      var task = _step.value;
      gridRows.push(import_react81.default.createElement("rect", {
        key: "Row" + task.id,
        x: "0",
        y,
        width: svgWidth,
        height: rowHeight,
        className: styles$4.gridRow
      }));
      rowLines.push(import_react81.default.createElement("line", {
        key: "RowLine" + task.id,
        x: "0",
        y1: y + rowHeight,
        x2: svgWidth,
        y2: y + rowHeight,
        className: styles$4.gridRowLine
      }));
      y += rowHeight;
    }
    var now2 = /* @__PURE__ */ new Date();
    var tickX = 0;
    var ticks = [];
    var today = import_react81.default.createElement("rect", null);
    for (var i = 0; i < dates.length; i++) {
      var date = dates[i];
      ticks.push(import_react81.default.createElement("line", {
        key: date.getTime(),
        x1: tickX,
        y1: 0,
        x2: tickX,
        y2: y,
        className: styles$4.gridTick
      }));
      if (i + 1 !== dates.length && date.getTime() < now2.getTime() && dates[i + 1].getTime() >= now2.getTime() || i !== 0 && i + 1 === dates.length && date.getTime() < now2.getTime() && addToDate(date, date.getTime() - dates[i - 1].getTime(), "millisecond").getTime() >= now2.getTime()) {
        today = import_react81.default.createElement("rect", {
          x: tickX,
          y: 0,
          width: columnWidth,
          height: y,
          fill: todayColor
        });
      }
      if (rtl && i + 1 !== dates.length && date.getTime() >= now2.getTime() && dates[i + 1].getTime() < now2.getTime()) {
        today = import_react81.default.createElement("rect", {
          x: tickX + columnWidth,
          y: 0,
          width: columnWidth,
          height: y,
          fill: todayColor
        });
      }
      tickX += columnWidth;
    }
    return import_react81.default.createElement("g", {
      className: "gridBody"
    }, import_react81.default.createElement("g", {
      className: "rows"
    }, gridRows), import_react81.default.createElement("g", {
      className: "rowLines"
    }, rowLines), import_react81.default.createElement("g", {
      className: "ticks"
    }, ticks), import_react81.default.createElement("g", {
      className: "today"
    }, today));
  };
  var Grid = function Grid2(props) {
    return import_react81.default.createElement("g", {
      className: "grid"
    }, import_react81.default.createElement(GridBody, Object.assign({}, props)));
  };
  var styles$5 = { "calendarBottomText": "_9w8d5", "calendarTopTick": "_1rLuZ", "calendarTopText": "_2q1Kt", "calendarHeader": "_35nLX" };
  var TopPartOfCalendar = function TopPartOfCalendar2(_ref) {
    var value = _ref.value, x1Line = _ref.x1Line, y1Line = _ref.y1Line, y2Line = _ref.y2Line, xText = _ref.xText, yText = _ref.yText;
    return import_react81.default.createElement("g", {
      className: "calendarTop"
    }, import_react81.default.createElement("line", {
      x1: x1Line,
      y1: y1Line,
      x2: x1Line,
      y2: y2Line,
      className: styles$5.calendarTopTick,
      key: value + "line"
    }), import_react81.default.createElement("text", {
      key: value + "text",
      y: yText,
      x: xText,
      className: styles$5.calendarTopText
    }, value));
  };
  var Calendar = function Calendar2(_ref) {
    var dateSetup = _ref.dateSetup, locale = _ref.locale, viewMode = _ref.viewMode, rtl = _ref.rtl, headerHeight = _ref.headerHeight, columnWidth = _ref.columnWidth, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize;
    var getCalendarValuesForYear = function getCalendarValuesForYear2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var topDefaultHeight = headerHeight * 0.5;
      for (var i = 0; i < dateSetup.dates.length; i++) {
        var date = dateSetup.dates[i];
        var bottomValue = date.getFullYear();
        bottomValues2.push(import_react81.default.createElement("text", {
          key: date.getFullYear(),
          y: headerHeight * 0.8,
          x: columnWidth * i + columnWidth * 0.5,
          className: styles$5.calendarBottomText
        }, bottomValue));
        if (i === 0 || date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()) {
          var topValue = date.getFullYear().toString();
          var xText = void 0;
          if (rtl) {
            xText = (6 + i + date.getFullYear() + 1) * columnWidth;
          } else {
            xText = (6 + i - date.getFullYear()) * columnWidth;
          }
          topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
            key: topValue,
            value: topValue,
            x1Line: columnWidth * i,
            y1Line: 0,
            y2Line: headerHeight,
            xText,
            yText: topDefaultHeight * 0.9
          }));
        }
      }
      return [topValues2, bottomValues2];
    };
    var getCalendarValuesForMonth = function getCalendarValuesForMonth2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var topDefaultHeight = headerHeight * 0.5;
      for (var i = 0; i < dateSetup.dates.length; i++) {
        var date = dateSetup.dates[i];
        var bottomValue = getLocaleMonth(date, locale);
        bottomValues2.push(import_react81.default.createElement("text", {
          key: bottomValue + date.getFullYear(),
          y: headerHeight * 0.8,
          x: columnWidth * i + columnWidth * 0.5,
          className: styles$5.calendarBottomText
        }, bottomValue));
        if (i === 0 || date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()) {
          var topValue = date.getFullYear().toString();
          var xText = void 0;
          if (rtl) {
            xText = (6 + i + date.getMonth() + 1) * columnWidth;
          } else {
            xText = (6 + i - date.getMonth()) * columnWidth;
          }
          topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
            key: topValue,
            value: topValue,
            x1Line: columnWidth * i,
            y1Line: 0,
            y2Line: topDefaultHeight,
            xText,
            yText: topDefaultHeight * 0.9
          }));
        }
      }
      return [topValues2, bottomValues2];
    };
    var getCalendarValuesForWeek = function getCalendarValuesForWeek2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var weeksCount = 1;
      var topDefaultHeight = headerHeight * 0.5;
      var dates = dateSetup.dates;
      for (var i = dates.length - 1; i >= 0; i--) {
        var date = dates[i];
        var topValue = "";
        if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {
          topValue = getLocaleMonth(date, locale) + ", " + date.getFullYear();
        }
        var bottomValue = "W" + getWeekNumberISO8601(date);
        bottomValues2.push(import_react81.default.createElement("text", {
          key: date.getTime(),
          y: headerHeight * 0.8,
          x: columnWidth * (i + +rtl),
          className: styles$5.calendarBottomText
        }, bottomValue));
        if (topValue) {
          if (i !== dates.length - 1) {
            topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
              key: topValue,
              value: topValue,
              x1Line: columnWidth * i + weeksCount * columnWidth,
              y1Line: 0,
              y2Line: topDefaultHeight,
              xText: columnWidth * i + columnWidth * weeksCount * 0.5,
              yText: topDefaultHeight * 0.9
            }));
          }
          weeksCount = 0;
        }
        weeksCount++;
      }
      return [topValues2, bottomValues2];
    };
    var getCalendarValuesForDay = function getCalendarValuesForDay2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var topDefaultHeight = headerHeight * 0.5;
      var dates = dateSetup.dates;
      for (var i = 0; i < dates.length; i++) {
        var date = dates[i];
        var bottomValue = getLocalDayOfWeek(date, locale, "short") + ", " + date.getDate().toString();
        bottomValues2.push(import_react81.default.createElement("text", {
          key: date.getTime(),
          y: headerHeight * 0.8,
          x: columnWidth * i + columnWidth * 0.5,
          className: styles$5.calendarBottomText
        }, bottomValue));
        if (i + 1 !== dates.length && date.getMonth() !== dates[i + 1].getMonth()) {
          var topValue = getLocaleMonth(date, locale);
          topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
            key: topValue + date.getFullYear(),
            value: topValue,
            x1Line: columnWidth * (i + 1),
            y1Line: 0,
            y2Line: topDefaultHeight,
            xText: columnWidth * (i + 1) - getDaysInMonth(date.getMonth(), date.getFullYear()) * columnWidth * 0.5,
            yText: topDefaultHeight * 0.9
          }));
        }
      }
      return [topValues2, bottomValues2];
    };
    var getCalendarValuesForPartOfDay = function getCalendarValuesForPartOfDay2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var ticks = viewMode === ViewMode.HalfDay ? 2 : 4;
      var topDefaultHeight = headerHeight * 0.5;
      var dates = dateSetup.dates;
      for (var i = 0; i < dates.length; i++) {
        var date = dates[i];
        var bottomValue = getCachedDateTimeFormat(locale, {
          hour: "numeric"
        }).format(date);
        bottomValues2.push(import_react81.default.createElement("text", {
          key: date.getTime(),
          y: headerHeight * 0.8,
          x: columnWidth * (i + +rtl),
          className: styles$5.calendarBottomText,
          fontFamily
        }, bottomValue));
        if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {
          var topValue = getLocalDayOfWeek(date, locale, "short") + ", " + date.getDate() + " " + getLocaleMonth(date, locale);
          topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
            key: topValue + date.getFullYear(),
            value: topValue,
            x1Line: columnWidth * i + ticks * columnWidth,
            y1Line: 0,
            y2Line: topDefaultHeight,
            xText: columnWidth * i + ticks * columnWidth * 0.5,
            yText: topDefaultHeight * 0.9
          }));
        }
      }
      return [topValues2, bottomValues2];
    };
    var getCalendarValuesForHour = function getCalendarValuesForHour2() {
      var topValues2 = [];
      var bottomValues2 = [];
      var topDefaultHeight = headerHeight * 0.5;
      var dates = dateSetup.dates;
      for (var i = 0; i < dates.length; i++) {
        var date = dates[i];
        var bottomValue = getCachedDateTimeFormat(locale, {
          hour: "numeric"
        }).format(date);
        bottomValues2.push(import_react81.default.createElement("text", {
          key: date.getTime(),
          y: headerHeight * 0.8,
          x: columnWidth * (i + +rtl),
          className: styles$5.calendarBottomText,
          fontFamily
        }, bottomValue));
        if (i !== 0 && date.getDate() !== dates[i - 1].getDate()) {
          var displayDate = dates[i - 1];
          var topValue = getLocalDayOfWeek(displayDate, locale, "long") + ", " + displayDate.getDate() + " " + getLocaleMonth(displayDate, locale);
          var topPosition = (date.getHours() - 24) / 2;
          topValues2.push(import_react81.default.createElement(TopPartOfCalendar, {
            key: topValue + displayDate.getFullYear(),
            value: topValue,
            x1Line: columnWidth * i,
            y1Line: 0,
            y2Line: topDefaultHeight,
            xText: columnWidth * (i + topPosition),
            yText: topDefaultHeight * 0.9
          }));
        }
      }
      return [topValues2, bottomValues2];
    };
    var topValues = [];
    var bottomValues = [];
    switch (dateSetup.viewMode) {
      case ViewMode.Year:
        var _getCalendarValuesFor = getCalendarValuesForYear();
        topValues = _getCalendarValuesFor[0];
        bottomValues = _getCalendarValuesFor[1];
        break;
      case ViewMode.Month:
        var _getCalendarValuesFor2 = getCalendarValuesForMonth();
        topValues = _getCalendarValuesFor2[0];
        bottomValues = _getCalendarValuesFor2[1];
        break;
      case ViewMode.Week:
        var _getCalendarValuesFor3 = getCalendarValuesForWeek();
        topValues = _getCalendarValuesFor3[0];
        bottomValues = _getCalendarValuesFor3[1];
        break;
      case ViewMode.Day:
        var _getCalendarValuesFor4 = getCalendarValuesForDay();
        topValues = _getCalendarValuesFor4[0];
        bottomValues = _getCalendarValuesFor4[1];
        break;
      case ViewMode.QuarterDay:
      case ViewMode.HalfDay:
        var _getCalendarValuesFor5 = getCalendarValuesForPartOfDay();
        topValues = _getCalendarValuesFor5[0];
        bottomValues = _getCalendarValuesFor5[1];
        break;
      case ViewMode.Hour:
        var _getCalendarValuesFor6 = getCalendarValuesForHour();
        topValues = _getCalendarValuesFor6[0];
        bottomValues = _getCalendarValuesFor6[1];
    }
    return import_react81.default.createElement("g", {
      className: "calendar",
      fontSize,
      fontFamily
    }, import_react81.default.createElement("rect", {
      x: 0,
      y: 0,
      width: columnWidth * dateSetup.dates.length,
      height: headerHeight,
      className: styles$5.calendarHeader
    }), bottomValues, " ", topValues);
  };
  var _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
  var _asyncIteratorSymbol = typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";
  function _catch(body, recover) {
    try {
      var result = body();
    } catch (e) {
      return recover(e);
    }
    if (result && result.then) {
      return result.then(void 0, recover);
    }
    return result;
  }
  var Arrow = function Arrow2(_ref) {
    var taskFrom = _ref.taskFrom, taskTo = _ref.taskTo, rowHeight = _ref.rowHeight, taskHeight = _ref.taskHeight, arrowIndent = _ref.arrowIndent, rtl = _ref.rtl;
    var path;
    var trianglePoints;
    if (rtl) {
      var _drownPathAndTriangle = drownPathAndTriangleRTL(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent);
      path = _drownPathAndTriangle[0];
      trianglePoints = _drownPathAndTriangle[1];
    } else {
      var _drownPathAndTriangle2 = drownPathAndTriangle(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent);
      path = _drownPathAndTriangle2[0];
      trianglePoints = _drownPathAndTriangle2[1];
    }
    return import_react81.default.createElement("g", {
      className: "arrow"
    }, import_react81.default.createElement("path", {
      strokeWidth: "1.5",
      d: path,
      fill: "none"
    }), import_react81.default.createElement("polygon", {
      points: trianglePoints
    }));
  };
  var drownPathAndTriangle = function drownPathAndTriangle2(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent) {
    var indexCompare = taskFrom.index > taskTo.index ? -1 : 1;
    var taskToEndPosition = taskTo.y + taskHeight / 2;
    var taskFromEndPosition = taskFrom.x2 + arrowIndent * 2;
    var taskFromHorizontalOffsetValue = taskFromEndPosition < taskTo.x1 ? "" : "H " + (taskTo.x1 - arrowIndent);
    var taskToHorizontalOffsetValue = taskFromEndPosition > taskTo.x1 ? arrowIndent : taskTo.x1 - taskFrom.x2 - arrowIndent;
    var path = "M " + taskFrom.x2 + " " + (taskFrom.y + taskHeight / 2) + " \n  h " + arrowIndent + " \n  v " + indexCompare * rowHeight / 2 + " \n  " + taskFromHorizontalOffsetValue + "\n  V " + taskToEndPosition + " \n  h " + taskToHorizontalOffsetValue;
    var trianglePoints = taskTo.x1 + "," + taskToEndPosition + " \n  " + (taskTo.x1 - 5) + "," + (taskToEndPosition - 5) + " \n  " + (taskTo.x1 - 5) + "," + (taskToEndPosition + 5);
    return [path, trianglePoints];
  };
  var drownPathAndTriangleRTL = function drownPathAndTriangleRTL2(taskFrom, taskTo, rowHeight, taskHeight, arrowIndent) {
    var indexCompare = taskFrom.index > taskTo.index ? -1 : 1;
    var taskToEndPosition = taskTo.y + taskHeight / 2;
    var taskFromEndPosition = taskFrom.x1 - arrowIndent * 2;
    var taskFromHorizontalOffsetValue = taskFromEndPosition > taskTo.x2 ? "" : "H " + (taskTo.x2 + arrowIndent);
    var taskToHorizontalOffsetValue = taskFromEndPosition < taskTo.x2 ? -arrowIndent : taskTo.x2 - taskFrom.x1 + arrowIndent;
    var path = "M " + taskFrom.x1 + " " + (taskFrom.y + taskHeight / 2) + " \n  h " + -arrowIndent + " \n  v " + indexCompare * rowHeight / 2 + " \n  " + taskFromHorizontalOffsetValue + "\n  V " + taskToEndPosition + " \n  h " + taskToHorizontalOffsetValue;
    var trianglePoints = taskTo.x2 + "," + taskToEndPosition + " \n  " + (taskTo.x2 + 5) + "," + (taskToEndPosition + 5) + " \n  " + (taskTo.x2 + 5) + "," + (taskToEndPosition - 5);
    return [path, trianglePoints];
  };
  var convertToBarTasks = function convertToBarTasks2(tasks, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {
    var barTasks = tasks.map(function(t, i) {
      return convertToBarTask(t, i, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor);
    });
    barTasks = barTasks.map(function(task) {
      var dependencies = task.dependencies || [];
      var _loop = function _loop2(j2) {
        var dependence = barTasks.findIndex(function(value) {
          return value.id === dependencies[j2];
        });
        if (dependence !== -1)
          barTasks[dependence].barChildren.push(task);
      };
      for (var j = 0; j < dependencies.length; j++) {
        _loop(j);
      }
      return task;
    });
    return barTasks;
  };
  var convertToBarTask = function convertToBarTask2(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {
    var barTask;
    switch (task.type) {
      case "milestone":
        barTask = convertToMilestone(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, milestoneBackgroundColor, milestoneBackgroundSelectedColor);
        break;
      case "project":
        barTask = convertToBar(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor);
        break;
      default:
        barTask = convertToBar(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor);
        break;
    }
    return barTask;
  };
  var convertToBar = function convertToBar2(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor) {
    var x1;
    var x2;
    if (rtl) {
      x2 = taskXCoordinateRTL(task.start, dates, columnWidth);
      x1 = taskXCoordinateRTL(task.end, dates, columnWidth);
    } else {
      x1 = taskXCoordinate(task.start, dates, columnWidth);
      x2 = taskXCoordinate(task.end, dates, columnWidth);
    }
    var typeInternal = task.type;
    if (typeInternal === "task" && x2 - x1 < handleWidth * 2) {
      typeInternal = "smalltask";
      x2 = x1 + handleWidth * 2;
    }
    var _progressWithByParams = progressWithByParams(x1, x2, task.progress, rtl), progressWidth = _progressWithByParams[0], progressX = _progressWithByParams[1];
    var y = taskYCoordinate(index2, rowHeight, taskHeight);
    var hideChildren = task.type === "project" ? task.hideChildren : void 0;
    var styles2 = _extends6({
      backgroundColor: barBackgroundColor,
      backgroundSelectedColor: barBackgroundSelectedColor,
      progressColor: barProgressColor,
      progressSelectedColor: barProgressSelectedColor
    }, task.styles);
    return _extends6({}, task, {
      typeInternal,
      x1,
      x2,
      y,
      index: index2,
      progressX,
      progressWidth,
      barCornerRadius,
      handleWidth,
      hideChildren,
      height: taskHeight,
      barChildren: [],
      styles: styles2
    });
  };
  var convertToMilestone = function convertToMilestone2(task, index2, dates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, milestoneBackgroundColor, milestoneBackgroundSelectedColor) {
    var x = taskXCoordinate(task.start, dates, columnWidth);
    var y = taskYCoordinate(index2, rowHeight, taskHeight);
    var x1 = x - taskHeight * 0.5;
    var x2 = x + taskHeight * 0.5;
    var rotatedHeight = taskHeight / 1.414;
    var styles2 = _extends6({
      backgroundColor: milestoneBackgroundColor,
      backgroundSelectedColor: milestoneBackgroundSelectedColor,
      progressColor: "",
      progressSelectedColor: ""
    }, task.styles);
    return _extends6({}, task, {
      end: task.start,
      x1,
      x2,
      y,
      index: index2,
      progressX: 0,
      progressWidth: 0,
      barCornerRadius,
      handleWidth,
      typeInternal: task.type,
      progress: 0,
      height: rotatedHeight,
      hideChildren: void 0,
      barChildren: [],
      styles: styles2
    });
  };
  var taskXCoordinate = function taskXCoordinate2(xDate, dates, columnWidth) {
    var index2 = dates.findIndex(function(d) {
      return d.getTime() >= xDate.getTime();
    }) - 1;
    var remainderMillis = xDate.getTime() - dates[index2].getTime();
    var percentOfInterval = remainderMillis / (dates[index2 + 1].getTime() - dates[index2].getTime());
    var x = index2 * columnWidth + percentOfInterval * columnWidth;
    return x;
  };
  var taskXCoordinateRTL = function taskXCoordinateRTL2(xDate, dates, columnWidth) {
    var x = taskXCoordinate(xDate, dates, columnWidth);
    x += columnWidth;
    return x;
  };
  var taskYCoordinate = function taskYCoordinate2(index2, rowHeight, taskHeight) {
    var y = index2 * rowHeight + (rowHeight - taskHeight) / 2;
    return y;
  };
  var progressWithByParams = function progressWithByParams2(taskX1, taskX2, progress, rtl) {
    var progressWidth = (taskX2 - taskX1) * progress * 0.01;
    var progressX;
    if (rtl) {
      progressX = taskX2 - progressWidth;
    } else {
      progressX = taskX1;
    }
    return [progressWidth, progressX];
  };
  var progressByX = function progressByX2(x, task) {
    if (x >= task.x2)
      return 100;
    else if (x <= task.x1)
      return 0;
    else {
      var barWidth = task.x2 - task.x1;
      var progressPercent = Math.round((x - task.x1) * 100 / barWidth);
      return progressPercent;
    }
  };
  var progressByXRTL = function progressByXRTL2(x, task) {
    if (x >= task.x2)
      return 0;
    else if (x <= task.x1)
      return 100;
    else {
      var barWidth = task.x2 - task.x1;
      var progressPercent = Math.round((task.x2 - x) * 100 / barWidth);
      return progressPercent;
    }
  };
  var getProgressPoint = function getProgressPoint2(progressX, taskY, taskHeight) {
    var point = [progressX - 5, taskY + taskHeight, progressX + 5, taskY + taskHeight, progressX, taskY + taskHeight - 8.66];
    return point.join(",");
  };
  var startByX = function startByX2(x, xStep, task) {
    if (x >= task.x2 - task.handleWidth * 2) {
      x = task.x2 - task.handleWidth * 2;
    }
    var steps = Math.round((x - task.x1) / xStep);
    var additionalXValue = steps * xStep;
    var newX = task.x1 + additionalXValue;
    return newX;
  };
  var endByX = function endByX2(x, xStep, task) {
    if (x <= task.x1 + task.handleWidth * 2) {
      x = task.x1 + task.handleWidth * 2;
    }
    var steps = Math.round((x - task.x2) / xStep);
    var additionalXValue = steps * xStep;
    var newX = task.x2 + additionalXValue;
    return newX;
  };
  var moveByX = function moveByX2(x, xStep, task) {
    var steps = Math.round((x - task.x1) / xStep);
    var additionalXValue = steps * xStep;
    var newX1 = task.x1 + additionalXValue;
    var newX2 = newX1 + task.x2 - task.x1;
    return [newX1, newX2];
  };
  var dateByX = function dateByX2(x, taskX, taskDate, xStep, timeStep) {
    var newDate = new Date((x - taskX) / xStep * timeStep + taskDate.getTime());
    newDate = new Date(newDate.getTime() + (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 6e4);
    return newDate;
  };
  var handleTaskBySVGMouseEvent = function handleTaskBySVGMouseEvent2(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl) {
    var result;
    switch (selectedTask.type) {
      case "milestone":
        result = handleTaskBySVGMouseEventForMilestone(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta);
        break;
      default:
        result = handleTaskBySVGMouseEventForBar(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl);
        break;
    }
    return result;
  };
  var handleTaskBySVGMouseEventForBar = function handleTaskBySVGMouseEventForBar2(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta, rtl) {
    var changedTask = _extends6({}, selectedTask);
    var isChanged = false;
    switch (action) {
      case "progress":
        if (rtl) {
          changedTask.progress = progressByXRTL(svgX, selectedTask);
        } else {
          changedTask.progress = progressByX(svgX, selectedTask);
        }
        isChanged = changedTask.progress !== selectedTask.progress;
        if (isChanged) {
          var _progressWithByParams2 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), progressWidth = _progressWithByParams2[0], progressX = _progressWithByParams2[1];
          changedTask.progressWidth = progressWidth;
          changedTask.progressX = progressX;
        }
        break;
      case "start": {
        var newX1 = startByX(svgX, xStep, selectedTask);
        changedTask.x1 = newX1;
        isChanged = changedTask.x1 !== selectedTask.x1;
        if (isChanged) {
          if (rtl) {
            changedTask.end = dateByX(newX1, selectedTask.x1, selectedTask.end, xStep, timeStep);
          } else {
            changedTask.start = dateByX(newX1, selectedTask.x1, selectedTask.start, xStep, timeStep);
          }
          var _progressWithByParams3 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth = _progressWithByParams3[0], _progressX = _progressWithByParams3[1];
          changedTask.progressWidth = _progressWidth;
          changedTask.progressX = _progressX;
        }
        break;
      }
      case "end": {
        var newX2 = endByX(svgX, xStep, selectedTask);
        changedTask.x2 = newX2;
        isChanged = changedTask.x2 !== selectedTask.x2;
        if (isChanged) {
          if (rtl) {
            changedTask.start = dateByX(newX2, selectedTask.x2, selectedTask.start, xStep, timeStep);
          } else {
            changedTask.end = dateByX(newX2, selectedTask.x2, selectedTask.end, xStep, timeStep);
          }
          var _progressWithByParams4 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth2 = _progressWithByParams4[0], _progressX2 = _progressWithByParams4[1];
          changedTask.progressWidth = _progressWidth2;
          changedTask.progressX = _progressX2;
        }
        break;
      }
      case "move": {
        var _moveByX = moveByX(svgX - initEventX1Delta, xStep, selectedTask), newMoveX1 = _moveByX[0], newMoveX2 = _moveByX[1];
        isChanged = newMoveX1 !== selectedTask.x1;
        if (isChanged) {
          changedTask.start = dateByX(newMoveX1, selectedTask.x1, selectedTask.start, xStep, timeStep);
          changedTask.end = dateByX(newMoveX2, selectedTask.x2, selectedTask.end, xStep, timeStep);
          changedTask.x1 = newMoveX1;
          changedTask.x2 = newMoveX2;
          var _progressWithByParams5 = progressWithByParams(changedTask.x1, changedTask.x2, changedTask.progress, rtl), _progressWidth3 = _progressWithByParams5[0], _progressX3 = _progressWithByParams5[1];
          changedTask.progressWidth = _progressWidth3;
          changedTask.progressX = _progressX3;
        }
        break;
      }
    }
    return {
      isChanged,
      changedTask
    };
  };
  var handleTaskBySVGMouseEventForMilestone = function handleTaskBySVGMouseEventForMilestone2(svgX, action, selectedTask, xStep, timeStep, initEventX1Delta) {
    var changedTask = _extends6({}, selectedTask);
    var isChanged = false;
    switch (action) {
      case "move": {
        var _moveByX2 = moveByX(svgX - initEventX1Delta, xStep, selectedTask), newMoveX1 = _moveByX2[0], newMoveX2 = _moveByX2[1];
        isChanged = newMoveX1 !== selectedTask.x1;
        if (isChanged) {
          changedTask.start = dateByX(newMoveX1, selectedTask.x1, selectedTask.start, xStep, timeStep);
          changedTask.end = changedTask.start;
          changedTask.x1 = newMoveX1;
          changedTask.x2 = newMoveX2;
        }
        break;
      }
    }
    return {
      isChanged,
      changedTask
    };
  };
  function isKeyboardEvent(event) {
    return event.key !== void 0;
  }
  function removeHiddenTasks(tasks) {
    var groupedTasks = tasks.filter(function(t) {
      return t.hideChildren && t.type === "project";
    });
    if (groupedTasks.length > 0) {
      var _loop = function _loop2(i2) {
        var groupedTask = groupedTasks[i2];
        var children2 = getChildren(tasks, groupedTask);
        tasks = tasks.filter(function(t) {
          return children2.indexOf(t) === -1;
        });
      };
      for (var i = 0; groupedTasks.length > i; i++) {
        _loop(i);
      }
    }
    return tasks;
  }
  function getChildren(taskList, task) {
    var tasks = [];
    if (task.type !== "project") {
      tasks = taskList.filter(function(t) {
        return t.dependencies && t.dependencies.indexOf(task.id) !== -1;
      });
    } else {
      tasks = taskList.filter(function(t) {
        return t.project && t.project === task.id;
      });
    }
    var taskChildren = [];
    tasks.forEach(function(t) {
      taskChildren.push.apply(taskChildren, getChildren(taskList, t));
    });
    tasks = tasks.concat(tasks, taskChildren);
    return tasks;
  }
  var sortTasks = function sortTasks2(taskA, taskB) {
    var orderA = taskA.displayOrder || Number.MAX_VALUE;
    var orderB = taskB.displayOrder || Number.MAX_VALUE;
    if (orderA > orderB) {
      return 1;
    } else if (orderA < orderB) {
      return -1;
    } else {
      return 0;
    }
  };
  var styles$6 = { "barWrapper": "_KxSXS", "barHandle": "_3w_5u", "barBackground": "_31ERP" };
  var BarDisplay = function BarDisplay2(_ref) {
    var x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, isSelected = _ref.isSelected, progressX = _ref.progressX, progressWidth = _ref.progressWidth, barCornerRadius = _ref.barCornerRadius, styles2 = _ref.styles, onMouseDown = _ref.onMouseDown;
    var getProcessColor = function getProcessColor2() {
      return isSelected ? styles2.progressSelectedColor : styles2.progressColor;
    };
    var getBarColor = function getBarColor2() {
      return isSelected ? styles2.backgroundSelectedColor : styles2.backgroundColor;
    };
    return import_react81.default.createElement("g", {
      onMouseDown
    }, import_react81.default.createElement("rect", {
      x,
      width,
      y,
      height,
      ry: barCornerRadius,
      rx: barCornerRadius,
      fill: getBarColor(),
      className: styles$6.barBackground
    }), import_react81.default.createElement("rect", {
      x: progressX,
      width: progressWidth,
      y,
      height,
      ry: barCornerRadius,
      rx: barCornerRadius,
      fill: getProcessColor()
    }));
  };
  var BarDateHandle = function BarDateHandle2(_ref) {
    var x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, barCornerRadius = _ref.barCornerRadius, onMouseDown = _ref.onMouseDown;
    return import_react81.default.createElement("rect", {
      x,
      y,
      width,
      height,
      className: styles$6.barHandle,
      ry: barCornerRadius,
      rx: barCornerRadius,
      onMouseDown
    });
  };
  var BarProgressHandle = function BarProgressHandle2(_ref) {
    var progressPoint = _ref.progressPoint, onMouseDown = _ref.onMouseDown;
    return import_react81.default.createElement("polygon", {
      className: styles$6.barHandle,
      points: progressPoint,
      onMouseDown
    });
  };
  var Bar = function Bar2(_ref) {
    var task = _ref.task, isProgressChangeable = _ref.isProgressChangeable, isDateChangeable = _ref.isDateChangeable, rtl = _ref.rtl, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;
    var progressPoint = getProgressPoint(+!rtl * task.progressWidth + task.progressX, task.y, task.height);
    var handleHeight = task.height - 2;
    return import_react81.default.createElement("g", {
      className: styles$6.barWrapper,
      tabIndex: 0
    }, import_react81.default.createElement(BarDisplay, {
      x: task.x1,
      y: task.y,
      width: task.x2 - task.x1,
      height: task.height,
      progressX: task.progressX,
      progressWidth: task.progressWidth,
      barCornerRadius: task.barCornerRadius,
      styles: task.styles,
      isSelected,
      onMouseDown: function onMouseDown(e) {
        isDateChangeable && onEventStart("move", task, e);
      }
    }), import_react81.default.createElement("g", {
      className: "handleGroup"
    }, isDateChangeable && import_react81.default.createElement("g", null, import_react81.default.createElement(BarDateHandle, {
      x: task.x1 + 1,
      y: task.y + 1,
      width: task.handleWidth,
      height: handleHeight,
      barCornerRadius: task.barCornerRadius,
      onMouseDown: function onMouseDown(e) {
        onEventStart("start", task, e);
      }
    }), import_react81.default.createElement(BarDateHandle, {
      x: task.x2 - task.handleWidth - 1,
      y: task.y + 1,
      width: task.handleWidth,
      height: handleHeight,
      barCornerRadius: task.barCornerRadius,
      onMouseDown: function onMouseDown(e) {
        onEventStart("end", task, e);
      }
    })), isProgressChangeable && import_react81.default.createElement(BarProgressHandle, {
      progressPoint,
      onMouseDown: function onMouseDown(e) {
        onEventStart("progress", task, e);
      }
    })));
  };
  var BarSmall = function BarSmall2(_ref) {
    var task = _ref.task, isProgressChangeable = _ref.isProgressChangeable, isDateChangeable = _ref.isDateChangeable, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;
    var progressPoint = getProgressPoint(task.progressWidth + task.x1, task.y, task.height);
    return import_react81.default.createElement("g", {
      className: styles$6.barWrapper,
      tabIndex: 0
    }, import_react81.default.createElement(BarDisplay, {
      x: task.x1,
      y: task.y,
      width: task.x2 - task.x1,
      height: task.height,
      progressX: task.progressX,
      progressWidth: task.progressWidth,
      barCornerRadius: task.barCornerRadius,
      styles: task.styles,
      isSelected,
      onMouseDown: function onMouseDown(e) {
        isDateChangeable && onEventStart("move", task, e);
      }
    }), import_react81.default.createElement("g", {
      className: "handleGroup"
    }, isProgressChangeable && import_react81.default.createElement(BarProgressHandle, {
      progressPoint,
      onMouseDown: function onMouseDown(e) {
        onEventStart("progress", task, e);
      }
    })));
  };
  var styles$7 = { "milestoneWrapper": "_RRr13", "milestoneBackground": "_2P2B1" };
  var Milestone = function Milestone2(_ref) {
    var task = _ref.task, isDateChangeable = _ref.isDateChangeable, onEventStart = _ref.onEventStart, isSelected = _ref.isSelected;
    var transform2 = "rotate(45 " + (task.x1 + task.height * 0.356) + " \n    " + (task.y + task.height * 0.85) + ")";
    var getBarColor = function getBarColor2() {
      return isSelected ? task.styles.backgroundSelectedColor : task.styles.backgroundColor;
    };
    return import_react81.default.createElement("g", {
      tabIndex: 0,
      className: styles$7.milestoneWrapper
    }, import_react81.default.createElement("rect", {
      fill: getBarColor(),
      x: task.x1,
      width: task.height,
      y: task.y,
      height: task.height,
      rx: task.barCornerRadius,
      ry: task.barCornerRadius,
      transform: transform2,
      className: styles$7.milestoneBackground,
      onMouseDown: function onMouseDown(e) {
        isDateChangeable && onEventStart("move", task, e);
      }
    }));
  };
  var styles$8 = { "projectWrapper": "_1KJ6x", "projectBackground": "_2RbVy", "projectTop": "_2pZMF" };
  var Project = function Project2(_ref) {
    var task = _ref.task, isSelected = _ref.isSelected;
    var barColor = isSelected ? task.styles.backgroundSelectedColor : task.styles.backgroundColor;
    var processColor = isSelected ? task.styles.progressSelectedColor : task.styles.progressColor;
    var projectWith = task.x2 - task.x1;
    var projectLeftTriangle = [task.x1, task.y + task.height / 2 - 1, task.x1, task.y + task.height, task.x1 + 15, task.y + task.height / 2 - 1].join(",");
    var projectRightTriangle = [task.x2, task.y + task.height / 2 - 1, task.x2, task.y + task.height, task.x2 - 15, task.y + task.height / 2 - 1].join(",");
    return import_react81.default.createElement("g", {
      tabIndex: 0,
      className: styles$8.projectWrapper
    }, import_react81.default.createElement("rect", {
      fill: barColor,
      x: task.x1,
      width: projectWith,
      y: task.y,
      height: task.height,
      rx: task.barCornerRadius,
      ry: task.barCornerRadius,
      className: styles$8.projectBackground
    }), import_react81.default.createElement("rect", {
      x: task.progressX,
      width: task.progressWidth,
      y: task.y,
      height: task.height,
      ry: task.barCornerRadius,
      rx: task.barCornerRadius,
      fill: processColor
    }), import_react81.default.createElement("rect", {
      fill: barColor,
      x: task.x1,
      width: projectWith,
      y: task.y,
      height: task.height / 2,
      rx: task.barCornerRadius,
      ry: task.barCornerRadius,
      className: styles$8.projectTop
    }), import_react81.default.createElement("polygon", {
      className: styles$8.projectTop,
      points: projectLeftTriangle,
      fill: barColor
    }), import_react81.default.createElement("polygon", {
      className: styles$8.projectTop,
      points: projectRightTriangle,
      fill: barColor
    }));
  };
  var style4 = { "barLabel": "_3zRJQ", "barLabelOutside": "_3KcaM" };
  var TaskItem = function TaskItem2(props) {
    var _props = _extends6({}, props), task = _props.task, arrowIndent = _props.arrowIndent, isDelete = _props.isDelete, taskHeight = _props.taskHeight, isSelected = _props.isSelected, rtl = _props.rtl, onEventStart = _props.onEventStart;
    var textRef = (0, import_react81.useRef)(null);
    var _useState = (0, import_react81.useState)(import_react81.default.createElement("div", null)), taskItem = _useState[0], setTaskItem = _useState[1];
    var _useState2 = (0, import_react81.useState)(true), isTextInside = _useState2[0], setIsTextInside = _useState2[1];
    (0, import_react81.useEffect)(function() {
      switch (task.typeInternal) {
        case "milestone":
          setTaskItem(import_react81.default.createElement(Milestone, Object.assign({}, props)));
          break;
        case "project":
          setTaskItem(import_react81.default.createElement(Project, Object.assign({}, props)));
          break;
        case "smalltask":
          setTaskItem(import_react81.default.createElement(BarSmall, Object.assign({}, props)));
          break;
        default:
          setTaskItem(import_react81.default.createElement(Bar, Object.assign({}, props)));
          break;
      }
    }, [task, isSelected]);
    (0, import_react81.useEffect)(function() {
      if (textRef.current) {
        setIsTextInside(textRef.current.getBBox().width < task.x2 - task.x1);
      }
    }, [textRef, task]);
    var getX = function getX2() {
      var width = task.x2 - task.x1;
      var hasChild = task.barChildren.length > 0;
      if (isTextInside) {
        return task.x1 + width * 0.5;
      }
      if (rtl && textRef.current) {
        return task.x1 - textRef.current.getBBox().width - arrowIndent * +hasChild - arrowIndent * 0.2;
      } else {
        return task.x1 + width + arrowIndent * +hasChild + arrowIndent * 0.2;
      }
    };
    return import_react81.default.createElement("g", {
      onKeyDown: function onKeyDown(e) {
        switch (e.key) {
          case "Delete": {
            if (isDelete)
              onEventStart("delete", task, e);
            break;
          }
        }
        e.stopPropagation();
      },
      onMouseEnter: function onMouseEnter(e) {
        onEventStart("mouseenter", task, e);
      },
      onMouseLeave: function onMouseLeave(e) {
        onEventStart("mouseleave", task, e);
      },
      onDoubleClick: function onDoubleClick(e) {
        onEventStart("dblclick", task, e);
      },
      onClick: function onClick(e) {
        onEventStart("click", task, e);
      },
      onFocus: function onFocus() {
        onEventStart("select", task);
      }
    }, taskItem, import_react81.default.createElement("text", {
      x: getX(),
      y: task.y + taskHeight * 0.5,
      className: isTextInside ? style4.barLabel : style4.barLabelOutside,
      ref: textRef
    }, task.name));
  };
  var TaskGanttContent = function TaskGanttContent2(_ref) {
    var _svg$current;
    var tasks = _ref.tasks, dates = _ref.dates, ganttEvent = _ref.ganttEvent, selectedTask = _ref.selectedTask, rowHeight = _ref.rowHeight, columnWidth = _ref.columnWidth, timeStep = _ref.timeStep, svg = _ref.svg, taskHeight = _ref.taskHeight, arrowColor = _ref.arrowColor, arrowIndent = _ref.arrowIndent, fontFamily = _ref.fontFamily, fontSize = _ref.fontSize, rtl = _ref.rtl, setGanttEvent = _ref.setGanttEvent, setFailedTask = _ref.setFailedTask, setSelectedTask = _ref.setSelectedTask, onDateChange = _ref.onDateChange, onProgressChange = _ref.onProgressChange, onDoubleClick = _ref.onDoubleClick, onClick = _ref.onClick, onDelete = _ref.onDelete;
    var point = svg === null || svg === void 0 ? void 0 : (_svg$current = svg.current) === null || _svg$current === void 0 ? void 0 : _svg$current.createSVGPoint();
    var _useState = (0, import_react81.useState)(0), xStep = _useState[0], setXStep = _useState[1];
    var _useState2 = (0, import_react81.useState)(0), initEventX1Delta = _useState2[0], setInitEventX1Delta = _useState2[1];
    var _useState3 = (0, import_react81.useState)(false), isMoving = _useState3[0], setIsMoving = _useState3[1];
    (0, import_react81.useEffect)(function() {
      var dateDelta = dates[1].getTime() - dates[0].getTime() - dates[1].getTimezoneOffset() * 60 * 1e3 + dates[0].getTimezoneOffset() * 60 * 1e3;
      var newXStep = timeStep * columnWidth / dateDelta;
      setXStep(newXStep);
    }, [columnWidth, dates, timeStep]);
    (0, import_react81.useEffect)(function() {
      var handleMouseMove = function handleMouseMove2(event) {
        try {
          var _svg$current$getScree;
          if (!ganttEvent.changedTask || !point || !(svg !== null && svg !== void 0 && svg.current))
            return Promise.resolve();
          event.preventDefault();
          point.x = event.clientX;
          var cursor = point.matrixTransform(svg === null || svg === void 0 ? void 0 : (_svg$current$getScree = svg.current.getScreenCTM()) === null || _svg$current$getScree === void 0 ? void 0 : _svg$current$getScree.inverse());
          var _handleTaskBySVGMouse = handleTaskBySVGMouseEvent(cursor.x, ganttEvent.action, ganttEvent.changedTask, xStep, timeStep, initEventX1Delta, rtl), isChanged = _handleTaskBySVGMouse.isChanged, changedTask = _handleTaskBySVGMouse.changedTask;
          if (isChanged) {
            setGanttEvent({
              action: ganttEvent.action,
              changedTask
            });
          }
          return Promise.resolve();
        } catch (e) {
          return Promise.reject(e);
        }
      };
      var handleMouseUp = function handleMouseUp2(event) {
        try {
          var _svg$current$getScree2;
          var _temp6 = function _temp62() {
            if (!operationSuccess) {
              setFailedTask(originalSelectedTask);
            }
          };
          var action = ganttEvent.action, originalSelectedTask = ganttEvent.originalSelectedTask, changedTask = ganttEvent.changedTask;
          if (!changedTask || !point || !(svg !== null && svg !== void 0 && svg.current) || !originalSelectedTask)
            return Promise.resolve();
          event.preventDefault();
          point.x = event.clientX;
          var cursor = point.matrixTransform(svg === null || svg === void 0 ? void 0 : (_svg$current$getScree2 = svg.current.getScreenCTM()) === null || _svg$current$getScree2 === void 0 ? void 0 : _svg$current$getScree2.inverse());
          var _handleTaskBySVGMouse2 = handleTaskBySVGMouseEvent(cursor.x, action, changedTask, xStep, timeStep, initEventX1Delta, rtl), newChangedTask = _handleTaskBySVGMouse2.changedTask;
          var isNotLikeOriginal = originalSelectedTask.start !== newChangedTask.start || originalSelectedTask.end !== newChangedTask.end || originalSelectedTask.progress !== newChangedTask.progress;
          svg.current.removeEventListener("mousemove", handleMouseMove);
          svg.current.removeEventListener("mouseup", handleMouseUp2);
          setGanttEvent({
            action: ""
          });
          setIsMoving(false);
          var operationSuccess = true;
          var _temp7 = function() {
            if ((action === "move" || action === "end" || action === "start") && onDateChange && isNotLikeOriginal) {
              var _temp8 = _catch(function() {
                return Promise.resolve(onDateChange(newChangedTask, newChangedTask.barChildren)).then(function(result) {
                  if (result !== void 0) {
                    operationSuccess = result;
                  }
                });
              }, function() {
                operationSuccess = false;
              });
              if (_temp8 && _temp8.then)
                return _temp8.then(function() {
                });
            } else {
              var _temp9 = function() {
                if (onProgressChange && isNotLikeOriginal) {
                  var _temp10 = _catch(function() {
                    return Promise.resolve(onProgressChange(newChangedTask, newChangedTask.barChildren)).then(function(result) {
                      if (result !== void 0) {
                        operationSuccess = result;
                      }
                    });
                  }, function() {
                    operationSuccess = false;
                  });
                  if (_temp10 && _temp10.then)
                    return _temp10.then(function() {
                    });
                }
              }();
              if (_temp9 && _temp9.then)
                return _temp9.then(function() {
                });
            }
          }();
          return Promise.resolve(_temp7 && _temp7.then ? _temp7.then(_temp6) : _temp6(_temp7));
        } catch (e) {
          return Promise.reject(e);
        }
      };
      if (!isMoving && (ganttEvent.action === "move" || ganttEvent.action === "end" || ganttEvent.action === "start" || ganttEvent.action === "progress") && svg !== null && svg !== void 0 && svg.current) {
        svg.current.addEventListener("mousemove", handleMouseMove);
        svg.current.addEventListener("mouseup", handleMouseUp);
        setIsMoving(true);
      }
    }, [ganttEvent, xStep, initEventX1Delta, onProgressChange, timeStep, onDateChange, svg, isMoving, point, rtl, setFailedTask, setGanttEvent]);
    var handleBarEventStart = function handleBarEventStart2(action, task, event) {
      try {
        return Promise.resolve(function() {
          if (!event) {
            if (action === "select") {
              setSelectedTask(task.id);
            }
          } else
            return function() {
              if (isKeyboardEvent(event)) {
                var _temp14 = function() {
                  if (action === "delete") {
                    var _temp15 = function() {
                      if (onDelete) {
                        var _temp16 = _catch(function() {
                          return Promise.resolve(onDelete(task)).then(function(result) {
                            if (result !== void 0 && result) {
                              setGanttEvent({
                                action,
                                changedTask: task
                              });
                            }
                          });
                        }, function(error2) {
                          console.error("Error on Delete. " + error2);
                        });
                        if (_temp16 && _temp16.then)
                          return _temp16.then(function() {
                          });
                      }
                    }();
                    if (_temp15 && _temp15.then)
                      return _temp15.then(function() {
                      });
                  }
                }();
                if (_temp14 && _temp14.then)
                  return _temp14.then(function() {
                  });
              } else if (action === "mouseenter") {
                if (!ganttEvent.action) {
                  setGanttEvent({
                    action,
                    changedTask: task,
                    originalSelectedTask: task
                  });
                }
              } else if (action === "mouseleave") {
                if (ganttEvent.action === "mouseenter") {
                  setGanttEvent({
                    action: ""
                  });
                }
              } else if (action === "dblclick") {
                !!onDoubleClick && onDoubleClick(task);
              } else if (action === "click") {
                !!onClick && onClick(task);
              } else if (action === "move") {
                var _svg$current$getScree3;
                if (!(svg !== null && svg !== void 0 && svg.current) || !point)
                  return;
                point.x = event.clientX;
                var cursor = point.matrixTransform((_svg$current$getScree3 = svg.current.getScreenCTM()) === null || _svg$current$getScree3 === void 0 ? void 0 : _svg$current$getScree3.inverse());
                setInitEventX1Delta(cursor.x - task.x1);
                setGanttEvent({
                  action,
                  changedTask: task,
                  originalSelectedTask: task
                });
              } else {
                setGanttEvent({
                  action,
                  changedTask: task,
                  originalSelectedTask: task
                });
              }
            }();
        }());
      } catch (e) {
        return Promise.reject(e);
      }
    };
    return import_react81.default.createElement("g", {
      className: "content"
    }, import_react81.default.createElement("g", {
      className: "arrows",
      fill: arrowColor,
      stroke: arrowColor
    }, tasks.map(function(task) {
      return task.barChildren.map(function(child) {
        return import_react81.default.createElement(Arrow, {
          key: "Arrow from " + task.id + " to " + tasks[child.index].id,
          taskFrom: task,
          taskTo: tasks[child.index],
          rowHeight,
          taskHeight,
          arrowIndent,
          rtl
        });
      });
    })), import_react81.default.createElement("g", {
      className: "bar",
      fontFamily,
      fontSize
    }, tasks.map(function(task) {
      return import_react81.default.createElement(TaskItem, {
        task,
        arrowIndent,
        taskHeight,
        isProgressChangeable: !!onProgressChange && !task.isDisabled,
        isDateChangeable: !!onDateChange && !task.isDisabled,
        isDelete: !task.isDisabled,
        onEventStart: handleBarEventStart,
        key: task.id,
        isSelected: !!selectedTask && task.id === selectedTask.id,
        rtl
      });
    })));
  };
  var styles$9 = { "ganttVerticalContainer": "_CZjuD", "horizontalContainer": "_2B2zv", "wrapper": "_3eULf" };
  var TaskGantt = function TaskGantt2(_ref) {
    var gridProps = _ref.gridProps, calendarProps = _ref.calendarProps, barProps = _ref.barProps, ganttHeight = _ref.ganttHeight, scrollY = _ref.scrollY, scrollX = _ref.scrollX;
    var ganttSVGRef = (0, import_react81.useRef)(null);
    var horizontalContainerRef = (0, import_react81.useRef)(null);
    var verticalGanttContainerRef = (0, import_react81.useRef)(null);
    var newBarProps = _extends6({}, barProps, {
      svg: ganttSVGRef
    });
    (0, import_react81.useEffect)(function() {
      if (horizontalContainerRef.current) {
        horizontalContainerRef.current.scrollTop = scrollY;
      }
    }, [scrollY]);
    (0, import_react81.useEffect)(function() {
      if (verticalGanttContainerRef.current) {
        verticalGanttContainerRef.current.scrollLeft = scrollX;
      }
    }, [scrollX]);
    return import_react81.default.createElement("div", {
      className: styles$9.ganttVerticalContainer,
      ref: verticalGanttContainerRef,
      dir: "ltr"
    }, import_react81.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: gridProps.svgWidth,
      height: calendarProps.headerHeight,
      fontFamily: barProps.fontFamily
    }, import_react81.default.createElement(Calendar, Object.assign({}, calendarProps))), import_react81.default.createElement("div", {
      ref: horizontalContainerRef,
      className: styles$9.horizontalContainer,
      style: ganttHeight ? {
        height: ganttHeight,
        width: gridProps.svgWidth
      } : {
        width: gridProps.svgWidth
      }
    }, import_react81.default.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: gridProps.svgWidth,
      height: barProps.rowHeight * barProps.tasks.length,
      fontFamily: barProps.fontFamily,
      ref: ganttSVGRef
    }, import_react81.default.createElement(Grid, Object.assign({}, gridProps)), import_react81.default.createElement(TaskGanttContent, Object.assign({}, newBarProps)))));
  };
  var styles$a = { "scrollWrapper": "_2k9Ys", "scroll": "_19jgW" };
  var HorizontalScroll = function HorizontalScroll2(_ref) {
    var scroll2 = _ref.scroll, svgWidth = _ref.svgWidth, taskListWidth = _ref.taskListWidth, rtl = _ref.rtl, onScroll = _ref.onScroll;
    var scrollRef = (0, import_react81.useRef)(null);
    (0, import_react81.useEffect)(function() {
      if (scrollRef.current) {
        scrollRef.current.scrollLeft = scroll2;
      }
    }, [scroll2]);
    return import_react81.default.createElement("div", {
      dir: "ltr",
      style: {
        margin: rtl ? "0px " + taskListWidth + "px 0px 0px" : "0px 0px 0px " + taskListWidth + "px"
      },
      className: styles$a.scrollWrapper,
      onScroll,
      ref: scrollRef
    }, import_react81.default.createElement("div", {
      style: {
        width: svgWidth
      },
      className: styles$a.scroll
    }));
  };
  var Gantt = function Gantt2(_ref) {
    var tasks = _ref.tasks, _ref$headerHeight = _ref.headerHeight, headerHeight = _ref$headerHeight === void 0 ? 50 : _ref$headerHeight, _ref$columnWidth = _ref.columnWidth, columnWidth = _ref$columnWidth === void 0 ? 60 : _ref$columnWidth, _ref$listCellWidth = _ref.listCellWidth, listCellWidth = _ref$listCellWidth === void 0 ? "155px" : _ref$listCellWidth, _ref$rowHeight = _ref.rowHeight, rowHeight = _ref$rowHeight === void 0 ? 50 : _ref$rowHeight, _ref$ganttHeight = _ref.ganttHeight, ganttHeight = _ref$ganttHeight === void 0 ? 0 : _ref$ganttHeight, _ref$viewMode = _ref.viewMode, viewMode = _ref$viewMode === void 0 ? ViewMode.Day : _ref$viewMode, _ref$preStepsCount = _ref.preStepsCount, preStepsCount = _ref$preStepsCount === void 0 ? 1 : _ref$preStepsCount, _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? "en-GB" : _ref$locale, _ref$barFill = _ref.barFill, barFill = _ref$barFill === void 0 ? 60 : _ref$barFill, _ref$barCornerRadius = _ref.barCornerRadius, barCornerRadius = _ref$barCornerRadius === void 0 ? 3 : _ref$barCornerRadius, _ref$barProgressColor = _ref.barProgressColor, barProgressColor = _ref$barProgressColor === void 0 ? "#a3a3ff" : _ref$barProgressColor, _ref$barProgressSelec = _ref.barProgressSelectedColor, barProgressSelectedColor = _ref$barProgressSelec === void 0 ? "#8282f5" : _ref$barProgressSelec, _ref$barBackgroundCol = _ref.barBackgroundColor, barBackgroundColor = _ref$barBackgroundCol === void 0 ? "#b8c2cc" : _ref$barBackgroundCol, _ref$barBackgroundSel = _ref.barBackgroundSelectedColor, barBackgroundSelectedColor = _ref$barBackgroundSel === void 0 ? "#aeb8c2" : _ref$barBackgroundSel, _ref$projectProgressC = _ref.projectProgressColor, projectProgressColor = _ref$projectProgressC === void 0 ? "#7db59a" : _ref$projectProgressC, _ref$projectProgressS = _ref.projectProgressSelectedColor, projectProgressSelectedColor = _ref$projectProgressS === void 0 ? "#59a985" : _ref$projectProgressS, _ref$projectBackgroun = _ref.projectBackgroundColor, projectBackgroundColor = _ref$projectBackgroun === void 0 ? "#fac465" : _ref$projectBackgroun, _ref$projectBackgroun2 = _ref.projectBackgroundSelectedColor, projectBackgroundSelectedColor = _ref$projectBackgroun2 === void 0 ? "#f7bb53" : _ref$projectBackgroun2, _ref$milestoneBackgro = _ref.milestoneBackgroundColor, milestoneBackgroundColor = _ref$milestoneBackgro === void 0 ? "#f1c453" : _ref$milestoneBackgro, _ref$milestoneBackgro2 = _ref.milestoneBackgroundSelectedColor, milestoneBackgroundSelectedColor = _ref$milestoneBackgro2 === void 0 ? "#f29e4c" : _ref$milestoneBackgro2, _ref$rtl = _ref.rtl, rtl = _ref$rtl === void 0 ? false : _ref$rtl, _ref$handleWidth = _ref.handleWidth, handleWidth = _ref$handleWidth === void 0 ? 8 : _ref$handleWidth, _ref$timeStep = _ref.timeStep, timeStep = _ref$timeStep === void 0 ? 3e5 : _ref$timeStep, _ref$arrowColor = _ref.arrowColor, arrowColor = _ref$arrowColor === void 0 ? "grey" : _ref$arrowColor, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? "Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue" : _ref$fontFamily, _ref$fontSize = _ref.fontSize, fontSize = _ref$fontSize === void 0 ? "14px" : _ref$fontSize, _ref$arrowIndent = _ref.arrowIndent, arrowIndent = _ref$arrowIndent === void 0 ? 20 : _ref$arrowIndent, _ref$todayColor = _ref.todayColor, todayColor = _ref$todayColor === void 0 ? "rgba(252, 248, 227, 0.5)" : _ref$todayColor, viewDate = _ref.viewDate, _ref$TooltipContent = _ref.TooltipContent, TooltipContent = _ref$TooltipContent === void 0 ? StandardTooltipContent : _ref$TooltipContent, _ref$TaskListHeader = _ref.TaskListHeader, TaskListHeader = _ref$TaskListHeader === void 0 ? TaskListHeaderDefault : _ref$TaskListHeader, _ref$TaskListTable = _ref.TaskListTable, TaskListTable = _ref$TaskListTable === void 0 ? TaskListTableDefault : _ref$TaskListTable, onDateChange = _ref.onDateChange, onProgressChange = _ref.onProgressChange, onDoubleClick = _ref.onDoubleClick, onClick = _ref.onClick, onDelete = _ref.onDelete, onSelect = _ref.onSelect, onExpanderClick = _ref.onExpanderClick;
    var wrapperRef = (0, import_react81.useRef)(null);
    var taskListRef = (0, import_react81.useRef)(null);
    var _useState = (0, import_react81.useState)(function() {
      var _ganttDateRange = ganttDateRange(tasks, viewMode, preStepsCount), startDate = _ganttDateRange[0], endDate = _ganttDateRange[1];
      return {
        viewMode,
        dates: seedDates(startDate, endDate, viewMode)
      };
    }), dateSetup = _useState[0], setDateSetup = _useState[1];
    var _useState2 = (0, import_react81.useState)(void 0), currentViewDate = _useState2[0], setCurrentViewDate = _useState2[1];
    var _useState3 = (0, import_react81.useState)(0), taskListWidth = _useState3[0], setTaskListWidth = _useState3[1];
    var _useState4 = (0, import_react81.useState)(0), svgContainerWidth = _useState4[0], setSvgContainerWidth = _useState4[1];
    var _useState5 = (0, import_react81.useState)(ganttHeight), svgContainerHeight = _useState5[0], setSvgContainerHeight = _useState5[1];
    var _useState6 = (0, import_react81.useState)([]), barTasks = _useState6[0], setBarTasks = _useState6[1];
    var _useState7 = (0, import_react81.useState)({
      action: ""
    }), ganttEvent = _useState7[0], setGanttEvent = _useState7[1];
    var taskHeight = (0, import_react81.useMemo)(function() {
      return rowHeight * barFill / 100;
    }, [rowHeight, barFill]);
    var _useState8 = (0, import_react81.useState)(), selectedTask = _useState8[0], setSelectedTask = _useState8[1];
    var _useState9 = (0, import_react81.useState)(null), failedTask = _useState9[0], setFailedTask = _useState9[1];
    var svgWidth = dateSetup.dates.length * columnWidth;
    var ganttFullHeight = barTasks.length * rowHeight;
    var _useState10 = (0, import_react81.useState)(0), scrollY = _useState10[0], setScrollY = _useState10[1];
    var _useState11 = (0, import_react81.useState)(-1), scrollX = _useState11[0], setScrollX = _useState11[1];
    var _useState12 = (0, import_react81.useState)(false), ignoreScrollEvent = _useState12[0], setIgnoreScrollEvent = _useState12[1];
    (0, import_react81.useEffect)(function() {
      var filteredTasks;
      if (onExpanderClick) {
        filteredTasks = removeHiddenTasks(tasks);
      } else {
        filteredTasks = tasks;
      }
      filteredTasks = filteredTasks.sort(sortTasks);
      var _ganttDateRange2 = ganttDateRange(filteredTasks, viewMode, preStepsCount), startDate = _ganttDateRange2[0], endDate = _ganttDateRange2[1];
      var newDates = seedDates(startDate, endDate, viewMode);
      if (rtl) {
        newDates = newDates.reverse();
        if (scrollX === -1) {
          setScrollX(newDates.length * columnWidth);
        }
      }
      setDateSetup({
        dates: newDates,
        viewMode
      });
      setBarTasks(convertToBarTasks(filteredTasks, newDates, columnWidth, rowHeight, taskHeight, barCornerRadius, handleWidth, rtl, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor));
    }, [tasks, viewMode, preStepsCount, rowHeight, barCornerRadius, columnWidth, taskHeight, handleWidth, barProgressColor, barProgressSelectedColor, barBackgroundColor, barBackgroundSelectedColor, projectProgressColor, projectProgressSelectedColor, projectBackgroundColor, projectBackgroundSelectedColor, milestoneBackgroundColor, milestoneBackgroundSelectedColor, rtl, scrollX, onExpanderClick]);
    (0, import_react81.useEffect)(function() {
      if (viewMode === dateSetup.viewMode && (viewDate && !currentViewDate || viewDate && (currentViewDate === null || currentViewDate === void 0 ? void 0 : currentViewDate.valueOf()) !== viewDate.valueOf())) {
        var dates = dateSetup.dates;
        var index2 = dates.findIndex(function(d, i) {
          return viewDate.valueOf() >= d.valueOf() && i + 1 !== dates.length && viewDate.valueOf() < dates[i + 1].valueOf();
        });
        if (index2 === -1) {
          return;
        }
        setCurrentViewDate(viewDate);
        setScrollX(columnWidth * index2);
      }
    }, [viewDate, columnWidth, dateSetup.dates, dateSetup.viewMode, viewMode, currentViewDate, setCurrentViewDate]);
    (0, import_react81.useEffect)(function() {
      var changedTask = ganttEvent.changedTask, action = ganttEvent.action;
      if (changedTask) {
        if (action === "delete") {
          setGanttEvent({
            action: ""
          });
          setBarTasks(barTasks.filter(function(t) {
            return t.id !== changedTask.id;
          }));
        } else if (action === "move" || action === "end" || action === "start" || action === "progress") {
          var prevStateTask = barTasks.find(function(t) {
            return t.id === changedTask.id;
          });
          if (prevStateTask && (prevStateTask.start.getTime() !== changedTask.start.getTime() || prevStateTask.end.getTime() !== changedTask.end.getTime() || prevStateTask.progress !== changedTask.progress)) {
            var newTaskList = barTasks.map(function(t) {
              return t.id === changedTask.id ? changedTask : t;
            });
            setBarTasks(newTaskList);
          }
        }
      }
    }, [ganttEvent, barTasks]);
    (0, import_react81.useEffect)(function() {
      if (failedTask) {
        setBarTasks(barTasks.map(function(t) {
          return t.id !== failedTask.id ? t : failedTask;
        }));
        setFailedTask(null);
      }
    }, [failedTask, barTasks]);
    (0, import_react81.useEffect)(function() {
      if (!listCellWidth) {
        setTaskListWidth(0);
      }
      if (taskListRef.current) {
        setTaskListWidth(taskListRef.current.offsetWidth);
      }
    }, [taskListRef, listCellWidth]);
    (0, import_react81.useEffect)(function() {
      if (wrapperRef.current) {
        setSvgContainerWidth(wrapperRef.current.offsetWidth - taskListWidth);
      }
    }, [wrapperRef, taskListWidth]);
    (0, import_react81.useEffect)(function() {
      if (ganttHeight) {
        setSvgContainerHeight(ganttHeight + headerHeight);
      } else {
        setSvgContainerHeight(tasks.length * rowHeight + headerHeight);
      }
    }, [ganttHeight, tasks, headerHeight, rowHeight]);
    (0, import_react81.useEffect)(function() {
      var _wrapperRef$current;
      var handleWheel = function handleWheel2(event) {
        if (event.shiftKey || event.deltaX) {
          var scrollMove = event.deltaX ? event.deltaX : event.deltaY;
          var newScrollX = scrollX + scrollMove;
          if (newScrollX < 0) {
            newScrollX = 0;
          } else if (newScrollX > svgWidth) {
            newScrollX = svgWidth;
          }
          setScrollX(newScrollX);
          event.preventDefault();
        } else if (ganttHeight) {
          var newScrollY = scrollY + event.deltaY;
          if (newScrollY < 0) {
            newScrollY = 0;
          } else if (newScrollY > ganttFullHeight - ganttHeight) {
            newScrollY = ganttFullHeight - ganttHeight;
          }
          if (newScrollY !== scrollY) {
            setScrollY(newScrollY);
            event.preventDefault();
          }
        }
        setIgnoreScrollEvent(true);
      };
      (_wrapperRef$current = wrapperRef.current) === null || _wrapperRef$current === void 0 ? void 0 : _wrapperRef$current.addEventListener("wheel", handleWheel, {
        passive: false
      });
      return function() {
        var _wrapperRef$current2;
        (_wrapperRef$current2 = wrapperRef.current) === null || _wrapperRef$current2 === void 0 ? void 0 : _wrapperRef$current2.removeEventListener("wheel", handleWheel);
      };
    }, [wrapperRef, scrollY, scrollX, ganttHeight, svgWidth, rtl, ganttFullHeight]);
    var handleScrollY = function handleScrollY2(event) {
      if (scrollY !== event.currentTarget.scrollTop && !ignoreScrollEvent) {
        setScrollY(event.currentTarget.scrollTop);
        setIgnoreScrollEvent(true);
      } else {
        setIgnoreScrollEvent(false);
      }
    };
    var handleScrollX = function handleScrollX2(event) {
      if (scrollX !== event.currentTarget.scrollLeft && !ignoreScrollEvent) {
        setScrollX(event.currentTarget.scrollLeft);
        setIgnoreScrollEvent(true);
      } else {
        setIgnoreScrollEvent(false);
      }
    };
    var handleKeyDown = function handleKeyDown2(event) {
      event.preventDefault();
      var newScrollY = scrollY;
      var newScrollX = scrollX;
      var isX = true;
      switch (event.key) {
        case "Down":
        case "ArrowDown":
          newScrollY += rowHeight;
          isX = false;
          break;
        case "Up":
        case "ArrowUp":
          newScrollY -= rowHeight;
          isX = false;
          break;
        case "Left":
        case "ArrowLeft":
          newScrollX -= columnWidth;
          break;
        case "Right":
        case "ArrowRight":
          newScrollX += columnWidth;
          break;
      }
      if (isX) {
        if (newScrollX < 0) {
          newScrollX = 0;
        } else if (newScrollX > svgWidth) {
          newScrollX = svgWidth;
        }
        setScrollX(newScrollX);
      } else {
        if (newScrollY < 0) {
          newScrollY = 0;
        } else if (newScrollY > ganttFullHeight - ganttHeight) {
          newScrollY = ganttFullHeight - ganttHeight;
        }
        setScrollY(newScrollY);
      }
      setIgnoreScrollEvent(true);
    };
    var handleSelectedTask = function handleSelectedTask2(taskId) {
      var newSelectedTask = barTasks.find(function(t) {
        return t.id === taskId;
      });
      var oldSelectedTask = barTasks.find(function(t) {
        return !!selectedTask && t.id === selectedTask.id;
      });
      if (onSelect) {
        if (oldSelectedTask) {
          onSelect(oldSelectedTask, false);
        }
        if (newSelectedTask) {
          onSelect(newSelectedTask, true);
        }
      }
      setSelectedTask(newSelectedTask);
    };
    var handleExpanderClick = function handleExpanderClick2(task) {
      if (onExpanderClick && task.hideChildren !== void 0) {
        onExpanderClick(_extends6({}, task, {
          hideChildren: !task.hideChildren
        }));
      }
    };
    var gridProps = {
      columnWidth,
      svgWidth,
      tasks,
      rowHeight,
      dates: dateSetup.dates,
      todayColor,
      rtl
    };
    var calendarProps = {
      dateSetup,
      locale,
      viewMode,
      headerHeight,
      columnWidth,
      fontFamily,
      fontSize,
      rtl
    };
    var barProps = {
      tasks: barTasks,
      dates: dateSetup.dates,
      ganttEvent,
      selectedTask,
      rowHeight,
      taskHeight,
      columnWidth,
      arrowColor,
      timeStep,
      fontFamily,
      fontSize,
      arrowIndent,
      svgWidth,
      rtl,
      setGanttEvent,
      setFailedTask,
      setSelectedTask: handleSelectedTask,
      onDateChange,
      onProgressChange,
      onDoubleClick,
      onClick,
      onDelete
    };
    var tableProps = {
      rowHeight,
      rowWidth: listCellWidth,
      fontFamily,
      fontSize,
      tasks: barTasks,
      locale,
      headerHeight,
      scrollY,
      ganttHeight,
      horizontalContainerClass: styles$9.horizontalContainer,
      selectedTask,
      taskListRef,
      setSelectedTask: handleSelectedTask,
      onExpanderClick: handleExpanderClick,
      TaskListHeader,
      TaskListTable
    };
    return import_react81.default.createElement("div", null, import_react81.default.createElement("div", {
      className: styles$9.wrapper,
      onKeyDown: handleKeyDown,
      tabIndex: 0,
      ref: wrapperRef
    }, listCellWidth && import_react81.default.createElement(TaskList, Object.assign({}, tableProps)), import_react81.default.createElement(TaskGantt, {
      gridProps,
      calendarProps,
      barProps,
      ganttHeight,
      scrollY,
      scrollX
    }), ganttEvent.changedTask && import_react81.default.createElement(Tooltip, {
      arrowIndent,
      rowHeight,
      svgContainerHeight,
      svgContainerWidth,
      fontFamily,
      fontSize,
      scrollX,
      scrollY,
      task: ganttEvent.changedTask,
      headerHeight,
      taskListWidth,
      TooltipContent,
      rtl,
      svgWidth
    }), import_react81.default.createElement(VerticalScroll, {
      ganttFullHeight,
      ganttHeight,
      headerHeight,
      scroll: scrollY,
      onScroll: handleScrollY,
      rtl
    })), import_react81.default.createElement(HorizontalScroll, {
      svgWidth,
      taskListWidth,
      scroll: scrollX,
      rtl,
      onScroll: handleScrollX
    }));
  };

  // src/mongooseSchemas.ts
  var import_mongoose = __toESM(require_browser_umd(), 1);
  var userSchema = new import_mongoose.default.Schema({
    email: String,
    channels: [{ type: import_mongoose.default.Schema.Types.ObjectId, ref: "Channel" }],
    dmgroups: [{ type: import_mongoose.default.Schema.Types.ObjectId, ref: "Dmgroup" }]
  });
  userSchema.virtual("features", {
    ref: "Feature",
    localField: "_id",
    foreignField: "owner"
  });
  var kanbanSchema = new import_mongoose.default.Schema({
    title: String
  });
  var ganttSchema = new import_mongoose.default.Schema({
    name: String,
    type: String,
    start: Date,
    end: Date
  });
  var featuresSchema = new import_mongoose.default.Schema({
    title: String,
    state: String
  });
  var channelsFeature = new import_mongoose.default.Schema({});
  var chatCatMessageSchema = new import_mongoose.default.Schema({
    user: {
      type: import_mongoose.default.Schema.Types.ObjectId,
      ref: "User",
      required: true
    },
    room: {
      type: import_mongoose.default.Schema.Types.ObjectId,
      ref: "ChatCatRoom",
      required: true,
      maxlength: 100
    },
    timestamp: {
      type: Date,
      default: Date.now()
    },
    text: {
      type: String,
      maxlength: 1e3
    }
  });
  var HuddleSchema = new import_mongoose.default.Schema({});
  var RoomSchema = new import_mongoose.default.Schema({
    name: { type: String, required: true }
  });

  // src/TaskManFrontEnd.tsx
  var InputElementString = ({ tree, name }) => {
    console.log("mark string", tree);
    return /* @__PURE__ */ import_react83.default.createElement(Form_default.Group, { className: "mb-3", controlId: name }, /* @__PURE__ */ import_react83.default.createElement(Form_default.Label, null, name), /* @__PURE__ */ import_react83.default.createElement(Form_default.Control, { placeholder: name }));
  };
  var InputElementArray = ({ tree, name }) => {
    console.log("mark5", tree);
    return /* @__PURE__ */ import_react83.default.createElement(Form_default.Control, { type: "email", placeholder: "Enter email" });
  };
  var InputElementObject = ({ tree, name }) => {
    console.log("mark4", tree, tree.properties);
    return /* @__PURE__ */ import_react83.default.createElement("div", null, ...Object.keys(tree.properties).map((name2) => {
      console.log("mark6", name2, tree.properties[name2].type);
      if (tree.properties[name2].type === "object") {
        return /* @__PURE__ */ import_react83.default.createElement(InputElementObject, { tree: tree.properties[name2], name: name2 });
      }
      if (tree.properties[name2].type === "string") {
        return /* @__PURE__ */ import_react83.default.createElement(InputElementString, { tree: tree.properties[name2], name: name2 });
      }
      if (Array.isArray(tree.properties[name2].type)) {
        return /* @__PURE__ */ import_react83.default.createElement(InputElementArray, { tree: tree.properties[name2], name: name2 });
      }
    }));
  };
  var InputForm = ({ schema, path }) => {
    return /* @__PURE__ */ import_react83.default.createElement(Form_default.Group, null, /* @__PURE__ */ import_react83.default.createElement(InputElementObject, { tree: schema.toJSONSchema() }));
  };
  var Crud2 = ({ collection, collectionName, schema }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement(Table_default, { striped: true, bordered: true, hover: true }, /* @__PURE__ */ import_react83.default.createElement("thead", null, /* @__PURE__ */ import_react83.default.createElement("tr", null, /* @__PURE__ */ import_react83.default.createElement("th", null, "id"), /* @__PURE__ */ import_react83.default.createElement("th", null))), /* @__PURE__ */ import_react83.default.createElement("tbody", null, /* @__PURE__ */ import_react83.default.createElement("tr", null, /* @__PURE__ */ import_react83.default.createElement("td", null, "add new record"), /* @__PURE__ */ import_react83.default.createElement("td", null, /* @__PURE__ */ import_react83.default.createElement(Form_default, null, /* @__PURE__ */ import_react83.default.createElement(InputForm, { schema }), /* @__PURE__ */ import_react83.default.createElement(Button_default2, { variant: "primary", type: "submit" }, "Submit")))), collection.map((doc) => {
      return /* @__PURE__ */ import_react83.default.createElement("tr", null, /* @__PURE__ */ import_react83.default.createElement("td", null, doc._id), /* @__PURE__ */ import_react83.default.createElement("td", null, JSON.stringify(doc, null, 2)));
    }))));
  };
  var Features = ({ features, tests, results, adminMode }) => {
    if (!adminMode)
      return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example5", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, features.map((feature, ndx) => /* @__PURE__ */ import_react83.default.createElement(Nav_default2.Item, { key: ndx }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2.Link, { eventKey: `feature/${feature._id}` }, feature.title))))), /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 8 }, /* @__PURE__ */ import_react83.default.createElement(Tab_default.Content, null, features.map(
        (feature, ndx) => {
          return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Pane, { eventKey: `feature/${feature._id}`, key: ndx }, /* @__PURE__ */ import_react83.default.createElement("pre", null, JSON.stringify(feature, null, 2)), /* @__PURE__ */ import_react83.default.createElement("ol", null, results.filter((result) => {
            console.log("mark1", result.testresults.src);
            return new Set(result.testresults.givens.reduce((mm, el) => {
              mm = mm.concat(el.features);
              return mm;
            }, [])).has(feature._id);
          }).map((result) => {
            return /* @__PURE__ */ import_react83.default.createElement("li", null, result.src);
          })));
        }
      )))));
    return /* @__PURE__ */ import_react83.default.createElement(Crud2, { schema: featuresSchema, collectionName: "features", collection: features });
  };
  var Tests = ({ tests, results, features, adminMode }) => {
    if (!adminMode)
      return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example5", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { variant: "pills", className: "flex-column" }, tests.tests.map(
        (t, ndx) => /* @__PURE__ */ import_react83.default.createElement(Nav_default2.Item, { key: ndx }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2.Link, { eventKey: `test-${ndx}` }, t[0], " - ", t[1]))
      ))), /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react83.default.createElement(Tab_default.Content, null, tests.tests.map(
        (t, ndx) => /* @__PURE__ */ import_react83.default.createElement(Tab_default.Pane, { eventKey: `test-${ndx}` }, /* @__PURE__ */ import_react83.default.createElement("pre", null, JSON.stringify(Object.entries(results).filter(([k, v]) => {
          console.log(v.src, tests.tests[ndx][0]);
          return v.src === tests.tests[ndx][0];
        }), null, 2)))
      )))));
    return /* @__PURE__ */ import_react83.default.createElement("div", null);
  };
  var TaskMan = ({ setAdminMode, users, adminMode, children: children2 }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("div", { className: "row" }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "basic-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/tests" }, /* @__PURE__ */ import_react83.default.createElement(
      Tab_default,
      {
        eventKey: "features",
        title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/taskMan/features", className: "nav-link" }, "Features")
      }
    ), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "kanban", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/taskMan/kanban", className: "nav-link" }, "Kanban") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "gantt", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/taskMan/gantt", className: "nav-link" }, "Gantt") }))), /* @__PURE__ */ import_react83.default.createElement(NavDropdown_default, { align: "end", title: "User", id: "basic-nav-dropdown" }, users.map((user) => {
      return /* @__PURE__ */ import_react83.default.createElement(NavDropdown_default.Item, { href: "#action/3.1" }, user.email);
    }), /* @__PURE__ */ import_react83.default.createElement(NavDropdown_default.Divider, null), /* @__PURE__ */ import_react83.default.createElement(NavDropdown_default.Item, { href: "#action/3.4" }, "all")), /* @__PURE__ */ import_react83.default.createElement(ButtonGroup_default, { className: "mb-2" }, /* @__PURE__ */ import_react83.default.createElement(
      ToggleButton_default,
      {
        id: "toggle-check",
        type: "checkbox",
        variant: "outline-primary",
        checked: adminMode,
        value: "1",
        onChange: (e) => setAdminMode(!adminMode)
      },
      "\u2699\uFE0F"
    )))))), children2);
  };
  var DocGal = ({ setAdminMode, users, adminMode, children: children2 }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("div", { className: "row" }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "docGal-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/fs" }, /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "fs", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/docGal/fs", className: "nav-link" }, "FS") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "db", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/docGal/db", className: "nav-link" }, "DB") }))))))), children2);
  };
  var ChatCat = ({ children: children2 }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("div", { className: "row" }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "basic-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/chatCat/mostRecent" }, /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/mostRecent", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/mostRecent", className: "nav-link" }, "Most Recent") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "by Subject") }))))))), children2);
  };
  var WhoThat = ({ children: children2 }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("div", { className: "row" }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "basic-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/whoThat/people" }, /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/whoThat/people", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/whoThat/people", className: "nav-link" }, "People") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/whoThat/groups", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/whoThat/groups", className: "nav-link" }, "Groups") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/whoThat/org", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/whoThat/org", className: "nav-link" }, "Org") }))), /* @__PURE__ */ import_react83.default.createElement(ButtonGroup_default, { className: "mb-2" }, /* @__PURE__ */ import_react83.default.createElement(
      ToggleButton_default,
      {
        id: "toggle-check",
        type: "checkbox",
        variant: "outline-primary",
        checked: false,
        value: "1"
      },
      "\u2699\uFE0F"
    )))))), children2);
  };
  var Kanban = ({
    features,
    tests,
    results,
    kanban,
    openNewColumnModal,
    adminMode
  }) => {
    const board = {
      columns: [
        {
          id: -1,
          title: "BACKLOG",
          cards: features.filter((f) => f.state === void 0)
        },
        {
          id: 0,
          title: "ARCHIVE",
          cards: features.filter((f) => f.state === "ARCHIVED")
        },
        ...kanban.map((kb) => {
          return {
            id: kb._id,
            title: kb.title,
            cards: features.filter((f) => f.state === kb._id)
          };
        })
        // {
        //   id: 1,
        //   title: 'Backlog',
        //   cards: [
        //     {
        //       id: 1,
        //       title: 'Add card',
        //       description: 'Add capability to add a card in a column'
        //     },
        //   ]
        // },
      ]
    };
    if (!adminMode)
      return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example8", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, /* @__PURE__ */ import_react83.default.createElement("button", { onClick: () => {
        openNewColumnModal();
      } }, "new column"), /* @__PURE__ */ import_react83.default.createElement(UncontrolledBoard, { initialBoard: board }))));
    return /* @__PURE__ */ import_react83.default.createElement(Crud2, { schema: kanbanSchema, collectionName: "kanban", collection: kanban });
  };
  var GanttChart = ({ gantt, tests, results, features, adminMode }) => {
    if (!adminMode) {
      if (gantt.length > 1) {
        return /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, /* @__PURE__ */ import_react83.default.createElement(Gantt, { tasks: (gantt || []).map((g) => {
          console.log(g);
          let task = {
            start: new Date(2020, 1, 1),
            end: new Date(2020, 1, 2),
            name: g.name,
            id: g._id,
            type: g.type,
            progress: 45,
            isDisabled: false,
            styles: { progressColor: "#ffbb54", progressSelectedColor: "#ff9e0d" }
          };
          console.log(task);
          return task;
        }) })));
      } else {
        return /* @__PURE__ */ import_react83.default.createElement("p", null, "you need to add some gantt items");
      }
    }
    return /* @__PURE__ */ import_react83.default.createElement(Crud2, { schema: ganttSchema, collectionName: "gantt", collection: gantt });
  };
  var Users = ({ users, adminMode }) => {
    if (!adminMode)
      return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example9", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, /* @__PURE__ */ import_react83.default.createElement("ul", null, users.map((user) => {
        return /* @__PURE__ */ import_react83.default.createElement("li", null, user.email);
      })))));
    return /* @__PURE__ */ import_react83.default.createElement(Crud2, { schema: userSchema, collectionName: "users", collection: users });
  };
  var OrgChart = ({ users, adminMode }) => {
    const initialNodes = [
      { id: "1", position: { x: 0, y: 0 }, data: { label: "1" } },
      { id: "2", position: { x: 0, y: 100 }, data: { label: "2" } }
    ];
    const initialEdges = [{ id: "e1-2", source: "1", target: "2" }];
    if (!adminMode)
      return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example9", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, /* @__PURE__ */ import_react83.default.createElement("div", { style: { width: "100vw", height: "100vh" } }, /* @__PURE__ */ import_react83.default.createElement(index, { nodes: [
        ...initialNodes,
        ...users.map((user) => {
          return { id: user._id, position: { x: 0, y: 0 }, data: { label: user.email } };
        })
      ], edges: initialEdges })))));
    return /* @__PURE__ */ import_react83.default.createElement(Crud2, { schema: userSchema, collectionName: "users", collection: users });
  };
  var DocGalFsNav = ({ docGalFs, filepath }) => {
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("ul", null, ...docGalFs.map((lm) => {
      return /* @__PURE__ */ import_react83.default.createElement("li", null, /* @__PURE__ */ import_react83.default.createElement("a", { href: `${filepath}/${lm.name}` }, lm.name), lm.children.length > 0 && /* @__PURE__ */ import_react83.default.createElement(DocGalFsNav, { docGalFs: lm.children, filepath: `${filepath}/${lm.name}` }));
    })));
  };
  var DocGalFs = ({
    docGalFs
    // tests, results, features, adminMode
  }) => {
    return /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react83.default.createElement(DocGalFsNav, { docGalFs, filepath: "" })), /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 4 }, /* @__PURE__ */ import_react83.default.createElement(Tab_default.Content, null)));
  };
  var DocGalDb = ({
    // gantt, tests, results, features, adminMode
  }) => {
    return /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, "DocGalDb"));
  };
  var ChatCatPeople = ({ users }) => {
    return /* @__PURE__ */ import_react83.default.createElement(Tab_default.Container, { id: "left-tabs-example9", defaultActiveKey: "feature-0" }, /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Col_default, { sm: 12 }, /* @__PURE__ */ import_react83.default.createElement("ul", null, users.map((user) => {
      return /* @__PURE__ */ import_react83.default.createElement("li", null, user.email);
    })))));
  };
  var ChatCatConversations = ({ users, conversations }) => {
    return /* @__PURE__ */ import_react83.default.createElement(Row_default, null, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "basic-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/chatCat/mostRecent" }, /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/mostRecent", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/mostRecent", className: "nav-link" }, "Feature") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "Kanban") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "Gantt") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "FS docs") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "DB docs") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "/chatCat/bySubject", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/bySubject", className: "nav-link" }, "Groups") }))), /* @__PURE__ */ import_react83.default.createElement(ButtonGroup_default, { className: "mb-2" }, /* @__PURE__ */ import_react83.default.createElement(
      ToggleButton_default,
      {
        id: "toggle-check",
        type: "checkbox",
        variant: "outline-primary",
        checked: false,
        value: "1"
      },
      "\u2699\uFE0F"
    ))))));
  };
  var Report = () => {
    const [state, setState] = (0, import_react83.useState)({
      tests: [],
      buildDir: "",
      results: {}
    });
    const [tests, setTests] = (0, import_react83.useState)({
      tests: [],
      buildDir: ""
    });
    const [features, setFeatures] = (0, import_react83.useState)(
      []
    );
    const [kanban, setKanban] = (0, import_react83.useState)(
      []
    );
    const importResults = async () => {
      const config = await (await fetch("./testeranto.json")).json();
      const results = await Promise.all(config.tests.map((test) => {
        return new Promise(async (res, rej) => {
          const src = test[0];
          const runtime = test[1];
          const s = [tests.buildDir, runtime].concat(src.split(".").slice(0, -1).join(".")).join("/");
          const exitcode = await (await fetch("/docs/" + s + "/exitcode")).text();
          const log2 = await (await fetch("/docs/" + s + "/log.txt")).text();
          const testresults = await (await fetch("/docs/" + s + "/tests.json")).json();
          const manifest = await (await fetch("/docs/" + s + "/manifest.json")).json();
          res({ src, exitcode, log: log2, testresults, manifest });
        });
      }));
      setState({ tests: config.tests, results, buildDir: config.buildDir });
    };
    const importFeatures = async () => {
      fetch("http://localhost:3000/features.json").then((response) => response.json()).then((json2) => setFeatures(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importFeatures();
    }, []);
    const importKanban = async () => {
      fetch("http://localhost:3000/kanbans.json").then((response) => response.json()).then((json2) => setKanban(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importKanban();
    }, []);
    const [users, setUsers] = (0, import_react83.useState)(
      []
    );
    const importUsers = async () => {
      fetch("http://localhost:3000/users.json").then((response) => response.json()).then((json2) => setUsers(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importUsers();
    }, []);
    const [gantt, setGantt] = (0, import_react83.useState)(
      []
    );
    const importGantt = async () => {
      fetch("http://localhost:3000/gantts.json").then((response) => response.json()).then((json2) => setGantt(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importGantt();
    }, []);
    const importTests = async () => {
      const x = await fetch("./testeranto.json");
      const y = await x.json();
      setTests(y);
    };
    (0, import_react83.useEffect)(() => {
      importResults();
    }, []);
    (0, import_react83.useEffect)(() => {
      importTests();
    }, []);
    const [activeKey, setActiveKey] = (0, import_react83.useState)("home");
    const handleSelect = (selectedKey) => {
      setActiveKey(selectedKey);
    };
    const [adminMode, setAdminMode] = (0, import_react83.useState)(false);
    const [docGalFs, setDocGalFs] = (0, import_react83.useState)(
      []
    );
    const importFs = async () => {
      fetch("http://localhost:3000/docGal/fs.json").then((response) => response.json()).then((json2) => setDocGalFs(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importFs();
    }, []);
    const [chatCatRooms, setChatCatRooms] = (0, import_react83.useState)(
      []
    );
    const importChatCatRooms = async () => {
      fetch("http://localhost:3000/rooms.json").then((response) => response.json()).then((json2) => setChatCatRooms(json2)).catch((error2) => console.error(error2));
    };
    (0, import_react83.useEffect)(() => {
      importChatCatRooms();
    }, []);
    return /* @__PURE__ */ import_react83.default.createElement("div", null, /* @__PURE__ */ import_react83.default.createElement("style", null, `
pre, code, p {
  max-width: 40rem;
  text-wrap: auto;
}
footer {
  background-color: lightgray;
  margin: 0.5rem;
  padding: 0.5rem;
  position: fixed;
  bottom: 0;
  right: 0;
}

#root > div > ul {

  top: 0;
}
          `), /* @__PURE__ */ import_react83.default.createElement(BrowserRouter, null, /* @__PURE__ */ import_react83.default.createElement(Navbar_default, { expand: "md", className: "bg-body-tertiary" }, /* @__PURE__ */ import_react83.default.createElement(Container_default, { fluid: true }, /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Toggle, { "aria-controls": "basic-navbar-nav" }), /* @__PURE__ */ import_react83.default.createElement(Navbar_default.Collapse, { id: "basic-navbar-nav" }, /* @__PURE__ */ import_react83.default.createElement(Nav_default2, { className: "me-auto" }, /* @__PURE__ */ import_react83.default.createElement(Tabs_default2, { defaultActiveKey: "/tests" }, /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "tests", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/tests", className: "nav-link" }, "TestPup") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "taskMan", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/taskMan/features", className: "nav-link" }, "TaskMan") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "docGal", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/docGal/fs", className: "nav-link" }, "DocGal") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "chatCat", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/chatCat/mostRecent", className: "nav-link" }, "ChatCat") }), /* @__PURE__ */ import_react83.default.createElement(Tab_default, { eventKey: "whoThat", title: /* @__PURE__ */ import_react83.default.createElement(NavLink2, { to: "/whoThat/people", className: "nav-link" }, "WhoThat") })))), /* @__PURE__ */ import_react83.default.createElement(ButtonGroup_default, { className: "mb-2" }, /* @__PURE__ */ import_react83.default.createElement(
      Button_default2,
      {
        id: "login",
        value: "1",
        onChange: (e) => setAdminMode(!adminMode)
      },
      "Login"
    )))), /* @__PURE__ */ import_react83.default.createElement(Routes, null, /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/tests", element: /* @__PURE__ */ import_react83.default.createElement(Tests, { adminMode, features, results: state.results, tests }) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/chatCat/mostRecent", element: /* @__PURE__ */ import_react83.default.createElement(
      ChatCat,
      {
        chatCatRooms,
        chatCatHuddles: [],
        users
      },
      /* @__PURE__ */ import_react83.default.createElement(ChatCatPeople, { users })
    ) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/chatCat/bySubject", element: /* @__PURE__ */ import_react83.default.createElement(
      ChatCat,
      {
        chatCatRooms,
        chatCatHuddles: [],
        users
      },
      /* @__PURE__ */ import_react83.default.createElement(ChatCatConversations, { users, conversations: [] })
    ) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/docGal/fs", element: /* @__PURE__ */ import_react83.default.createElement(DocGal, { adminMode, setAdminMode, users }, /* @__PURE__ */ import_react83.default.createElement(DocGalFs, { docGalFs })) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/docGal/db", element: /* @__PURE__ */ import_react83.default.createElement(DocGal, { adminMode, setAdminMode, users }, /* @__PURE__ */ import_react83.default.createElement(DocGalDb, null)) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/taskMan/features", element: /* @__PURE__ */ import_react83.default.createElement(TaskMan, { adminMode, setAdminMode, users }, /* @__PURE__ */ import_react83.default.createElement(Features, { adminMode, features, results: state.results, tests })) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/taskMan/kanban", element: /* @__PURE__ */ import_react83.default.createElement(TaskMan, { adminMode, setAdminMode, users }, /* @__PURE__ */ import_react83.default.createElement(
      Kanban,
      {
        adminMode,
        kanban,
        results: state.results,
        tests,
        features,
        openNewColumnModal: () => {
        }
      }
    )) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/taskMan/gantt", element: /* @__PURE__ */ import_react83.default.createElement(TaskMan, { adminMode, setAdminMode, users }, /* @__PURE__ */ import_react83.default.createElement(
      GanttChart,
      {
        adminMode,
        gantt,
        features,
        results: state.results,
        tests
      }
    )) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/whoThat/people", element: /* @__PURE__ */ import_react83.default.createElement(WhoThat, { users }, /* @__PURE__ */ import_react83.default.createElement(Users, { adminMode, users })) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/whoThat/groups", element: /* @__PURE__ */ import_react83.default.createElement(WhoThat, { users }, /* @__PURE__ */ import_react83.default.createElement(Users, { adminMode, users })) }), /* @__PURE__ */ import_react83.default.createElement(Route, { path: "/whoThat/org", element: /* @__PURE__ */ import_react83.default.createElement(WhoThat, { users }, /* @__PURE__ */ import_react83.default.createElement(OrgChart, { adminMode, users })) }))), /* @__PURE__ */ import_react83.default.createElement("footer", null, "made with \u2764\uFE0F and ", /* @__PURE__ */ import_react83.default.createElement("a", { href: "https://adamwong246.github.io/testeranto/" }, "testeranto ")));
  };
  document.addEventListener("DOMContentLoaded", function() {
    const elem = document.getElementById("root");
    if (elem) {
      import_client.default.createRoot(elem).render(import_react83.default.createElement(Report, {}));
    }
  });
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

mongoose/dist/browser.umd.js:
  (*! For license information please see browser.umd.js.LICENSE.txt *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.22.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.29.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.29.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
