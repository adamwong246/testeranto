import net from "net";
import { ScreencastOptions } from "puppeteer-core";
import { PassThrough } from "stream";
import { CdpPage } from "puppeteer-core/lib/esm/puppeteer";
import { ITLog, ITTestResourceConfiguration } from "../lib";
import { PM } from ".";
export declare class PM_Node extends PM {
    testResourceConfiguration: ITTestResourceConfiguration;
    client: net.Socket;
    constructor(t: ITTestResourceConfiguration);
    start(): Promise<void>;
    stop(): Promise<void>;
    send<I>(command: string, ...argz: any[]): Promise<I>;
    pages(): string[];
    waitForSelector(p: string, s: string): any;
    closePage(p: any): Promise<unknown>;
    goto(page: string, url: string): Promise<unknown>;
    newPage(): Promise<CdpPage>;
    $(selector: string): Promise<unknown>;
    isDisabled(selector: string): Promise<boolean>;
    getAttribute(selector: string, attribute: string): Promise<unknown>;
    getValue(selector: string): Promise<unknown>;
    focusOn(selector: string): Promise<unknown>;
    typeInto(selector: string): Promise<unknown>;
    page(): Promise<unknown>;
    click(selector: string): Promise<unknown>;
    screencast(opts: ScreencastOptions, page: string): Promise<unknown>;
    screencastStop(p: string): Promise<unknown>;
    customScreenShot(opts: ScreencastOptions, page?: string): Promise<unknown>;
    existsSync(destFolder: string): Promise<unknown>;
    mkdirSync(): Promise<unknown>;
    write(uid: number, contents: string): Promise<boolean>;
    writeFileSync(filepath: string, contents: string): Promise<boolean>;
    createWriteStream(filepath: string): Promise<string>;
    end(uid: any): Promise<boolean>;
    customclose(): Promise<unknown>;
    testArtiFactoryfileWriter(tLog: ITLog, callback: (Promise: any) => void): (fPath: any, value: string | Buffer | PassThrough) => void;
    startPuppeteer(options?: any): any;
}
