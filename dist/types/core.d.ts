import { ITestSpecification } from "./Types";
import { ClassBuilder } from "./base";
import { ILogWriter, ITTestResourceConfiguration, ITTestResourceRequest, ITTestShape, ITestArtificer } from "./lib";
export default class Testeranto<TestShape extends ITTestShape, IState, ISelection, IStore, ISubject, IWhenShape, IThenShape, IInput, IGivenShape> extends ClassBuilder<TestShape, IState, ISelection, IStore, ISubject, IWhenShape, IThenShape, IInput, IGivenShape> {
    constructor(input: IInput, testSpecification: ITestSpecification<TestShape, ISubject, IStore, ISelection, IThenShape, IGivenShape>, testImplementation: any, testResourceRequirement: ITTestResourceRequest | undefined, logWriter: ILogWriter, beforeAll: (input: IInput, artificer: ITestArtificer, testResource: ITTestResourceConfiguration) => Promise<ISubject>, beforeEach: (subject: ISubject, initialValues: any, testResource: ITTestResourceConfiguration, artificer: ITestArtificer) => Promise<IStore>, afterEach: (store: IStore, key: string, artificer: ITestArtificer) => Promise<unknown>, afterAll: (store: IStore, artificer: ITestArtificer) => any, butThen: (s: IStore, thenCB: (storeState: ISelection) => IThenShape, testResource: ITTestResourceConfiguration) => any, andWhen: (store: IStore, whenCB: any, testResource: ITTestResourceConfiguration) => Promise<ISelection>);
}
