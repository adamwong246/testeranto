import React from "react";
import renderer from "react-test-renderer";
import { ITTestShape, ITestImplementation, ITestSpecification } from "../../../core";
export declare type ISuper<T> = T extends infer U ? U : object;
export declare type IInput<P, S> = typeof React.Component<P, S>;
export declare type InitialState = unknown;
export declare type IWhenShape = any;
export declare type IThenShape = any;
export declare type ISelection = renderer.ReactTestRenderer;
export declare type IStore = renderer.ReactTestRenderer;
export declare type ISubject = renderer.ReactTestRenderer;
export declare type IImpl<ITestShape extends ITTestShape, IProps> = ITestImplementation<IProps, renderer.ReactTestRenderer, IWhenShape, IThenShape, ITestShape>;
export declare type ISpec<ITestShape extends ITTestShape> = ITestSpecification<ITestShape, ISubject, IStore, ISelection, IThenShape>;
export declare const testInterface: {
    beforeEach: (CComponent: any, props: any) => Promise<renderer.ReactTestRenderer>;
    andWhen: (renderer: renderer.ReactTestRenderer, actioner: any) => Promise<renderer.ReactTestRenderer>;
    butThen: (s: IStore) => Promise<ISelection>;
    afterEach: (store: IStore, ndx: any, artificer: any) => Promise<{}>;
    afterAll: (store: IStore, artificer: any) => void;
};
